<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ceTe.DynamicPDF.35</name>
    </assembly>
    <members>
        <member name="T:ceTe.DynamicPDF.Cryptography.Aes128Security">
             <summary>
             Represents AES 128 bit PDF document security.
             </summary>
             <remarks>
             AES 128 bit PDF security is compatible with PDF version 1.5 and higher and can be read
             with Adobe Acrobat Reader version 7 or higher. Older readers will not be able to
             read document encrypted with this security. Setting document version to lower values will throw an exception at the time of draw.
             For more details on AES 128 bit security take a look at the <a href="Security.html">Security</a> topic.
             </remarks>
             <example>The following example will set the AES security of the document so that the anyone who logs in 
             with the user password will not be able to edit annotations or form fields.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.Cryptography
             
             Module MyModule
             		
                 Sub Main()
             
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a AES 128 bit security object
                     Dim security As Aes128Security = New Aes128Security("owner", "user")
             
                     ' Set these properties to make form fields readonly
                     security.AllowFormFilling = False
                     security.AllowEdit = False
                     security.AllowUpdateAnnotsAndFields = False
             
                     ' Add the security object to the document
                     MyDocument.Security = security
             
                     ' Create and display a label as a reference
                     Dim text As String = "This document has been encrypted with AES 128 bit encryption."
                     MyPage.Elements.Add(New Label(text, 50, 50, 400, 100, Font.Helvetica, 18))
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.Cryptography;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create a AES 128 bit security object
                     Aes128Security security = new Aes128Security( "owner", "user" );
                    
                     // Set these properties to make form fields readonly
                     security.AllowFormFilling = false;
                     security.AllowEdit = false;
                     security.AllowUpdateAnnotsAndFields = false;
             
                     // Add the security object to the document
                     document.Security = security;
             
                     // Create and display a label as a reference
                     string text = "This document has been encrypted with AES 128 bit encryption.";
                     page.Elements.Add( new Label( text, 50, 50, 400, 100, Font.Helvetica, 18 ) );
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.Security">
            <summary>
            Base class from which all security classes are derived.
            </summary>
            <remarks>Security's derived classes are: <see cref="T:ceTe.DynamicPDF.Cryptography.RC4128Security"/> and <see cref="T:ceTe.DynamicPDF.Cryptography.RC440Security"/>.</remarks>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Security.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Security"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Security.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Security"/> class.
            </summary>
            <param name="ownerPassword">The owner password.</param>
            <param name="userPassword">The user password.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Security.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Security"/> class.
            </summary>
            <param name="password">The owner and user password.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Security.Draw(ceTe.DynamicPDF.IO.DocumentWriter,ceTe.DynamicPDF.IO.Encrypter)">
            <summary>
            Draws the encrypter dictionary to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the output.</param>
            <param name="encrypter"><see cref="T:ceTe.DynamicPDF.IO.Encrypter"/> object used to encrypt the document.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Security.GetEncrypter(System.Byte[])">
            <summary>
            Gets an <see cref="T:ceTe.DynamicPDF.IO.Encrypter"/> object to be used for encrypting the document.
            </summary>
            <param name="id">ID of the current PDF document.</param>
            <returns>An <see cref="T:ceTe.DynamicPDF.IO.Encrypter"/>.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Security.BinPassword(System.String)">
            <summary>
            Gets a byte array of the password padded with the PDF padding array.
            </summary>
            <param name="password">The password.</param>
            <returns>A byte array representing the password.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Security.OwnerPassword">
            <summary>
            Gets or sets the owner password.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Security.UserPassword">
            <summary>
            Gets or sets the user password.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Security.AllowPrint">
            <summary>
            Gets or sets if the document can be printed by the user.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Security.AllowEdit">
            <summary>
            Gets or sets if the document can be edited by the user.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Security.AllowCopy">
            <summary>
            Gets or sets if text and images can be copied to the clipboard by the user.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Security.AllowUpdateAnnotsAndFields">
            <summary>
            Gets or sets if annotations and form fields can be added, edited
            and modified by the user.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Security.Filler">
            <summary>
            Gets the byte array specified by Adobe to use as a filler for passwords.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Cryptography.Aes128Security.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Cryptography.Aes128Security"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Cryptography.Aes128Security.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Cryptography.Aes128Security"/> class.
            </summary>
            <param name="ownerPassword">The owner password to open the document.</param>
            <param name="userPassword">The user password to open the document.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Cryptography.Aes128Security.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Cryptography.Aes128Security"/> class.
            </summary>
            <param name="password">The owner password to open the document.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Cryptography.Aes128Security.GetEncrypter(System.Byte[])">
            <summary>
            Gets a 128 bit <see cref="T:ceTe.DynamicPDF.IO.Encrypter"/> object to be used for encrypting the document.
            </summary>
            <param name="id">ID of the current PDF document.</param>
            <returns>An <see cref="T:ceTe.DynamicPDF.IO.Encrypter"/>.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Cryptography.Aes128Security.Draw(ceTe.DynamicPDF.IO.DocumentWriter,ceTe.DynamicPDF.IO.Encrypter)">
            <summary>
            Draws the encrypter dictionary to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the output.</param>
            <param name="encrypter"><see cref="T:ceTe.DynamicPDF.IO.Encrypter"/> object used to encrypt the document.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Cryptography.Aes128Security.AllowFormFilling">
            <summary>
            Gets or sets if form filling should be allowed by the user.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Cryptography.Aes128Security.AllowAccessibility">
            <summary>
            Gets or sets if accessibility programs should be able to read
            the documents text and images for the user.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Cryptography.Aes128Security.AllowDocumentAssembly">
            <summary>
            Gets or sets if the document can be assembled and manipulated by the user.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Cryptography.Aes128Security.AllowHighResolutionPrinting">
            <summary>
            Gets or sets if the document can be printed at a high resolution by the user.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Cryptography.Aes128Security.DocumentComponents">
             <summary>
             Gets or sets the documents components to be encrypted.
             </summary>
             <example>This example shows how to encrypt a document using AES 128 bit encryption excluding metadata.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.Cryptography
             Imports ceTe.DynamicPDF.Xmp
             
             Module MyModule
             		
                 Sub Main()
             
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a AES 128 bit security object
                     Dim security As Aes128Security = New Aes128Security("owner", "user")
             
                     ' Set DocumentComponents property to AllExceptMetadata
                     security.DocumentComponents = EncryptDocumentComponents.AllExceptMetadata
             
                     ' Add the security object to the document
                     MyDocument.Security = security
             
                     ' Create and display a label as a reference
                     Dim text As String = "This document has been encrypted with AES 128 bit encryption."
                     MyPage.Elements.Add(New Label(text, 50, 50, 400, 100, Font.Helvetica, 18))
             
                     ' Create an Xmp Metadata
                     Dim MyXmp As XmpMetadata = New XmpMetadata
             		
                      ' Dublin Core Schema.
                     Dim Mydc As DublinCoreSchema = MyXmp.DublinCore
                     Mydc.Contributors.Add( "Abc" )
                     Mydc.Contributors.Add( "Xyz" )
                     Mydc.Contributors.Add( "Pqrs" )
                     Mydc.Coverage = "To test all the attributes of schema's provided"
                     Mydc.Creators.Add( "MyProduct" )
                     Mydc.Creators.Add( "MyCompany" )
                     Mydc.Date.Add( DateTime.Now )
                     Mydc.Description.AddLang( "en-us", "XMP Schema's test" )
                     Mydc.Identifier = "First XMP pdf"
                     Mydc.Publisher.Add( "mydomain.com" )
                     Mydc.Publisher.Add( "My Company" )
                     Mydc.Relation.Add( "test pdf with xmp" )
                     Mydc.Rights.DefaultText = "US English"
                     Mydc.Rights.AddLang( "en-us", "All rights reserved 2012, MyCompany." )
                     Mydc.Source = "XMP Project"
                     Mydc.Subject.Add( "eXtensible Metadata Platform" )
                     Mydc.Title.AddLang( "en-us", "XMP" )
                     Mydc.Title.AddLang( "it-it", "XMP - Piattaforma Estendible di Metadata" )
                     Mydc.Title.AddLang( "du-du", "De hallo Wereld" )
                     Mydc.Title.AddLang( "fr-fr", "XMP - Une Platforme Extensible pour les Métédonnées" )
                     Mydc.Title.AddLang( "DE-DE", "ÄËßÜ Hallo Welt" )
                     Mydc.Type.Add( "Pdf file containing xmp metadata" )
            			
                     ' Basic Schema.
                     Dim Mybs As BasicSchema  = MyXmp.BasicSchema
                     Mybs.Advisory.Add( "Date" )
                     Mybs.Advisory.Add( "Contributors" )
                     Mybs.Nickname = "xyz"
            			
                     ' Rights Management Schema.
                     Dim Myrm As RightsManagementSchema = New RightsManagementSchema
                     Myrm.Marked2 = CopyrightStatus.PublicDomain
                     Myrm.Owner.Add( "MyCompany" )
                     Myrm.UsageTerms.AddLang( "en-us", "Contact MyCompany" )
                     MyXmp.AddSchema(Myrm)
             		
                     ' Basic Job Ticket Schema.
                     Dim MyJob As BasicJobTicketSchema = New BasicJobTicketSchema
                     MyJob.JobRef.Add( "MyCompany", "Xmp Test", new Uri( "http://www.mydomain.com/" ) )
                     MyJob.JobRef.Add( "MyCompany", "XMP Metadata", new Uri( "http://www.mydomain.com/" ) )
                     MyXmp.AddSchema(MyJob)
             		
                     ' Paged-Text Schema.
                     Dim Mypt As PagedTextSchema = New PagedTextSchema
                     MyXmp.AddSchema(Mypt)         
             		
                     ' Add the Xmp Metadata to the document
                     MyDocument.XmpMetadata = MyXmp
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.Cryptography;
             using ceTe.DynamicPDF.Xmp;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create a AES 128 bit security object
                     Aes128Security security = new Aes128Security( "owner", "user" );
             
                     // Set DocumentComponents property to AllExceptMetadata
                     security.DocumentComponents = EncryptDocumentComponents.AllExceptMetadata;
             
                     // Add the security object to the document
                     document.Security = security;
             
                     // Create and display a label as a reference
                     string text = "This document has been encrypted with AES 128 bit encryption.";
                     page.Elements.Add( new Label( text, 50, 50, 400, 100, Font.Helvetica, 18 ) );
             
                     // Create an Xmp Metadata
                     XmpMetadata xmp = new XmpMetadata();
            
                     // Dublin Core Schema.
                     DublinCoreSchema dc = xmp.DublinCore;
                     dc.Contributors.Add( "Abc" );
                     dc.Contributors.Add( "Xyz" );
                     dc.Contributors.Add( "Pqrs" );
                     dc.Coverage = "To test all the attributes of schema's provided";
                     dc.Creators.Add( "MyProduct" );
                     dc.Creators.Add( "MyCompany" );
                     dc.Date.Add( DateTime.Now );
                     dc.Description.AddLang( "en-us", "XMP Schema's test" );
                     dc.Identifier = "First XMP pdf";
                     dc.Publisher.Add( "mydomain.com" );
                     dc.Publisher.Add( "MyCompany" );
                     dc.Relation.Add( "test pdf with xmp" );
                     dc.Rights.DefaultText = "US English";
                     dc.Rights.AddLang( "en-us", "All rights reserved 2012, MyCompany." );
                     dc.Source = "XMP Project";
                     dc.Subject.Add( "eXtensible Metadata Platform" );
                     dc.Title.AddLang( "en-us", "XMP" );
                     dc.Title.AddLang( "it-it", "XMP - Piattaforma Estendible di Metadata" );
                     dc.Title.AddLang( "du-du", "De hallo Wereld" );
                     dc.Title.AddLang( "fr-fr", "XMP - Une Platforme Extensible pour les Métédonnées" );
                     dc.Title.AddLang( "DE-DE", "ÄËßÜ Hallo Welt" );
                     dc.Type.Add( "Pdf file containing xmp metadata" );
             		
                     // Basic Schema.
                     BasicSchema bs = xmp.BasicSchema;
                     bs.Advisory.Add( "Date" );
                     bs.Advisory.Add( "Contributors" );
                     bs.Nickname = "xyz";
            			
                     // Rights Management Schema.
                     RightsManagementSchema rm = new RightsManagementSchema();
                     rm.Marked2 = CopyrightStatus.PublicDomain;
                     rm.Owner.Add( "MyCompany" );
                     rm.UsageTerms.AddLang( "en-us", "Contact MyCompany" );
                     xmp.AddSchema( rm );
             		
                     // Basic Job Ticket Schema.
                     BasicJobTicketSchema job = new BasicJobTicketSchema();
                     job.JobRef.Add( "MyCompany", "Xmp Test", new Uri( "http://www.mydomain.com/" ) );
                     job.JobRef.Add( "MyCompany", "XMP Metadata", new Uri( "http://www.mydomain.com/" ) );
                     xmp.AddSchema( job );
            
                     // Paged-Text Schema.
                     PagedTextSchema pt = new PagedTextSchema();
                     xmp.AddSchema(pt);           
            
                     // Add the Xmp Metadata to the document
                     document.XmpMetadata = xmp;
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
        </member>
        <member name="T:ceTe.DynamicPDF.Cryptography.Aes256Security">
             <summary>
             Represents AES 256 bit PDF document security.
             </summary>
             <remarks>
             AES 256 bit PDF security is compatible with PDF version 1.5 and higher and can be read
             with Adobe Acrobat Reader version 9 or higher. Older readers will not be able to
             read document encrypted with this security. Setting document version to lower values will throw an exception at the time of draw.
             For more details on AES 256 bit security take a look at the <a href="Security.html">Security</a> topic.
             </remarks>
             <example>The following example will set AES 256 bit security for the document<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.Cryptography
             
             Module MyModule
             		
                 Sub Main()
             
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a AES 256 bit security object
                     Dim security As Aes256Security = New Aes256Security("owner", "user")
             
                     ' Add the security object to the document
                     MyDocument.Security = security
             
                     ' Create and display a label as a reference
                     Dim text As String = "This document has been encrypted with AES 256 bit encryption."
                     MyPage.Elements.Add(New Label(text, 50, 50, 400, 100, Font.Helvetica, 18))
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.Cryptography;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create a AES 256 bit security object
                     Aes256Security security = new Aes256Security( "owner", "user" );
             
                     // Add the security object to the document
                     document.Security = security;
             
                     // Create and display a label as a reference
                     string text = "This document has been encrypted with AES 256 bit encryption.";
                     page.Elements.Add( new Label( text, 50, 50, 400, 100, Font.Helvetica, 18 ) );
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Cryptography.Aes256Security.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Cryptography.Aes256Security"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Cryptography.Aes256Security.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Cryptography.Aes256Security"/> class.
            </summary>
            <param name="ownerPassword">The owner password to open the document.</param>
            <param name="userPassword">The user password to open the document.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Cryptography.Aes256Security.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Cryptography.Aes256Security"/> class.
            </summary>
            <param name="password">The owner password to open the document.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Cryptography.Aes256Security.GetEncrypter(System.Byte[])">
            <summary>
            Gets a 256 bit <see cref="T:ceTe.DynamicPDF.IO.Encrypter"/> object to be used for encrypting the document.
            </summary>
            <param name="id">ID of the current PDF document.</param>
            <returns>An <see cref="T:ceTe.DynamicPDF.IO.Encrypter"/>.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Cryptography.Aes256Security.Draw(ceTe.DynamicPDF.IO.DocumentWriter,ceTe.DynamicPDF.IO.Encrypter)">
            <summary>
            Draws the encrypter dictionary to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the output.</param>
            <param name="encrypter"><see cref="T:ceTe.DynamicPDF.IO.Encrypter"/> object used to encrypt the document.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Cryptography.Aes256Security.AllowFormFilling">
            <summary>
            Gets or sets if form filling should be allowed by the user.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Cryptography.Aes256Security.AllowAccessibility">
            <summary>
            Gets or sets if accessibility programs should be able to read
            the documents text and images for the user.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Cryptography.Aes256Security.AllowDocumentAssembly">
            <summary>
            Gets or sets if the document can be assembled and manipulated by the user.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Cryptography.Aes256Security.AllowHighResolutionPrinting">
            <summary>
            Gets or sets if the document can be printed at a high resolution by the user.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Cryptography.Aes256Security.DocumentComponents">
             <summary>
             Gets or sets the documents components to be encrypted.
             </summary>
             <example>This example shows how to encrypt only file attachments of the document using AES 256 bit encryption.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.Cryptography
             
             Module MyModule
             		
                 Sub Main()
             
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a AES 256 bit security object
                     Dim security As Aes256Security = New Aes256Security("password")
             
                     ' Set DocumentComponents property to OnlyFileAttachments
                     security.DocumentComponents = EncryptDocumentComponents.OnlyFileAttachments
             
                     ' Add the security object to the document
                     MyDocument.Security = security
             
                     ' Create and display a label as a reference
                     Dim text As String = "This document has been encrypted with AES 256 bit encryption."
                     MyPage.Elements.Add(New Label(text, 50, 50, 400, 100, Font.Helvetica, 18))
                     
                     ' Create an instances of EmbeddedFile
                     Dim  embeddedFile As EmbeddedFile  = New EmbeddedFile("C:\Document.pdf")
             
                     ' Add embeddedFile to the EmbeddedFileList of the document class
                     MyDocument.EmbeddedFiles.Add( embeddedFile )
            		
                     ' Set the PageMode to the ShowAttachments
                     MyDocument.InitialPageMode = PageMode.ShowAttachments
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.Cryptography;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create a AES 256 bit security object
                     Aes256Security security = new Aes256Security( "password" );
             
                     // Set DocumentComponents property to OnlyFileAttachments
                     security.DocumentComponents = EncryptDocumentComponents.OnlyFileAttachments;
             
                     // Add the security object to the document
                     document.Security = security;
             
                     // Create and display a label as a reference
                     string text = "This document has been encrypted with AES 256 bit encryption.";
                     page.Elements.Add( new Label( text, 50, 50, 400, 100, Font.Helvetica, 18 ) );
             
                     // Create an instance of EmbeddedFile
                     EmbeddedFile embeddedFile = new EmbeddedFile(@"C:\Document.pdf");
            		
                     // Add the embeddedFile to the EmbeddedFileList of the document class
                     document.EmbeddedFiles.Add( embeddedFile );
            		
                     // Set the PageMode to the ShowAttachments
                     document.InitialPageMode = PageMode.ShowAttachments;
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
        </member>
        <member name="T:ceTe.DynamicPDF.Cryptography.EncryptDocumentComponents">
            <summary>
            Specifies the document components to be encrypted. 
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Cryptography.EncryptDocumentComponents.All">
            <summary>
            Encrypts all document contents.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Cryptography.EncryptDocumentComponents.AllExceptMetadata">
            <summary>
            Encrypts all document contents except metadata.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Cryptography.EncryptDocumentComponents.OnlyFileAttachments">
            <summary>
            Encrypts only file attachments.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Cryptography.RC4128Security">
             <summary>
             Represents RC4 128 bit PDF document security.
             </summary>
             <remarks>
             RC4 128 bit PDF security, with UseCryptFilter property set to false is compatible with PDF version 1.4 or higher and can be read
             with Adobe Acrobat Reader version 5 or higher. By default UseCryptFilter property is false. RC4 128 bit PDF security with crypt filter 
             is compatible with PDF version 1.5 or higher and can be read with Adobe Acrobat Reader version 6 and higher. 
             Older readers will not be able to read document encrypted with this security.
             For more details on RC4 128 bit security take a look at the <a href="Security.html">Security</a> topic.
             </remarks>
             <example>The following example will set the RC4 security of the document so that the anyone who logs in 
             with the user password will not be able to edit annotations or form fields.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.Cryptography
             
             Module MyModule
             		
                 Sub Main()
             
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a RC4 128 bit security object
                     Dim security As RC4128Security = New RC4128Security("owner", "user")
             
                     ' Set these properties to make form fields readonly
                     security.AllowFormFilling = False
                     security.AllowEdit = False
                     security.AllowUpdateAnnotsAndFields = False
             
                     ' Add the security object to the document
                     MyDocument.Security = security
             
                     ' Create and display a label as a reference
                     Dim text As String = "This document has been encrypted with RC4 128 bit encryption."
                     MyPage.Elements.Add(New Label(text, 50, 50, 400, 100, Font.Helvetica, 18))
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.Cryptography;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create a RC4 128 bit security object
                     RC4128Security security = new RC4128Security( "owner", "user" );
             
                     // Set these properties to make form fields readonly
                     security.AllowFormFilling = false;
                     security.AllowEdit = false;
                     security.AllowUpdateAnnotsAndFields = false;
             
                     // Add the security object to the document
                     document.Security = security;
             
                     // Create and display a label as a reference
                     string text = "This document has been encrypted with RC4 128 bit encryption.";
                     page.Elements.Add( new Label( text, 50, 50, 400, 100, Font.Helvetica, 18 ) );
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Cryptography.RC4128Security.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Cryptography.RC4128Security"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Cryptography.RC4128Security.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Cryptography.RC4128Security"/> class.
            </summary>
            <param name="ownerPassword">The owner password to open the document.</param>
            <param name="userPassword">The user password to open the document.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Cryptography.RC4128Security.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Cryptography.RC4128Security"/> class.
            </summary>
            <param name="password">The owner password to open the document.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Cryptography.RC4128Security.GetEncrypter(System.Byte[])">
            <summary>
            Gets a 128 bit <see cref="T:ceTe.DynamicPDF.IO.Encrypter"/> object to be used for encrypting the document.
            </summary>
            <param name="id">ID of the current PDF document.</param>
            <returns>An <see cref="T:ceTe.DynamicPDF.IO.Encrypter"/>.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Cryptography.RC4128Security.Draw(ceTe.DynamicPDF.IO.DocumentWriter,ceTe.DynamicPDF.IO.Encrypter)">
            <summary>
            Draws the encrypter dictionary to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the output.</param>
            <param name="encrypter"><see cref="T:ceTe.DynamicPDF.IO.Encrypter"/> object used to encrypt the document.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Cryptography.RC4128Security.AllowFormFilling">
            <summary>
            Gets or sets if form filling should be allowed by the user.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Cryptography.RC4128Security.AllowAccessibility">
            <summary>
            Gets or sets if accessibility programs should be able to read
            the documents text and images for the user.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Cryptography.RC4128Security.AllowDocumentAssembly">
            <summary>
            Gets or sets if the document can be assembled and manipulated by the user.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Cryptography.RC4128Security.AllowHighResolutionPrinting">
            <summary>
            Gets or sets if the document can be printed at a high resolution by the user.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Cryptography.RC4128Security.EncryptMetadata">
             <summary>
             Gets or sets if the document metadata to be encrypted. Valid only when UseCryptFilter property is true.
             </summary>
             <example>This example shows how to encrypt a document using RC4 128 bit encryption excluding metadata.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.Cryptography
             Imports ceTe.DynamicPDF.Xmp
             
             Module MyModule
             		
                 Sub Main()
             
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a RC4 128 bit security object
                     Dim security As RC4128Security = New RC4128Security("owner", "user")
             
                     'Set UseCryptFilter property to true
                     security.UseCryptFilter = True
             
                     ' Set EncryptMetadata property to false
                     security.EncryptMetadata = False
             
                     ' Add the security object to the document
                     MyDocument.Security = security
             
                     ' Create and display a label as a reference
                     Dim text As String = "This document has been encrypted with RC4 128 bit encryption."
                     MyPage.Elements.Add(New Label(text, 50, 50, 400, 100, Font.Helvetica, 18))
             
                     ' Create an Xmp Metadata
                     Dim MyXmp As XmpMetadata = New XmpMetadata
             		
                     ' Dublin Core Schema.
                     Dim Mydc As DublinCoreSchema = MyXmp.DublinCore
                     Mydc.Contributors.Add( "Abc" )
                     Mydc.Contributors.Add( "Xyz" )
                     Mydc.Contributors.Add( "Pqrs" )
                     Mydc.Coverage = "To test all the attributes of schema's provided"
                     Mydc.Creators.Add( "MyProduct" )
                     Mydc.Creators.Add( "MyCompany" )
                     Mydc.Date.Add( DateTime.Now )
                     Mydc.Description.AddLang( "en-us", "XMP Schema's test" )
                     Mydc.Identifier = "First XMP pdf"
                     Mydc.Publisher.Add( "mydomain.com" )
                     Mydc.Publisher.Add( "My Company" )
                     Mydc.Relation.Add( "test pdf with xmp" )
                     Mydc.Rights.DefaultText = "US English"
                     Mydc.Rights.AddLang( "en-us", "All rights reserved 2012, MyCompany." )
                     Mydc.Source = "XMP Project"
                     Mydc.Subject.Add( "eXtensible Metadata Platform" )
                     Mydc.Title.AddLang( "en-us", "XMP" )
                     Mydc.Title.AddLang( "it-it", "XMP - Piattaforma Estendible di Metadata" )
                     Mydc.Title.AddLang( "du-du", "De hallo Wereld" )
                     Mydc.Title.AddLang( "fr-fr", "XMP - Une Platforme Extensible pour les Métédonnées" )
                     Mydc.Title.AddLang( "DE-DE", "ÄËßÜ Hallo Welt" )
                     Mydc.Type.Add( "Pdf file containing xmp metadata" )
            			
                     ' Basic Schema.
                     Dim Mybs As BasicSchema  = MyXmp.BasicSchema
                     Mybs.Advisory.Add( "Date" )
                     Mybs.Advisory.Add( "Contributors" )
                     Mybs.Nickname = "xyz"
            			
                     ' Rights Management Schema.
                     Dim Myrm As RightsManagementSchema = New RightsManagementSchema
                     Myrm.Marked2 = CopyrightStatus.PublicDomain
                     Myrm.Owner.Add( "MyCompany" )
                     Myrm.UsageTerms.AddLang( "en-us", "Contact MyCompany" )
                     MyXmp.AddSchema(Myrm)
             		
                     ' Basic Job Ticket Schema.
                     Dim MyJob As BasicJobTicketSchema = New BasicJobTicketSchema
                     MyJob.JobRef.Add( "MyCompany", "Xmp Test", new Uri( "http://www.mydomain.com/" ) )
                     MyJob.JobRef.Add( "MyCompany", "XMP Metadata", new Uri( "http://www.mydomain.com/" ) )
                     MyXmp.AddSchema(MyJob)
             		
                     ' Paged-Text Schema.
                     Dim Mypt As PagedTextSchema = New PagedTextSchema
                     MyXmp.AddSchema(Mypt)         
             		
                     ' Add the Xmp Metadata to the document
                     MyDocument.XmpMetadata = MyXmp
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.Cryptography;
             using ceTe.DynamicPDF.Xmp;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create a RC4 128 bit security object
                     RC4128Security security = new RC4128Security( "owner", "user" );
             
                     // Set UseCryptFilter property to true
                     security.UseCryptFilter = true;
             
                     // Set EncryptMetadata property to false
                     security.EncryptMetadata = false;
             
                     // Add the security object to the document
                     document.Security = security;
             
                     // Create and display a label as a reference
                     string text = "This document has been encrypted with RC4 128 bit encryption.";
                     page.Elements.Add( new Label( text, 50, 50, 400, 100, Font.Helvetica, 18 ) );
             
                     // Create an Xmp Metadata
                     XmpMetadata xmp = new XmpMetadata();
            
                     // Dublin Core Schema.
                     DublinCoreSchema dc = xmp.DublinCore;
                     dc.Contributors.Add( "Abc" );
                     dc.Contributors.Add( "Xyz" );
                     dc.Contributors.Add( "Pqrs" );
                     dc.Coverage = "To test all the attributes of schema's provided";
                     dc.Creators.Add( "MyProduct" );
                     dc.Creators.Add( "MyCompany" );
                     dc.Date.Add( DateTime.Now );
                     dc.Description.AddLang( "en-us", "XMP Schema's test" );
                     dc.Identifier = "First XMP pdf";
                     dc.Publisher.Add( "mydomain.com" );
                     dc.Publisher.Add( "MyCompany" );
                     dc.Relation.Add( "test pdf with xmp" );
                     dc.Rights.DefaultText = "US English";
                     dc.Rights.AddLang( "en-us", "All rights reserved 2012, MyCompany." );
                     dc.Source = "XMP Project";
                     dc.Subject.Add( "eXtensible Metadata Platform" );
                     dc.Title.AddLang( "en-us", "XMP" );
                     dc.Title.AddLang( "it-it", "XMP - Piattaforma Estendible di Metadata" );
                     dc.Title.AddLang( "du-du", "De hallo Wereld" );
                     dc.Title.AddLang( "fr-fr", "XMP - Une Platforme Extensible pour les Métédonnées" );
                     dc.Title.AddLang( "DE-DE", "ÄËßÜ Hallo Welt" );
                     dc.Type.Add( "Pdf file containing xmp metadata" );
             		
                     // Basic Schema.
                     BasicSchema bs = xmp.BasicSchema;
                     bs.Advisory.Add( "Date" );
                     bs.Advisory.Add( "Contributors" );
                     bs.Nickname = "xyz";
            			
                     // Rights Management Schema.
                     RightsManagementSchema rm = new RightsManagementSchema();
                     rm.Marked2 = CopyrightStatus.PublicDomain;
                     rm.Owner.Add( "MyCompany" );
                     rm.UsageTerms.AddLang( "en-us", "Contact MyCompany" );
                     xmp.AddSchema( rm );
             		
                     // Basic Job Ticket Schema.
                     BasicJobTicketSchema job = new BasicJobTicketSchema();
                     job.JobRef.Add( "MyCompany", "Xmp Test", new Uri( "http://www.mydomain.com/" ) );
                     job.JobRef.Add( "MyCompany", "XMP Metadata", new Uri( "http://www.mydomain.com/" ) );
                     xmp.AddSchema( job );
            
                     // Paged-Text Schema.
                     PagedTextSchema pt = new PagedTextSchema();
                     xmp.AddSchema(pt);           
            
                     // Add the Xmp Metadata to the document
                     document.XmpMetadata = xmp;
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>        
        </member>
        <member name="P:ceTe.DynamicPDF.Cryptography.RC4128Security.UseCryptFilter">
            <summary>
            Gets or sets if the encryption should be done with crypt filters.
            </summary>
            <remarks>
            The default value is false. If set to true RC4 128 bit encryption is compatible with 
            PDF version 1.5 or higher and can be read with Adobe Acrobat Reader version 6 or higher.
            Without crypt filter RC4 128 bit encryption is compatible with 
            PDF version 1.4 or higher and can be read with Adobe Acrobat Reader version 5 or higher.
            </remarks>
        </member>
        <member name="T:ceTe.DynamicPDF.Cryptography.RC440Security">
             <summary>
             Represents RC4 40 bit PDF document security.
             </summary>
             <remarks>
             RC4 40 bit PDF security is compatible with PDF version 1.1 and higher and can be read
             with Adobe Acrobat version 3 and higher. For more details on RC4 40 bit security take a look at the <a href="Security.html">Security</a> topic.
             </remarks>
             <example>The following example will set the RC4 security of the document so that the anyone who logs in 
             with the user password will not be able to print, edit or copy the document or its contents.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.Cryptography
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a RC4 40 bit security object
                     Dim security As RC440Security = New RC440Security("owner", "user")
             
                     ' Set the permissions on that security object
                     security.AllowPrint = False
                     security.AllowCopy = False
                     security.AllowEdit = False
             
                     ' Add the security object to the document
                     MyDocument.Security = security
             
                     ' Create and display a label as a reference
                     Dim text As String = "This document has been encrypted with RC4 40 bit encryption."
                     MyPage.Elements.Add(New Label(text, 50, 50, 400, 100, Font.Helvetica, 18))
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.Cryptography;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create a RC4 40 bit security object
                     RC440Security security = new RC440Security( "owner", "user" );
             
                     // Set the permissions on that security object
                     security.AllowPrint = false;
                     security.AllowCopy = false;
                     security.AllowEdit = false;
             
                     // Add the security object to the document
                     document.Security = security;
             
                     // Create and display a label as a reference
                     string text = "This document has been encrypted with RC4 40 bit encryption.";
                     page.Elements.Add( new Label( text, 50, 50, 400, 100, Font.Helvetica, 18 ) );
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Cryptography.RC440Security.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Cryptography.RC440Security"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Cryptography.RC440Security.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Cryptography.RC440Security"/> class.
            </summary>
            <param name="ownerPassword">The owner password to open the document.</param>
            <param name="userPassword">The user password to open the document.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Cryptography.RC440Security.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Cryptography.RC440Security"/> class.
            </summary>
            <param name="password">The owner password to open the document.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Cryptography.RC440Security.GetEncrypter(System.Byte[])">
            <summary>
            Gets a 40 bit <see cref="T:ceTe.DynamicPDF.IO.Encrypter"/> object to be used for encrypting the document.
            </summary>
            <param name="id">ID of the current PDF document.</param>
            <returns>An <see cref="T:ceTe.DynamicPDF.IO.Encrypter"/>.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Cryptography.RC440Security.Draw(ceTe.DynamicPDF.IO.DocumentWriter,ceTe.DynamicPDF.IO.Encrypter)">
            <summary>
            Draws the encrypter dictionary to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the output.</param>
            <param name="encrypter"><see cref="T:ceTe.DynamicPDF.IO.Encrypter"/> object used to encrypt the document.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.Forms.ButtonField">
            <summary>
            Base class representing a button field.
            </summary>
            <licensing>
            Reading the values or properties of a field is a DynamicPDF Merger Standard Edition feature (for modifying field values see below). One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            Modiying the values of the fields (i.e. form filling) is a Professional Edition Feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.Forms.FormField">
            <summary>
            Represents a PDF form field.
            </summary>
            <licensing>
            Reading the values or properties of a field is a DynamicPDF Merger Standard Edition feature (for modifying field values see below). One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            Modiying the values of the fields (i.e. form filling) is a Professional Edition Feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.Resource">
            <summary>
            Base class from which all resources are derived.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Resource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Resource"/> class using the next UID.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Resource.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Resource"/> class.
            </summary>
            <param name="uid"></param>
        </member>
        <member name="M:ceTe.DynamicPDF.Resource.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the resource to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the resource's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Resource.NewUid">
            <summary>
            Generates a new unique ID for a resource.
            </summary>
            <returns>The generated unique ID.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Resource.Uid">
            <summary>
            Gets the unique ID of the resource.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Resource.RequiredPdfObjects">
            <summary>
            Gets the number of PDF objects required by the resource.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Resource.ResourceType">
            <summary>
            Gets the type of resource.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.FormField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Forms.FormField"/> class.
            </summary>
            <param name="name">Name of the form field.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.FormField.#ctor(System.String,ceTe.DynamicPDF.Forms.FormFieldFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Forms.FormField"/> class.
            </summary>
            <param name="name">Name of the form field.</param>
            <param name="flags">The flags for the form field.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.FormField.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the form field to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the form field's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.FormField.DrawDictionary(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the form field's dictionary entries to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormField.RequiredPdfObjects">
            <summary>
            Gets the number of PDF objects required by the form field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormField.IsAnnotation">
            <summary>
            Gets or sets a value indicating if the form field is an annotation.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormField.HasValue">
            <summary>
            Gets a value indicating if the form field has a value.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormField.Value">
            <summary>
            Gets or sets the value of the form field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormField.InheritsName">
            <summary>
            Gets a value indicating if the form field inherits its name.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormField.InheritsValue">
            <summary>
            Gets a value indicating if the form field inherits its value.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormField.IsReadOnly">
            <summary>
            Gets or sets a value indicating if the form field is read only.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormField.ChildFields">
            <summary>
            Gets a collection of child form fields.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormField.Flags">
            <summary>
            Gets flag status of a form field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormField.HasChildFields">
            <summary>
            Gets a value indicating if there are child form fields.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormField.FullName">
            <summary>
            Gets the full name of the form field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormField.Name">
            <summary>
            Gets or sets the name of the form field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormField.AlternateName">
            <summary>
            Gets or sets the alternate name of the form field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormField.MappingName">
            <summary>
            Gets or sets the mapping name of the form field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormField.Parent">
            <summary>
            Gets the parent form field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormField.Form">
            <summary>
            Gets the form containing this form field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormField.BorderStyle">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.Forms.FormField.BorderStyle"/>.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormField.BorderColor">
            <summary>
            Gets the border color of a form field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormField.BackgroundColor">
            <summary>
            Gets the background color of a form field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormField.TextColor">
            <summary>
            Gets the color of the text for the field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormField.Rotate">
            <summary>
            Gets the angle of a form field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormField.Font">
            <summary>
            Gets or Sets the font for the field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormField.FontSize">
            <summary>
            Gets or Sets the fontsize for the field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormField.UseSubstituteFont">
            <summary>
            Gets or Sets whether to use SubstituteFont if the Font assigned is not found.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormField.ResourceType">
            <summary>
            Gets the resource type.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.ButtonField.#ctor(System.String,ceTe.DynamicPDF.Forms.FormFieldFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Forms.ButtonField"/> class.
            </summary>
            <param name="name">Name of the button field.</param>
            <param name="flags">The flags for the button field.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.ButtonField.DrawDictionary(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the form field's dictionary entries to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the output.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.Forms.CheckBoxField">
            <summary>
            Base class representing a check box field.
            </summary>
            <licensing>
            Reading the values or properties of a field is a DynamicPDF Merger Standard Edition feature (for modifying field values see below). One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            Modiying the values of the fields (i.e. form filling) is a Professional Edition Feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.CheckBoxField.#ctor(System.String,ceTe.DynamicPDF.Forms.FormFieldFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Forms.CheckBoxField"/> class.
            </summary>
            <param name="name">Name of the check box field.</param>
            <param name="flags">The flags for the check box field.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.CheckBoxField.HasValue">
            <summary>
            Specifies if the form field has a value.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Forms.ChoiceField">
            <summary>
            Base class representing a choice field.
            </summary>
            <licensing>
            Reading the values or properties of a field is a DynamicPDF Merger Standard Edition feature (for modifying field values see below). One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            Modiying the values of the fields (i.e. form filling) is a Professional Edition Feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.ChoiceField.#ctor(System.String,ceTe.DynamicPDF.Forms.FormFieldFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Forms.ChoiceField"/> class.
            </summary>
            <param name="name">Name of the choice field.</param>
            <param name="flags">The flags for the choice field.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.ChoiceField.DrawDictionary(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the choice field's dictionary entries to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.ChoiceField.Default">
            <summary>
            Gets the Default values of the Choice field.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Forms.ComboBoxField">
            <summary>
            Base class representing a combo box field.
            </summary>
            <licensing>
            Reading the values or properties of a field is a DynamicPDF Merger Standard Edition feature (for modifying field values see below). One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            Modiying the values of the fields (i.e. form filling) is a Professional Edition Feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.ComboBoxField.#ctor(System.String,ceTe.DynamicPDF.Forms.FormFieldFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Forms.ComboBoxField"/> class.
            </summary>
            <param name="name">Name of the combo box field.</param>
            <param name="flags">The flags for the combo box field.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.ComboBoxField.HasValue">
            <summary>
            Specifies if the form field has a value.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Forms.Form">
            <summary>
            Base class representing a PDF form.
            </summary>
            <licensing>
            Reading the values or properties of a field is a DynamicPDF Merger Standard Edition feature (for modifying field values see below). One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            Modiying the values of the fields (i.e. form filling) is a Professional Edition Feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.Form.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the form to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the form's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.Form.GetTextFields">
            <summary>
            Returns a collection of text form fields.
            </summary>
            <returns>A <see cref="T:ceTe.DynamicPDF.Forms.TextFieldList"/> object containing the visible form fields.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.Form.RequireLicense(System.Int32)">
            <summary>
            Sets the required license level for the form.
            </summary>
            <param name="requiredLicenseLevel">The license level required.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.Form.DrawDictionary(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the form's dictionary entries to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the output.</param>
        </member>
        <member name="E:ceTe.DynamicPDF.Forms.Form.FormFieldsAdded">
            <summary>
            Occurs when the fields are added to the Document's Form.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.Form.DefaultResources">
            <summary>
            Gets or sets the default appearance for the form.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.Form.DefaultAppearance">
            <summary>
            Gets or sets the default appearance for the form.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.Form.DefaultFont">
            <summary>
            Gets the font default for all the variable text fields.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.Form.DefaultFontSize">
            <summary>
            Gets the default font size for all the variable text fields.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.Form.DefaultColor">
            <summary>
            Gets the defualt color for all the variable text fields.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.Form.Align">
            <summary>
            Gets or Sets the document’s wide alignment for variable text fields.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.Form.Fields">
            <summary>
            Gets a collection of fields for the form.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.Form.IsReadOnly">
            <summary>
            Gets or sets a value indicating if the form is read only.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.Form.CalculationOrder">
            <summary>
            Gets the form's calculation order.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.Form.DefaultAlign">
            <summary>
            Gets or sets the default alignment for the form.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.Form.SignatureFlags">
            <summary>
            Gets or sets the signature flags for the form.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.Form.NeedsAppearances">
            <summary>
            Gets or sets a value indicating if the form needs appearance streams.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.Form.ExcludeXfaDataIfValuesChanged">
            <summary>
            Gets or sets a value indicating to exclude the XFA if the form field value is changed.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.Form.SubstituteFont">
            <summary>
            Gets or Sets the Font to be used as a substitute font for form fields.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Forms.FormCalculationOrder">
            <summary>
            Represents a PDF forms calculation order.
            </summary>
            <licensing>
            Reading the values or properties of a field is a DynamicPDF Merger Standard Edition feature (for modifying field values see below). One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            Modiying the values of the fields (i.e. form filling) is a Professional Edition Feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.FormCalculationOrder.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:ceTe.DynamicPDF.Forms.FormFieldList"/>.
            </summary>
            <returns>An <b>IEnumerator</b> for the entire <see cref="T:ceTe.DynamicPDF.Forms.FormFieldList"/></returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.FormCalculationOrder.Add(ceTe.DynamicPDF.Forms.FormField)">
            <summary>
            Adds a form field to the calculation order.
            </summary>
            <param name="formField"><see cref="T:ceTe.DynamicPDF.Forms.FormField"/> object to add.</param>
            <returns>The index of the added form field.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormCalculationOrder.Count">
            <summary>
            Gets the number of fields in the list.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormCalculationOrder.Item(System.Int32)">
            <summary>
            Gets a text form field by index.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Forms.FormEventArgs">
            <summary>
            Provides data for the <see cref="P:ceTe.DynamicPDF.Forms.FormEventArgs.Form">Form's</see> FieldsAdded event.
            </summary>
            <licensing>
            Reading the values or properties of a field is a DynamicPDF Merger Standard Edition feature (for modifying field values see below). One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            Modiying the values of the fields (i.e. form filling) is a Professional Edition Feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormEventArgs.Form">
            <summary>
            Gets the Form containing the fields added to the <b>Document</b>.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Forms.FormFieldAlign">
            <summary>
            Specifies alignment of form fields.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.FormFieldAlign.Left">
            <summary>
            Left alignment.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.FormFieldAlign.Center">
            <summary>
            Center alignment.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.FormFieldAlign.Right">
            <summary>
            Right alignment.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Forms.FormFieldFlags">
            <summary>
            Specifies form field flags.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.FormFieldFlags.None">
            <summary>
            None specified.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.FormFieldFlags.ReadOnly">
            <summary>
            Read only field.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.FormFieldFlags.Required">
            <summary>
            Required field.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.FormFieldFlags.NoExport">
            <summary>
            No export set.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.FormFieldFlags.Multiline">
            <summary>
            Multiline field.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.FormFieldFlags.Password">
            <summary>
            Password field.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.FormFieldFlags.NoToggleToOff">
            <summary>
            No toggle to off set.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.FormFieldFlags.Radio">
            <summary>
            Radio field.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.FormFieldFlags.Pushbutton">
            <summary>
            Push button field.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.FormFieldFlags.Combo">
            <summary>
            Combo field.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.FormFieldFlags.Edit">
            <summary>
            Edit field.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.FormFieldFlags.Sort">
            <summary>
            Sort set.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.FormFieldFlags.FileSelect">
            <summary>
            File select field.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.FormFieldFlags.MultiSelect">
            <summary>
            Multi select field.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.FormFieldFlags.DoNotSpellCheck">
            <summary>
            Do not spell check set.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.FormFieldFlags.DoNotScroll">
            <summary>
            Do not scroll set.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.FormFieldFlags.Comb">
            <summary>
            Combs set.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.FormFieldFlags.RadiosInUnison">
            <summary>
            Radios in unison set.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.FormFieldFlags.CommitOnSelChange">
            <summary>
            Commit on select change set.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.FormFieldFlags.RichText">
            <summary>
            Rich text field.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Forms.FormFieldList">
            <summary>
            Represents a collection of form fields.
            </summary>
            <licensing>
            Reading the values or properties of a field is a DynamicPDF Merger Standard Edition feature (for modifying field values see below). One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            Modiying the values of the fields (i.e. form filling) is a Professional Edition Feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.FormFieldList.Add(ceTe.DynamicPDF.Forms.FormField)">
            <summary>
            Adds a form field to the collection.
            </summary>
            <param name="formField"><see cref="T:ceTe.DynamicPDF.Forms.FormField"/> object to add.</param>
            <returns>The index of the added form field.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.FormFieldList.Remove(ceTe.DynamicPDF.Forms.FormField)">
            <summary>
            Removes the field from the collection.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.FormFieldList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:ceTe.DynamicPDF.Forms.FormFieldList"/>.
            </summary>
            <returns>An <b>IEnumerator</b> for the entire <see cref="T:ceTe.DynamicPDF.Forms.FormFieldList"/></returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.FormFieldList.DrawKidReferences(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the child references to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the form field list's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.FormFieldList.GetTextFields">
            <summary>
            Returns a collection of text form fields.
            </summary>
            <returns>A <see cref="T:ceTe.DynamicPDF.Forms.TextFieldList"/> object containing the visible form fields.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormFieldList.Count">
            <summary>
            Gets the number of fields in the list.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormFieldList.Owner">
            <summary>
            Get the <see cref="T:ceTe.DynamicPDF.Forms.FormField"/> that owns the form field list.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormFieldList.Item(System.String)">
            <summary>
            Gets a form field by the given name.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormFieldList.Item(System.Int32)">
            <summary>
            Gets a form field by index.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Forms.FormFieldsAddedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ceTe.DynamicPDF.Forms.Form.FormFieldsAdded"/> event of the <see cref="T:ceTe.DynamicPDF.Forms.Form"/>.
            </summary>
            <param name="sender">Reference of type <see cref="T:System.Object"/>.</param>
            <param name="e">Reference of type <see cref="T:ceTe.DynamicPDF.Forms.FormEventArgs"/>.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.Forms.ListBoxField">
            <summary>
            Base class representing a list box field.
            </summary>
            <licensing>
            Reading the values or properties of a field is a DynamicPDF Merger Standard Edition feature (for modifying field values see below). One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            Modiying the values of the fields (i.e. form filling) is a Professional Edition Feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.ListBoxField.#ctor(System.String,ceTe.DynamicPDF.Forms.FormFieldFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Forms.ListBoxField"/> class.
            </summary>
            <param name="name">Name of the list box field.</param>
            <param name="flags">The flags for the list box field.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.ListBoxField.SetValues(System.String[])">
            <summary>
            Sets the values of the list box field.
            </summary>
            <param name="values">Array of string values to set.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.ListBoxField.HasValue">
            <summary>
            Specifies if the form field has a value.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Forms.RadioButtonField">
            <summary>
            Base class representing a radio button field.
            </summary>
            <licensing>
            Reading the values or properties of a field is a DynamicPDF Merger Standard Edition feature (for modifying field values see below). One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            Modiying the values of the fields (i.e. form filling) is a Professional Edition Feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.RadioButtonField.#ctor(System.String,ceTe.DynamicPDF.Forms.FormFieldFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Forms.RadioButtonField"/> class.
            </summary>
            <param name="name">Name of the radio button field.</param>
            <param name="flags">The flags for the radio button field.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.RadioButtonField.HasValue">
            <summary>
            Specifies if the form field has a value.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Forms.SignatureField">
            <summary>
            Base class representing a signature field.
            </summary>
            <licensing>
            Reading the values or properties of a field is a DynamicPDF Merger Standard Edition feature (for modifying field values see below). One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            Modiying the values of the fields (i.e. form filling) is a Professional Edition Feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.SignatureField.#ctor(System.String,ceTe.DynamicPDF.Forms.FormFieldFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Forms.SignatureField"/> class.
            </summary>
            <param name="name">Name of the signature field.</param>
            <param name="flags">The flags for the signature field.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.SignatureField.DrawDictionary(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the signature field's dictionary entries to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the output.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.Forms.SignatureFlags">
            <summary>
            Specifies signature field flags.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.SignatureFlags.None">
            <summary>
            None specified
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.SignatureFlags.SignatureExists">
            <summary>
            Signature field exists
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.SignatureFlags.AppendOnly">
            <summary>
            Append only set
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Forms.TextField">
            <summary>
            Base class representing a text field.
            </summary>
            <licensing>
            Reading the values or properties of a field is a DynamicPDF Merger Standard Edition feature (for modifying field values see below). One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            Modiying the values of the fields (i.e. form filling) is a Professional Edition Feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.TextField.#ctor(System.String,ceTe.DynamicPDF.Forms.FormFieldAlign,ceTe.DynamicPDF.Forms.FormFieldFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Forms.TextField"/> class.
            </summary>
            <param name="name">Name of the text field.</param>
            <param name="align">Alignment of the text field.</param>
            <param name="flags">The flags for the text field.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.TextField.DrawDictionary(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the text field's dictionary entries to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.TextField.HasValue">
            <summary>
            Specifies if the form field has a value.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.TextField.MaximumLength">
            <summary>
            Gets the maximum length of the text in the text field
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.TextField.Align">
            <summary>
            Get the text align.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Forms.TextFieldList">
            <summary>
            Represents a collection of text form fields.
            </summary>
            <licensing>
            Reading the values or properties of a field is a DynamicPDF Merger Standard Edition feature (for modifying field values see below). One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            Modiying the values of the fields (i.e. form filling) is a Professional Edition Feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.TextFieldList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:ceTe.DynamicPDF.Forms.FormFieldList"/>.
            </summary>
            <returns>An <b>IEnumerator</b> for the entire <see cref="T:ceTe.DynamicPDF.Forms.FormFieldList"/></returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.TextFieldList.Count">
            <summary>
            Gets the number of fields in the list.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.TextFieldList.Item(System.Int32)">
            <summary>
            Gets a text form field by index.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Imaging.BitmapImageData">
            <summary>
            Represents the data of an image created using the <see cref="T:System.Drawing.Bitmap"/> class.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.Imaging.ImageData">
            <summary>
            Represents the data of an image.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.ImageData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Imaging.ImageData"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.ImageData.GetImage(System.String)">
            <summary>
            Returns an <see cref="T:ceTe.DynamicPDF.Imaging.ImageData"/> of the correct type for the given physical file path.
            </summary>
            <param name="filePath">Physical file path of the image data.</param>
            <returns></returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.ImageData.GetImage(System.IO.Stream)">
            <summary>
            Returns an <see cref="T:ceTe.DynamicPDF.Imaging.ImageData"/> of the correct type for the given <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> object containing the image data.</param>
            <returns></returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.ImageData.GetImage(System.Byte[])">
            <summary>
            Returns an <see cref="T:ceTe.DynamicPDF.Imaging.ImageData"/> of the correct type for the given byte array.
            </summary>
            <param name="data">Byte array containing the image data.</param>
            <returns></returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.ImageData.GetPointWidth">
            <summary>
            Calculates the width of the image in points.
            </summary>
            <returns>The width of the image in points.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.ImageData.GetPointHeight">
            <summary>
            Calculates the height of the image in points.
            </summary>
            <returns>The height of the image in points.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.ImageData.GetPage(System.Single)">
            <summary>
            Returns a <see cref="T:ceTe.DynamicPDF.Page"/> object containing the image as a background.
            </summary>
            <param name="margins">The margins of the page.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.Page"/> with the image as a background.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.ImageData.GetPage">
            <summary>
            Returns a <see cref="T:ceTe.DynamicPDF.Page"/> object containing the image as a background.
            </summary>
            <returns>A <see cref="T:ceTe.DynamicPDF.Page"/> with the image as a background.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.ImageData.Draw(ceTe.DynamicPDF.IO.OperatorWriter,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws the image data to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> class to receive the image data's output.</param>
            <param name="pdfX">X PDF coordinate for the image when drawn.</param>
            <param name="pdfY">Y PDF Coordinate for the image when drawn.</param>
            <param name="width">Width of the image when drawn.</param>
            <param name="height">Height of the image when drawn.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.ImageData.Width">
            <summary>
            Gets the pixel width of the image data.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.ImageData.Height">
            <summary>
            Gets the pixel height of the image data.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.ImageData.ScaleX">
            <summary>
            Gets the X scale of the image data.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.ImageData.ScaleY">
            <summary>
            Gets the Y scale of the image data.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.ImageData.HorizontalDpi">
            <summary>
            Gets the horizontal dpi (also known as pixels per inch) of the image data.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.ImageData.VerticalDpi">
            <summary>
            Gets the vertical dpi (also known as pixels per inch) of the image data.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.ImageData.Interpolate">
            <summary>
            Gets or set a value indicating is image interpolation should be used by the PDF viewer when viewing the Image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.ImageData.ResourceType">
            <summary>
            Gets the type of resource.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.BitmapImageData.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Imaging.BitmapImageData"/> class.
            </summary>
            <param name="filePath">Physical file path of the image.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.BitmapImageData.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Imaging.BitmapImageData"/> class.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> object containing the image.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.BitmapImageData.#ctor(System.Drawing.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Imaging.BitmapImageData"/> class.
            </summary>
            <param name="bitmap"><see cref="T:System.Drawing.Bitmap"/> object containing the image.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.BitmapImageData.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the bitmap image data to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the bitmap image data's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.BitmapImageData.RequiredPdfObjects">
            <summary>
            Gets the number of PDF objects required by the bitmap image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.BitmapImageData.Width">
            <summary>
            Gets the width of the bitmap image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.BitmapImageData.Height">
            <summary>
            Gets the height of the bitmap image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.BitmapImageData.ScaleX">
            <summary>
            Gets the X scale of the image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.BitmapImageData.ScaleY">
            <summary>
            Gets the Y scale of the image.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Imaging.GifImageData">
            <summary>
            Represents the data of a GIF image.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Community Edition feature.
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.GifImageData.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Imaging.GifImageData"/> class.
            </summary>
            <param name="filePath">Physical file path of the image.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.GifImageData.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Imaging.GifImageData"/> class.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> object containing the image.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.GifImageData.IsValid(System.String)">
            <summary>
            Returns a value indicating if the provides file extension is valid for a GIF image.
            </summary>
            <param name="fileExtension"></param>
            <returns></returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.GifImageData.IsValid(System.Byte[])">
            <summary>
            Returns a value indicating if the provides file header is valid for a GIF image.
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.GifImageData.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the GIF image data to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the GIF image data's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.GifImageData.RequiredPdfObjects">
            <summary>
            Gets the number of PDF objects required by the GIF image data.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.GifImageData.Width">
            <summary>
            Gets the width of the GIF image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.GifImageData.Height">
            <summary>
            Gets the height of the GIF image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.GifImageData.ScaleX">
            <summary>
            Gets the X scale of the image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.GifImageData.ScaleY">
            <summary>
            Gets the Y scale of the image.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Imaging.ImageParsingException">
            <summary>
            The exception that is thrown for an image parsing error.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.GeneratorException">
            <summary>
            The exception that is thrown for a DynamicPDF Generator error.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Community Edition feature.
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.GeneratorException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.GeneratorException"/> class.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the error.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.ImageParsingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Imaging.ImageParsingException"/> class.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the error.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.Imaging.Jpeg2000ImageData">
            <summary>
            Represents the data of a JPEG2000 image.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.Jpeg2000ImageData.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Imaging.Jpeg2000ImageData"/> class.
            </summary>
            <param name="filePath">Physical file path of the image.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.Jpeg2000ImageData.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Imaging.Jpeg2000ImageData"/> class.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> object containing the image.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.Jpeg2000ImageData.IsValid(System.String)">
            <summary>
            Returns a value indicating if the provides file extension is valid for a JPEG2000 image.
            </summary>
            <param name="fileExtension"></param>
            <returns></returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.Jpeg2000ImageData.IsValid(System.Byte[])">
            <summary>
            Returns a value indicating if the provides file header is valid for a JPEG2000 image.
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.Jpeg2000ImageData.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the JPEG2000 image data to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the JPEG2000 image data's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.Jpeg2000ImageData.RequiredPdfObjects">
            <summary>
            Gets the number of PDF objects required by the JPEG2000 image data.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.Jpeg2000ImageData.Width">
            <summary>
            Gets the width of the JPEG2000 image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.Jpeg2000ImageData.Height">
            <summary>
            Gets the height of the JPEG2000 image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.Jpeg2000ImageData.ScaleX">
            <summary>
            Gets the X scale of the image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.Jpeg2000ImageData.ScaleY">
            <summary>
            Gets the Y scale of the image.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Imaging.JpegImageData">
            <summary>
            Represents the data of a JPEG image.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.JpegImageData.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Imaging.JpegImageData"/> class.
            </summary>
            <param name="filePath">Physical file path of the image.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.JpegImageData.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Imaging.JpegImageData"/> class.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> object containing the image.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.JpegImageData.IsValid(System.String)">
            <summary>
            Returns a value indicating if the provides file extension is valid for a JPEG image.
            </summary>
            <param name="fileExtension"></param>
            <returns></returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.JpegImageData.IsValid(System.Byte[])">
            <summary>
            Returns a value indicating if the provides file header is valid for a JPEG image.
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.JpegImageData.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the JPEG image data to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the JPEG image data's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.JpegImageData.RequiredPdfObjects">
            <summary>
            Gets the number of PDF objects required by the JPEG image data.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.JpegImageData.Width">
            <summary>
            Gets the width of the JPEG image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.JpegImageData.Height">
            <summary>
            Gets the height of the JPEG image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.JpegImageData.ScaleX">
            <summary>
            Gets the X scale of the image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.JpegImageData.ScaleY">
            <summary>
            Gets the Y scale of the image.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Imaging.PngImageData">
            <summary>
            Represents the data of a PNG image.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.PngImageData.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Imaging.PngImageData"/> class.
            </summary>
            <param name="filePath">Physical file path of the image.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.PngImageData.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Imaging.PngImageData"/> class.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> object containing the image.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.PngImageData.IsValid(System.String)">
            <summary>
            Returns a value indicating if the provides file extension is valid for a PNG image.
            </summary>
            <param name="fileExtension"></param>
            <returns></returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.PngImageData.IsValid(System.Byte[])">
            <summary>
            Returns a value indicating if the provides file header is valid for a PNG image.
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.PngImageData.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the PNG image data to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the PNG image data's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.PngImageData.RequiredPdfObjects">
            <summary>
            Gets the number of PDF objects required by the PNG image data.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.PngImageData.Width">
            <summary>
            Gets the pixel width of the PNG image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.PngImageData.Height">
            <summary>
            Gets the pixel height of the PNG image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.PngImageData.ScaleX">
            <summary>
            Gets the X scale of the image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.PngImageData.ScaleY">
            <summary>
            Gets the Y scale of the image.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Imaging.TiffFile">
            <summary>
            Represents a TIFF image file.
            </summary>
            <remarks>See the <a href="Tiff Images.html">Tiff Images</a> section for more details on TiffFile.</remarks>
            <example>This example shows how to create a PDF out of a Tiff image.<p/>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.Imaging
            
            Module MyModule
            		
                Sub Main()
                    ' Create a TiffFile object from the TIFF image
                    Dim myTiffFile As TiffFile = New TiffFile("C:\MyMultipageTiff.tif")
            		
                    ' Create a document object from the file
                    Dim MyDocument As Document = myTiffFile.GetDocument()
            		
                    ' Save the PDF document
                    MyDocument.Draw("C:\MyDocument.pdf")
            		
                End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.Imaging;
            
            class MyClass
            {
                static void Main()
                {
                    // Create a TiffFile object from the TIFF image
                    TiffFile tiffFile = new TiffFile( @"C:\MyMultipageTiff.tif" );
            		
                    // Create a document object from the file
                    Document document = tiffFile.GetDocument();
            		
                    // Save the PDF document
                    document.Draw( @"C:\MyDocument.pdf" );
                }
            }
            </code>
            </example>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.TiffFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Imaging.TiffFile"/> class.
            </summary>
            <param name="filePath">The physical file path of the TIFF.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.TiffFile.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Imaging.TiffFile"/> class.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> object containing the TIFF file.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.TiffFile.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Imaging.TiffFile"/> class.
            </summary>
            <param name="data">Byte array containing the TIFF file.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.TiffFile.Close">
            <summary>
            Closes the stream associated with this object.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.TiffFile.GetDocument">
            <summary>
            Creates a <see cref="T:ceTe.DynamicPDF.Document"/> object that contains the images of the tiff file. 
            </summary>
            <returns>A <see cref="T:ceTe.DynamicPDF.Document"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.TiffFile.IsValid(System.String)">
            <summary>
            Returns a value indicating if the provides file extension is valid for a TIFF image.
            </summary>
            <param name="fileExtension"></param>
            <returns></returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.TiffFile.IsValid(System.Byte[])">
            <summary>
            Returns a value indicating if the provides file header is valid for a TIFF image.
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.TiffFile.Images">
            <summary>
            Returns a collection of images in the TIFF file.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.TiffFile.FirstImage">
            <summary>
            Returns the first image in the TIFF file.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Imaging.TiffImageData">
            <summary>
            Represents the data of a TIFF image contained in a TIFF image file.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.TiffImageData.Draw(ceTe.DynamicPDF.IO.OperatorWriter,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws the TIFF image data to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> class to receive the TIFF image data's output.</param>
            <param name="pdfX">X PDF coordinate for the TIFF image when drawn.</param>
            <param name="pdfY">Y PDF Coordinate for the TIFF image when drawn.</param>
            <param name="width">Width of the TIFF image when drawn.</param>
            <param name="height">Height of the TIFF image when drawn.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.TiffImageData.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the TIFF image data to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the TIFF image data's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.TiffImageData.RequiredPdfObjects">
            <summary>
            Gets the number of PDF objects required by the TIFF image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.TiffImageData.Width">
            <summary>
            Gets the width of the image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.TiffImageData.Height">
            <summary>
            Gets the height of the image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.TiffImageData.ScaleX">
            <summary>
            Gets the X scale of the image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.TiffImageData.ScaleY">
            <summary>
            Gets the Y scale of the image.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Imaging.TiffImageDataList">
            <summary>
            Represents a collection of TIFF images.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.TiffImageDataList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:ceTe.DynamicPDF.Imaging.TiffImageDataList"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> for the entire <see cref="T:ceTe.DynamicPDF.Imaging.TiffImageDataList"/></returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.TiffImageDataList.Count">
            <summary>
            Gets the number of images in the collection.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.TiffImageDataList.Item(System.Int32)">
            <summary>
            Gets the TIFF image data at the given index.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.AreaDimensions">
            <summary>
            Base class representing teh dimensions of an area.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.AreaDimensions.GetPdfY(System.Single)">
            <summary>
            Gets the translated Y coordinate.
            </summary>
            <param name="y">Y coordinate to translate.</param>
            <returns>A translated Y coordinate.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.AreaDimensions.GetPdfX(System.Single)">
            <summary>
            Returns the translated X coordinate.
            </summary>
            <param name="x">X coordinate to translate.</param>
            <returns>A translated X coordinate.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.AreaDimensions.Body">
            <summary>
            Represents the dimensions of the areas body.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.AreaDimensions.Edge">
            <summary>
            Represents the dimensions of the areas edge.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.AreaDimensions.Width">
            <summary>
            Gets or sets the width of the page dimensions in points (1/72 inches).
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.AreaDimensions.Height">
            <summary>
            Gets or sets the height of the page dimensions in points (1/72 inches).
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.AreaDimensions.LeftMargin">
            <summary>
            Gets or sets the left margin of the page dimensions in points (1/72 inches).
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.AreaDimensions.TopMargin">
            <summary>
            Gets or sets the top margin of the page dimensions in points (1/72 inches).
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.AreaDimensions.RightMargin">
            <summary>
            Gets or sets the right margin of the page dimensions in points (1/72 inches).
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.AreaDimensions.BottomMargin">
            <summary>
            Gets or sets the bottom margin of the page dimensions in points (1/72 inches).
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.IO.OperatorWriter">
            <summary>
            Class represents the PDF operators.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_Do(ceTe.DynamicPDF.Resource)">
            <summary>
            Abstract method for writing "DO" operator to the page.
            </summary>
            <param name="xObject">Reference of type <see cref="T:ceTe.DynamicPDF.Resource"/>.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.SetDimensionsShift(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Transforms the coordinate space for the current area.
            </summary>
            <param name="x">The x coordinate of the area.</param>
            <param name="y">The y coordinate of the area.</param>
            <param name="width">The width of the area.</param>
            <param name="height">The height of the area.</param>
            <remarks>You must call <see cref="M:ceTe.DynamicPDF.IO.OperatorWriter.ResetDimensions"/> once you are done using the transformed coordinate space.</remarks>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.SetDimensionsSimpleRotate(System.Single,System.Single,System.Single)">
            <summary>
            Transforms the coordinate space for the current area.
            </summary>
            <param name="x">The x coordinate of the area.</param>
            <param name="y">The y coordinate of the area.</param>
            <param name="angle">The angle coordinate of the area.</param>
            <remarks>You must call <see cref="M:ceTe.DynamicPDF.IO.OperatorWriter.ResetDimensions"/> once you are done using the transformed coordinate space.</remarks>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.SetDimensionsSimpleRotate(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Transforms the coordinate space for the current area.
            </summary>
            <param name="x">The x coordinate of the area.</param>
            <param name="y">The y coordinate of the area.</param>
            <param name="xX">The XX value of the angle of the area.</param>
            <param name="xY">The XY value of the angle of the area.</param>
            <param name="yX">The YX value of the angle of the area.</param>
            <param name="yY">The YY value of the angle of the area.</param>
            <remarks>You must call <see cref="M:ceTe.DynamicPDF.IO.OperatorWriter.ResetDimensions"/> once you are done using the transformed coordinate space.</remarks>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.SetDimensionsRotate(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Transforms the coordinate space for the current area.
            </summary>
            <param name="x">The x coordinate of the area.</param>
            <param name="y">The y coordinate of the area.</param>
            <param name="width">The width of the area.</param>
            <param name="height">The height of the area.</param>
            <param name="angle">The angle coordinate of the area.</param>
            <remarks>You must call <see cref="M:ceTe.DynamicPDF.IO.OperatorWriter.ResetDimensions"/> once you are done using the transformed coordinate space.</remarks>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.SetDimensionsRotate(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Transforms the coordinate space for the current area.
            </summary>
            <param name="x">The x coordinate of the area.</param>
            <param name="y">The y coordinate of the area.</param>
            <param name="width">The width of the area.</param>
            <param name="height">The height of the area.</param>
            <param name="xX">The XX value of the angle of the area.</param>
            <param name="xY">The XY value of the angle of the area.</param>
            <param name="yX">The YX value of the angle of the area.</param>
            <param name="yY">The YY value of the angle of the area.</param>
            <remarks>You must call <see cref="M:ceTe.DynamicPDF.IO.OperatorWriter.ResetDimensions"/> once you are done using the transformed coordinate space.</remarks>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.SetDimensionsScale(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Transforms the coordinate space for the current area.
            </summary>
            <param name="x">The x coordinate of the area.</param>
            <param name="y">The y coordinate of the area.</param>
            <param name="width">The width of the area.</param>
            <param name="height">The height of the area.</param>
            <param name="scaleX">The x scale of the area.</param>
            <param name="scaleY">The y scale of the area.</param>
            <remarks>You must call <see cref="M:ceTe.DynamicPDF.IO.OperatorWriter.ResetDimensions"/> once you are done using the transformed coordinate space.</remarks>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.SetDimensionsTransform(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Transforms the coordinate space for the current area.
            </summary>
            <param name="x">The x coordinate of the area.</param>
            <param name="y">The y coordinate of the area.</param>
            <param name="width">The width of the area.</param>
            <param name="height">The height of the area.</param>
            <param name="angle">The angle coordinate of the area.</param>
            <param name="scaleX">The x scale of the area.</param>
            <param name="scaleY">The y scale of the area.</param>
            <remarks>You must call <see cref="M:ceTe.DynamicPDF.IO.OperatorWriter.ResetDimensions"/> once you are done using the transformed coordinate space.</remarks>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.SetDimensionsTransform(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Transforms the coordinate space for the current area.
            </summary>
            <param name="x">The x coordinate of the area.</param>
            <param name="y">The y coordinate of the area.</param>
            <param name="width">The width of the area.</param>
            <param name="height">The height of the area.</param>
            <param name="xX">The XX value of the angle of the area.</param>
            <param name="xY">The XY value of the angle of the area.</param>
            <param name="yX">The YX value of the angle of the area.</param>
            <param name="yY">The YY value of the angle of the area.</param>
            <param name="scaleX">The x scale of the area.</param>
            <param name="scaleY">The y scale of the area.</param>
            <remarks>You must call <see cref="M:ceTe.DynamicPDF.IO.OperatorWriter.ResetDimensions"/> once you are done using the transformed coordinate space.</remarks>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.ResetDimensions">
            <summary>
            Resets the coordinate space for the current area.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_BT">
            <summary>
            Writes a PDF "BT" operator to the page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_ET">
            <summary>
            Writes a PDF "ET" operator to the page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_W">
            <summary>
            Writes a PDF "W" operator to the page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_Wx">
            <summary>
            Writes a PDF "W*" operator to the page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_Tj_(System.Char[],System.Boolean)">
            <summary>
            Writes a PDF "Tj" operator to the page.
            </summary>
            <param name="text">The byte array of WINANSI text to draw.</param>
            <param name="rightToLeft">Specifies if the text is to be drawn right to left.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_Tj_(System.Char[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Writes a PDF "Tj" operator to the page.
            </summary>
            <param name="textArray">The byte array of WINANSI text to draw.</param>
            <param name="start">The start position of text.</param>
            <param name="length">The number of characters to draw.</param>
            <param name="rightToLeft">Specifies if the text is to be drawn right to left.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_TJ_Open">
            <summary>
            Opens array for writting TJ operator.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_TJ_Text(System.Char[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Writes the given text inside the TJ array. Required to open TJ array.
            </summary>
            <param name="text">Char array that need to write.</param>
            <param name="startIndex">Zero based offset denoting starting position of the text.</param>
            <param name="length">The number of characters to draw.</param>
            <param name="rightToLeft">Specifies if the text is to be drawn right to left.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_TJ_SpaceLength(System.Int32)">
            <summary>
            Writes Space length in between two chars.
            </summary>
            <param name="spaceLength">Space length in between two chars.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_TJ_Close">
            <summary>
            Closes the opened TJ array.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_TJ(System.Char[],System.Int32,System.Int32,System.Single,System.Boolean)">
            <summary>
            Writes a PDF "TJ" operator to the page.
            </summary>
            <param name="textArray">The byte array of WINANSI text to draw.</param>
            <param name="start">Start position of text.</param>
            <param name="length">The number of characters to draw.</param>
            <param name="wordSpacing">Word spacing to use when drawn.</param>
            <param name="rightToLeft">Specifies if the text is to be drawn right to left.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_Tc(System.Single)">
            <summary>
            Writes a PDF "Tc" operator to the page.
            </summary>
            <param name="characterSpacing">The character spacing to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_Tw(System.Single)">
            <summary>
            Writes a PDF "Tw" operator to the page.
            </summary>
            <param name="wordSpacing">The word spacing to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_Tz(System.Single)">
            <summary>
            Writes a PDF "Tz" operator to the page.
            </summary>
            <param name="horizontalScaling">The horizontal spacing to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_TL(System.Single)">
            <summary>
            Writes a PDF "TL" operator to the page.
            </summary>
            <param name="leading">The leading to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_Tr(ceTe.DynamicPDF.TextRenderingMode)">
            <summary>
            Writes a PDF "Tr" operator to the page.
            </summary>
            <param name="renderingMode">The text render mode to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_Ts(System.Single)">
            <summary>
            Writes a PDF "Ts" operator to the page.
            </summary>
            <param name="textRise">The text rise to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_Tf(ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Writes a PDF "Tf" operator to the page.
            </summary>
            <param name="font">The <see cref="T:ceTe.DynamicPDF.Font"/> to draw.</param>
            <param name="fontSize">The font size to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_d(ceTe.DynamicPDF.LineStyle)">
            <summary>
            Writes a PDF "d" operator to the page.
            </summary>
            <param name="lineStyle">The line style to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_Tm(System.Single,System.Single,System.Single)">
            <summary>
            Writes a PDF "Tm" operator to the page.
            </summary>
            <param name="angle">The angle to draw.</param>
            <param name="x">The X coordinate to draw.</param>
            <param name="y">The Y coordinate to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_Tm(System.Single,System.Single)">
            <summary>
            Writes a PDF "Tm" operator to the page.
            </summary>
            <param name="x">The X coordinate to draw.</param>
            <param name="y">The Y coordinate to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_Tm(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Writes a PDF "Tm" operator to the page.
            </summary>
            <param name="a">The A value to draw.</param>
            <param name="b">The B value to draw.</param>
            <param name="c">The C value to draw.</param>
            <param name="d">The D value to draw.</param>
            <param name="x">The X coordinate to draw.</param>
            <param name="y">The Y coordinate to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_Tm(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Writes a PDF "Tm" operator to the page.
            </summary>
            <param name="xX">The X X multiple to draw.</param>
            <param name="xY">The X Y multiple to draw.</param>
            <param name="yX">The Y X multiple to draw.</param>
            <param name="yY">The Y Y multiple to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_DQuote(System.Single,System.Single,System.Char[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Writes a PDF Double Quote (""") operator to the page.
            </summary>
            <param name="wordSpacing">Word spacing to draw.</param>
            <param name="characterSpacing">The character spacing to draw.</param>
            <param name="textArray">The byte array of WINANSI text to draw.</param>
            <param name="start">The start position of text.</param>
            <param name="length">The number of characters to draw.</param>
            <param name="rightToLeft">Specifies if the text is to be drawn right to left.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_m_(System.Single,System.Single)">
            <summary>
            Writes a PDF "m" operator to the page.
            </summary>
            <param name="x">The X coordinate to draw.</param>
            <param name="y">The Y coordinate to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_l_(System.Single,System.Single)">
            <summary>
            Writes a PDF "l" operator to the page.
            </summary>
            <param name="x">The X coordinate to draw.</param>
            <param name="y">The y coordinate to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_c(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Writes a PDF "c" operator to the page.
            </summary>
            <param name="x1">The X1 coordinate to draw.</param>
            <param name="y1">The Y1 coordinate to draw.</param>
            <param name="x2">The X2 coordinate to draw.</param>
            <param name="y2">The Y2 coordinate to draw.</param>
            <param name="x3">The X3 coordinate to draw.</param>
            <param name="y3">The Y3 coordinate to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_v(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Writes a PDF "v" operator to the page.
            </summary>
            <param name="x2">The X2 coordinate to draw.</param>
            <param name="y2">The Y2 coordinate to draw.</param>
            <param name="x3">The X3 coordinate to draw.</param>
            <param name="y3">The Y3 coordinate to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_y(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Writes a PDF "y" operator to the page.
            </summary>
            <param name="x1">The X1 coordinate to draw.</param>
            <param name="y1">The Y1 coordinate to draw.</param>
            <param name="x3">The X3 coordinate to draw.</param>
            <param name="y3">The Y3 coordinate to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_re(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Writes a PDF "re" operator to the page.
            </summary>
            <param name="x">The X coordinate to draw.</param>
            <param name="y">The Y coordinate to draw.</param>
            <param name="width">The width to draw.</param>
            <param name="height">The height to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.SetLineStyle(ceTe.DynamicPDF.LineStyle)">
            <summary>
            Sets the line style for the page.
            </summary>
            <param name="lineStyle">The line style to set.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.WritePoint(System.Single,System.Single)">
            <summary>
            Writes a point to the page adjusted to PDF coordinates.
            </summary>
            <param name="pointX">X coordinate of point.</param>
            <param name="pointY">Y coordinate of point.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.WritePointX(System.Single)">
            <summary>
            Writes an X coordinate to the page adjusted to the PDF coordinate.
            </summary>
            <param name="pointX">X coordinate to write.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.WritePointY(System.Single)">
            <summary>
            Writes an X coordinate to the page adjusted to the PDF coordinate.
            </summary>
            <param name="pointY">Y coordinate to write.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_w_(System.Single)">
            <summary>
            Writes a PDF "w" operator to the page.
            </summary>
            <param name="lineWidth">The line width to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_J(ceTe.DynamicPDF.LineCap)">
            <summary>
            Writes a PDF "J" operator to the page.
            </summary>
            <param name="lineCap">The line cap style to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_j_(ceTe.DynamicPDF.LineJoin)">
            <summary>
            Writes a PDF "j" operator to the page.
            </summary>
            <param name="lineJoin">The line join style to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_M(System.Single)">
            <summary>
            Writes a PDF "M" operator to the page.
            </summary>
            <param name="miterLimit">The miter limit to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_Td_(System.Single,System.Single)">
            <summary>
            Writes a PDF "Td" operator to the page.
            </summary>
            <param name="x">The X coordinate to draw.</param>
            <param name="y">The Y coordinate to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_TD(System.Single,System.Single)">
            <summary>
            Writes a PDF "TD" operator to the page.
            </summary>
            <param name="x">The X coordinate to draw.</param>
            <param name="y">The Y coordinate to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_Tx">
            <summary>
            Writes a PDF "Tx" operator to the page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_G(ceTe.DynamicPDF.Grayscale)">
            <summary>
            Writes a PDF "G" operator to the page.
            </summary>
            <param name="color">The <see cref="T:ceTe.DynamicPDF.Grayscale"/> color to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_g_(ceTe.DynamicPDF.Grayscale)">
            <summary>
            Writes a PDF "g" operator to the page.
            </summary>
            <param name="color">The <c ref="Grayscale"/> color to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_RG(ceTe.DynamicPDF.RgbColor)">
            <summary>
            Writes a PDF "RG" operator to the page.
            </summary>
            <param name="color">The <see cref="T:ceTe.DynamicPDF.RgbColor"/> to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_rg_(ceTe.DynamicPDF.RgbColor)">
            <summary>
            Writes a PDF "rg" operator to the page.
            </summary>
            <param name="color">The <see cref="T:ceTe.DynamicPDF.RgbColor"/> to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_K(ceTe.DynamicPDF.CmykColor)">
            <summary>
            Writes a PDF "K" operator to the page.
            </summary>
            <param name="color">The <see cref="T:ceTe.DynamicPDF.CmykColor"/> to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_k_(ceTe.DynamicPDF.CmykColor)">
            <summary>
            Writes a PDF "k" operator to the page.
            </summary>
            <param name="color">The <see cref="T:ceTe.DynamicPDF.CmykColor"/> to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_q_(System.Boolean)">
            <summary>
            Writes a PDF "q" operator to the page.
            </summary>
            <param name="storeState"><b>true</b> if the <see cref="T:ceTe.DynamicPDF.IO.PageWriterState"/> should be stored for later retrieval by a "Q" operator.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_Q(System.Boolean)">
            <summary>
            Writes a PDF "G" operator to the page.
            </summary>
            <param name="restoreState"><b>true</b> if the <see cref="T:ceTe.DynamicPDF.IO.PageWriterState"/> should be restored from a previous "q" operator.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_q_">
            <summary>
            Writes a PDF "q" operator to the page. <see cref="T:ceTe.DynamicPDF.IO.PageWriterState"/> is not stored.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_Q">
            <summary>
            Writes a PDF "Q" operator to the page. <see cref="T:ceTe.DynamicPDF.IO.PageWriterState"/> is not restored.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_cm(System.Single,System.Single)">
            <summary>
            Writes a PDF "cm" operator to the page.
            </summary>
            <param name="xOffset">The X offset to draw.</param>
            <param name="yOffset">The U offset to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_cm(System.Single,System.Single,System.Single)">
            <summary>
            Writes a PDF "cm" operator to the page.
            </summary>
            <param name="angle">The angle to draw.</param>
            <param name="xOffset">The X offset to draw.</param>
            <param name="yOffset">The Y offset to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_cm(System.Single)">
            <summary>
            Writes a PDF "cm" operator to the page.
            </summary>
            <param name="angle">The angle to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_cm(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Writes a PDF "cm" operator to the page.
            </summary>
            <param name="xX">The X X multiple to draw.</param>
            <param name="xY">The X Y multiple to draw.</param>
            <param name="yX">The Y X multiple to draw.</param>
            <param name="yY">The Y Y multiple to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_cm(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Writes a PDF "cm" operator to the page.
            </summary>
            <param name="a">The A value to draw.</param>
            <param name="b">The B value to draw.</param>
            <param name="c">The C value to draw.</param>
            <param name="d">The D value to draw.</param>
            <param name="e">The E value to draw.</param>
            <param name="f">The F value to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_SQuote(System.Char[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Writes a PDF Single Quote ("'") operator to the page.
            </summary>
            <param name="textArray">The byte array of WINANSI text to draw.</param>
            <param name="start">The start position of text.</param>
            <param name="length">The number of characters to draw.</param>
            <param name="rightToLeft">Specifies if the text is to be drawn right to left.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_h">
            <summary>
            Writes a PDF "h" operator to the page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_S">
            <summary>
            Writes a PDF "S" operator to the page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_s_">
            <summary>
            Writes a PDF "s" operator to the page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_fx">
            <summary>
            Writes a PDF "f*" operator to the page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_f">
            <summary>
            Writes a PDF "f" operator to the page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_B">
            <summary>
            Writes a PDF "B" operator to the page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_b_">
            <summary>
            Writes a PDF "b" operator to the page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_Bx">
            <summary>
            Writes a PDF "B*" operator to the page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_bx_">
            <summary>
            Writes a PDF "b*" operator to the page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_n">
            <summary>
            Writes a PDF "n" operator to the page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_d(System.Int32,System.Int32)">
            <summary>
            Writes a PDF "d" operator to the page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.RequireLicense(System.Int32)">
            <summary>
            Specifies that a license is required.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.RequireLicense">
            <summary>
            Specifies that a license is required.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.SetLineWidth(System.Single)">
            <summary>
            Sets the line width for the page.
            </summary>
            <param name="lineWidth">The width of the line.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.SetCharacterSpacing(System.Single)">
            <summary>
            Sets the character spacing for text on the page.
            </summary>
            <param name="characterSpacing">The character spacing of text.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.SetHorizontalScaling(System.Single)">
            <summary>
            Sets the horizontal scaling for text on the page.
            </summary>
            <param name="horizontalScaling">The horizontal scaling of text.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.SetTextRenderingMode(ceTe.DynamicPDF.TextRenderingMode)">
            <summary>
            Sets text rendering mode for text on the page.
            </summary>
            <param name="textRenderingMode">The text rendering mode of text.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.SetTextRise(System.Single)">
            <summary>
            Sets text rise for text on the page.
            </summary>
            <param name="textRise">The text rise of text.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.SetWordSpacing(System.Single)">
            <summary>
            Sets the word spacing for text on the page.
            </summary>
            <param name="wordSpacing">The word spacing of text.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.SetGraphicsMode">
            <summary>
            Sets the page to graphics mode.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.SetTextMode">
            <summary>
            Sets the page to text mode.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.SetTextDefaults">
            <summary>
            Sets the text properties render mode, character space, word space, horizontal scale, and text rise to the defaults.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.SetLeading(System.Single)">
            <summary>
            Sets the leading for text on the page.
            </summary>
            <param name="leading">The leading value to set.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.SetLineJoin(ceTe.DynamicPDF.LineJoin)">
            <summary>
            Sets the line join style for paths on the page.
            </summary>
            <param name="lineJoin">The line join style to set.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.SetLineCap(ceTe.DynamicPDF.LineCap)">
            <summary>
            Sets the line cap style for paths on the page.
            </summary>
            <param name="lineCap">The line cap style to set.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.SetMiterLimit(System.Single)">
            <summary>
            Sets the miterLimit for paths on the page.
            </summary>
            <param name="miterLimit">The miter limit to set.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.SetFont(ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Sets the font and font size for text on the page.
            </summary>
            <param name="font">The <see cref="T:ceTe.DynamicPDF.Font"/> to set.</param>
            <param name="fontSize">The font size to set.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.SetStrokeColor(ceTe.DynamicPDF.Color)">
            <summary>
            Sets the stoke color for the page.
            </summary>
            <param name="color">The <see cref="T:ceTe.DynamicPDF.Color"/> to set.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.SetFillColor(ceTe.DynamicPDF.Color)">
            <summary>
            Sets the fill color for the page.
            </summary>
            <param name="color">The <see cref="T:ceTe.DynamicPDF.Color"/> to set.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write(System.Byte[])">
            <summary>
            Writes a byte array to the page.
            </summary>
            <param name="data">The byte array to output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write(System.Byte[],System.Int32)">
            <summary>
            Writes a portion of a byte array to the page.
            </summary>
            <param name="data">The byte array to output.</param>
            <param name="length">The length to output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a portion of a byte array to the page.
            </summary>
            <param name="data">The byte array to output.</param>
            <param name="start">The start index of source.</param>
            <param name="length">The length to output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.WriteSpace">
            <summary>
            Writes a space to the page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.WritePair(System.Single,System.Single)">
            <summary>
            Writes a pair of numbers to the page.
            </summary>
            <param name="value1">First number to write.</param>
            <param name="value2">Second number to write.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.WriteColorValue(System.Byte)">
            <summary>
            Writes an color value to the page.
            </summary>
            <param name="value">The color value to write.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write(System.Single)">
            <summary>
            Writes a floating point number to the page.
            </summary>
            <param name="value">Number to write.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write(System.Int32)">
            <summary>
            Writes an integer to the page.
            </summary>
            <param name="value">Number to write.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_BI">
            <summary>
            Writes a PDF "BI" operator to the page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_ID">
            <summary>
            Writes a PDF "ID" operator to the page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.Write_EI">
            <summary>
            Writes a PDF "EI" operator to the page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.WriteName(System.Byte[])">
            <summary>
            Writes a byte array to the page.
            </summary>
            <param name="name">Byte array to output to the page.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.WriteName(System.Byte)">
            <summary>
            Writes a byte to the page.
            </summary>
            <param name="name">Byte to output to the page.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.OperatorWriter.WriteNewLine">
            <summary>
            Writes a new line to the page.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.OperatorWriter.RequiredPdfObjects">
            <summary>
            Gets the number of PDF objects required by the Symbol font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.OperatorWriter.Dimensions">
            <summary>
            Gets the dimensions of the current area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.OperatorWriter.Document">
            <summary>
            Gets the <b>Document</b> object the page writer belongs to.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.OperatorWriter.DocumentWriter">
            <summary>
            Gets the <b>DocumentWriter</b> object the page writer is currently drawing to.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.IO.DocumentWriter">
            <summary>
            Represents a writer class for a document.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.#ctor(ceTe.DynamicPDF.Document)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> class.
            </summary>
            <param name="document">The Document to be drawn.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.Draw">
            <summary>
            Initiates the actual drawing of the PDF .
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.GetObjectNumber">
            <summary>
            Gets the indirect object number of the current indirect object.
            </summary>
            <returns>Object number of current indirect object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.GetObjectNumber(System.Int32)">
            <summary>
            Gets the indirect object number of the current indirect object.
            </summary>
            <param name="offset">Offset from the current object.</param>
            <returns>Object number of current indirect object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.GetPageObject(System.Int32)">
            <summary>
            Returns the indirect object number for the given page.
            </summary>
            <param name="pageNumber">Page number in the document.</param>
            <returns>The indirect object number for the given page.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.Write(System.Byte[])">
            <summary>
            Writes a byte array to the document.
            </summary>
            <param name="data">The byte array to output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.Write(System.Byte[],System.Int32)">
            <summary>
            Writes a portion of a byte array to the document.
            </summary>
            <param name="data">The byte array to output.</param>
            <param name="length">The length to output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a portion of a byte array to the document.
            </summary>
            <param name="data">The byte array to output.</param>
            <param name="start">The start index of source.</param>
            <param name="length">The length to output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteArrayOpen">
            <summary>
            Opens a PDF array on the document.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteArrayClose">
            <summary>
            Closes a PDF array on the document
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteBeginObject">
            <summary>
            Begins a PDF object on the document.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteBoolean(System.Boolean)">
            <summary>
            Writes a boolean value to the document.
            </summary>
            <param name="value">The boolean value to output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteDictionaryOpen">
            <summary>
            Opens a dictionary entry on the document.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteDictionaryClose">
            <summary>
            Closes a dictionary entry on the document.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteEndObject">
            <summary>
            Closes a PDF object on the document.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteName(System.String)">
            <summary>
            Writes a string to the document.
            </summary>
            <param name="name">String to output to the document.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteName(System.Byte[])">
            <summary>
            Writes a byte array to the document.
            </summary>
            <param name="name">Byte array to output to the document.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteName(System.Byte[],System.String)">
            <summary>
            Writes a byte array to the document.
            </summary>
            <param name="name">Byte array to output to the document.</param>
            <param name="nameSufix">Suffix to output to the document.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteName(System.Byte)">
            <summary>
            Writes a byte to the document.
            </summary>
            <param name="nameByte">Byte to output to the document.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteName(System.Byte,System.Int32)">
            <summary>
            Writes a byte to the document.
            </summary>
            <param name="nameCharacter">Byte to output to the document.</param>
            <param name="nameNumber">Integer to output to the document.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteName(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a portion of the byte array to the document.
            </summary>
            <param name="name">Byte array to output to the document.</param>
            <param name="start">Start of the byte array to output.</param>
            <param name="length">Length of the byte array to output</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteReference(System.Int32)">
            <summary>
            Writes a resource reference to the document.
            </summary>
            <param name="objectNumber">Resource object number or page number to be written to the document.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteReferenceShallow(System.Int32)">
            <summary>
            Writes a shallow resource reference to the document.
            </summary>
            <param name="objectNumber">Resource object number or page number to be written to the document.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteNumber0">
            <summary>
            Writes the number 0 to the document.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteNumber1">
            <summary>
            Writes the number 1 to the document.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteNumberNeg1">
            <summary>
            Writes a negative 1 to the document.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteNumber(System.Int32)">
            <summary>
            Writes an <b>integer</b> to the document.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteNumber(System.Int16)">
            <summary>
            Writes a <b>short</b> to the document.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteNumber(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a number to the document.
            </summary>
            <param name="data">The byte array containing the number to be written.</param>
            <param name="start">Start of number.</param>
            <param name="length">Length of number.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteNumber(System.Single)">
            <summary>
            Writes a <b>float</b> to the document.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteNumberColor(System.Single)">
            <summary>
            Writes a color value to the document.
            </summary>
            <param name="value">Color value to write.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteNull">
            <summary>
            Writes a null value to the document.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteStream(System.Byte[],System.Int32)">
            <summary>
            Writes a PDF stream object to the document.
            </summary>
            <param name="data">Byte array to output.</param>
            <param name="length">Length of output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteStream(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a PDF stream object to the document.
            </summary>
            <param name="data">Byte array to output.</param>
            <param name="start">Start of output.</param>
            <param name="length">Length of output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteStreamWithCompression(System.Byte[],System.Int32)">
            <summary>
            Writes a PDF stream object to the document.
            </summary>
            <param name="data">Byte array to output.</param>
            <param name="length">Length of output.</param>
            <returns>Size of stream after compression.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteText(System.String)">
            <summary>
            Writes a PDF text object to the document.
            </summary>
            <param name="text">The text of the text object to write.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteText(System.Byte[])">
            <summary>
            Writes a PDF text object to the document.
            </summary>
            <param name="text">The text of the text object to write.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteTextRawWithoutEncryption(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a raw PDF text object to the document without any encryption.
            </summary>
            <param name="text">The text of the text object to write.</param>
            <param name="startIndex">The start index of the supplied byte array.</param>
            <param name="count">The number of total bytes to write.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteTextWithoutEncryption(System.Byte[])">
            <summary>
            Writes a PDF text object to the document without any encryption.
            </summary>
            <param name="text">The text of the text object to write.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.ClearFontSubsetter">
            <summary>
            Clears the current font subsetter.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.SetFontSubsetter(ceTe.DynamicPDF.Text.IFontSubsettable)">
            <summary>
            Sets the current font subsetter.
            </summary>
            <param name="subsettableFont">Subsettable font to use for setting the current font subsetter.</param>
            <returns>The current font subsetter.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteReference(ceTe.DynamicPDF.Resource)">
            <summary>
            Writes a reference to the supplied resource to the document.
            </summary>
            <param name="resource">Resource to be written to the document.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteReferenceUnique(ceTe.DynamicPDF.Resource)">
            <summary>
            Writes a unique reference to the supplied resource to the document.
            </summary>
            <param name="resource">Resource to be written to the document.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteReferenceShallow(ceTe.DynamicPDF.Resource)">
            <summary>
            Writes a shallow reference to the supplied resource to the document.
            </summary>
            <param name="resource">Resource to be written to the document.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteStream(ceTe.DynamicPDF.IO.Buffer,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes a buffer to the document.
            </summary>
            <param name="buffer">Buffer to be written to the document.</param>
            <param name="startIndex">The Index to start writing.</param>
            <param name="startPosition">The Position to start writing.</param>
            <param name="stopIndex">The Index to stop writing.</param>
            <param name="stopPosition">The Position to stop writing.</param>
            <param name="length">The length of the buffer to write.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.DocumentWriter.Resources">
            <summary>
            Gets a resource list for the document.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.DocumentWriter.CurrentSection">
            <summary>
            Gets the current Section.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.DocumentWriter.Document">
            <summary>
            Gets the current document.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.DocumentWriter.FontSubsetter">
            <summary>
            Gets the current font subsetter.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.IO.DocumentResourceList">
            <summary>
            Represents a collection of resources for a document.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentResourceList.Add(ceTe.DynamicPDF.Resource)">
            <summary>
            Adds a resource to the document.
            </summary>
            <param name="resource">The resource to add.</param>
            <returns>The PDF object number of the added resource.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentResourceList.AddUnique(ceTe.DynamicPDF.Resource)">
            <summary>
            Adds a unique resource to the document.
            </summary>
            <param name="resource">The resource to add.</param>
            <returns>The PDF object number of the added resource.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.DocumentResourceList.CurrentObjectNumber">
            <summary>
            Gets the current object number of the next resource.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.IO.Encrypter">
            <summary>
            Represents an Encrypter class used for encryption of the document.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.Encrypter.#ctor(System.Byte[],System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.IO.Encrypter"/> class.
            </summary>
            <param name="owner">Encrypted owner password.</param>
            <param name="user">Encrypted user password.</param>
            <param name="encryptionKey">Encryption key.</param>
            <param name="privileges">PDF value of privileges.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.Encrypter.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the encrypter dictionary to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.Encrypter.Encrypt(System.Byte)">
            <summary>
            Encrypts the byte.
            </summary>
            <param name="data">Byte to encrypt.</param>
            <returns>An encrypted byte.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.Encrypter.Encrypt(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encrypts the data found in the data byte array to the output stream.
            </summary>
            <param name="stream">The output stream to recieve the encrypted data.</param>
            <param name="data">Data to encrypt.</param>
            <param name="start">Start of the data to encrypt.</param>
            <param name="length">Length of the data to encrypt.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.Encrypter.Encrypt(System.Byte[])">
            <summary>
            Encrypts the data found in the data byte array and returns the output.
            </summary>        
            <param name="data">Data to encrypt.</param>
            <returns>An encrypted byte array.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.Encrypter.Reset(System.Int32)">
            <summary>
            Resets the encryptor.
            </summary>
            <param name="objectNumber"></param>
        </member>
        <member name="T:ceTe.DynamicPDF.IO.Buffer">
            <summary>
            Represents a buffer for holding data
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.Buffer.Write(System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes the buffer to the page.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to write from.</param>
            <param name="startIndex">The Index to start writing.</param>
            <param name="startPosition">The Position to start writing.</param>
            <param name="stopIndex">The Index to stop writing.</param>
            <param name="stopPosition">The Position to stop writing.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.Buffer.Write(System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32,ceTe.DynamicPDF.IO.Encrypter)">
            <summary>
            Writes the buffer to the page.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to write from.</param>
            <param name="startIndex">The Index to start writing.</param>
            <param name="startPosition">The Position to start writing.</param>
            <param name="stopIndex">The Index to stop writing.</param>
            <param name="stopPosition">The Position to stop writing.</param>
            <param name="encrypter">The encrypter to use for writing.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.EvaluationWatermark.ResourceType">
            <summary>
            Gets the type of resource.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.IO.FontSubsetter">
            <summary>
            Represents an font subsetter.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.FontSubsetter.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.IO.FontSubsetter"/> class.
            </summary>
            <param name="glyphCount"></param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.FontSubsetter.GlyphUsed(System.Int32)">
            <summary>
            Sets the glyph as used.
            </summary>
            <param name="glyphIndex">Glyph to mark as used.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.FontSubsetter.GlyphsUsed">
            <summary>
            Gets an array of all glyphs.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.IO.PageAnnotationList">
            <summary>
            Represents a collection of annotations for a page.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageAnnotationList.Add(ceTe.DynamicPDF.Resource)">
            <summary>
            Adds an annotation to the collection.
            </summary>
            <param name="annotation">Annotation to add.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.IO.PageColorSpaceList">
            <summary>
            Represents a collection of color spaces for a page.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageColorSpaceList.SetStartingNameNumber(System.Int32)">
            <summary>
            Sets the starting name number for the color space collection.
            </summary>
            <param name="startingNameNumber">The starting name number.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageColorSpaceList.Add(ceTe.DynamicPDF.Resource,ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Writes the PDF name for the Resource to the page and adds it to the pages 
            resource list if it has not previously been added.
            </summary>
            <param name="resource">Resource to add to the page.</param>
            <param name="writer">The writer for the current page.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageColorSpaceList.DrawEntries(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the color space's dictionary entries to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to receive the output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.PageColorSpaceList.Count">
            <summary>
            Gets the number of color spaces in the collection.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.IO.PageExtGStateList">
            <summary>
            Represents a collection of external graphics states for a page.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageExtGStateList.SetStartingNameNumber(System.Int32)">
            <summary>
            Sets the starting name number for the external graphics states collection.
            </summary>
            <param name="startingNameNumber">The starting name number.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageExtGStateList.Add(ceTe.DynamicPDF.Resource,ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Writes the PDF name for the Resource to the page and adds it to the pages 
            resource list if it has not previously been added.
            </summary>
            <param name="resource">Resource to add to the page.</param>
            <param name="writer">The writer for the current page.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageExtGStateList.DrawEntries(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the external graphics state's dictionary entries to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to receive the output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.PageExtGStateList.Count">
            <summary>
            Gets the number of external graphics states in the collection.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.IO.PageFontList">
            <summary>
            Represents a collection of fonts for a page.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageFontList.SetStartingNameNumber(System.Int32)">
            <summary>
            Sets the starting name number for the fonts collection.
            </summary>
            <param name="startingNameNumber">The starting name number.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageFontList.Add(ceTe.DynamicPDF.Resource,ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Writes the PDF name for the Font to the page and adds it to the pages 
            resource list if it has not previously been added.
            </summary>
            <param name="font">Font to add to the page.</param>
            <param name="writer">The writer for the current page.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageFontList.DrawEntries(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the font's dictionary entries to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to receive the output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.PageFontList.Count">
            <summary>
            Gets the number of fonts in the collection.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.IO.PagePatternList">
            <summary>
            Represents a collection of patterns for a page.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PagePatternList.SetStartingNameNumber(System.Int32)">
            <summary>
            Sets the starting name number for the patterns collection.
            </summary>
            <param name="startingNameNumber">The starting name number.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PagePatternList.Add(ceTe.DynamicPDF.Resource,ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Writes the PDF name for the Resource to the page and adds it to the pages 
            resource list if it has not previously been added.
            </summary>
            <param name="resource">Resource to add to the page.</param>
            <param name="writer">The writer for the current page.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PagePatternList.DrawEntries(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the pattern's dictionary entries to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to receive the output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.PagePatternList.Count">
            <summary>
            Gets the number of patterns in the collection.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.IO.PagePropertiesList">
            <summary>
            Represents a collection of properties for a page.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PagePropertiesList.SetStartingNameNumber(System.Int32)">
            <summary>
            Sets the starting name number for the properties collection.
            </summary>
            <param name="startingNameNumber">The starting name number.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PagePropertiesList.Add(ceTe.DynamicPDF.Resource,ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Writes the PDF name for the Resource to the page and adds it to the pages 
            resource list if it has not previously been added.
            </summary>
            <param name="resource">Resource to add to the page.</param>
            <param name="writer">The writer for the current page.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PagePropertiesList.DrawEntries(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the properties' dictionary entries to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to receive the output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.PagePropertiesList.Count">
            <summary>
            Gets the number of properties in the collection.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.IO.PageResources">
            <summary>
            Represents a pages resources.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageResources.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the page resources to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to receive the output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageResources.SetStartingNameNumber(System.Int32)">
            <summary>
            Sets the starting name number for the page resources.
            </summary>
            <param name="startingNameNumber"></param>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.PageResources.Fonts">
            <summary>
            Gets a collection of fonts used on the page.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.PageResources.XObjects">
            <summary>
            Gets a collection of XObjects used on the page.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.PageResources.Shadings">
            <summary>
            Gets a collection of Shadings used on the page.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.PageResources.ColorSpaces">
            <summary>
            Gets a collection of ColorSpaces used on the page.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.PageResources.Patterns">
            <summary>
            Gets a collection of Patterns used on the page.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.PageResources.Properties">
            <summary>
            Gets a collection of Properties used on the page.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.PageResources.ExtGStates">
            <summary>
            Gets a collection of ExtGStates used on the page.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.IO.PageShadingList">
            <summary>
            Represents a collection of shadings for a page.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageShadingList.SetStartingNameNumber(System.Int32)">
            <summary>
            Sets the starting name number for the shadings collection.
            </summary>
            <param name="startingNameNumber">The starting name number.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageShadingList.Add(ceTe.DynamicPDF.Resource,ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Writes the PDF name for the Resource to the page and adds it to the pages 
            resource list if it has not previously been added.
            </summary>
            <param name="resource">Resource to add to the page.</param>
            <param name="writer">The writer for the current page.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageShadingList.DrawEntries(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the shading's dictionary entries to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to receive the output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.PageShadingList.Count">
            <summary>
            Gets the number of shadings in the collection.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.IO.PageWriter">
            <summary>
            Represents a writer class for a page.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.SetStrokeColorSpace(ceTe.DynamicPDF.ColorSpace)">
            <summary>
            Sets the color space for the page.
            </summary>
            <param name="colorSpace">The <see cref="T:ceTe.DynamicPDF.ColorSpace"/> to set.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.SetFillColorSpace(ceTe.DynamicPDF.ColorSpace)">
            <summary>
            Sets the color space for the page.
            </summary>
            <param name="colorSpace">The <see cref="T:ceTe.DynamicPDF.ColorSpace"/> to set.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_Do(ceTe.DynamicPDF.Resource)">
            <summary>
            Writes a PDF "Do" operator to the page.
            </summary>
            <param name="xObject">The XObject to reference.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_cs_(ceTe.DynamicPDF.ColorSpace)">
            <summary>
            Writes a PDF "cs" operator to the page.
            </summary>
            <param name="colorSpace">The <see cref="T:ceTe.DynamicPDF.ColorSpace"/> to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_CS(ceTe.DynamicPDF.ColorSpace)">
            <summary>
            Writes a PDF "CS" operator to the page.
            </summary>
            <param name="colorSpace">The <see cref="T:ceTe.DynamicPDF.ColorSpace"/> to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_scn_(ceTe.DynamicPDF.SpotColor)">
            <summary>
            Writes a PDF "scn" operator to the page.
            </summary>
            <param name="tint">The tint to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_scn_(ceTe.DynamicPDF.Gradient)">
            <summary>
            Writes a PDF "scn" operator to the page.
            </summary>
            <param name="pattern">The <see cref="T:ceTe.DynamicPDF.Gradient"/> to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_SCN(ceTe.DynamicPDF.SpotColor)">
            <summary>
            Writes a PDF "SCN" operator to the page.
            </summary>
            <param name="tint">The tint to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_SCN(ceTe.DynamicPDF.Gradient)">
            <summary>
            Writes a PDF "SCN" operator to the page.
            </summary>
            <param name="pattern">The <see cref="T:ceTe.DynamicPDF.Gradient"/> to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_Tf(ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Writes a PDF "Tf" operator to the page.
            </summary>
            <param name="font">The <see cref="T:ceTe.DynamicPDF.Font"/> to draw.</param>
            <param name="fontSize">The font size to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_gs(ceTe.DynamicPDF.Resource)">
            <summary>
            Writes a PDF "gs" operator to the page.
            </summary>
            <param name="extGState">The external graphics state <see cref="T:ceTe.DynamicPDF.Resource"/> to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_m_(System.Single,System.Single)">
            <summary>
            Writes a PDF "m" operator to the page.
            </summary>
            <param name="x">The X coordinate to draw.</param>
            <param name="y">The Y coordinate to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_l_(System.Single,System.Single)">
            <summary>
            Writes a PDF "l" operator to the page.
            </summary>
            <param name="x">The X coordinate to draw.</param>
            <param name="y">The y coordinate to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_c(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Writes a PDF "c" operator to the page.
            </summary>
            <param name="x1">The X1 coordinate to draw.</param>
            <param name="y1">The Y1 coordinate to draw.</param>
            <param name="x2">The X2 coordinate to draw.</param>
            <param name="y2">The Y2 coordinate to draw.</param>
            <param name="x3">The X3 coordinate to draw.</param>
            <param name="y3">The Y3 coordinate to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_v(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Writes a PDF "v" operator to the page.
            </summary>
            <param name="x2">The X2 coordinate to draw.</param>
            <param name="y2">The Y2 coordinate to draw.</param>
            <param name="x3">The X3 coordinate to draw.</param>
            <param name="y3">The Y3 coordinate to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_y(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Writes a PDF "y" operator to the page.
            </summary>
            <param name="x1">The X1 coordinate to draw.</param>
            <param name="y1">The Y1 coordinate to draw.</param>
            <param name="x3">The X3 coordinate to draw.</param>
            <param name="y3">The Y3 coordinate to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_re(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Writes a PDF "re" operator to the page.
            </summary>
            <param name="x">The X coordinate to draw.</param>
            <param name="y">The Y coordinate to draw.</param>
            <param name="width">The width to draw.</param>
            <param name="height">The height to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_s_">
            <summary>
            Writes a PDF "s" operator to the page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_S">
            <summary>
            Writes a PDF "S" operator to the page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_fx">
            <summary>
            Writes a PDF "f*" operator to the page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_f">
            <summary>
            Writes a PDF "f" operator to the page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_BI">
            <summary>
            Writes a PDF "BI" operator to the page.
            </summary>
            <summary>
            Writes a PDF "BI" operator to the page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_EI">
            <summary>
            Writes a PDF "EI" operator to the page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_B">
            <summary>
            Writes a PDF "B" operator to the page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_b_">
            <summary>
            Writes a PDF "b" operator to the page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_Bx">
            <summary>
            Writes a PDF "B*" operator to the page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_bx_">
            <summary>
            Writes a PDF "b*" operator to the page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_G(ceTe.DynamicPDF.Grayscale)">
            <summary>
            Writes a PDF "G" operator to the page.
            </summary>
            <param name="color">The <see cref="T:ceTe.DynamicPDF.Grayscale"/> color to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_g_(ceTe.DynamicPDF.Grayscale)">
            <summary>
            Writes a PDF "g" operator to the page.
            </summary>
            <param name="color">The <c ref="Grayscale"/> color to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_RG(ceTe.DynamicPDF.RgbColor)">
            <summary>
            Writes a PDF "RG" operator to the page.
            </summary>
            <param name="color">The <see cref="T:ceTe.DynamicPDF.RgbColor"/> to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_rg_(ceTe.DynamicPDF.RgbColor)">
            <summary>
            Writes a PDF "rg" operator to the page.
            </summary>
            <param name="color">The <see cref="T:ceTe.DynamicPDF.RgbColor"/> to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_K(ceTe.DynamicPDF.CmykColor)">
            <summary>
            Writes a PDF "K" operator to the page.
            </summary>
            <param name="color">The <see cref="T:ceTe.DynamicPDF.CmykColor"/> to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_k_(ceTe.DynamicPDF.CmykColor)">
            <summary>
            Writes a PDF "k" operator to the page.
            </summary>
            <param name="color">The <see cref="T:ceTe.DynamicPDF.CmykColor"/> to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the page writer to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to receive the output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.PageWriter.ResourceType">
            <summary>
            Gets the type of resource.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.PageWriter.SectionPageNumber">
            <summary>
            Gets the section page number being drawn the document.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.PageWriter.PageNumber">
            <summary>
            Gets the page number being drawn to the document.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.PageWriter.Page">
            <summary>
            Gets the <b>Page</b> object the page writer belongs to.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.PageWriter.Resources">
            <summary>
            Gets the resources used on the page.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.PageWriter.Annotations">
            <summary>
            Gets a list of annotations used on the page.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.IO.PageWriterState">
            <summary>
            Represents the page writers state.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="F:ceTe.DynamicPDF.IO.PageWriterState.CharacterSpacing">
            <summary>
            Represents character spacing.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.IO.PageWriterState.WordSpacing">
            <summary>
            Represents word spacing.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.IO.PageWriterState.HorizontalScaling">
            <summary>
            represents horizontal spacing.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.IO.PageWriterState.Leading">
            <summary>
            Represents line leading.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.IO.PageWriterState.Font">
            <summary>
            represents the Font.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.IO.PageWriterState.FontSize">
            <summary>
            Represents font size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.IO.PageWriterState.TextRenderingMode">
            <summary>
            Represents text render mode.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.IO.PageWriterState.TextRise">
            <summary>
            represents text rise.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.IO.PageWriterState.LineWidth">
            <summary>
            Represents line width.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.IO.PageWriterState.LineCap">
            <summary>
            Represents line cap style.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.IO.PageWriterState.LineJoin">
            <summary>
            Represents line join style.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.IO.PageWriterState.MiterLimit">
            <summary>
            Represents miter limit.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.IO.PageWriterState.LineStyle">
            <summary>
            Represents line style.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.IO.PageWriterState.StrokeColor">
            <summary>
            Represents stroke color.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.IO.PageWriterState.FillColor">
            <summary>
            Represents fill color.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.IO.PageWriterState.StrokeColorSpace">
            <summary>
            Represents stroke color space.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.IO.PageWriterState.FillColorSpace">
            <summary>
            Represents fill color space.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriterState.#ctor(ceTe.DynamicPDF.IO.PageWriterState)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.IO.PageWriterState"/> class.
            </summary>
            <param name="state">Page writer state to clone.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriterState.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.IO.PageWriterState"/> class.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.IO.PageXObjectList">
            <summary>
            Represents a collection of XObjects for a page.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageXObjectList.SetStartingNameNumber(System.Int32)">
            <summary>
            Sets the starting name number for the XObjects collection.
            </summary>
            <param name="startingNameNumber">The starting name number.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageXObjectList.Add(ceTe.DynamicPDF.Resource,ceTe.DynamicPDF.IO.OperatorWriter)">
            <summary>
            Writes the PDF name for the Resource to the page and adds it to the pages 
            resource list if it has not previously been added.
            </summary>
            <param name="resource">Resource to add to the page.</param>
            <param name="writer">The writer for the current page.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageXObjectList.DrawEntries(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the XObject's dictionary entries to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to receive the output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.PageXObjectList.Count">
            <summary>
            Gets the number of XObjects in the collection.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Merger.Forms.FontNotFoundException">
            <summary>
            The exception that is thrown for a FontNotFound Error.
            </summary>
            <licensing>
            This class is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.Merger.MergerException">
            <summary>
            The exception that is thrown for a DynamicPDF Merger error.
            </summary>
            <licensing>
            This class is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.MergerException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Merger.MergerException"/> class.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the error.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.Forms.FontNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Merger.Forms.FontNotFoundException"/> class.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the error.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.Forms.MergeButtonField.BackgroundColor">
            <summary>
            Gets the background color of a form field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.Forms.MergeComboBoxField.Value">
            <summary>
            Gets or sets the value of the merged combo box field.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Merger.Forms.MergeFormException">
            <summary>
            The exception that is thrown for a DynamicPDF Merger form filling error.
            </summary>
            <licensing>
            Reading the values or properties of a field is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.Forms.MergeFormException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Merger.Forms.MergeFormException"/> class.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the error.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.Font">
            <summary>
            Base class from which all fonts are derived.
            </summary>
            <remarks>See the <a href="Fonts And Text.html">Fonts And Text</a> topic for more on fonts.</remarks>
            <licensing>
            This class is a DynamicPDF Generator Community Edition feature.
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Font.#ctor(ceTe.DynamicPDF.Text.Encoder,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Font"/> class.
            </summary>
            <param name="encoder">Specifies the encoder for the font.</param>
            <param name="uid">Specifies the unique id for the font.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Font.#ctor(ceTe.DynamicPDF.Text.Encoder)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Font"/> class.
            </summary>
            <param name="encoder">Specifies the encoder for the font.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Font.GetGlyphWidth(System.Char)">
            <summary>
            Returns the mwidth of a glyph.
            </summary>
            <param name="glyph">Glyph whose mwidth is to be returned.</param>
            <returns>Mwidth of glyph.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Font.GetTextLines(System.Char[],System.Single,System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:ceTe.DynamicPDF.Text.TextLineList"/> for the given character array.
            </summary>
            <param name="text">Character array containing the text.</param>
            <param name="width">Width to use when calculating the text lines.</param>
            <param name="height">Height to use when calculating the text lines.</param>
            <param name="fontSize">Font size to use when calculating the text lines.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.Text.TextLineList"/> containing the text.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Font.GetTextLines(System.Char[],System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:ceTe.DynamicPDF.Text.TextLineList"/> for the given character array.
            </summary>
            <param name="text">Character array containing the text.</param>
            <param name="width">Width to use when calculating the text lines.</param>
            <param name="fontSize">Font size to use when calculating the text lines.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.Text.TextLineList"/> containing the text.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Font.GetTextWidth(System.Char[],System.Single)">
            <summary>
            Returns the width of the given text.
            </summary>
            <param name="text">Byte array or text whose width is returned.</param>
            <param name="fontSize">Font size of text.</param>
            <returns>Width of text in points.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Font.GetTextWidth(System.String,System.Single)">
            <summary>
            Returns the width of the given text.
            </summary>
            <param name="text">Text whose width is returned.</param>
            <param name="fontSize">Font size of text.</param>
            <returns>Width of text in points.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Font.GetDescender(System.Single)">
            <summary>
            Returns the descender of the font in points for the given font size.
            </summary>
            <param name="fontSize">Font size to use for the calculation.</param>
            <returns>The descender in points.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Font.GetAscender(System.Single)">
            <summary>
            Returns the ascender of the font in points for the given font size.
            </summary>
            <param name="fontSize">Font size to use for the calculation.</param>
            <returns>The ascender in points.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Font.GetLineGap(System.Single)">
            <summary>
            Returns the line gap of the font in points for the given font size.
            </summary>
            <param name="fontSize">Font size to use for the calculation.</param>
            <returns>The line gap in points.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Font.GetDefaultLeading(System.Single)">
            <summary>
            Returns the default leading of the font in points for the given font size.
            </summary>
            <param name="fontSize">Font size to use for the calculation.</param>
            <returns>The default leading in points.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Font.GetBaseLine(System.Single,System.Single)">
            <summary>
            Returns the baseline of the font in points for the given leading and font size.
            </summary>
            <param name="fontSize">Font size to use for the calculation.</param>
            <param name="leading">Leading to use for the calculation.</param>
            <returns>The baseline in points.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Font.HasKerning">
            <summary>
            Indicates whether the given font is having Kerning pairs or not.
            </summary>
            <returns>Bool indicating presence of kern pairs.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Font.GetKernValue(System.Char,System.Char)">
            <summary>
            Returns kerning space between two chars.
            </summary>
            <param name="left">Char in left side of the pair.</param>
            <param name="right">Char in the right side of the pair.</param>
            <returns>Kerning space between the given chars.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Font.CanLoadSystemFont(System.Drawing.Font)">
            <summary>
            Checks whether the font can be loaded from the system fonts.
            </summary>
            <param name="font">Font of type System.Drawing.Font</param>
            <returns>Returns true if the provided font can be loaded. </returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Font.CanLoadSystemFont(System.String)">
            <summary>
            Checks whether the Font can be loaded from the system fonts for the font name provided.
            </summary>
            <param name="systemFontName">Name of the font.</param>
            <returns>Returns true if the provided font can be loaded.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Font.LoadSystemFont(System.Drawing.Font)">
            <summary>
            Load the Font from the system font if it is available.
            </summary>
            <param name="font">Font of type System.Drawing.Font</param>
            <returns>Returns <see cref="T:ceTe.DynamicPDF.Font"/> object if the provided font is loaded else null.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Font.LoadSystemFont(System.String)">
            <summary>
            Load the Font from the system font if it is available.
            </summary>
            <param name="systemFontName">Name of the font.</param>
            <returns>Returns <see cref="T:ceTe.DynamicPDF.Font"/> object if the provided font is loaded else null.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.FormFontName">
            <summary>
            Gets the four character name of the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.Descender">
            <summary>
            Gets the descender for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.Ascender">
            <summary>
            Gets the ascender for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.LineGap">
            <summary>
            Gets the line gap for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.LineBreaker">
            <summary>
            Gets the default line breaker for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.Encoder">
            <summary>
            Gets the encoder for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.Name">
            <summary>
            Gets the name of the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.ResourceType">
            <summary>
            Gets the resource type.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.TimesRoman">
            <summary>
            Gets the Times Roman core font with Latin 1 encoding.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.TimesBold">
            <summary>
            Gets the Times Bold core font with Latin 1 encoding.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.TimesItalic">
            <summary>
            Gets the Times Italic core font with Latin 1 encoding.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.TimesBoldItalic">
            <summary>
            Gets the Times Bold Italic core font with Latin 1 encoding.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.Helvetica">
            <summary>
            Gets the Helvetica core font with Latin 1 encoding.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.HelveticaBold">
            <summary>
            Gets the Helvetica Bold core font with Latin 1 encoding.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.HelveticaOblique">
            <summary>
            Gets the Helvetica Oblique core font with Latin 1 encoding.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.HelveticaBoldOblique">
            <summary>
            Gets the Helvetica Bold Oblique core font with Latin 1 encoding.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.Courier">
            <summary>
            Gets the Courier core font with Latin 1 encoding.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.CourierBold">
            <summary>
            Gets the Courier Bold core font with Latin 1 encoding.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.CourierOblique">
            <summary>
            Gets the Courier Oblique core font with Latin 1 encoding.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.CourierBoldOblique">
            <summary>
            Gets the Courier Bold Oblique core font with Latin 1 encoding.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.Symbol">
            <summary>
            Gets the Symbol core font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.ZapfDingbats">
            <summary>
            Gets the Zapf Dingbats core font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.HeiseiKakuGothicW5">
            <summary>
            Gets the Heisei Kaku Gothic W5 Japanese font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.HeiseiMinchoW3">
            <summary>
            Gets the Heisei Mincho W3 Japanese font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.HanyangSystemsGothicMedium">
            <summary>
            Gets the Hanyang Systems Gothic Medium Korean font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.HanyangSystemsShinMyeongJoMedium">
            <summary>
            Gets the Hanyang Systems Shin MyeongJo Medium Korean font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.MonotypeHeiMedium">
            <summary>
            Gets the Monotype Hei Medium Chinese (traditional) font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.MonotypeSungLight">
            <summary>
            Gets the Monotype Sung Light Chinese (traditional) font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.SinoTypeSongLight">
            <summary>
            Gets the SinoType Song Light Chinese (simplified) font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.CeTeBullets">
            <summary>
            Gets the ceTe Bullets font.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Merger.Forms.PdfButtonField">
            <summary>
            Representing a button field in a PDF document.
            </summary>
            <licensing>
            Reading the values or properties of a field is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.Merger.Forms.PdfFormField">
            <summary>
            Representing a form field in a PDF document.
            </summary>
            <licensing>
            Reading the values or properties of a field is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.Forms.PdfFormField.GetOriginalPageNumber">
            <summary>
            Returns the original page number of the form field in the original PDF document.
            </summary>
            <returns>The page number that the form field appears on (1 based index).</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.Forms.PdfFormField.PositionPageElement(ceTe.DynamicPDF.PageElement,ceTe.DynamicPDF.Page)">
            <summary>
            Sets the position of a page element to the coordinates of the form field.
            </summary>
            <param name="pageElement">Page element whose coordinates should be set.</param>
            <param name="page">Page that contains the page element.</param>
            <remarks>The page element must implement <see cref="T:ceTe.DynamicPDF.PageElements.IArea"/> and/or <see cref="T:ceTe.DynamicPDF.PageElements.ICoordinate"/>
            in order for it's coordinates to be set.</remarks>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.Forms.PdfFormField.GetX(ceTe.DynamicPDF.Page)">
            <summary>
            Returns the X coordinate of the form field on the given page.
            </summary>
            <param name="page">Page for which the X coordinates are returned.</param>
            <returns>The X coordinate on the given page.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.Forms.PdfFormField.GetY(ceTe.DynamicPDF.Page)">
            <summary>
            Returns the Y coordinate of the form field on the given page.
            </summary>
            <param name="page">Page for which the Y coordinates are returned.</param>
            <returns>The Y coordinate on the given page.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.Forms.PdfFormField.CreateLabel(ceTe.DynamicPDF.Page,System.Single,System.Single,System.String,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Creates a <see cref="T:ceTe.DynamicPDF.PageElements.Label"/> object and adds it to the given page at the coordinates of the form field.
            </summary>
            <remarks>NOTE: For actual Form Flattening, use the <see cref="P:ceTe.DynamicPDF.Document.FormFlattening"/> property of the <see cref="T:ceTe.DynamicPDF.Document"/> class
            (see the <a href="Form Flattening.html">Form Flattening</a> Help Topic for more information)</remarks>
            <param name="page">Page to which the label will be added.</param>
            <param name="xOffset">The X coordinate offset for the label.</param>
            <param name="yOffset">The Y coordinate offset for the label.</param>
            <param name="text">The text of the label.</param>
            <param name="font">The font to use for the label.</param>
            <param name="fontSize">The font size to use for the label.</param>
            <returns>The <see cref="T:ceTe.DynamicPDF.PageElements.Label"/> object that was added to the page.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.Forms.PdfFormField.CreateLabel(ceTe.DynamicPDF.Page,System.Single,System.Single,System.String,ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.TextAlign)">
            <summary>
            Creates a <see cref="T:ceTe.DynamicPDF.PageElements.Label"/> object and adds it to the given page at the coordinates of the form field.
            </summary>
            <remarks>NOTE: For actual Form Flattening, use the <see cref="P:ceTe.DynamicPDF.Document.FormFlattening"/> property of the <see cref="T:ceTe.DynamicPDF.Document"/> class
            (see the <a href="Form Flattening.html">Form Flattening</a> Help Topic for more information)</remarks>
            <param name="page">Page to which the label will be added.</param>
            <param name="xOffset">The X coordinate offset for the label.</param>
            <param name="yOffset">The Y coordinate offset for the label.</param>
            <param name="text">The text of the label.</param>
            <param name="font">The font to use for the label.</param>
            <param name="fontSize">The font size to use for the label.</param>
            <param name="align">The text alignment of the label.</param>
            <returns>The <see cref="T:ceTe.DynamicPDF.PageElements.Label"/> object that was added to the page.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.Forms.PdfFormField.CreateLabel(ceTe.DynamicPDF.Page,System.Single,System.Single,System.String,ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.TextAlign,ceTe.DynamicPDF.Color)">
            <summary>
            Creates a <see cref="T:ceTe.DynamicPDF.PageElements.Label"/> object and adds it to the given page at the coordinates of the form field.
            </summary>
            <remarks>NOTE: For actual Form Flattening, use the <see cref="P:ceTe.DynamicPDF.Document.FormFlattening"/> property of the <see cref="T:ceTe.DynamicPDF.Document"/> class
            (see the <a href="Form Flattening.html">Form Flattening</a> Help Topic for more information)</remarks>
            <param name="page">Page to which the label will be added.</param>
            <param name="xOffset">The X coordinate offset for the label.</param>
            <param name="yOffset">The Y coordinate offset for the label.</param>
            <param name="text">The text of the label.</param>
            <param name="font">The font to use for the label.</param>
            <param name="fontSize">The font size to use for the label.</param>
            <param name="align">The text alignment of the label.</param>
            <param name="textColor">The text color of the label.</param>
            <returns>The <see cref="T:ceTe.DynamicPDF.PageElements.Label"/> object that was added to the page.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.Forms.PdfFormField.CreateLabel(ceTe.DynamicPDF.Page,System.Single,System.Single,System.String)">
            <summary>
            Creates a <see cref="T:ceTe.DynamicPDF.PageElements.Label"/> object and adds it to the given page at the coordinates of the form field.
            </summary>
            <remarks>NOTE: For actual Form Flattening, use the <see cref="P:ceTe.DynamicPDF.Document.FormFlattening"/> property of the <see cref="T:ceTe.DynamicPDF.Document"/> class
            (see the <a href="Form Flattening.html">Form Flattening</a> Help Topic for more information)</remarks>
            <param name="page">Page to which the label will be added.</param>
            <param name="xOffset">The X coordinate offset for the label.</param>
            <param name="yOffset">The Y coordinate offset for the label.</param>
            <param name="text">The text of the label.</param>
            <returns></returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.Forms.PdfFormField.CreateLabel(ceTe.DynamicPDF.Page,System.String,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Creates a <see cref="T:ceTe.DynamicPDF.PageElements.Label"/> object and adds it to the given page at the coordinates of the form field.
            </summary>
            <remarks>NOTE: For actual Form Flattening, use the <see cref="P:ceTe.DynamicPDF.Document.FormFlattening"/> property of the <see cref="T:ceTe.DynamicPDF.Document"/> class
            (see the <a href="Form Flattening.html">Form Flattening</a> Help Topic for more information)</remarks>
            <param name="page">Page to which the label will be added.</param>
            <param name="text">The text of the label.</param>
            <param name="font">The font to use for the label.</param>
            <param name="fontSize">The font size to use for the label.</param>
            <returns>The <see cref="T:ceTe.DynamicPDF.PageElements.Label"/> object that was added to the page.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.Forms.PdfFormField.CreateLabel(ceTe.DynamicPDF.Page,System.String,ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.TextAlign)">
            <summary>
            Creates a <see cref="T:ceTe.DynamicPDF.PageElements.Label"/> object and adds it to the given page at the coordinates of the form field.
            </summary>
            <remarks>NOTE: For actual Form Flattening, use the <see cref="P:ceTe.DynamicPDF.Document.FormFlattening"/> property of the <see cref="T:ceTe.DynamicPDF.Document"/> class
            (see the <a href="Form Flattening.html">Form Flattening</a> Help Topic for more information)</remarks>
            <param name="page">Page to which the label will be added.</param>
            <param name="text">The text of the label.</param>
            <param name="font">The font to use for the label.</param>
            <param name="fontSize">The font size to use for the label.</param>
            <param name="align">The text alignment of the label.</param>
            <returns>The <see cref="T:ceTe.DynamicPDF.PageElements.Label"/> object that was added to the page.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.Forms.PdfFormField.CreateLabel(ceTe.DynamicPDF.Page,System.String,ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.TextAlign,ceTe.DynamicPDF.Color)">
            <summary>
            Creates a <see cref="T:ceTe.DynamicPDF.PageElements.Label"/> object and adds it to the given page at the coordinates of the form field.
            </summary>
            <remarks>NOTE: For actual Form Flattening, use the <see cref="P:ceTe.DynamicPDF.Document.FormFlattening"/> property of the <see cref="T:ceTe.DynamicPDF.Document"/> class
            (see the <a href="Form Flattening.html">Form Flattening</a> Help Topic for more information)</remarks>
            <param name="page">Page to which the label will be added.</param>
            <param name="text">The text of the label.</param>
            <param name="font">The font to use for the label.</param>
            <param name="fontSize">The font size to use for the label.</param>
            <param name="align">The text alignment of the label.</param>
            <param name="textColor">The text color of the label.</param>
            <returns>The <see cref="T:ceTe.DynamicPDF.PageElements.Label"/> object that was added to the page.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.Forms.PdfFormField.CreateLabel(ceTe.DynamicPDF.Page,System.String)">
            <summary>
            Creates a <see cref="T:ceTe.DynamicPDF.PageElements.Label"/> object and adds it to the given page at the coordinates of the form field.
            </summary>
            <remarks>NOTE: For actual Form Flattening, use the <see cref="P:ceTe.DynamicPDF.Document.FormFlattening"/> property of the <see cref="T:ceTe.DynamicPDF.Document"/> class
            (see the <a href="Form Flattening.html">Form Flattening</a> Help Topic for more information)</remarks>
            <param name="page">Page to which the label will be added.</param>
            <param name="text">The text of the label.</param>
            <returns></returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.Forms.PdfFormField.GetValue">
            <summary>
            Gets the value of the form field.
            </summary>
            <returns>A <b>string</b> containing the value.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.Forms.PdfFormField.HasChildFields">
            <summary>
            Gets the type of the form field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.Forms.PdfFormField.Width">
            <summary>
            Gets the width of the form field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.Forms.PdfFormField.Height">
            <summary>
            Gets the height of the form field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.Forms.PdfFormField.Parent">
            <summary>
            Gets the parent form field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.Forms.PdfFormField.Form">
            <summary>
            Gets the form the form field belongs to.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.Forms.PdfFormField.ExportValue">
            <summary>
            Gets the export value of the form field.
            </summary>
            <returns>A <b>string</b> containing the value.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.Forms.PdfFormField.ChildFields">
            <summary>
            Gets a collection of child form fields.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.Forms.PdfFormField.Flags">
            <summary>
            Gets the partial name of the form field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.Forms.PdfFormField.Name">
            <summary>
            Gets the partial name of the form field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.Forms.PdfFormField.FullName">
            <summary>
            Gets the full name of the form field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.Forms.PdfFormField.BorderStyle">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.Merger.Forms.PdfFormField.BorderStyle"/>.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.Forms.PdfFormField.BorderColor">
            <summary>
            Gets the border color of a form field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.Forms.PdfFormField.BackgroundColor">
            <summary>
            Gets the background color of a form field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.Forms.PdfFormField.TextColor">
            <summary>
            Gets the color of the text for the field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.Forms.PdfFormField.Rotate">
            <summary>
            Gets the angle of a form field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.Forms.PdfFormField.Font">
            <summary>
            Gets or Sets the font for the field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.Forms.PdfFormField.FontSize">
            <summary>
            Gets or Sets the fontsize for the field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.Forms.PdfFormField.Align">
            <summary>
            Gets the text alignment for the field.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.Forms.PdfButtonField.GetValue">
            <summary>
            Gets the value of the button field.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.Forms.PdfButtonField.ExportValue">
            <summary>
            Gets the export value of the form field.
            </summary>
            <returns>A <b>string</b> containing the value.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.Forms.PdfButtonField.Font">
            <summary>
            Gets or Sets the font for the field.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Merger.Forms.PdfChoiceField">
            <summary>
            Representing a choice field in a PDF document.
            </summary>
            <licensing>
            Reading the values or properties of a field is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.Forms.PdfChoiceField.GetValues">
            <summary>
            Gets the values of the choice field.
            </summary>
            <returns>An array of strings containing the value.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.Forms.PdfChoiceField.GetValue">
            <summary>
            Gets the value of the choice fields.
            </summary>
            <returns>A <b>string</b> containing the value.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.Forms.PdfChoiceField.Font">
            <summary>
            Gets or Sets the font for the field.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Merger.Forms.PdfForm">
            <summary>
            Representing a form in a PDF document.
            </summary>
            <licensing>
            Reading the values or properties of a field is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.Forms.PdfForm.Fields">
            <summary>
            Gets a collection of form fields contained in the form.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Merger.Forms.PdfFormFieldList">
            <summary>
            Representing a collection of form fields in a PDF document.
            </summary>
            <licensing>
            Reading the values or properties of a field is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.Forms.PdfFormFieldList.Count">
            <summary>
            Gets the number of form fields in the collection.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.Forms.PdfFormFieldList.Item(System.Int32)">
            <summary>
            Gets a form field at the specified index in the collection.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.Forms.PdfFormFieldList.Item(System.String)">
            <summary>
            Gets the form field by the given name.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Merger.Forms.PdfSignatureField">
            <summary>
            Representing a signature field in a PDF document.
            </summary>
            <licensing>
            Reading the values or properties of a field is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.Merger.Forms.PdfTextField">
            <summary>
            Representing a text field in a PDF document.
            </summary>
            <licensing>
            Reading the values or properties of a field is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.Forms.PdfTextField.GetValue">
            <summary>
            Gets the value of a text field.
            </summary>
            <returns>A <b>string</b> containing the value.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.Forms.PdfTextField.MaximumLength">
            <summary>
            Gets the maximum length of the text field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.Forms.PdfTextField.Text">
            <summary>
            Gets the text of the text field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.Forms.PdfTextField.Font">
            <summary>
            Gets or Sets the font for the field.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Merger.AppendedPage">
            <summary>
            Represents an appended page.
            </summary>
            <licensing>
            This class is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.Page">
            <summary>
            Represents a page.
            </summary>
            <remarks>This class can be used to create pages to add to your <see cref="T:ceTe.DynamicPDF.Document"/>.</remarks>
            <example>The following example creates a new page using a <see cref="T:ceTe.DynamicPDF.PageDimensions"/> to set the margins of that page.  
            It then places a label on the page and rotates the page 90 degrees.<p/>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
                Sub Main()
            		
                    ' Create a PDF Document
                    Dim MyDocument As Document = New Document 
            		
                    ' Create a page dimensions object and set the margins
                    Dim dimensions As PageDimensions = New PageDimensions(PageSize.Letter, PageOrientation.Portrait)
                    dimensions.BottomMargin = 50
                    dimensions.TopMargin = 50
                    dimensions.LeftMargin = 35
                    dimensions.RightMargin = 35
            	
                    ' Create a page using a page dimensions object and add it to the document
                    Dim MyPage As Page = New Page(dimensions)
                    MyDocument.Pages.Add(MyPage)
            
                    ' Add a label to the page
                    MyPage.Elements.Add(New Label("this page was rotated 90 degrees.", 0, 0, 300, 20, Font.Helvetica, 18))
            
                    ' Rotate the page 90 degrees
                    MyPage.Rotate = 90
            
                    ' Save the PDF
                    MyDocument.Draw("C:\MyDocument.pdf")
            		
                End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
                static void Main()
                {
                    // Create a PDF Document
                    Document document = new Document();
            
                    // Create a page dimensions object and set the margins
                    PageDimensions dimensions = new PageDimensions( PageSize.Letter, PageOrientation.Portrait );
                    dimensions.BottomMargin = 50;
                    dimensions.TopMargin = 50;
                    dimensions.LeftMargin = 35;
                    dimensions.RightMargin = 35;
            
                    // Create a page using a page dimensions object and add it to the document
                    Page page = new Page( dimensions );
                    document.Pages.Add( page );
            
                    // Add a label to the page
                    page.Elements.Add( new Label( "This page was rotated 90 degrees.", 0, 0, 300, 20, Font.Helvetica, 18 ) );
            
                    // Rotate the page 90 degrees
                    page.Rotate = 90;
            	
                    // Save the PDF
                    document.Draw( @"C:\MyDocument.pdf" );
                }
            }
            </code>
            </example>
            <licensing>
            This class is a DynamicPDF Generator Community Edition feature.
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Page.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Page"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Page.#ctor(ceTe.DynamicPDF.PageSize)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Page"/> class.
            </summary>
            <param name="size">The <see cref="T:ceTe.DynamicPDF.PageSize"/> representing the dimensions of the page.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Page.#ctor(ceTe.DynamicPDF.PageSize,ceTe.DynamicPDF.PageOrientation)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Page"/> class.
            </summary>
            <param name="size">The <see cref="T:ceTe.DynamicPDF.PageSize"/> representing the dimensions of the page.</param>
            <param name="orientation">The <see cref="T:ceTe.DynamicPDF.PageOrientation"/> of the page.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Page.#ctor(ceTe.DynamicPDF.PageSize,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Page"/> class.
            </summary>
            <param name="size">The <see cref="T:ceTe.DynamicPDF.PageSize"/> representing the dimensions of the page.</param>
            <param name="margins">The  margins of the page.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Page.#ctor(ceTe.DynamicPDF.PageSize,ceTe.DynamicPDF.PageOrientation,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Page"/> class.
            </summary>
            <param name="size">The <see cref="T:ceTe.DynamicPDF.PageSize"/> representing the dimensions of the page.</param>
            <param name="orientation">The <see cref="T:ceTe.DynamicPDF.PageOrientation"/> of the page.</param>
            <param name="margins">The margins of the page.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Page.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Page"/> class.
            </summary>
            <param name="width">The width of the page.</param>
            <param name="height">The height of the page.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Page.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Page"/> class.
            </summary>
            <param name="width">The width of the page.</param>
            <param name="height">The height of the page.</param>
            <param name="margins">The margins of the page.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Page.#ctor(ceTe.DynamicPDF.PageDimensions)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Page"/> class.
            </summary>
            <param name="dimensions">The <see cref="T:ceTe.DynamicPDF.PageDimensions"/> of the page.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Page.Elements">
            <summary>
            Gets a collection of page elements.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Page.Dimensions">
            <summary>
            Gets or sets the dimensions of the page.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Page.Rotate">
            <summary>
            Gets or sets the rotation of the page.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Page.ApplyDocumentTemplate">
            <summary>
            Gets or sets a value indicating if this page uses the documents template.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Page.ApplySectionTemplate">
            <summary>
            Gets or sets a value indicating if this page uses the sections template.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.AppendedPage.BackgroundElements">
            <summary>
            Gets a collection of page elements to be drawn as a background on the page.
            </summary>
            <remarks>Page elements placed in this collection will appear below the imported PDF data. Use the
            <see cref="P:ceTe.DynamicPDF.Page.Elements"/> property to place page elements on top of the imported PDF data.</remarks>
        </member>
        <member name="T:ceTe.DynamicPDF.Merger.FormFlatteningOptions">
             <summary>
             Represents options for flattening form fields in the PDF documents.
             </summary>
             <example>The following example shows how to flatten a PDF using FormFlatteningOptions<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.Merger
            
             Module MyModule
            
                 Sub Main()
                     ' Create a merge document containing the form fields
                     Dim document As MergeDocument = New MergeDocument("C:\AllFormFields.pdf")
            
                     'Set FormFlattening property of the document
                     document.FormFlattening = FormFlatteningOptions.Default
            
                     ' Save the document
                     document.Draw("C:\AllFormFields_Flattened_VB.pdf")
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.Merger;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a merge document containing the form fields
                     MergeDocument document = new MergeDocument(@"C:\AllFormFields.pdf");
            
                     //Set FormFlattening property of the document
                     document.FormFlattening = FormFlatteningOptions.Default;
             
                     // Save the document
                     document.Draw(@"C:\AllFormFields_Flattened.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Merger Professional Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Merger for .NET Professional Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Professional Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.FormFlatteningOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Merger.FormFlatteningOptions"/> class.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.FormFlatteningOptions.DigitalSignature">
            <summary>
            <font color="red">Obsolete.</font> Gets or sets a value indicating digital signature flattening option.
            </summary>
            <remarks><font color="red">NOTE: This property is obsolete.</font> Use DigitalSignatures property instead.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.FormFlatteningOptions.DigitalSignatures">
            <summary>
            Gets or sets a value indicating digital signature flattening option.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.FormFlatteningOptions.Default">
            <summary>
            Gets an instance of <see cref="T:ceTe.DynamicPDF.Merger.FormFlatteningOptions"/> with <see cref="P:ceTe.DynamicPDF.Merger.FormFlatteningOptions.DigitalSignatures"/> property set to remove.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.FormFlatteningOptions.RetainDigitalSignatures">
            <summary>
            Gets an instance of <see cref="T:ceTe.DynamicPDF.Merger.FormFlatteningOptions"/> with <see cref="P:ceTe.DynamicPDF.Merger.FormFlatteningOptions.DigitalSignatures"/> property set to retain.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Merger.ImportedAction">
            <summary>
            Represents an imported action.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Action">
            <summary>
            Base class representing a destination or action.
            </summary>
            <remarks>Action's derived classes are: <see cref="T:ceTe.DynamicPDF.UrlAction"/>, <see cref="T:ceTe.DynamicPDF.XYDestination"/> and <see cref="T:ceTe.DynamicPDF.ZoomDestination"/>.
            Take a look a the <a href="Outlines and BookMarks.html">Outlines and Bookmarks</a> topic for examples that use these derived classes.</remarks>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Action.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Action"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Action.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the action to the specified <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer">The <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the actions output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.ImportedAction.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the action to the specified <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer">The <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the actions output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.ImportedAction.ActionType">
            <summary>
            Get the action type of the imported action.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Merger.ImportedActionType">
            <summary>
            Specifies an imported action type
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Merger.ImportedActionType.GoTo">
            <summary>
            Go to a destination in the current document.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Merger.ImportedActionType.GoToRemote">
            <summary>
            Go to a destination in another document.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Merger.ImportedActionType.GoToEmbedded">
            <summary>
            Go to a destination in an embedded file.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Merger.ImportedActionType.Launch">
            <summary>
            Launch an application.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Merger.ImportedActionType.Thread">
            <summary>
            Thread.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Merger.ImportedActionType.URI">
            <summary>
            Uniform resource identifier.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Merger.ImportedActionType.Sound">
            <summary>
            Sound.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Merger.ImportedActionType.Movie">
            <summary>
            Movie.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Merger.ImportedActionType.Hide">
            <summary>
            Hide.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Merger.ImportedActionType.Named">
            <summary>
            Named action.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Merger.ImportedActionType.SubmitForm">
            <summary>
            Submit form.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Merger.ImportedActionType.ResetForm">
            <summary>
            Reset form.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Merger.ImportedActionType.ImportData">
            <summary>
            Import data.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Merger.ImportedActionType.JavaScript">
            <summary>
            Java script.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Merger.ImportedActionType.SetOCGState">
            <summary>
            Set OCG state.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Merger.ImportedActionType.Rendition">
            <summary>
            Rendition.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Merger.ImportedActionType.Transition">
            <summary>
            Transition.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Merger.ImportedActionType.GoTo3DView">
            <summary>
            Go to 3D view.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Merger.ImportedDestination">
            <summary>
            Represents an imported destination
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.ImportedDestination.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the action to the specified <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer">The <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the actions output.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.Outline">
            <summary>
            Represents an outline.
            </summary>
            <remarks>See the <a href="Outlines and BookMarks.html">Outlines and Bookmarks</a> topic for more on Outlines.</remarks>
            <example>This example shows how to create an outline for a PDF document.<p/>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            
            Module MyModule
            		
                Sub Main()
            		
                    ' Create a PDF Document
                    Dim MyDocument As Document = New Document
            
                    ' Add three blank pages
                    MyDocument.Pages.Add(New Page(PageSize.Letter))
                    MyDocument.Pages.Add(New Page(PageSize.Letter))
                    MyDocument.Pages.Add(New Page(PageSize.Letter))
            
                    ' Add a top level outline and set properties
                    Dim MyOutline1 As Outline = MyDocument.Outlines.Add("Outline1")
                    MyOutline1.Style = TextStyle.Bold
                    MyOutline1.Color = New RgbColor(1.0F, 0.0F, 0.0F)
            
                    ' Add child outlines
                    Dim MyOutline1A As Outline = MyOutline1.ChildOutlines.Add("Outline1A", New ZoomDestination(2, PageZoom.FitPage))
                    MyOutline1A.Expanded = False
                    Dim MyOutline1A1 As Outline = MyOutline1A.ChildOutlines.Add("Outline1A1", New XYDestination(2, 0, 0))
                    Dim MyOutline1A2 As Outline = MyOutline1A.ChildOutlines.Add("Outline1A2", New ZoomDestination(2, PageZoom.FitHeight))
                    Dim MyOutline1B As Outline = MyOutline1.ChildOutlines.Add("Outline1B", New ZoomDestination(2, PageZoom.FitWidth))
            		
                    ' Add a second top level outline
                    Dim MyOutline2 As Outline = MyDocument.Outlines.Add("Outline2", New XYDestination(3, 0, 300))
            		
                    ' Add a child outline
                    Dim MyOutline2A As Outline = MyOutline2.ChildOutlines.Add("Outline2A")
            		
                    ' Save the PDF document
                    MyDocument.Draw("C:\MyDocument.pdf")
            		
                End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            
            class MyClass
            {
                static void Main()
                {
                    // Create a PDF Document
                    Document document = new Document();
            		
                    // Add three blank pages
                    document.Pages.Add( new Page( PageSize.Letter ) );
                    document.Pages.Add( new Page( PageSize.Letter ) );
                    document.Pages.Add( new Page( PageSize.Letter ) );
            		
                    // Add a top level outline and set properties
                    Outline outline1 = document.Outlines.Add( "Outline1" );
                    outline1.Style = TextStyle.Bold;
                    outline1.Color = new RgbColor( 1.0f, 0.0f, 0.0f );
            		
                    // Add child outlines
                    Outline outline1A = outline1.ChildOutlines.Add( "Outline1A", new ZoomDestination( 2, PageZoom.FitPage ) );
                    outline1A.Expanded = false;
                    Outline outline1A1 = outline1A.ChildOutlines.Add( "Outline1A1", new XYDestination( 2, 0, 0 ) );
                    Outline outline1A2 = outline1A.ChildOutlines.Add( "Outline1A2", new ZoomDestination( 2, PageZoom.FitHeight ) );
                    Outline outline1B = outline1.ChildOutlines.Add( "Outline1B", new ZoomDestination( 2, PageZoom.FitWidth ) );
            		
                    // Add a second top level outline
                    Outline outline2 = document.Outlines.Add( "Outline2", new XYDestination( 3, 0, 300 ) );
            		
                    // Add a child outline
                    Outline outline2A = outline2.ChildOutlines.Add( "Outline2A" );
            		
                    // Save the PDF document
                    document.Draw( @"C:\MyDocument.pdf" );
                }
            }
            </code>
            </example>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Outline.#ctor(System.Boolean,ceTe.DynamicPDF.TextStyle,ceTe.DynamicPDF.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Outline"/> class.
            </summary>
            <param name="expanded">Specifies if the outline will be expanded.</param>
            <param name="style">Style of the outline.</param>
            <param name="action">Action of the outline.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Outline.Text">
            <summary>
            Gets or sets the text of the outline.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Outline.Style">
            <summary>
            Gets or sets the style of the outline.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Outline.Color">
            <summary>
            Gets or sets the color of the outline.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Outline.Parent">
            <summary>
            Gets the parent of the outline.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Outline.ChildOutlines">
            <summary>
            Gets a collection or child outlines.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Outline.Expanded">
            <summary>
            Gets or sets a value specifying if the outline is expanded.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Merger.ImportedPage">
             <summary>
             Represents an imported page.
             </summary>
             <remarks>This class can be used to pull a single selected page from an existing PDF document.</remarks>
             <example>This example shows you how to import one page of an existing PDF and save it as a separate PDF.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.Merger
             
             Module MyModule
             
                 Sub Main()
             
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             			
                     ' Create an ImportedPage and add it to the document
                     Dim MyPage As ImportedPage = New ImportedPage("C:\ImportPDF.pdf", 2, 50)
                     MyDocument.Pages.Add( MyPage )
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.Merger;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create an ImportedPage and add it to the document
                     ImportedPage page = new ImportedPage( @"C:\ImportPDF.pdf", 2, 50 );
                     document.Pages.Add( page );
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Merger for .NET Standard Edition</item>
             <item>DynamicPDF Merger for .NET Professional Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Professional Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.ImportedPage.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Merger.ImportedPage"/> class.
            </summary>
            <param name="filePath">Physical file path of the PDF document to import.</param>
            <param name="pageNumber">Page number to import.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.ImportedPage.#ctor(System.String,System.Int32,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Merger.ImportedPage"/> class.
            </summary>
            <param name="filePath">Physical file path of the PDF document to import.</param>
            <param name="pageNumber">Page number to import.</param>
            <param name="margins">Margins of the new page. Overrides the default margins.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.ImportedPage.#ctor(ceTe.DynamicPDF.Merger.PdfPage)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Merger.ImportedPage"/> class.
            </summary>
            <param name="pdfPage"><see cref="P:ceTe.DynamicPDF.Merger.ImportedPage.PdfPage"/> object to import.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.ImportedPage.#ctor(ceTe.DynamicPDF.Merger.PdfPage,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Merger.ImportedPage"/> class.
            </summary>
            <param name="pdfPage"><see cref="P:ceTe.DynamicPDF.Merger.ImportedPage.PdfPage"/> object to import.</param>
            <param name="margins">Margins of the new page. Overrides the default margins.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.ImportedPage.ImportAnnotations">
            <summary>
            Gets or sets a value specifying whether or not to import the annotations.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.ImportedPage.ImportFormFields">
            <summary>
            Gets or sets a value specifying whether or not to import the form fields.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.ImportedPage.ImportAllOtherData">
            <summary>
            Gets or sets a value specifying whether or not to import all data except annotations and form fields.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.ImportedPage.LogicalStructure">
            <summary>
            Gets or sets a value specifying whether or not to import the logical structures.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.ImportedPage.BackgroundElements">
            <summary>
            Gets a collection of page elements to be drawn as a background on the page.
            </summary>
            <remarks>Page elements placed in this collection will appear below the imported PDF data. Use the
            <see cref="P:ceTe.DynamicPDF.Page.Elements"/> property to place page elements on top of the imported PDF data.</remarks>
        </member>
        <member name="T:ceTe.DynamicPDF.Merger.ImportedPageArea">
            <summary>
            Represents an imported pages area.
            </summary>
            <licensing>
            This class is a DynamicPDF Merger Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElement">
            <summary>
            Base class from which all page elements are derived.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElement"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElement.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElement"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> containing the data.</param>
            <param name="context">The source of the serialization.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElement.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the page element to the given <b>PageWriter</b> class.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> class to receive the page elements output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElement.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object. 
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElement.ID">
            <summary>
            Gets or sets the ID of the page element.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElement.RequiredLicenseLevel">
            <summary>
            Gets the required license level of the page element.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.ICoordinate">
            <summary>
            Represents a contract requiring an X and Y coordinate.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ICoordinate.X">
            <summary>
            Gets or sets the X coordinate.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ICoordinate.Y">
            <summary>
            Gets or sets the Y coordinate.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.IArea">
            <summary>
            Represents a contract defining an area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.IArea.Width">
            <summary>
            Gets or sets the width of the area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.IArea.Height">
            <summary>
            Gets or sets the height of the area.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.ImportedPageArea.#ctor(System.String,System.Int32,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Merger.ImportedPageArea"/> class.
            </summary>
            <param name="filePath">Physical file path of the PDF doument to import.</param>
            <param name="pageNumber">Page number to import.</param>
            <param name="x">X coordinate of the imported page area.</param>
            <param name="y">Y coordinate of the imported page area.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.ImportedPageArea.#ctor(System.String,System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Merger.ImportedPageArea"/> class.
            </summary>
            <param name="filePath">Physical file path of the PDF document to import.</param>
            <param name="pageNumber">Page number to import.</param>
            <param name="x">X coordinate of the imported page area.</param>
            <param name="y">Y coordinate of the imported page area.</param>
            <param name="scale">The scale to use when rendering the imported page area.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.ImportedPageArea.#ctor(ceTe.DynamicPDF.Merger.PdfPage,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Merger.ImportedPageArea"/> class.
            </summary>
            <param name="pdfPage"><see cref="T:ceTe.DynamicPDF.Merger.PdfPage"/> object containing the page.</param>
            <param name="x">X coordinate of the imported page area.</param>
            <param name="y">Y coordinate of the imported page area.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.ImportedPageArea.#ctor(ceTe.DynamicPDF.Merger.PdfPage,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Merger.ImportedPageArea"/> class.
            </summary>
            <param name="pdfPage"><see cref="T:ceTe.DynamicPDF.Merger.PdfPage"/> object containing the page.</param>
            <param name="x">X coordinate of the imported page area.</param>
            <param name="y">Y coordinate of the imported page area.</param>
            <param name="scale">The scale to use when rendering the imported page area.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.ImportedPageArea.#ctor(ceTe.DynamicPDF.Merger.ImportedPageContents,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Merger.ImportedPageArea"/> class.
            </summary>
            <param name="contents"><see cref="T:ceTe.DynamicPDF.Merger.ImportedPageContents"/> object containing the page's contents.</param>
            <param name="x">X coordinate of the imported page area.</param>
            <param name="y">Y coordinate of the imported page area.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.ImportedPageArea.#ctor(ceTe.DynamicPDF.Merger.ImportedPageContents,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Merger.ImportedPageArea"/> class.
            </summary>
            <param name="contents"><see cref="T:ceTe.DynamicPDF.Merger.ImportedPageContents"/> object containing the page's contents.</param>
            <param name="x">X coordinate of the imported page area.</param>
            <param name="y">Y coordinate of the imported page area.</param>
            <param name="scale">The scale to use when rendering the imported page area.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.ImportedPageArea.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the image to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the image's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.ImportedPageArea.SetBounds(System.Single,System.Single)">
            <summary>
            Scales the image to fit in the given box keeping the X and Y scale equal.
            </summary>
            <param name="maximumWidth">The maximum width.</param>
            <param name="maximumHeight">The maximum height.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.ImportedPageArea.SetSize(System.Single,System.Single)">
            <summary>
            Scales the image to fit the exact width and height given.
            </summary>
            <param name="width">Width of image.</param>
            <param name="height">Height of image.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.ImportedPageArea.X">
            <summary>
            Gets or sets the X coordinate of the page element.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.ImportedPageArea.Y">
            <summary>
            Gets or sets the Y coordinate of the imported page area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.ImportedPageArea.Angle">
            <summary>
            Gets or sets the angle of the imported page area in degrees.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.ImportedPageArea.ScaleX">
            <summary>
            Gets or sets the horizontal scale of the imported page area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.ImportedPageArea.ScaleY">
            <summary>
            Gets or sets the vertical scale of the imported page area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.ImportedPageArea.Width">
            <summary>
            Gets or sets the width of the imported page area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.ImportedPageArea.Height">
            <summary>
            Gets or sets the height of the imported page area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.ImportedPageArea.Contents">
            <summary>
            Get the imported page area's <see cref="T:ceTe.DynamicPDF.Merger.ImportedPageContents"/> object.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Merger.ImportedPageContents">
             <summary>
             Represents the contents used by an the <see cref="T:ceTe.DynamicPDF.Merger.ImportedPageData"/> class.
             </summary>
             <remarks>This class can be used to reuse a pages contents in multiple <see cref="T:ceTe.DynamicPDF.Merger.ImportedPageData"/> objects. Doing so will
             reduce the size of the output PDF because the contents will only appears in the output document once.</remarks>
             <example>This example shows you how to import one page of an existing PDF using this class.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.Merger
             
             Module MyModule
             
                 Sub Main()
             
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
            	
                     ' Create an ImportedPageContents object
                     Dim MyContents As ImportedPageContents = New ImportedPageContents( "C:\ImportPDF.pdf", 2 )
            	
                     ' Create an ImportedPage and add it to the document
                     Dim MyData As ImportedPageData = New ImportedPageData(MyContents, -200, -100, 0.24F )
                     MyPage.Elements.Add(MyData)
            	
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.Merger;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
             			
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
            
                     // Create an ImportedPageContents object
                     ImportedPageContents contents = new ImportedPageContents( @"C:\ImportPDF.pdf", 2 );
            
                     // Create an ImportedPageData and add it to the page
                     ImportedPageData data = new ImportedPageData(contents, -200, -100, 0.24f );
                     page.Elements.Add( data );
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Merger Professional Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Merger for .NET Professional Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Professional Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.ImportedPageContents.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Merger.ImportedPageContents"/> class.
            </summary>
            <param name="filePath">Physical file path of the PDF document to import.</param>
            <param name="pageNumber">Page number to import.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.ImportedPageContents.#ctor(ceTe.DynamicPDF.Merger.PdfPage)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Merger.ImportedPageContents"/> class.
            </summary>
            <param name="pdfPage"><see cref="P:ceTe.DynamicPDF.Merger.ImportedPageContents.PdfPage"/> object to import.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.ImportedPageContents.#ctor(System.String,System.Int32,ceTe.DynamicPDF.PageBoundary)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Merger.ImportedPageContents"/> class.
            </summary>
            <param name="filePath">Physical file path of the PDF document to import.</param>
            <param name="pageNumber">Page number to import.</param>
            <param name="pageBoundary">The boundaries box to use as the edges of the page.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.ImportedPageContents.#ctor(ceTe.DynamicPDF.Merger.PdfPage,ceTe.DynamicPDF.PageBoundary)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Merger.ImportedPageContents"/> class.
            </summary>
            <param name="pdfPage"><see cref="P:ceTe.DynamicPDF.Merger.ImportedPageContents.PdfPage"/> object to import.</param>
            <param name="pageBoundary">The boundaries box to use as the edges of the page.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.ImportedPageContents.SetBoundaries(ceTe.DynamicPDF.PageBoundary)">
            <summary>
            Sets the boundaries of the page to the specified boundary on the imported page.
            </summary>
            <param name="pageBoundary"></param>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.ImportedPageContents.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the contents the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the contents output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.ImportedPageContents.RequiredPdfObjects">
            <summary>
            Gets the number of PDF objects required by the imported page data's contents.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.ImportedPageContents.ResourceType">
            <summary>
            Gets the type of resource.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.ImportedPageContents.ClipLeft">
            <summary>
            Gets or sets the left clipping of the contents.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.ImportedPageContents.ClipRight">
            <summary>
            Gets or sets the right clipping of the contents.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.ImportedPageContents.ClipTop">
            <summary>
            Gets or sets the top clipping of the contents.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.ImportedPageContents.ClipBottom">
            <summary>
            Gets or sets the bottom clipping of the contents.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.ImportedPageContents.Width">
            <summary>
            Gets the clipped width of the contents.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.ImportedPageContents.Height">
            <summary>
            Gets the clipped height of the contents.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Merger.ImportedPageData">
             <summary>
             Represents a Page Element containing the data of an imported page from a PDF document.
             </summary>
             <remarks>This class can be used to pull a single selected page from an existing PDF document.  
             You can scale it or rotate it and you can place it on an another page.</remarks>
             <example>This example shows you how to import one page of an existing PDF, scale that page and then place it on another blank page.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.Merger
             
             Module MyModule
             
                 Sub Main()
             
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create an ImportedPage and add it to the document
                     Dim MyData As ImportedPageData = New ImportedPageData("C:\ImportPDF.pdf", 2, -200, -100, 0.24F )
                     MyPage.Elements.Add(MyData)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.Merger;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
             			
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
            
                     // Create an ImportedPageData and add it to the page
                     ImportedPageData data = new ImportedPageData(@"C:\ImportPDF.pdf", 2, -200, -100, 0.24f );
                     page.Elements.Add( data );
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Merger Professional Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Merger for .NET Professional Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Professional Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.ImportedPageData.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Merger.ImportedPageData"/> class.
            </summary>
            <param name="filePath">Physical file path of the PDF document to import.</param>
            <param name="pageNumber">Page number to import.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.ImportedPageData.#ctor(System.String,System.Int32,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Merger.ImportedPageData"/> class.
            </summary>
            <param name="filePath">Physical file path of the PDF document to import.</param>
            <param name="pageNumber">Page number to import.</param>
            <param name="xOffset">X offset of the placement on the page.</param>
            <param name="yOffset">Y offset of the placement on the page.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.ImportedPageData.#ctor(System.String,System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Merger.ImportedPageData"/> class.
            </summary>
            <param name="filePath">Physical file path of the PDF document to import.</param>
            <param name="pageNumber">Page number to import.</param>
            <param name="xOffset">X offset of the placement on the page.</param>
            <param name="yOffset">Y offset of the placement on the page.</param>
            <param name="scale">Scale of the imported page.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.ImportedPageData.#ctor(ceTe.DynamicPDF.Merger.PdfPage)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Merger.ImportedPageData"/> class.
            </summary>
            <param name="pdfPage"><see cref="T:ceTe.DynamicPDF.Merger.PdfPage"/> object to import.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.ImportedPageData.#ctor(ceTe.DynamicPDF.Merger.PdfPage,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Merger.ImportedPageData"/> class.
            </summary>
            <param name="pdfPage"><see cref="T:ceTe.DynamicPDF.Merger.PdfPage"/> object to import.</param>
            <param name="xOffset">X offset of the placement on the page.</param>
            <param name="yOffset">Y offset of the placement on the page.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.ImportedPageData.#ctor(ceTe.DynamicPDF.Merger.PdfPage,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Merger.ImportedPageData"/> class.
            </summary>
            <param name="pdfPage"><see cref="T:ceTe.DynamicPDF.Merger.PdfPage"/> object to import.</param>
            <param name="xOffset">X offset of the placement on the page.</param>
            <param name="yOffset">Y offset of the placement on the page.</param>
            <param name="scale">Scale of the imported page.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.ImportedPageData.#ctor(ceTe.DynamicPDF.Merger.ImportedPageContents)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Merger.ImportedPageData"/> class.
            </summary>
            <param name="contents"><see cref="T:ceTe.DynamicPDF.Merger.ImportedPageContents"/> object containing the pages contents.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.ImportedPageData.#ctor(ceTe.DynamicPDF.Merger.ImportedPageContents,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Merger.ImportedPageData"/> class.
            </summary>
            <param name="contents"><see cref="T:ceTe.DynamicPDF.Merger.ImportedPageContents"/> object containing the pages contents.</param>
            <param name="xOffset">X offset of the placement on the page.</param>
            <param name="yOffset">Y offset of the placement on the page.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.ImportedPageData.#ctor(ceTe.DynamicPDF.Merger.ImportedPageContents,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Merger.ImportedPageData"/> class.
            </summary>
            <param name="contents"><see cref="T:ceTe.DynamicPDF.Merger.ImportedPageContents"/> object containing the pages contents.</param>
            <param name="xOffset">X offset of the placement on the page.</param>
            <param name="yOffset">Y offset of the placement on the page.</param>
            <param name="scale">Scale of the imported page.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.ImportedPageData.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the imported page data to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the imported page data output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.ImportedPageData.XOffset">
            <summary>
            Gets or sets the X offset of the page.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.ImportedPageData.YOffset">
            <summary>
            Gets or sets the Y offset of the page.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.ImportedPageData.ScaleX">
            <summary>
            Gets or sets the horizontal scale of the page.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.ImportedPageData.ScaleY">
            <summary>
            Gets or sets the vertical scale of the page.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.ImportedPageData.Width">
            <summary>
            Gets or sets the width of the page.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.ImportedPageData.Height">
            <summary>
            Gets or sets the height of the page.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.ImportedPageData.Angle">
            <summary>
            Gets or sets the angle of the page in degrees.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.ImportedPageData.Contents">
            <summary>
            Get the imported page data's <see cref="T:ceTe.DynamicPDF.Merger.ImportedPageContents"/> object.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Merger.MergeDocument">
            <summary>
            Represents a document that can merge and append other documents.
            </summary>
            <remarks>This is the primary class used to merge or append entire PDF documents or certain pages from existing documents.
            The merge document can be output to any object derived from the <see cref="T:System.IO.Stream"/> class that supports 
            writing and can easily be integrated with ASP.NET to stream the document to Internet Information Server's HTTP output stream.</remarks>
            <example>The following example will first merge two entire PDF documents together, then will Append a selected page of 
            a third PDF to the end.<p/>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.Merger
            
            Module MyModule
            
                Sub Main()
            
                    ' Create two PDF document objects
                    Dim MyPdfA As PdfDocument = New PdfDocument("C:\ImportPDFA.pdf")
                    Dim MyPdfB As PdfDocument = New PdfDocument("C:\ImportPDFB.pdf")
            
                    ' Merge the two documents
                    Dim MyDocument As MergeDocument = MergeDocument.Merge(MyPdfA, MyPdfB)
            
                    ' Append an additional document
                    Dim MyPdfC As PdfDocument = New PdfDocument("C:\MyDocumentC.pdf")
                    MyDocument.Append(MyPdfC, 2, 1)
            
                    ' Save the PDF
                    MyDocument.Draw("C:\MyDocument.pdf")
            
                End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.Merger;
            
            class MyClass
            {
                static void Main()
                {
                    // Create two PDF document objects
                    PdfDocument pdfA = new PdfDocument( @"C:\ImportPDFA.pdf" );
                    PdfDocument pdfB = new PdfDocument( @"C:\ImportPDFB.pdf" );
            
                    // Merge the two documents
                    MergeDocument document = MergeDocument.Merge( pdfA, pdfB );
            
                    // Append an additional document
                    PdfDocument pdfC = new PdfDocument( @"C:\MyDocumentC.pdf" );
                    document.Append( pdfC, 2, 1);
            
                    // Save the PDF
                    document.Draw( @"C:\MyDocument.pdf" );
                }
            }
            </code>
            </example>
            <licensing>
            This class is a DynamicPDF Merger Standard Edition feature (NOTE: Some properties require additional licensing and are noted accordingly). One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.Document">
             <summary>
             Represents a PDF Document.
             </summary>
             <remarks>
             This is the primary class used to generate the PDF document. It
             represents a single PDF Document and is made up of Pages and Outlines.
             The document can have a <see cref="P:ceTe.DynamicPDF.Document.Security"/> object associated with it
             to control document security and encryption. The document can be output
             to any object derived from the <see cref="T:System.IO.Stream"/> class that
             supports writing and can easily be integrated with ASP.NET to stream the
             document to Internet Information Server's HTTP output stream.
             </remarks>
             <example>This example shows how to use the document in the creation of a simple PDF document.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             
                 Sub Main()
             
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Add a label to the page
                     MyPage.Elements.Add(New Label("My PDF Document", 0, 0, 512, 40, Font.Helvetica, 30, TextAlign.Center))
             
                     ' Save the PDF document
                     MyDocument.Draw("C:\MyDocument.pdf")
             
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Add a label to the page 
                     page.Elements.Add( new Label( "My PDF Document", 0, 0, 512, 40, Font.Helvetica, 30, TextAlign.Center ) );
            
                     // Save the PDF document
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Community Edition feature. Some properties require additional licensing and are noted accordingly.
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Document.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Document"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Document.AddLicense(System.String)">
            <summary>
            Adds a license key.
            </summary>
            <param name="licenseKey">The license key to add.</param>
            <returns>A boolean value indicating if the license is valid.</returns>
            <remarks>This method accepts a license key, not a serial number.</remarks>
        </member>
        <member name="M:ceTe.DynamicPDF.Document.Draw">
             <summary>
             Outputs the generated <b>Document</b> to a byte array.
             </summary>
             <example>This example shows how to output the PDF to a byte array.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             
                 Sub Main()
             
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             		
                     ' Add a label to the page
                     MyPage.Elements.Add(New Label("My PDF Document", 0, 0, 512, 40, Font.Helvetica, 30, TextAlign.Center))
             
                     ' Save the PDF document to a byte array
                     Dim MyPdfData As Byte() = MyDocument.Draw()
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Add a label to the page 
                     page.Elements.Add( new Label( "My PDF Document", 0, 0, 512, 40, Font.Helvetica, 30, TextAlign.Center ) );
            
                     // Save the PDF document to a byte array
                     byte[] pdfData = document.Draw();
                 }
             }
             </code>
             </example>
             <exception cref="T:ceTe.DynamicPDF.GeneratorException">The PDF could not be created because of an internal problem.</exception>
             <exception cref="T:ceTe.DynamicPDF.Merger.MergerException">If DynamicPDF Merger is being used and a merging error ocured.</exception>
             <exception cref="T:ceTe.DynamicPDF.Merger.PdfParsingException">If DynamicPDF Merger is being used and one of the input PDF files cannot be parsed because it is likely corrupt or invalid.</exception>
        </member>
        <member name="M:ceTe.DynamicPDF.Document.Draw(System.String)">
             <summary>
             Outputs the generated <b>Document</b> to a file.
             </summary>
             <param name="filePath">File path to store the Document.</param>
             <example>This example shows how to output the PDF to a file.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             
                 Sub Main()
             
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             		
                     ' Add a label to the page
                     MyPage.Elements.Add(New Label("My PDF Document", 0, 0, 512, 40, Font.Helvetica, 30, TextAlign.Center))
             
                     ' Save the PDF document
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Add a label to the page 
                     page.Elements.Add( new Label( "My PDF Document", 0, 0, 512, 40, Font.Helvetica, 30, TextAlign.Center ) );
            
                     // Save the PDF document
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <exception cref="T:ceTe.DynamicPDF.GeneratorException">The PDF could not be created because of an internal problem.</exception>
             <exception cref="T:ceTe.DynamicPDF.Merger.MergerException">If DynamicPDF Merger is being used and a merging error ocured.</exception>
             <exception cref="T:ceTe.DynamicPDF.Merger.PdfParsingException">If DynamicPDF Merger is being used and one of the input PDF files cannot be parsed because it is likely corrupt or invalid.</exception>
        </member>
        <member name="M:ceTe.DynamicPDF.Document.Draw(System.IO.Stream)">
             <summary>
             Outputs the generated <b>Document</b> to the given <b>Stream</b> object.
             </summary>
             <param name="stream"><b>Stream</b> object that receive the <b>Document</b> output.</param>
             <example>This example shows how to output the document to a memory stream object.<p/>
             <code lang="VB">
             Imports System
             Imports System.IO
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             		
                     ' Add a label to the page
                     MyPage.Elements.Add(New Label("My PDF Document", 0, 0, 512, 40, Font.Helvetica, 30, TextAlign.Center))
             
                     ' Create a memory stream object to save to
                     Dim outputStream As MemoryStream = New MemoryStream
             		
                     ' Output the PDF to the MemoryStream
                     MyDocument.Draw(outputStream)
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using System.IO;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             		
                     // Add a label to the page 
                     page.Elements.Add( new Label( "My PDF Document", 0, 0, 512, 40, Font.Helvetica, 30, TextAlign.Center ) );
             		
                     // Create a memory stream object to save to
                     MemoryStream outputStream = new MemoryStream();
             		
                     // Output the PDF to the MemoryStream
                     document.Draw( outputStream );
                 }
             }
             </code>
             </example>
             <exception cref="T:ceTe.DynamicPDF.GeneratorException">The PDF could not be created because of an internal problem.</exception>
             <exception cref="T:ceTe.DynamicPDF.Merger.MergerException">If DynamicPDF Merger is being used and a merging error ocured.</exception>
             <exception cref="T:ceTe.DynamicPDF.Merger.PdfParsingException">If DynamicPDF Merger is being used and one of the input PDF files cannot be parsed because it is likely corrupt or invalid.</exception>
             <exception cref="T:ceTe.DynamicPDF.TimestampException">If there was failure in the connection or if there is no Timestamp Info present.</exception>
        </member>
        <member name="M:ceTe.DynamicPDF.Document.DrawToWeb">
             <summary>
             Outputs the generated <b>Document</b> to the current ASPX page.
             </summary>
             <example>This example shows how to output a PDF to the page.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Public Class MyClass
                 Inherits System.Web.UI.Page
            
                 Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             		
                     ' Add a label to the page
                     MyPage.Elements.Add(New Label("My PDF Document", 0, 0, 512, 40, Font.Helvetica, 30, TextAlign.Center))
             
                     ' Save the PDF document
                     MyDocument.DrawToWeb()
             		
                 End Sub
             End Class
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             public class MyClass : System.Web.UI.Page
             {
                 private void Page_Load(object sender, System.EventArgs e)
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             		
                     // Add a label to the page 
                     page.Elements.Add( new Label( "My PDF Document", 0, 0, 512, 40, Font.Helvetica, 30, TextAlign.Center ) );
            
                     // Save the PDF document
                     document.DrawToWeb();
                 }
             }
             </code>
             </example>
             <exception cref="T:ceTe.DynamicPDF.GeneratorException">The PDF could not be created because of an internal problem.</exception>
             <exception cref="T:ceTe.DynamicPDF.Merger.MergerException">If DynamicPDF Merger is being used and a merging error ocured.</exception>
             <exception cref="T:ceTe.DynamicPDF.Merger.PdfParsingException">If DynamicPDF Merger is being used and one of the input PDF files cannot be parsed because it is likely corrupt or invalid.</exception>
        </member>
        <member name="M:ceTe.DynamicPDF.Document.DrawToWeb(System.Boolean)">
            <summary>
            <font color="red">Obsolete.</font> Outputs the generated <b>Document</b> to the current ASPX page.
            </summary>
            <param name="allowBrowserCaching">Specifies if the browser should be allowed to cache the <b>Document</b>.</param>
            <remarks><font color="red">NOTE: This overload of this method is obsolete.</font> Use a DrawToWeb method that does now take the allowBrowserCaching property instead.</remarks>
        </member>
        <member name="M:ceTe.DynamicPDF.Document.DrawToWeb(System.String)">
             <summary>
             Outputs the generated <b>Document</b> to the current ASPX page.
             </summary>
             <param name="downloadAsFileName">Specifies the file name of the document if it is downloaded.</param>
             <example>This example shows how to output a PDF to the page.<p/>&gt;
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Public Class MyClass
                 Inherits System.Web.UI.Page
            
                 Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             		
                     ' Add a label to the page
                     MyPage.Elements.Add(New Label("My PDF Document", 0, 0, 512, 40, Font.Helvetica, 30, TextAlign.Center))
             
                     ' Save the PDF document
                     MyDocument.DrawToWeb("MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             public class MyClass : System.Web.UI.Page
             {
                 private void Page_Load(object sender, System.EventArgs e)
             	{
                     // Create a PDF Document
             		Document document = new Document();
            
             		// Create a Page and add it to the document
             		Page page = new Page();
             		document.Pages.Add( page );
             		
             		// Add a label to the page 
             		page.Elements.Add( new Label( "My PDF Document", 0, 0, 512, 40, Font.Helvetica, 30, TextAlign.Center ) );
            
             		// Save the PDF document
             		document.DrawToWeb( "MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <exception cref="T:ceTe.DynamicPDF.GeneratorException">The PDF could not be created because of an internal problem.</exception>
             <exception cref="T:ceTe.DynamicPDF.Merger.MergerException">If DynamicPDF Merger is being used and a merging error ocured.</exception>
             <exception cref="T:ceTe.DynamicPDF.Merger.PdfParsingException">If DynamicPDF Merger is being used and one of the input PDF files cannot be parsed because it is likely corrupt or invalid.</exception>
        </member>
        <member name="M:ceTe.DynamicPDF.Document.DrawToWeb(System.String,System.Boolean)">
             <summary>
             Outputs the generated <b>Document</b> to the current ASPX page.
             </summary>
             <param name="downloadAsFileName">Specifies the file name of the document if it is downloaded.</param>
             <param name="forceDownload">Specifies if the Save As dialog should appear.</param>
             <example>This example shows how to output a PDF to the page.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Public Class MyClass
                 Inherits System.Web.UI.Page
            
                 Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             		
                     ' Add a label to the page
                     MyPage.Elements.Add(New Label("My PDF Document", 0, 0, 512, 40, Font.Helvetica, 30, TextAlign.Center))
             
                     ' Save the PDF document
                     MyDocument.DrawToWeb("MyDocument.pdf", True)
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             public class MyClass : System.Web.UI.Page
             {
                 private void Page_Load(object sender, System.EventArgs e)
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             		
                     // Add a label to the page 
                     page.Elements.Add( new Label( "My PDF Document", 0, 0, 512, 40, Font.Helvetica, 30, TextAlign.Center ) );
            
                     // Save the PDF document
                     document.DrawToWeb( "MyDocument.pdf", true );
                 }
             }
             </code>
             </example>
             <exception cref="T:ceTe.DynamicPDF.GeneratorException">The PDF could not be created because of an internal problem.</exception>
             <exception cref="T:ceTe.DynamicPDF.Merger.MergerException">If DynamicPDF Merger is being used and a merging error ocured.</exception>
             <exception cref="T:ceTe.DynamicPDF.Merger.PdfParsingException">If DynamicPDF Merger is being used and one of the input PDF files cannot be parsed because it is likely corrupt or invalid.</exception>
        </member>
        <member name="M:ceTe.DynamicPDF.Document.DrawToWeb(System.Boolean,System.String,System.Boolean)">
            <summary>
            <font color="red">Obsolete.</font> Outputs the generated <b>Document</b> to the current ASPX page.
            </summary>
            <param name="allowBrowserCaching">Specifies if the browser should be allowed to cache the <b>Document</b>.</param>
            <param name="downloadAsFileName">Specifies the file name of the document if it is downloaded.</param>
            <param name="forceDownload">Specifies if the Save As dialog should appear.</param>
            <remarks><font color="red">NOTE: This overload of this method is obsolete.</font> Use a DrawToWeb method that does now take the allowBrowserCaching property instead.</remarks>
        </member>
        <member name="M:ceTe.DynamicPDF.Document.DrawToWebCache(System.String)">
            <summary>
            
            </summary>
            <param name="fileName"></param>
            <returns></returns>
            <licensing>
            This method is a DynamicPDF WebCache or DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF WebCache for .NET</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
            <exception cref="T:ceTe.DynamicPDF.GeneratorException">The PDF could not be created because of an internal problem.</exception>
            <exception cref="T:ceTe.DynamicPDF.Merger.MergerException">If DynamicPDF Merger is being used and a merging error ocured.</exception>
            <exception cref="T:ceTe.DynamicPDF.Merger.PdfParsingException">If DynamicPDF Merger is being used and one of the input PDF files cannot be parsed because it is likely corrupt or invalid.</exception>
        </member>
        <member name="M:ceTe.DynamicPDF.Document.RequireLicense(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Document.RequireLicense">
            <summary>
            
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Document.Sign(System.String,ceTe.DynamicPDF.Certificate)">
            <summary>
            Sign this document digitally.
            </summary>
            <remarks>
            <font color="red"><b>NOTE:</b> This method requires the .NET Framework 2.0 or greater.</font><p/>
            To sign with visible signature, give the <see cref="T:System.Signature"/> field name which is already added into any of the document pages. 
            To sign with invisible, use a different name which does not assign for any of the page elements added into this document pages.
            Giving existing field name of other page elements apart from <see cref="T:System.Signature"/> will make the document unsigned.
            </remarks>
            <exception cref="T:ceTe.DynamicPDF.GeneratorException">
            If the document is signed more than once.
            </exception>
            <example> This exmaple shows how to sign a PDF document with an invisible signature. 
            <code lang="VB">
            Imports ceTe.DynamicPDF
             
            Module MyModule
             
                Sub Main() 
                    
                    ' Create a PDF Document
                    Dim MyDocument As Document = New Document
             
                    ' Create a PDF Page
                    Dim MyPage As Page = New Page
             
                    ' Add the page to the document
                    MyDocument.Pages.Add(MyPage)
             
                    ' Create a Certificate using the system default store
                    Dim MyCertificate As Certificate = New Certificate("CertificateSubject")
             
                    ' Add an Invisible Signature (Signing the document)
                    MyDocument.Sign("NewFieldName", MyCertificate)
             
                    ' Save the document
                    MyDocument.Draw("C:\MySignedDocument.pdf")
             
                End Sub
             
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
             
            class MyClass
            {
                static void Main(string[] args)
                {
                    // Create a PDF Document
                    Document document = new Document();
             
                    // Create a PDF Page
                    Page page = new Page();
             
                    // Add the page to the document
                    document.Pages.Add(page);
             
                    // Create a Certificate using the system default store
                    Certificate certificate = new Certificate("CertificateSubject");
                    
                    // Sign the document - Invisible
                    document.Sign("NewFieldName", certificate);
             
                    // Save the document
                    document.Draw(@"C:\MySignedDocument.pdf");        
                }
            }
            </code>
            </example>
            <param name="fieldName">Field name of the signature.</param>
            <param name="certificate">Reference of type <see cref="T:ceTe.DynamicPDF.Certificate"/></param>
            <licensing>
            This method is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Document.Sign(System.String,ceTe.DynamicPDF.Certificate,ceTe.DynamicPDF.TimestampServer)">
            <summary>
            Digitally sign this document with Timestamping.
            </summary>
            <exception cref="T:ceTe.DynamicPDF.GeneratorException">
            If the document is signed more than once.
            </exception>
            <example> This exmaple shows how to sign a PDF document with an invisible signature and Timestamp the signature. 
            <code lang="VB">
            Imports ceTe.DynamicPDF
             
            Module MyModule
             
                Sub Main() 
                    
                    ' Create a PDF Document
                    Dim MyDocument As Document = New Document
             
                    ' Create a PDF Page
                    Dim MyPage As Page = New Page
             
                    ' Add the page to the document
                    MyDocument.Pages.Add(MyPage)
             
                    ' Create a Certificate using the system default store
                    Dim MyCertificate As Certificate = New Certificate("CertificateSubject")
             
                    ' Create a TimestampServer by passing the Url of the server.
                    Dim MyTimestampServer As TimestampServer = New TimestampServer("Url to the TimestampServer");
            
                    ' Add an Invisible Signature (Signing the document)
                    MyDocument.Sign("NewFieldName", MyCertificate)
             
                    ' Save the document
                    MyDocument.Draw("C:\MyTimestampedDocument.pdf")
             
                End Sub
             
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
             
            class MyClass
            {
                static void Main(string[] args)
                {
                    // Create a PDF Document
                    Document document = new Document();
             
                    // Create a PDF Page
                    Page page = new Page();
             
                    // Add the page to the document
                    document.Pages.Add(page);
             
                    // Create a Certificate using the system default store
                    Certificate certificate = new Certificate("CertificateSubject");
                    
                    // Create a TimestampServer by passing the Url of the server.
                    TimestampServer timestampServer = new TimestampServer("http://ServerURL");
            
                    // Sign and timestamp the document - Invisible
                    document.Sign("NewFieldName", certificate, timestampServer);
             
                    // Save the document
                    document.Draw(@"C:\MyTimestampedDocument.pdf");        
                }
            }
            </code>
            </example>
            <param name="fieldName">Field name of the signature.</param>
            <param name="certificate">Reference of type <see cref="T:ceTe.DynamicPDF.Certificate"/>.</param>
            <param name="timestampServer">Reference of type <see cref="T:ceTe.DynamicPDF.TimestampServer"/>.</param>
            <licensing>
            This method is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Document.Sign(System.String,ceTe.DynamicPDF.Certificate,System.Boolean)">
            <summary>
            Digitally sign this document with Timestamping.
            </summary>
            <exception cref="T:ceTe.DynamicPDF.GeneratorException">
            If the document is signed more than once.
            </exception>
            <remarks> If the document is set for Timestamping then the Certificate should contain the details for Timestamping.</remarks>
            <example> This exmaple shows how to sign a PDF document with an invisible signature and Timestamp the signature. 
            <code lang="VB">
            Imports ceTe.DynamicPDF
             
            Module MyModule
             
                Sub Main() 
                    
                    ' Create a PDF Document
                    Dim MyDocument As Document = New Document
             
                    ' Create a PDF Page
                    Dim MyPage As Page = New Page
             
                    ' Add the page to the document
                    MyDocument.Pages.Add(MyPage)
             
                    ' Create a Certificate using the system default store
                    Dim MyCertificate As Certificate = New Certificate("CertificateSubject")
             
                    ' Add an Invisible Signature (Signing the document) and mention to Timestamp the signature.
                    MyDocument.Sign("NewFieldName", MyCertificate, true)
             
                    ' Save the document
                    MyDocument.Draw("C:\MyTimestampedDocument.pdf")
             
                End Sub
             
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
             
            class MyClass
            {
                static void Main(string[] args)
                {
                    // Create a PDF Document
                    Document document = new Document();
             
                    // Create a PDF Page
                    Page page = new Page();
             
                    // Add the page to the document
                    document.Pages.Add(page);
             
                    // Create a Certificate using the system default store
                    Certificate certificate = new Certificate("CertificateSubject");
                    
                    // Sign the document - Invisible and mention to Timestamp the signature
                    document.Sign("NewFieldName", certificate, true);
             
                    // Save the document
                    document.Draw(@"C:\MyTimestampedDocument.pdf");        
                }
            }
            </code>
            </example>
            <param name="fieldName">Field name of the signature.</param>
            <param name="certificate">Reference of type <see cref="T:ceTe.DynamicPDF.Certificate"/>.</param>
            <param name="timeStamp">Timestamp the document using details from the certificate.</param>
            <licensing>
            This method is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Document.Certify(System.String,ceTe.DynamicPDF.Certificate,ceTe.DynamicPDF.CertifyingPermission)">
             <summary>
             Certifies with signing the document digitally.
             </summary>
            <example> This exmaple shows how to certify a PDF document with an invisible signature. 
             <code lang="VB">
             Imports ceTe.DynamicPDF
              
             Module MyModule
              
                 Sub Main() 
                     
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document
              
                     ' Create a PDF Page
                     Dim MyPage As Page = New Page
              
                     ' Add the page to the document
                     MyDocument.Pages.Add(MyPage)
              
                     ' Create a Certificate using the system default store
                     Dim MyCertificate As Certificate = New Certificate("Certificate Subject")
              
                     ' Certifies with an Invisible Signature (Signing the document)
                     MyDocument.Certify("NewFieldName", MyCertificate, CertifyingPermission.AllowFormFilling)
              
                     ' Save the document
                     MyDocument.Draw("C:\MyCertifiedDocument.pdf")
              
                 End Sub
              
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
              
             class MyClass
             {
                 static void Main(string[] args)
                 {
                     // Create a PDF Document
                     Document document = new Document();
              
                     // Create a PDF Page
                     Page page = new Page();
              
                     // Add the page to the document
                     document.Pages.Add(page);
              
                     // Create a Certificate using the system default store
                     Certificate certificate = new Certificate("Certificate Subject");
                     
                     // Certify the document - Invisible
                     document.Certify("NewFieldName", certificate, CertifyingPermission.AllowFormFilling);
              
                     // Save the document
                     document.Draw(@"C:\MyCertifiedDocument.pdf");        
                 }
             }
             </code>
             </example>
             <param name="fieldName">Field name of the signature.</param>
             <param name="certificate">Reference of type <see cref="T:ceTe.DynamicPDF.Certificate"/>.</param>
             <param name="permissions"><see cref="P:ceTe.DynamicPDF.Document.CertifyingPermission"/> for the signature.</param>
             <licensing>
             This method is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Document.Certify(System.String,ceTe.DynamicPDF.Certificate,ceTe.DynamicPDF.TimestampServer,ceTe.DynamicPDF.CertifyingPermission)">
            <summary>
            Certifies with signing and Timestamping the document digitally.
            </summary>
            <example> This exmaple shows how to certify a PDF document with an invisible signature and Timestamp the signature. 
            <code lang="VB">
            Imports ceTe.DynamicPDF
             
            Module MyModule
             
                Sub Main() 
                    
                    ' Create a PDF Document
                    Dim MyDocument As Document = New Document
             
                    ' Create a PDF Page
                    Dim MyPage As Page = New Page
             
                    ' Add the page to the document
                    MyDocument.Pages.Add(MyPage)
             
                    ' Create a Certificate using the system default store
                    Dim MyCertificate As Certificate = New Certificate("CertificateSubject")
             
                    ' Create a TimestampServer by passing the Url of the server.
                    Dim MyTimestampServer As TimestampServer = New TimestampServer("http://TimestampServerURL");
            
                    ' Certifies with an Invisible Signature (Signing the document)
                    MyDocument.Certify("NewFieldName", MyCertificate, CertifyingPermission.AllowFormFilling)
             
                    ' Save the document
                    MyDocument.Draw("C:\MyCertifiedDocument.pdf")
             
                End Sub
             
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
             
            class MyClass
            {
                static void Main(string[] args)
                {
                    // Create a PDF Document
                    Document document = new Document();
             
                    // Create a PDF Page
                    Page page = new Page();
             
                    // Add the page to the document
                    document.Pages.Add(page);
             
                    // Create a Certificate using the system default store
                    Certificate certificate = new Certificate("CertificateSubject");
                    
                    // Create a TimestampServer by passing the Url of the server.
                    TimestampServer timestampServer = new TimestampServer("http://TimestampServerURL");
            
                    // Certify and timestamp the document - Invisible
                    document.Certify("NewFieldName", certificate, timestampServer, CertifyingPermission.AllowFormFilling);
             
                    // Save the document
                    document.Draw(@"C:\MyCertifiedDocument.pdf");        
                }
            }
            </code>
            </example>
            <param name="fieldName">Field name of the signature.</param>
            <param name="certificate">Reference of type <see cref="T:ceTe.DynamicPDF.Certificate"/>.</param>
            <param name="timestampServer">Reference of type <see cref="T:ceTe.DynamicPDF.TimestampServer"/>.</param>
            <param name="permission"><see cref="P:ceTe.DynamicPDF.Document.CertifyingPermission"/> for the signature.</param>
            <licensing>
            This method is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Document.Certify(System.String,ceTe.DynamicPDF.Certificate,System.Boolean,ceTe.DynamicPDF.CertifyingPermission)">
            <summary>
            Certifies with signing and Timestamping the document digitally.
            </summary>
            <remarks> If the document is set for Timestamping then the Certificate should contain the details for Timestamping.</remarks>
            <example> This exmaple shows how to certify a PDF document with an invisible signature and Timestamp the signature. 
            <code lang="VB">
            Imports ceTe.DynamicPDF
             
            Module MyModule
             
                Sub Main() 
                    
                    ' Create a PDF Document
                    Dim MyDocument As Document = New Document
             
                    ' Create a PDF Page
                    Dim MyPage As Page = New Page
             
                    ' Add the page to the document
                    MyDocument.Pages.Add(MyPage)
             
                    ' Create a Certificate using the system default store
                    Dim MyCertificate As Certificate = New Certificate("CertificateSubject")
             
                    ' Certify with an Invisible Signature (Signing the document) and mention to Timestamp the signature.
                    MyDocument.Certify("NewFieldName", MyCertificate, true, CertifyingPermission.AllowFormFilling)
             
                    ' Save the document
                    MyDocument.Draw("C:\MyCertifiedDocument.pdf")
             
                End Sub
             
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
             
            class MyClass
            {
                static void Main(string[] args)
                {
                    // Create a PDF Document
                    Document document = new Document();
             
                    // Create a PDF Page
                    Page page = new Page();
             
                    // Add the page to the document
                    document.Pages.Add(page);
             
                    // Create a Certificate using the system default store
                    Certificate certificate = new Certificate("CertificateSubject");
                    
                    // Certify the document - Invisible and mention to Timestamp the signature
                    document.Certify("NewFieldName", certificate, true, CertifyingPermission.AllowFormFilling);
             
                    // Save the document
                    document.Draw(@"C:\MyCertifiedDocument.pdf");        
                }
            }
            </code>
            </example>
            <param name="fieldName">Field name of the signature.</param>
            <param name="certificate">Reference of type <see cref="T:ceTe.DynamicPDF.Certificate"/>.</param>
            <param name="timeStamp">Timestamp the document using details from the certificate.</param>
            <param name="permission"><see cref="P:ceTe.DynamicPDF.Document.CertifyingPermission"/> for the signature.</param>
            <licensing>
            This method is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Document.DrawRootEntries(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Outputs the catalog entries to the <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/>.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to write the catalog entries.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.DefaultPdfFormat">
            <summary>
            Gets or sets the default format for the PDF document.
            </summary>
            <remarks>This property will determine whether the document is linearized or not.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.DefaultPdfVersion">
            <summary>
            Gets or sets the default version for the PDF document.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.ViewerPreferences">
            <summary>
            Gets a <see cref="P:ceTe.DynamicPDF.Document.ViewerPreferences"/> object that represents the viewer preferences of the <b>Document</b>.
            </summary>
            <value>The documents <see cref="P:ceTe.DynamicPDF.Document.ViewerPreferences"/> object.</value>
            <example>This example shows how to change the viewer preferences associated with a document.<p/>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            
            Module MyModule
            		
            	Sub Main()
            
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document
            
            		' Create a Page and add it to the document
            		MyDocument.Pages.Add(New Page(PageSize.Letter))
            		
            		' Set the viewer preferences
            		MyDocument.ViewerPreferences.CenterWindow = True
            		MyDocument.ViewerPreferences.DisplayDocTitle = False
            		MyDocument.ViewerPreferences.HideMenubar = True
            		MyDocument.ViewerPreferences.HideToolbar = True
            		MyDocument.ViewerPreferences.HideWindowUI = True
            		
            		' Save the PDF document
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            	End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            		
            		// Create a page and add it to the document
            		document.Pages.Add( new Page( PageSize.Letter ) );
            		
            		// Set the viewer preferences
            		document.ViewerPreferences.CenterWindow = true;
            		document.ViewerPreferences.DisplayDocTitle = false;
            		document.ViewerPreferences.HideMenubar = true;
            		document.ViewerPreferences.HideToolbar = true;
            		document.ViewerPreferences.HideWindowUI = true;
            		
            		// Save the PDF document
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.Template">
            <summary>
            Gets or sets a <see cref="P:ceTe.DynamicPDF.Document.Template"/> object for the <b>Document</b>.  All page elements within this Template will appear in the background of the other contents of the PDF.
            </summary>
            <value>The documents <see cref="P:ceTe.DynamicPDF.Document.Template"/> object.</value>
            <remarks>See the <a href="Templates.html">Templates</a> topic for more on templates.</remarks>
            <example>This example shows how to create an EvenOddTemplate and Add it to the document.<p/>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document
            		
            		' Add 5 blank pages to the document
            		MyDocument.Pages.Add(New Page(PageSize.Letter))
            		MyDocument.Pages.Add(New Page(PageSize.Letter))
            		MyDocument.Pages.Add(New Page(PageSize.Letter))
            		MyDocument.Pages.Add(New Page(PageSize.Letter))
            		MyDocument.Pages.Add(New Page(PageSize.Letter))
            		
            		' Create an even odd template and add elements to it
            		Dim MyTemplate As EvenOddTemplate = New EvenOddTemplate
            		MyTemplate.EvenElements.Add(New Label("Even Header", 0, 0, 200, 12))
            		MyTemplate.OddElements.Add(New Label("Odd Header", 0, 0, 200, 12)) 
            		MyTemplate.Elements.Add(New Label("Footer", 0, 680, 200, 12))
            		
            		' Add the template to the document
            		MyDocument.Template = MyTemplate
            
            		' Save the PDF document
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            		
            		// Add 5 blank pages to the document
            		document.Pages.Add( new Page( PageSize.Letter ) );
            		document.Pages.Add( new Page( PageSize.Letter ) );
            		document.Pages.Add( new Page( PageSize.Letter ) );
            		document.Pages.Add( new Page( PageSize.Letter ) );
            		document.Pages.Add( new Page( PageSize.Letter ) );
            		
            		// Create an even odd template and add elements to it
            		EvenOddTemplate template = new EvenOddTemplate();
            		template.EvenElements.Add( new Label( "Even Header", 0, 0, 200, 12 ) );
            		template.OddElements.Add( new Label( "Odd Header", 0, 0, 200, 12 ) );
            		template.Elements.Add( new Label( "Footer", 0, 680, 200, 12 ) );
            		
            		// Add the template to the document
            		document.Template = template;
            		
            		// Save the PDF document
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.StampTemplate">
            <summary>
            Gets or sets a <see cref="P:ceTe.DynamicPDF.Document.Template"/> object for the <b>Document</b>.  All page elements within this Template will appear in the foreground of the other contents of the PDF.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.Sections">
            <summary>
            Gets a <see cref="T:ceTe.DynamicPDF.SectionList"/> object for the <b>Document</b>.
            </summary>
            <value>The documents <see cref="T:ceTe.DynamicPDF.SectionList"/> object.</value>
            <remarks>Used to break a document into sections.  See the <a href="Document Sectioning.html">Document Sectioning</a> topic for 
            more details.</remarks>
            <example>This example shows how to break the document into different sections.<p/>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            
            Module MyModule
            		
            	Sub Main()
            
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document
            		
            		'Create a template object and add a page numbering label
            		Dim MyTemplate As Template = New Template
            		MyTemplate.Elements.Add(New PageNumberingLabel("%%SP%% of %%ST%%", 0, 680, 512, 12, Font.Helvetica, 12, TextAlign.Center))
            		
            		'Add the template to the document
            		MyDocument.Template = MyTemplate
            		
            		'Begin the first section
            		MyDocument.Sections.Begin(NumberingStyle.RomanLowerCase)
            		'Add two pages
            		MyDocument.Pages.Add(New Page)     'Page 1
            		MyDocument.Pages.Add(New Page)     'Page 2
            		
            		'Begin the second section
            		MyDocument.Sections.Begin(NumberingStyle.Numeric, MyTemplate)
            		'Add three pages
            		MyDocument.Pages.Add(New Page)     'Page 3
            		MyDocument.Pages.Add(New Page)     'page 4
            		MyDocument.Pages.Add(New Page)     'page 5
            		
            		'Begin the third section specifying a section prefix
            		MyDocument.Sections.Begin(NumberingStyle.RomanLowerCase, "Appendix A - ")
            		'Add two pages
            		MyDocument.Pages.Add(New Page)     'page 6
            		MyDocument.Pages.Add(New Page)     'page 7
            		
            		' Save the PDF document
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            	End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            		
            		//Create a template object and add a page numbering label
            		Template template = new Template();
            		template.Elements.Add( new PageNumberingLabel( "%%SP%% of %%ST%%", 0, 680, 512, 12, Font.Helvetica, 12, TextAlign.Center ) );
            		
            		document.Template = template;
            		
            		//Begin the first section
            		document.Sections.Begin( NumberingStyle.RomanLowerCase );
            		//Add two pages
            		document.Pages.Add( new Page() ); //Page 1
            		document.Pages.Add( new Page() ); //Page 2
            		
            		//Begin the second section
            		document.Sections.Begin( NumberingStyle.Numeric, template );
            		//Add three pages
            		document.Pages.Add( new Page() ); //Page 3
            		document.Pages.Add( new Page() ); //page 4
            		document.Pages.Add( new Page() ); //page 5
            		
            		//Begin the third section specifying a section prefix
            		document.Sections.Begin( NumberingStyle.RomanLowerCase, "Appendix A - " );
            		//Add two pages
            		document.Pages.Add( new Page() ); //page 6
            		document.Pages.Add( new Page() ); //page 7
            		
            		// Save the PDF document
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            	</code>
            </example>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.PdfFormat">
            <summary>
            Gets or sets the PDF format for the PDF document. 
            </summary>
            <remarks>This property will determine whether the document is linearized or not.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.PdfXVersion">
            <summary>
            Gets or sets the PDF/X version for the <b>Document</b>.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.Trapped">
            <summary>
            Gets or sets a value indicating if trapping information is present in the <b>Document</b>.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.OutputIntents">
            <summary>
            Gets the output intent list for the <b>Document</b>.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.Pages">
            <summary>
            Gets a <see cref="T:ceTe.DynamicPDF.PageList"/> object that represents the pages of the <b>Document</b>.
            </summary>
            <value>The collection of pages for the <b>Document</b></value>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.Outlines">
            <summary>
            Gets an <see cref="T:ceTe.DynamicPDF.OutlineList"/> object that represents the top level outlines of the <b>Document</b>.
            </summary>
            <remarks>See the <a href="Outlines and BookMarks.html">Outlines and Bookmarks</a> topic for more on Outlines.</remarks>
            <example>This example shows how to create an outline for a PDF document.<p/>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            
            Module MyModule
            		
            	Sub Main()
            
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document
            
            		' Add three blank pages
            		MyDocument.Pages.Add(New Page(PageSize.Letter))
            		MyDocument.Pages.Add(New Page(PageSize.Letter))
            		MyDocument.Pages.Add(New Page(PageSize.Letter))
            
            		' Add a top level outline and set properties
            		Dim MyOutline1 As Outline = MyDocument.Outlines.Add("Outline1")
            		MyOutline1.Style = TextStyle.Bold
            		MyOutline1.Color = New RgbColor(1.0F, 0.0F, 0.0F)
            
            		' Add child outlines
            		Dim MyOutline1A As Outline = MyOutline1.ChildOutlines.Add("Outline1A", New ZoomDestination(2, PageZoom.FitPage))
            		MyOutline1A.Expanded = False
            		Dim MyOutline1A1 As Outline = MyOutline1A.ChildOutlines.Add("Outline1A1", New XYDestination(2, 0, 0))
            		Dim MyOutline1A2 As Outline = MyOutline1A.ChildOutlines.Add("Outline1A2", New ZoomDestination(2, PageZoom.FitHeight))
            		Dim MyOutline1B As Outline = MyOutline1.ChildOutlines.Add("Outline1B", New ZoomDestination(2, PageZoom.FitWidth))
            		
            		' Add a second top level outline
            		Dim MyOutline2 As Outline = MyDocument.Outlines.Add("Outline2", New XYDestination(3, 0, 300))
            		
            		' Add a child outline
            		Dim MyOutline2A As Outline = MyOutline2.ChildOutlines.Add("Outline2A")
            		
            		' Save the PDF document
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            		
            		// Add three blank pages
            		document.Pages.Add( new Page( PageSize.Letter ) );
            		document.Pages.Add( new Page( PageSize.Letter ) );
            		document.Pages.Add( new Page( PageSize.Letter ) );
            		
            		// Add a top level outline and set properties
            		Outline outline1 = document.Outlines.Add( "Outline1" );
            		outline1.Style = TextStyle.Bold;
            		outline1.Color = new RgbColor( 1.0f, 0.0f, 0.0f );
            		
            		// Add child outlines
            		Outline outline1A = outline1.ChildOutlines.Add( "Outline1A", new ZoomDestination( 2, PageZoom.FitPage ) );
            		outline1A.Expanded = false;
            		Outline outline1A1 = outline1A.ChildOutlines.Add( "Outline1A1", new XYDestination( 2, 0, 0 ) );
            		Outline outline1A2 = outline1A.ChildOutlines.Add( "Outline1A2", new ZoomDestination( 2, PageZoom.FitHeight ) );
            		Outline outline1B = outline1.ChildOutlines.Add( "Outline1B", new ZoomDestination( 2, PageZoom.FitWidth ) );
            		
            		// Add a second top level outline
            		Outline outline2 = document.Outlines.Add( "Outline2", new XYDestination( 3, 0, 300 ) );
            		
            		// Add a child outline
            		Outline outline2A = outline2.ChildOutlines.Add( "Outline2A" );
            		
            		// Save the PDF document
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
            <licensing>
            This property is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.InitialPageZoom">
            <summary>
            Gets or sets a value indicating the initial zoom of the <b>Document</b>.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.InitialPageMode">
            <summary>
            Gets or sets a value indicating the initial page mode of the <b>Document</b>.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.InitialPageLayout">
            <summary>
            Gets or sets a value indicating the initial layout of the <b>Document</b>.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.InitialPage">
            <summary>
            Gets or sets a value indicating the initial page of the <b>Document</b>.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.Producer">
            <summary>
            Gets or sets a value indicating the producer of the <b>Document</b>.
            </summary>
            <remarks>This value appears as a property of the generated PDF document.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.Author">
            <summary>
            Gets or sets a value indicating the author of the <b>Document</b>.
            </summary>
            <remarks>This value appears as a property of the generated PDF document.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.Language">
            <summary>
            Gets or sets a value indicating the language of the <b>Document</b>.
            </summary>
            <remarks>This value appears as the language identifier property of the generated PDF document.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.Creator">
            <summary>
            Gets or sets a value indicating the creator of the <b>Document</b>.
            </summary>
            <remarks>This value appears as a property of the generated PDF document.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.Keywords">
            <summary>
            Gets or sets a value indicating the keywords of the <b>Document</b>.
            </summary>
            <remarks>This value appears as a property of the generated PDF document.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.Subject">
            <summary>
            Gets or sets a value indicating the subject of the <b>Document</b>.
            </summary>
            <remarks>This value appears as a property of the generated PDF document.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.Title">
            <summary>
            Gets or sets a value indicating the title of the <b>Document</b>.
            </summary>
            <remarks>This value appears as a property of the generated PDF document.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.CompressionLevel">
            <summary>
            Gets or sets a value indicating the compression level of the <b>Document</b>.
            </summary>
            <remarks>A value from 0 to 9 indicating the compression level of the 
            document. Six (6) is the default. Zero (0) represents no compression and
            nine (9) represents the best compression. This value will only affect the
            compression of the content streams of the documents pages. Depending
            on the type of document you are creating, it may not affect the size
            significantly.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.Security">
             <summary>
             Gets or sets an object to control the security and encryption of the <b>Document</b>.
             </summary>
             <remarks>This object controls the encryption and security of the generated PDF document.</remarks>
             <example>The following example will set the RC4 128 bit security of the document so that anyone who logs in 
             with the user password will not be able to print at high resolution, edit or add annotations or form fields, or access this document from other accessibility programs.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.Cryptography
             
             Module MyModule
             		
             	Sub Main()
             
             		' Create a PDF Document
             		Dim MyDocument As Document = New Document 
             		
             		' Create a Page and add it to the document
             		Dim MyPage As Page = New Page
             		MyDocument.Pages.Add(MyPage)
             
             		' Create a RC4 128 bit security object
             		Dim security As RC4128Security = New RC4128Security("owner", "user")
             
             		' Set the permissions on that security object
             		security.AllowAccessibility = False
             		security.AllowDocumentAssembly = False
             		security.AllowHighResolutionPrinting = False
             
             		' Add the security object to the document
             		MyDocument.Security = security
             
             		' Create and display a label as a reference
             		Dim text As String = "This document has been encrypted with RC4 128 bit encryption."
             		MyPage.Elements.Add(New Label(text, 50, 50, 400, 100, Font.Helvetica, 18))
             
             		' Save the PDF
             		MyDocument.Draw("C:\MyDocument.pdf")
             		
             	End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.Cryptography;
             
             class MyClass
             {
             	static void Main()
             	{
             		// Create a PDF Document
             		Document document = new Document();
            
             		// Create a Page and add it to the document
             		Page page = new Page();
             		document.Pages.Add( page );
             
             		// Create a RC4 128 bit security object
             		RC4128Security security = new RC4128Security( "owner", "user" );
             
             		// Set the permissions on that security object
             		security.AllowAccessibility = false;
             		security.AllowDocumentAssembly = false;
             		security.AllowUpdateAnnotsAndFields = false;
             
             		// Add the security object to the document
             		document.Security = security;
             
             		// Create and display a label as a reference
             		string text = "This document has been encrypted with RC4 128 bit encryption.";
             		page.Elements.Add( new Label( text, 50, 50, 400, 100, Font.Helvetica, 18 ) );
             
             		// Save the PDF
             		document.Draw( @"C:\MyDocument.pdf" );
             	}
             }
             </code>
             </example>
             <licensing>
             This property is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.Form">
            <summary>
            Gets or sets a form object for the PDF document.
            </summary>
            <licensing>
            Reading the values or properties of a field is a DynamicPDF Merger Standard Edition feature (for modifying field values see below). One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            Modiying the values of the fields (i.e. form filling) is a Professional Edition Feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.PdfVersion">
            <summary>
            Gets or sets the PDF version of the PDF document.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.XmpMetadata">
            <summary>
            Gets or sets the XMP metadata for the PDF document.
            </summary>
            <example>This example shows how to create XMP metadata and add it to the document.<p/>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.Xmp
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document
            		
            		' Add blank pages to the document
            		MyDocument.Pages.Add(New Page(PageSize.Letter))
            		MyDocument.Pages.Add(New Page(PageSize.Letter))
            		
            		' Create an Xmp Metadata
            		Dim MyXmp As XmpMetadata = New XmpMetadata
            		
            		' Add the Xmp Metadata to the document
            		MyDocument.XmpMetadata = MyXmp
            
            		' Save the PDF document
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.Xmp;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            		
            		// Add blank pages to the document
            		document.Pages.Add( new Page( PageSize.Letter ) );
            		document.Pages.Add( new Page( PageSize.Letter ) );
            		
            		// Create an Xmp Metadata
            		XmpMetadata xmp = new XmpMetadata();
            		
            		// Add the Xmp Metadata to the document
            		document.XmpMetadata = xmp;
            		
            		// Save the PDF document
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
            <licensing>
            This property is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.JavaScripts">
            <summary>
            Gets a <see cref="T:ceTe.DynamicPDF.DocumentJavaScriptList"/> containing the JavaScript entries for that document.
            </summary>
            <licensing>
            This property is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.EmbeddedFiles">
            <summary>
            Gets an <see cref="T:ceTe.DynamicPDF.EmbeddedFileList"/> containing the EmbeddedFile for the document.
            </summary>
            <licensing>
            This property is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.Tag">
            <summary>
            Gets or sets a value indicating whether document is tagged.
            </summary>
            <licensing>
            This property is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>        
        </member>
        <member name="P:ceTe.DynamicPDF.Document.ProductVersion">
            <summary>
            Gets the product version.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.ProductBuild">
            <summary>
            Gets the product build.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.FormFlattening">
            <summary>
            Gets or sets the form flattening options for the PDF document.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.MergeDocument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Merger.MergeDocument"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.MergeDocument.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Merger.MergeDocument"/> class.
            </summary>
            <param name="filePath">The physical file path of the PDF to import.</param>
            <exception cref="T:ceTe.DynamicPDF.Merger.PdfParsingException">The PDF file cannot be parsed because it is likely corrupt or invalid.</exception>
            <exception cref="T:ceTe.DynamicPDF.Merger.PdfSecurityException">The PDF file cannot be read because it is encrypted and the owner password is incorrect or not supplied.</exception>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.MergeDocument.#ctor(ceTe.DynamicPDF.Merger.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Merger.MergeDocument"/> class.
            </summary>
            <param name="pdfDocument">The <see cref="T:ceTe.DynamicPDF.Merger.PdfDocument"/> to import.</param>
            <exception cref="T:ceTe.DynamicPDF.Merger.PdfParsingException">The PDF file cannot be parsed because it is likely corrupt or invalid.</exception>
            <exception cref="T:ceTe.DynamicPDF.Merger.PdfSecurityException">The PDF file cannot be read because it is encrypted and the owner password is incorrect or not supplied.</exception>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.MergeDocument.#ctor(System.String,ceTe.DynamicPDF.Merger.MergeOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Merger.MergeDocument"/> class.
            </summary>
            <param name="filePath">The physical file path of the PDF to import.</param>
            <param name="options">A <see cref="T:ceTe.DynamicPDF.Merger.MergeOptions"/> object specifying the merge options.</param>
            <exception cref="T:ceTe.DynamicPDF.Merger.PdfParsingException">The PDF file cannot be parsed because it is likely corrupt or invalid.</exception>
            <exception cref="T:ceTe.DynamicPDF.Merger.PdfSecurityException">The PDF file cannot be read because it is encrypted and the owner password is incorrect or not supplied.</exception>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.MergeDocument.#ctor(ceTe.DynamicPDF.Merger.PdfDocument,ceTe.DynamicPDF.Merger.MergeOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Merger.MergeDocument"/> class.
            </summary>
            <param name="pdfDocument">The <see cref="T:ceTe.DynamicPDF.Merger.PdfDocument"/> to import.</param>
            <param name="options">A <see cref="T:ceTe.DynamicPDF.Merger.MergeOptions"/> object specifying the merge options.</param>
            <exception cref="T:ceTe.DynamicPDF.Merger.PdfParsingException">The PDF file cannot be parsed because it is likely corrupt or invalid.</exception>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.MergeDocument.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Merger.MergeDocument"/> class.
            </summary>
            <param name="filePath">The physical file path of the PDF to import.</param>
            <param name="startPage">The page to start importing from.</param>
            <param name="pageCount">The number of pages to import.</param>
            <exception cref="T:ceTe.DynamicPDF.Merger.PdfParsingException">The PDF file cannot be parsed because it is likely corrupt or invalid.</exception>
            <exception cref="T:ceTe.DynamicPDF.Merger.PdfSecurityException">The PDF file cannot be read because it is encrypted and the owner password is incorrect or not supplied.</exception>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.MergeDocument.#ctor(ceTe.DynamicPDF.Merger.PdfDocument,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Merger.MergeDocument"/> class.
            </summary>
            <param name="pdfDocument">The <see cref="T:ceTe.DynamicPDF.Merger.PdfDocument"/> to import.</param>
            <param name="startPage">The page to start importing from.</param>
            <param name="pageCount">The number of pages to import.</param>
            <exception cref="T:ceTe.DynamicPDF.Merger.PdfParsingException">The PDF file cannot be parsed because it is likely corrupt or invalid.</exception>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.MergeDocument.#ctor(System.String,System.Int32,System.Int32,ceTe.DynamicPDF.Merger.MergeOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Merger.MergeDocument"/> class.
            </summary>
            <param name="filePath">The physical file path of the PDF to import.</param>
            <param name="startPage">The page to start importing from.</param>
            <param name="pageCount">The number of pages to import.</param>
            <param name="options">A <see cref="T:ceTe.DynamicPDF.Merger.MergeOptions"/> object specifying the merge options.</param>
            <exception cref="T:ceTe.DynamicPDF.Merger.PdfParsingException">The PDF file cannot be parsed because it is likely corrupt or invalid.</exception>
            <exception cref="T:ceTe.DynamicPDF.Merger.PdfSecurityException">The PDF file cannot be read because it is encrypted and the owner password is incorrect or not supplied.</exception>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.MergeDocument.#ctor(ceTe.DynamicPDF.Merger.PdfDocument,System.Int32,System.Int32,ceTe.DynamicPDF.Merger.MergeOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Merger.MergeDocument"/> class.
            </summary>
            <param name="pdfDocument">The <see cref="T:ceTe.DynamicPDF.Merger.PdfDocument"/> to import.</param>
            <param name="startPage">The page to start importing from.</param>
            <param name="pageCount">The number of pages to import.</param>
            <param name="options">A <see cref="T:ceTe.DynamicPDF.Merger.MergeOptions"/> object specifying the merge options.</param>
            <exception cref="T:ceTe.DynamicPDF.Merger.PdfParsingException">The PDF file cannot be parsed because it is likely corrupt or invalid.</exception>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.MergeDocument.Append(System.String)">
            <summary>
            Appends a PDF document to the current document.
            </summary>
            <param name="filePath">The physical file path of the PDF to import.</param>
            <returns>An array of <see cref="T:ceTe.DynamicPDF.Merger.AppendedPage"/>s that were appended to the document.</returns>
            <exception cref="T:ceTe.DynamicPDF.Merger.PdfParsingException">The PDF file cannot be parsed because it is likely corrupt or invalid.</exception>
            <exception cref="T:ceTe.DynamicPDF.Merger.PdfSecurityException">The PDF file cannot be read because it is encrypted and the owner password is incorrect or not supplied.</exception>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.MergeDocument.Append(ceTe.DynamicPDF.Merger.PdfDocument)">
            <summary>
            Appends a PDF document to the current document.
            </summary>
            <param name="pdfDocument">The <see cref="T:ceTe.DynamicPDF.Merger.PdfDocument"/> to import.</param>
            <returns>An array of <see cref="T:ceTe.DynamicPDF.Merger.AppendedPage"/>s that were appended to the document.</returns>
            <exception cref="T:ceTe.DynamicPDF.Merger.PdfParsingException">The PDF file cannot be parsed because it is likely corrupt or invalid.</exception>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.MergeDocument.Append(System.String,ceTe.DynamicPDF.Merger.MergeOptions)">
            <summary>
            Appends a PDF document to the current document.
            </summary>
            <param name="filePath">The physical file path of the PDF to import.</param>
            <param name="options">A <see cref="T:ceTe.DynamicPDF.Merger.MergeOptions"/> object specifying the merge options.</param>
            <returns>An array of <see cref="T:ceTe.DynamicPDF.Merger.AppendedPage"/>s that were appended to the document.</returns>
            <exception cref="T:ceTe.DynamicPDF.Merger.PdfParsingException">The PDF file cannot be parsed because it is likely corrupt or invalid.</exception>
            <exception cref="T:ceTe.DynamicPDF.Merger.PdfSecurityException">The PDF file cannot be read because it is encrypted and the owner password is incorrect or not supplied.</exception>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.MergeDocument.Append(ceTe.DynamicPDF.Merger.PdfDocument,ceTe.DynamicPDF.Merger.MergeOptions)">
            <summary>
            Appends a PDF document to the current document.
            </summary>
            <param name="pdfDocument">The <see cref="T:ceTe.DynamicPDF.Merger.PdfDocument"/> to import.</param>
            <param name="options">A <see cref="T:ceTe.DynamicPDF.Merger.MergeOptions"/> object specifying the merge options.</param>
            <returns>An array of <see cref="T:ceTe.DynamicPDF.Merger.AppendedPage"/>s that were appended to the document.</returns>
            <exception cref="T:ceTe.DynamicPDF.Merger.PdfParsingException">The PDF file cannot be parsed because it is likely corrupt or invalid.</exception>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.MergeDocument.Append(System.String,System.Int32,System.Int32)">
            <summary>
            Appends a PDF document to the current document.
            </summary>
            <param name="filePath">The physical file path of the PDF to import.</param>
            <param name="startPage">The page to start importing from.</param>
            <param name="pageCount">The number of pages to import.</param>
            <returns>An array of <see cref="T:ceTe.DynamicPDF.Merger.AppendedPage"/>s that were appended to the document.</returns>
            <exception cref="T:ceTe.DynamicPDF.Merger.PdfParsingException">The PDF file cannot be parsed because it is likely corrupt or invalid.</exception>
            <exception cref="T:ceTe.DynamicPDF.Merger.PdfSecurityException">The PDF file cannot be read because it is encrypted and the owner password is incorrect or not supplied.</exception>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.MergeDocument.Append(ceTe.DynamicPDF.Merger.PdfDocument,System.Int32,System.Int32)">
            <summary>
            Appends a PDF document to the current document.
            </summary>
            <param name="pdfDocument">The <see cref="T:ceTe.DynamicPDF.Merger.PdfDocument"/> to import.</param>
            <param name="startPage">The page to start appending from.</param>
            <param name="pageCount">The number of pages to append.</param>
            <returns>An array of <see cref="T:ceTe.DynamicPDF.Merger.AppendedPage"/>s that were appended to the document.</returns>
            <exception cref="T:ceTe.DynamicPDF.Merger.PdfParsingException">The PDF file cannot be parsed because it is likely corrupt or invalid.</exception>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.MergeDocument.Append(System.String,System.Int32,System.Int32,ceTe.DynamicPDF.Merger.MergeOptions)">
            <summary>
            Appends a PDF document to the current document.
            </summary>
            <param name="filePath">The physical file path of the PDF to import.</param>
            <param name="startPage">The page to start importing from.</param>
            <param name="pageCount">The number of pages to import.</param>
            <param name="options">A <see cref="T:ceTe.DynamicPDF.Merger.MergeOptions"/> object specifying the merge options.</param>
            <returns>An array of <see cref="T:ceTe.DynamicPDF.Merger.AppendedPage"/>s that were appended to the document.</returns>
            <exception cref="T:ceTe.DynamicPDF.Merger.PdfParsingException">The PDF file cannot be parsed because it is likely corrupt or invalid.</exception>
            <exception cref="T:ceTe.DynamicPDF.Merger.PdfSecurityException">The PDF file cannot be read because it is encrypted and the owner password is incorrect or not supplied.</exception>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.MergeDocument.Append(ceTe.DynamicPDF.Merger.PdfDocument,System.Int32,System.Int32,ceTe.DynamicPDF.Merger.MergeOptions)">
            <summary>
            Appends a PDF document to the current document.
            </summary>
            <param name="pdfDocument">The <see cref="T:ceTe.DynamicPDF.Merger.PdfDocument"/> to import.</param>
            <param name="startPage">The page to start appending from.</param>
            <param name="pageCount">The number of pages to append.</param>
            <param name="options">Specifies the merge options.</param>
            <returns>An array of <see cref="T:ceTe.DynamicPDF.Merger.AppendedPage"/>s that were appended to the document.</returns>
            <exception cref="T:ceTe.DynamicPDF.Merger.PdfParsingException">The PDF file cannot be parsed because it is likely corrupt or invalid.</exception>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.MergeDocument.Merge(System.String,System.String)">
            <summary>
            Merges two PDF documents together.
            </summary>
            <param name="firstDocumentFilePath">The physical file path to the first PDF document.</param>
            <param name="secondDocumentFilePath">The physical file path to the second PDF document.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.Merger.MergeDocument"/> containing the pages from both PDF documents.</returns>
            <exception cref="T:ceTe.DynamicPDF.Merger.PdfParsingException">One or both of the PDF files cannot be parsed because they are likely corrupt or invalid.</exception>
            <exception cref="T:ceTe.DynamicPDF.Merger.PdfSecurityException">One or both of the PDF files cannot be read because they are encrypted and the owner password is incorrect or not supplied.</exception>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.MergeDocument.Merge(ceTe.DynamicPDF.Merger.PdfDocument,ceTe.DynamicPDF.Merger.PdfDocument)">
            <summary>
            Merges two PDF documents together.
            </summary>
            <param name="firstDocument">A <see cref="T:ceTe.DynamicPDF.Merger.PdfDocument"/> class representing the first PDF document.</param>
            <param name="secondDocument">A <see cref="T:ceTe.DynamicPDF.Merger.PdfDocument"/> class representing the second PDF document.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.Merger.MergeDocument"/> containing the pages from both PDF documents.</returns>
            <exception cref="T:ceTe.DynamicPDF.Merger.PdfParsingException">One or both of the PDF files cannot be parsed because they are likely corrupt or invalid.</exception>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.MergeDocument.Merge(System.String,ceTe.DynamicPDF.Merger.MergeOptions,System.String,ceTe.DynamicPDF.Merger.MergeOptions)">
            <summary>
            Merges two PDF documents together.
            </summary>
            <param name="firstDocumentFilePath">The physical file path to the first PDF document.</param>
            <param name="firstDocumentOptions">A <see cref="T:ceTe.DynamicPDF.Merger.MergeOptions"/> object specifying the merge options for the first PDF document.</param>
            <param name="secondDocumentFilePath">The physical file path to the second PDF document.</param>
            <param name="secondDocumentOptions">A <see cref="T:ceTe.DynamicPDF.Merger.MergeOptions"/> object specifying the merge options for the second PDF document.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.Merger.MergeDocument"/> containing the pages from both PDF documents.</returns>
            <exception cref="T:ceTe.DynamicPDF.Merger.PdfParsingException">One or both of the PDF files cannot be parsed because they are likely corrupt or invalid.</exception>
            <exception cref="T:ceTe.DynamicPDF.Merger.PdfSecurityException">One or both of the PDF files cannot be read because they are encrypted and the owner password is incorrect or not supplied.</exception>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.MergeDocument.Merge(ceTe.DynamicPDF.Merger.PdfDocument,ceTe.DynamicPDF.Merger.MergeOptions,ceTe.DynamicPDF.Merger.PdfDocument,ceTe.DynamicPDF.Merger.MergeOptions)">
            <summary>
            Merges two PDF documents together.
            </summary>
            <param name="firstDocument">A <see cref="T:ceTe.DynamicPDF.Merger.PdfDocument"/> class representing the first PDF document.</param>
            <param name="firstDocumentOptions">A <see cref="T:ceTe.DynamicPDF.Merger.MergeOptions"/> object specifying the merge options for the first PDF document.</param>
            <param name="secondDocument">A <see cref="T:ceTe.DynamicPDF.Merger.PdfDocument"/> class representing the second PDF document.</param>
            <param name="secondDocumentOptions">A <see cref="T:ceTe.DynamicPDF.Merger.MergeOptions"/> object specifying the merge options for the second PDF document.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.Merger.MergeDocument"/> containing the pages from both PDF documents.</returns>
            <exception cref="T:ceTe.DynamicPDF.Merger.PdfParsingException">One or both of the PDF files cannot be parsed because they are likely corrupt or invalid.</exception>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.MergeDocument.DrawRootEntries(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Outputs the catalog entries to the <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/>.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to write the catalog entries.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.MergeDocument.InitialPage">
            <summary>
            Gets or sets a value indicating the initial page of the <b>Document</b>.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.MergeDocument.InitialPageZoom">
            <summary>
            Gets or sets a value indicating the initial zoom of the <b>Document</b>.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.MergeDocument.XmpMetadata">
            <summary>
            Gets or sets the Xmp metadata for the PDF document.
            </summary>
            <licensing>
            This property is a DynamicPDF Merger Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.Merger.MergeOptions">
             <summary>
             Represents options for merging PDF documents.
             </summary>
             <remarks>Currently the only merge option is whether or not to preserve the form fields on the PDF being merged in.  
             Specifying true will keep the form fields on the merged PDF where specifying false will remove the form fields from the PDF.</remarks>
             <example>The following example shows how to enter text in a text field specifying the MergeOptions.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.Forms
             Imports ceTe.DynamicPDF.Merger
             
             Module MyModule
             
                 Sub Main()
             
                     ' Create a MergeOptions object to import the AcroForm
                     Dim options As MergeOptions = New MergeOptions(True)
             
                     ' Create a merge document with your PDF containing form fields
                     Dim MyDocument As MergeDocument = New MergeDocument("C:\ImportPDF.pdf", options)
             
                     ' Set the value of the text field equal to the string you want to appear
                     Dim text As TextField = MyDocument.Form.Fields("Text3")
                     text.Value = "This is my text field"
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.Forms;
             using ceTe.DynamicPDF.Merger;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a MergeOptions object to import the AcroForm
                     MergeOptions options = new MergeOptions( true );
            
                     // Create a merge document with your PDF containing form fields
                     MergeDocument document = new MergeDocument( @"C:\ImportPDF.pdf", options );
             
                     // Set the value of the text field equal to the string you want to appear
                     TextField text = (TextField)document.Form.Fields["Text3"];
                     text.Value = "This is my text field";
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Merger for .NET Standard Edition</item>
             <item>DynamicPDF Merger for .NET Professional Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Professional Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.MergeOptions.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Merger.MergeOptions"/> class.
            </summary>
            <param name="mergeFormFields">A value indicating if form fields should be merged.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.MergeOptions.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Merger.MergeOptions"/> class.
            </summary>
            <param name="mergeFormFields">A value indicating if form fields should be merged.</param>
            <param name="rootFormField">The root form field that all merged form fields will be placed under.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.MergeOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Merger.MergeOptions"/> class.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.MergeOptions.FormFields">
            <summary>
            Gets or sets a value indicating if form fields should be imported.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.MergeOptions.FormsXfaData">
            <summary>
            Gets or sets a value indicating if form XFA data should be imported.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.MergeOptions.PageAnnotations">
            <summary>
            Gets or sets a value indicating if annotations should be imported.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.MergeOptions.Outlines">
            <summary>
            Gets or sets a value indicating if outlines and bookmarks should be imported.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.MergeOptions.DocumentInfo">
            <summary>
            Gets or sets a value indicating if document information should be imported.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.MergeOptions.DocumentProperties">
            <summary>
            Gets or sets a value indicating if document properties should be imported.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.MergeOptions.OpenAction">
            <summary>
            Gets or sets a value indicating if the documents openning action (initial page and zoom settings) should be imported.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.MergeOptions.AllOtherData">
            <summary>
            Gets or sets a value indicating if all other document data should be imported.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.MergeOptions.DocumentJavaScript">
            <summary>
            Gets or sets a value indicating if document level JavaScript should be imported.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.MergeOptions.EmbeddedFiles">
            <summary>
            Gets or sets a value indicating if the Embeddedfiles should be imported.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.MergeOptions.PageLabelsAndSections">
            <summary>
            Gets or sets a value indicating if page labels and sections should be imported.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.MergeOptions.XmpMetadata">
            <summary>
            Gets or sets a value indicating if Xmp Metadata should be imported.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.MergeOptions.LogicalStructure">
            <summary>
            Gets or Sets the value indicating if logical structure should be imported.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.MergeOptions.OutputIntent">
            <summary>
            Gets or Sets a value indication if OutputIntent should be imported.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.MergeOptions.RootOutline">
            <summary>
            Gets or sets the root outline for imported outlines.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.MergeOptions.RootFormField">
            <summary>
            Gets or sets the root form field for imported form fields.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.MergeOptions.OptionalContentInfo">
            <summary>
            Gets or sets the Output Content should be imported.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.MergeOptions.All">
            <summary>
            Gets a <see cref="T:ceTe.DynamicPDF.Merger.MergeOptions"/> object with all options set to true.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.MergeOptions.Append">
            <summary>
            Gets a <see cref="T:ceTe.DynamicPDF.Merger.MergeOptions"/> object that you would typically use when appending documents. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.MergeOptions.None">
            <summary>
            Gets a <see cref="T:ceTe.DynamicPDF.Merger.MergeOptions"/> object with all options set to false.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.StructureElement">
             <summary>
             Represents an structure element.
             </summary>
             <example>The following example shows how to use  a structure element. <p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Specify document as a tagged PDF
                     MyDocument.Tag = New TagOptions()
            
                     ' Create a page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create an image
                     Dim MyImage As Image = New Image("C:\MyImage.gif", 100, 100)
                     MyImage.Height = 100
                     MyImage.Width = 100
            
                     ' Create a structue element 
                     Dim MyStructureElement As StructureElement = New StructureElement(TagType.Figure, True)
                     MyStructureElement.AlternateText = "My Image"
             
                     ' Tag the image with the structure element
                     MyImage.Tag = MyStructureElement
            
                     ' Add the image to the page
                     MyPage.Elements.Add(MyImage)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Specify document as a tagged PDF
                     document.Tag = new TagOptions();
             		
                     // Create a page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create an image
                     Image image = new Image(@"C:\MyImage.gif", 100, 100);
                     image.Height = 100;
                     image.Width = 100;
            
                     // Create a structue element 
                     StructureElement structureElement = new StructureElement(TagType.Figure, true);
                     structureElement.AlternateText = "My Image";
            
                     // Tag the image with the structure element
                     image.Tag = structureElement;
            
                     // Add the image to the page
                     page.Elements.Add(image);
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>  
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>	    
        </member>
        <member name="T:ceTe.DynamicPDF.Tag">
            <summary>
            Base class from which tag classes are derived.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	    
        </member>
        <member name="P:ceTe.DynamicPDF.Tag.TagType">
            <summary>
            Gets the tag type .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Tag.Annotation">
            <summary>
            Gets the structure element of tag type annotation.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Tag.Article">
            <summary>
            Gets the structure element of tag type article.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Tag.BibliographyEntry">
            <summary>
            Gets the structure element of tag type bibliography entry.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Tag.BlockQuotation">
            <summary>
            Gets the structure element of tag type block quotation.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Tag.Caption">
            <summary>
            Gets the structure element of tag type caption.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Tag.Code">
            <summary>
            Gets the structure element of tag type code.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Tag.Division">
            <summary>
            Gets the structure element of tag type division.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Tag.Document">
            <summary>
            Gets the structure element of tag type document.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Tag.Figure">
            <summary>
            Gets the structure element of tag type figure.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Tag.Form">
            <summary>
            Gets the structure element of tag type form.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Tag.Formula">
            <summary>
            Gets the structure element of tag type formula.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Tag.Heading">
            <summary>
            Gets the structure element of tag type heading.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Tag.HeadingLevel1">
            <summary>
            Gets the structure element of tag type heading level 1.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Tag.HeadingLevel2">
            <summary>
            Gets the structure element of tag type heading level 2.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Tag.HeadingLevel3">
            <summary>
            Gets the structure element of tag type heading level 3.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Tag.HeadingLevel4">
            <summary>
            Gets the structure element of tag type heading level 4.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Tag.HeadingLevel5">
            <summary>
            Gets the structure element of tag type heading level 5.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Tag.HeadingLevel6">
            <summary>
            Gets the structure element of tag type heading level 6.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Tag.Index">
            <summary>
            Gets the structure element of tag type index.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Tag.List">
            <summary>
            Gets the structure element of tag type list.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Tag.Label">
            <summary>
            Gets the structure element of tag type label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Tag.ListBody">
            <summary>
            Gets the structure element of tag type list body.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Tag.ListItem">
            <summary>
            Gets the structure element of tag type list item.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Tag.Link">
            <summary>
            Gets the structure element of tag type link.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Tag.NonStructuralElement">
            <summary>
            Gets the structure element of tag type nonstructural element.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Tag.Note">
            <summary>
            Gets the structure element of tag type note.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Tag.Paragraph">
            <summary>
            Gets the structure element of tag type paragraph.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Tag.Part">
            <summary>
            Gets the structure element of tag type part.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Tag.Private">
            <summary>
            Gets the structure element of tag type private.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Tag.Quotation">
            <summary>
            Gets the structure element of tag type quotation.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Tag.Reference">
            <summary>
            Gets the structure element of tag type reference.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Tag.Ruby">
            <summary>
            Gets the structure element of tag type ruby.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Tag.Section">
            <summary>
            Gets the structure element of tag type section.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Tag.Span">
            <summary>
            Gets the structure element of tag type span.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Tag.Table">
            <summary>
            Gets the structure element of tag type table.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Tag.TableBodyRowGroup">
            <summary>
            Gets the structure element of tag type table body row group.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Tag.TableDataCell">
            <summary>
            Gets the structure element of table data cell.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Tag.TableFooterRowGroup">
            <summary>
            Gets the structure element of tag type table footer row group.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Tag.TableHeader">
            <summary>
            Gets the structure element of tag type table header.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Tag.TableHeaderRowGroup">
            <summary>
            Gets the structure element of tag type table header row group.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Tag.TableOfContent">
            <summary>
            Gets the structure element of tag type table of content.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Tag.TableOfContentItem">
            <summary>
            Gets the structure element of tag type table of content item.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Tag.TableRow">
            <summary>
            Gets the structure element of tag type table row.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Tag.Warichu">
            <summary>
            Gets the structure element of tag type warichu.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Tag.Artifact">
            <summary>
            Gets the artifact.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.StructureElement.#ctor(ceTe.DynamicPDF.TagType)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.StructureElement"/> class.
            </summary>
            <param name="tag">Tag type of the structure element.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.StructureElement.#ctor(ceTe.DynamicPDF.TagType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.StructureElement"/> class.
            </summary>
            <param name="tag">Tag type of the structure element.</param>
            <param name="includeDefaultAttributes">Specifes if default attributes need to be add.</param>/// 
        </member>
        <member name="M:ceTe.DynamicPDF.StructureElement.ToString">
            <summary>
            Gets the ID of the structure element.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.StructureElement.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the structure element to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the structure element output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.StructureElement.Parent">
            <summary>
            Gets or sets a value indicating parent structure element.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.StructureElement.Order">
            <summary>
            Gets or sets a value indicating the order in its parent structure element or structure tree root.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.StructureElement.TagType">
            <summary>
            Gets a value indicating standard structure type or named structure type.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.StructureElement.Title">
            <summary>e
            Gets or sets a value indicating title of structure element.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.StructureElement.Identifier">
            <summary>
            Gets or sets a value indicating identifier for the structure element.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.StructureElement.Language">
            <summary>
            Gets or sets a value indicating natural language for all text in the structure element.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.StructureElement.AlternateText">
            <summary>
            Gets or sets a value indicating alternate description of the structure element.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.StructureElement.Abbreviation">
            <summary>
            Gets or sets a value indicating expandable form of an abbreviation.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.StructureElement.ActualText">
            <summary>
            Gets or sets a value indicating the text that is exact replacement for the structure element.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.StructureElement.Classes">
            <summary>
            Adds a AttributeClass to set of attribute classes having names.
            </summary>        
        </member>
        <member name="P:ceTe.DynamicPDF.StructureElement.IncludeDefaultAttributes">
            <summary>
            Gets or sets a value indicating default attributes to be include.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.StructureElement.AttributeLists">
            <summary>
            Adds an AttributeObject to a set of attribute objects.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Merger.PdfDocument">
            <summary>
            Represents a PDF document for import.
            </summary>
            <remarks>This class should be used when you will be referencing an existing PDF document more than once.  Using a 
            PDFDocument is more efficient than specifying a file path because the document will not need to 
            be parsed again on each subsequent reference.  This class is safe for multithreaded operations.</remarks>
            <example>The following example will first merge two entire PDF documents together, then will Append a selected page of 
            a third PDF to the end.<p/>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.Merger
            
            Module MyModule
            
                Sub Main()
            
                    ' Create two PDF document objects
                    Dim pdfA As PdfDocument = New PdfDocument("C:\ImportPDF.pdf")
                    ' The owner's password is required to merge encrypted PDFs
                    Dim pdfB As PdfDocument = New PdfDocument("C:\EncryptedPDF.pdf", "owner")
            
                    ' Merge the two documents
                    Dim MyDocument As MergeDocument = MergeDocument.Merge(pdfA, pdfB)
            
                    ' Append an additional document
                    Dim pdfC As PdfDocument = New PdfDocument("C:\MyDocumentC.pdf")
                    MyDocument.Append(pdfC, 2, 1)
            
                    ' Save the PDF
                    MyDocument.Draw("C:\MyDocument.pdf")
            		
                End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.Merger;
            
            class MyClass
            {
                static void Main()
                {
                    // Create two PDF document objects
                    PdfDocument pdfA = new PdfDocument( @"C:\ImportPDF.pdf" );
                    // The owner's password is required to merge encrypted PDFs
                    PdfDocument pdfB = new PdfDocument( @"C:\EncryptedPDF.pdf", "owner" );
            
                    // Merge the two documents
                    MergeDocument document = MergeDocument.Merge( pdfA, pdfB );
            
                    // Append an additional document
                    PdfDocument pdfC = new PdfDocument( @"C:\MyDocumentC.pdf" );
                    document.Append( pdfC, 2, 1);
            
                    // Save the PDF
                    document.Draw( @"C:\MyDocument.pdf" );
                }
            }
            </code>
            </example>
            <licensing>
            This class is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.PdfDocument.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Merger.PdfDocument"/> class.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> object containing the PDF document data.</param>
            <exception cref="T:ceTe.DynamicPDF.Merger.PdfParsingException">The PDF file cannot be parsed because it is likely corrupt or invalid.</exception>
            <exception cref="T:ceTe.DynamicPDF.Merger.PdfSecurityException">The PDF file cannot be read because it is encrypted and the owner password is incorrect or not supplied.</exception>
            <licensing>
            This class is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.PdfDocument.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Merger.PdfDocument"/> class.
            </summary>
            <param name="data">A byte array containing the PDF document data.</param>
            <exception cref="T:ceTe.DynamicPDF.Merger.PdfParsingException">The PDF file cannot be parsed because it is likely corrupt or invalid.</exception>
            <exception cref="T:ceTe.DynamicPDF.Merger.PdfSecurityException">The PDF file cannot be read because it is encrypted and the owner password is incorrect or not supplied.</exception>
            <licensing>
            This class is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.PdfDocument.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Merger.PdfDocument"/> class.
            </summary>
            <param name="filePath">Physical file path of the PDF document.</param>
            <exception cref="T:ceTe.DynamicPDF.Merger.PdfParsingException">The PDF file cannot be parsed because it is likely corrupt or invalid.</exception>
            <exception cref="T:ceTe.DynamicPDF.Merger.PdfSecurityException">The PDF file cannot be read because it is encrypted and the owner password is incorrect or not supplied.</exception>
            <licensing>
            This class is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.PdfDocument.#ctor(System.IO.Stream,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Merger.PdfDocument"/> class.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> object containing the PDF document data.</param>
            <param name="password">Owner password of the encrypted PDF document.</param>
            <exception cref="T:ceTe.DynamicPDF.Merger.PdfParsingException">The PDF file cannot be parsed because it is likely corrupt or invalid.</exception>
            <exception cref="T:ceTe.DynamicPDF.Merger.PdfSecurityException">The PDF file cannot be read because it is encrypted and the owner password is incorrect or not supplied.</exception>
            <licensing>
            This class is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.PdfDocument.#ctor(System.Byte[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Merger.PdfDocument"/> class.
            </summary>
            <param name="data">A byte array containing the PDF document data.</param>
            <param name="password">Owner password of the encrypted PDF document.</param>
            <exception cref="T:ceTe.DynamicPDF.Merger.PdfParsingException">The PDF file cannot be parsed because it is likely corrupt or invalid.</exception>
            <exception cref="T:ceTe.DynamicPDF.Merger.PdfSecurityException">The PDF file cannot be read because it is encrypted and the owner password is incorrect or not supplied.</exception>
            <licensing>
            This class is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.PdfDocument.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Merger.PdfDocument"/> class.
            </summary>
            <param name="filePath">Physical file path of the PDF document.</param>
            <param name="password">Owner password of the encrypted PDF document.</param>
            <exception cref="T:ceTe.DynamicPDF.Merger.PdfParsingException">The PDF file cannot be parsed because it is likely corrupt or invalid.</exception>
            <exception cref="T:ceTe.DynamicPDF.Merger.PdfSecurityException">The PDF file cannot be read because it is encrypted and the owner password is incorrect or not supplied.</exception>
            <licensing>
            This class is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.PdfDocument.GetPage(System.Int32)">
            <summary>
            Gets a page by page number.
            </summary>
            <param name="pageNumber">The page number to retrieve.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.Merger.PdfPage"/> object.</returns>
            <remarks>The first page is 1.</remarks>
            <licensing>
            This class is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.PdfDocument.SetDocumentInfo(ceTe.DynamicPDF.Document)">
            <summary>
            Sets the document info on the supplied <see cref="T:ceTe.DynamicPDF.Document"/> to match this document.
            </summary>
            <param name="document">A document to set.</param>
            <licensing>
            This class is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.PdfDocument.GetText">
            <summary>
            Gets the text in all the pages.
            </summary>
            <returns>A string containing the text in all the pages.</returns>
            <remarks>This method can be used to extract the text in the same order the pdf operators are loaded</remarks>
            <example>The following example will extract the entire text in the given PDF documents. 
            <p/>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.Merger
            
            Module MyModule
            
                Sub Main()
            
                    ' Create PDF document object         
                    Dim pdfA As PdfDocument = New PdfDocument( "C:\TimeMachine.pdf")        
            
                    ' Call GetText method from PDF document object to get the text from the document
                    Dim extractedText As String = pdfA.GetText()
            		
                End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.Merger;
            
            class MyClass
            {
                static void Main()
                {
                    // Create PDF document object
                    PdfDocument pdfA = new PdfDocument( @"C:\TimeMachine.pdf");
            
                    // Call GetText method from PDF document object to get the text from the document
                    string extractedText = pdfA.GetText();
                }
            }
            </code>
            </example>
            <licensing>
            This method is a DynamicPDF Merger Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>  
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.PdfDocument.Outlines">
            <summary>
            Gets the outlines of the PDF document.
            </summary>
            <licensing>
            This class is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.PdfDocument.Title">
            <summary>
            Gets the title property of the PDF document.
            </summary>
            <licensing>
            This class is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.PdfDocument.Author">
            <summary>
            Gets the author property of the PDF document.
            </summary>
            <licensing>
            This class is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.PdfDocument.Subject">
            <summary>
            Gets the subject property of the PDF document.
            </summary>
            <licensing>
            This class is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.PdfDocument.Keywords">
            <summary>
            Gets the keywords property of the PDF document.
            </summary>
            <licensing>
            This class is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.PdfDocument.NeedsRendering">
            <summary>
            Get the Needs Rendering property of the PDF document.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.PdfDocument.Creator">
            <summary>
            Gets the creator property of the PDF document.
            </summary>
            <licensing>
            This class is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.PdfDocument.Tagged">
            <summary>
            Gets the Taging property of the  PDF document.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.PdfDocument.Producer">
            <summary>
            Gets the producer property of the PDF document.
            </summary>
            <licensing>
            This class is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.PdfDocument.Form">
            <summary>
            Gets the AcroForm for the document.
            </summary>
            <licensing>
            This class is a DynamicPDF Merger Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.PdfDocument.Pages">
            <summary>
            Gets a collection of PDF pages for the document.
            </summary>
            <licensing>
            This class is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.Merger.PdfOutline">
            <summary>
            Represents an imported outline.
            </summary>
            <licensing>
            This class is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.PdfOutline.ChildOutlines">
            <summary>
            Gets a list of imported child outlines.
            </summary>
            <remarks>
            This property will be null if there are no child outlines.
            </remarks>
            <licensing>
            This property is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.PdfOutline.Text">
            <summary>
            Get the text of the imported outline.
            </summary>
            <licensing>
            This property is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.PdfOutline.Style">
            <summary>
            Gets the text style of the imported outline.
            </summary>
            <licensing>
            This property is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.PdfOutline.Expanded">
            <summary>
            Gets a value indicating if the child outline is expanded by default.
            </summary>
            <licensing>
            This property is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.PdfOutline.Color">
            <summary>
            Gets the color of the imported outline.
            </summary>
            <licensing>
            This property is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.PdfOutline.Action">
            <summary>
            Gets the action of the imported outline.
            </summary>
            <licensing>
            This property is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.PdfOutline.TargetPageNumber">
            <summary>
            Gets the target page number of the imported outlines action.
            </summary>
            <remarks>
            This will return a value of -1 if the target page number is now known. The target page
            number is only known for imported outline actions that use a direct reference to a page.
            </remarks>
            <licensing>
            This property is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.Merger.PdfOutlineList">
            <summary>
            Represents a list of outlines from an imported PDF document.
            </summary>
            <licensing>
            This class is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.PdfOutlineList.Item(System.Int32)">
            <summary>
            Gets an imported outline by index.
            </summary>
            <param name="index">Index of the outline to return.</param>
            <returns>The <see ref="PdfOutline"/> at the given index.</returns>
            <licensing>
            This indexer is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.PdfOutlineList.Count">
            <summary>
            Gets the number of imported outlines in the list.
            </summary>
            <licensing>
            This property is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.Merger.PdfPage">
            <summary>
            Represents a page from an imported PDF document.
            </summary>
            <licensing>
            This class is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.PdfPage.GetDictionaryValue(System.String)">
            <summary>
            Returns the value of a given page dictionary key.
            </summary>
            <param name="key">The dictionaries key.</param>
            <returns>The dictionary key's value as a string.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.PdfPage.GetContents">
            <summary>
            Returns the uncompressed binary contents of the page.
            </summary>
            <returns>A byte array containing the pages contents.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.PdfPage.GetDimensions">
            <summary>
            Gets the page dimensions of the page.
            </summary>
            <returns>A <see cref="T:ceTe.DynamicPDF.PageDimensions"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.PdfPage.GetText">
            <summary>
            Gets the text in the page.
            </summary>
            <returns>A string containing the text in the page.</returns>   
            <remarks>This method can be used to extract the text in the same order the pdf operators are loaded</remarks>
            <example>The following example will extract the entire text of the specified page in the given PDF documents. 
            <p/>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.Merger
            
            Module MyModule
            
                Sub Main()
            
                    ' Create PDF document object         
                    Dim pdfA As PdfDocument = New PdfDocument( "C:\Invoice.pdf")        
            
                    ' Call GetText method from PDF document object to get the text from the document
                    Dim extractedText As String = pdfA.Pages.Item(1).GetText()
            		
                End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.Merger;
            
            class MyClass
            {
                static void Main()
                {
                    // Create PDF document object
                    PdfDocument pdfA = new PdfDocument( @"C:\Invoice.pdf");
            
                    // Call GetText method from PDF document object to get the text from the document
                    string extractedText = pdfA.Pages[1].GetText();
                }
            }
            </code>
            </example>
            <licensing>
            This method is a DynamicPDF Merger Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing> 
        </member>
        <member name="T:ceTe.DynamicPDF.Merger.PdfPageList">
            <summary>
            Represents a collection of PDF pages.
            </summary>
            <licensing>
            This class is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Merger.PdfPageList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:ceTe.DynamicPDF.Merger.PdfPageList"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> for the entire <see cref="T:ceTe.DynamicPDF.Merger.PdfPageList"/></returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.PdfPageList.Count">
            <summary>
            Gets the number of PDF pages in the collection.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Merger.PdfPageList.Item(System.Int32)">
            <summary>
            Gets a PDF page at the given index.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Merger.PdfParsingException">
            <summary>
            The exception that is thrown for a PDF parsing error.
            </summary>
            <licensing>
            This class is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.Merger.PdfSecurityException">
            <summary>
            The exception that is thrown for a PDF security error.
            </summary>
            <licensing>
            This class is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.Merger.SignatureFieldFlatteningOptions">
            <summary>
            Specifies the digital signature flattening options.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Merger.SignatureFieldFlatteningOptions.Flatten">
            <summary>
            Digital signature fields will no longer be editable after merging.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Merger.SignatureFieldFlatteningOptions.Remove">
            <summary>
            All digital signature fields will be removed while flattening.
            </summary>
            <remarks>
            Default option.
            </remarks>
        </member>
        <member name="F:ceTe.DynamicPDF.Merger.SignatureFieldFlatteningOptions.Retain">
            <summary>
            Existing signature fields will be preserved.
            </summary>
            <remarks>
            New signed signature fields will remain valid.
            </remarks>
        </member>
        <member name="T:ceTe.DynamicPDF.Merger.SignatureFieldFlattenOptions">
            <summary>
            <font color="red">Obsolete.</font> Specifies the digital signature flattening options.
            </summary>
            <remarks><font color="red">NOTE: This enum is obsolete.</font> Use <see cref="T:ceTe.DynamicPDF.Merger.SignatureFieldFlatteningOptions"/> enum instead.</remarks>
        </member>
        <member name="F:ceTe.DynamicPDF.Merger.SignatureFieldFlattenOptions.Flatten">
            <summary>
            Digital signature fields will no longer be editable after merging.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Merger.SignatureFieldFlattenOptions.Remove">
            <summary>
            All digital signature fields will be removed while flattening.
            </summary>
            <remarks>
            Default option.
            </remarks>
        </member>
        <member name="F:ceTe.DynamicPDF.Merger.SignatureFieldFlattenOptions.Retain">
            <summary>
            Existing signature fields will be preserved.
            </summary>
            <remarks>
            New signed signature fields will remain valid.
            </remarks>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.BarCode">
            <summary>
            Base class from which bar code page elements are derived.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.RotatingPageElement">
            <summary>
            Base class from which rotating page elements are derived.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.TaggablePageElement">
            <summary>
            Base class from which taggable  page elements are derived.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.TaggablePageElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.TaggablePageElement"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.TaggablePageElement.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the taggable page element to the given <b>PageWriter</b> class.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> class to receive the taggable page elements output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TaggablePageElement.Tag">
            <summary>
            Gets or sets the tag of the taggable element.
            </summary>
            <licensing>
            This property is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>        
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TaggablePageElement.TagOrder">
            <summary>
            Gets or sets the tag order of the taggable element.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.RotatingPageElement.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.RotatingPageElement"/> class.
            </summary>
            <param name="x">The X coordinate of the rotating page element.</param>
            <param name="y">The Y coordinate of the rotating page element.</param>
            <param name="height">The height of the rotating page element.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.RotatingPageElement.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.RotatingPageElement"/> class.
            </summary>
            <param name="x">The X coordinate of the rotating page element.</param>
            <param name="y">The Y coordinate of the rotating page element.</param>
            <param name="height">The height of the rotating page element.</param>
            <param name="angle">The angle of the rotating page element.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.RotatingPageElement.DrawRotated(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the rotated page element to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the page element's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.RotatingPageElement.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the page element to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the page element's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.RotatingPageElement.Angle">
            <summary>
            Gets or sets the heights of the angle element.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.RotatingPageElement.X">
            <summary>
            Gets or sets the X coordinate of the page element.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.RotatingPageElement.Y">
            <summary>
            Gets or sets the Y coordinate of the page element.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.RotatingPageElement.Height">
            <summary>
            Gets or sets the heights of the page element.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.BarCode.#ctor(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.BarCode"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="xDimension">The XDimension of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.BarCode.GetSymbolWidth">
            <summary>
            Returns the width required to display the full bar code.
            </summary>
            <returns>A value representing the required width.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.BarCode.DrawBarCode(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the barcode to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the page element's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.BarCode.DrawRotated(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the rotated page element to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the page element's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.BarCode.Value">
            <summary>
            Gets or sets the value of the barcode.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.BarCode.XDimension">
            <summary>
            Gets or sets the XDimension of the barcode.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.BarCode.XDimensionsPerInch">
            <summary>
            Gets or sets the XDimensionsPerInch of the barcode.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.BarCode.XDimensionsPerCentiMeter">
            <summary>
            Gets or sets the XDimensionsPerCentiMeter of the barcode.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.BarCode.XDimensionMils">
            <summary>
            Gets or sets the XDimensionMils of the barcode.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.BarCode.XDimensionMilliMeters">
            <summary>
            Gets or sets the XDimensionMilliMeters of the barcode.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.BarCode.Color">
            <summary>
            Gets or sets the Color of the barcode.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.BarCodeException">
            <summary>
            The exception that is thrown for a bar coding error.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.BarCodeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.BarCodeException"/> class.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the error.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.Calculate">
            <summary>
            Specifies calculation type for bar codes.
            </summary>
            <licensing>
            This enumeration is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.Calculate.Yes">
            <summary>
            Always calculate.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.Calculate.No">
            <summary>
            Never calculate.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.Calculate.Auto">
            <summary>
            Automatically detect when to calculate.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.Codabar">
             <summary>
             Represents a Codabar bar code.
             </summary>
             <remarks>This class can be used to place a Codabar bar code on a page.</remarks>
             <example>The following example will place a Codabar bar code on the page.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements.BarCoding
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a bar code
                     Dim barCode As Codabar = New Codabar("A1234B", 50, 50, 48)
             
                     ' Add the bar code to the page
                     MyPage.Elements.Add(barCode)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements.BarCoding;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create a barcode
                     Codabar barCode = new Codabar("A1234B", 50, 0, 48);
             
                     // Add the barcode to the page
                     page.Elements.Add( barCode );	
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.TextBarCode">
            <summary>
            Base class from which bar code page elements that display text are derived.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.TextBarCode.#ctor(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.TextBarCode"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="xDimension">The XDimension of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.TextBarCode.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.TextBarCode"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="xDimension">The XDimension of the barcode.</param>
            <param name="showText"><b>true</b> to display value of barcode as text. Otherwise, display barcode only.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.TextBarCode.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,System.Boolean,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.TextBarCode"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="xDimension">The XDimension of the barcode.</param>
            <param name="showText"><b>true</b> to display value of barcode as text. Otherwise, display barcode only.</param>
            <param name="font">The font to use when displaying text.</param>
            <param name="fontSize">The font size to use when displaying text.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.TextBarCode.ShowText">
            <summary>
            Gets or sets a value indicating if the value should be placed as text below the barcode.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.TextBarCode.TextColor">
            <summary>
            Gets or set the color of the text.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.TextBarCode.Font">
            <summary>
            Gets or sets the font to use when displaying the text.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.TextBarCode.FontSize">
            <summary>
            Gets or sets the font size to use when displaying the text.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.TextBarCode.TextAlign">
            <summary>
            Gets or sets the alignment of the text.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Codabar.#ctor(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Codabar"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Codabar.#ctor(System.String,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Codabar"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="showText"><b>true</b> to display value of barcode as text. Otherwise, display barcode only.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Codabar.#ctor(System.String,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Codabar"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="font">The font to use when displaying text.</param>
            <param name="fontSize">The font size to use when displaying text.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Codabar.#ctor(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Codabar"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="xDimension">The XDimension of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Codabar.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Codabar"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="xDimension">The XDimension of the barcode.</param>
            <param name="showText"><b>true</b> to display value of barcode as text. Otherwise, display barcode only.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Codabar.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Codabar"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="xDimension">The XDimension of the barcode.</param>
            <param name="font">The font to use when displaying text.</param>
            <param name="fontSize">The font size to use when displaying text.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Codabar.GetSymbolWidth">
            <summary>
            Returns the width required to display the full bar code.
            </summary>
            <returns>A value representing the required width.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Codabar.DrawBarCode(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the barcode to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the page element's output.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.Code128">
             <summary>
             Represents a Code 128 bar code.
             </summary>
             <remarks>This class can be used to place a Code 128 bar code on a page.</remarks>
             <example>The following example will place a Code 128 bar code on the page.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements.BarCoding
             
             Module MyModule
             
                 Sub Main()
             
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a bar code
                     Dim barCode As Code128 = New Code128("Code 128 Bar Code.", 50, 50, 48, 0.75F)
             
                     ' Add the bar code to the page
                     MyPage.Elements.Add(barCode)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements.BarCoding;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create a barcode
                     Code128 barCode = new Code128("Code 128 Bar Code.",	50, 50, 48, 0.75F);		
             
                     // Add the barcode to the page
                     page.Elements.Add( barCode );	
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code128.#ctor(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Code128"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code128.#ctor(System.String,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Code128"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="showText"><b>true</b> to display value of barcode as text. Otherwise, display barcode only.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code128.#ctor(System.String,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Code128"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="font">The font to use when displaying text.</param>
            <param name="fontSize">The font size to use when displaying text.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code128.#ctor(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Code128"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="xDimension">The XDimension of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code128.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Code128"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="xDimension">The XDimension of the barcode.</param>
            <param name="showText"><b>true</b> to display value of barcode as text. Otherwise, display barcode only.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code128.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Code128"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="xDimension">The XDimension of the barcode.</param>
            <param name="font">The font to use when displaying text.</param>
            <param name="fontSize">The font size to use when displaying text.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code128.GetSymbolWidth">
            <summary>
            Returns the width required to display the full bar code.
            </summary>
            <returns>A value representing the required width.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code128.DrawBarCode(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the barcode to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the page element's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.Code128.LookAhead">
            <summary>
            Gets or sets the number of characters to look ahead when determining the best mode.
            </summary>
            <remarks>This is used initially and when switching from Mode C.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.Code128.ContinueToNextSymbol">
            <summary>
            Gets or sets if the barcode will be continued to another Code 128 barcode.
            </summary>
            <remarks>If <b>true</b> a FNC2 code will be the first (second if IsUCCEAN128 is <b>true</b>) character in the barcode.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.Code128.IsUCCEAN128">
            <summary>
            Gets or sets if the barcode is a UCC / EAN Code 128 barcode.
            </summary>
            <remarks>If <b>true</b> a FNC1 code will be the first character in the barcode.</remarks>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.Code25">
             <summary>
             Represents a Code 2 of 5 bar code.
             </summary>
             <remarks>This class can be used to place a Code 2 of 5 bar code on a page.</remarks>
             <example>The following example will place a Code 2 of 5 bar code on the page.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements.BarCoding
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a bar code
                     Dim barCode As Code25 = New Code25("1234567890", 50, 50, 48)
             
                     ' Add the bar code to the page
                     MyPage.Elements.Add(barCode)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements.BarCoding;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create a barcode
                     Code25 barCode = new Code25("1234567890", 50, 100, 48);
             
                     // Add the barcode to the page
                     page.Elements.Add( barCode );	
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code25.#ctor(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Code25"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code25.#ctor(System.String,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Code25"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="showText"><b>true</b> to display value of barcode as text. Otherwise, display barcode only.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code25.#ctor(System.String,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Code25"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="font">The font to use when displaying text.</param>
            <param name="fontSize">The font size to use when displaying text.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code25.#ctor(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Code25"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="xDimension">The XDimension of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code25.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Code25"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="xDimension">The XDimension of the barcode.</param>
            <param name="showText"><b>true</b> to display value of barcode as text. Otherwise, display barcode only.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code25.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Code25"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="xDimension">The XDimension of the barcode.</param>
            <param name="font">The font to use when displaying text.</param>
            <param name="fontSize">The font size to use when displaying text.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code25.GetSymbolWidth">
            <summary>
            Returns the width required to display the full bar code.
            </summary>
            <returns>A value representing the required width.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code25.DrawBarCode(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the barcode to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the page element's output.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.Code39">
             <summary>
             Represents a Code 3 of 9 bar code.
             </summary>
             <remarks>This class can be used to place a Code 3 of 9 bar code on a page.</remarks>
             <example>The following example will place a Code 3 of 9 bar code on the page.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements.BarCoding
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a bar code
                     Dim barCode As Code39 = New Code39("CODE 39", 50, 50, 48)
             
                     ' Add the bar code to the page
                     MyPage.Elements.Add(barCode)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements.BarCoding;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create a barcode
                     Code39 barCode = new Code39("CODE 39", 50, 150, 48);
             
                     // Add the barcode to the page
                     page.Elements.Add( barCode );	
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code39.#ctor(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Code39"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code39.#ctor(System.String,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Code39"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="showText"><b>true</b> to display value of barcode as text. Otherwise, display barcode only.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code39.#ctor(System.String,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Code39"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="font">The font to use when displaying text.</param>
            <param name="fontSize">The font size to use when displaying text.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code39.#ctor(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Code39"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="xDimension">The XDimension of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code39.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Code39"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="xDimension">The XDimension of the barcode.</param>
            <param name="showText"><b>true</b> to display value of barcode as text. Otherwise, display barcode only.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code39.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Code39"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="xDimension">The XDimension of the barcode.</param>
            <param name="font">The font to use when displaying text.</param>
            <param name="fontSize">The font size to use when displaying text.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code39.GetSymbolWidth">
            <summary>
            Returns the width required to display the full bar code.
            </summary>
            <returns>A value representing the required width.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code39.DrawBarCode(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the barcode to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the page element's output.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.Compaction">
            <summary>
            The type of Compaction to encode.
            </summary>
            <licensing>
            This enumeration is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.Compaction.Byte">
            <summary>
            Byte Compaction.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.Compaction.Text">
            <summary>
            Text Compaction.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.Compaction.Numeric">
            <summary>
            Numeric Compaction.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.Compaction.Automatic">
            <summary>
            All Compactions.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixBarcode">
             <summary>
             Represents a Data Matrix  bar code.
             </summary>
             <remarks>
             This class can be used to generate  Data Matrix barcode symbol.
            	</remarks>
             <example>The following example will place a Data Matrix bar code on the page.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements.BarCoding
             
             Module MyModule
             
                 Sub Main()
             
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document
             
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a data matrix bar code
                     Dim dataMatrixBarcode As DataMatrixBarcode = New DataMatrixBarcode("DataMatrix Bar code", 100, 100)
             
                     ' Add the data matrix Bar code to the page
                     MyPage.Elements.Add(dataMatrixBarcode)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements.BarCoding;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create a data matrix bar code
                     DataMatrixBarcode dataMatrixBarcode = new DataMatrixBarcode("DataMatrix Bar code", 100, 100);
            
                     // Add the data matrix Bar code to the page
                     page.Elements.Add(dataMatrixBarcode);
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.Dim2Barcode">
            <summary>
            The base class for Pdf417 and MacroPdf417.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Dim2Barcode.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the PDF417 bar code to the given <b>PageWriter</b> class.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> class to receive the PDF417 bar code's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Dim2Barcode.GetSymbolWidth">
            <summary>
            Returns the width required to display the full bar code.
            </summary>
            <returns>A value representing the required width.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Dim2Barcode.GetSymbolHeight">
            <summary>
            Returns the height required to display the full bar code.
            </summary>
            <returns>A value representing the required height.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.Dim2Barcode.Color">
            <summary>
            Gets or sets the Color for the bar code.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.Dim2Barcode.X">
            <summary>
            Gets or sets the X coordinate of the  bar code.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.Dim2Barcode.Y">
            <summary>
            Gets or sets the Y coordinate of the  bar code.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.Dim2Barcode.Angle">
            <summary>
            Gets or sets the angle of the bar code.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.Dim2Barcode.XDimension">
            <summary>
            Gets or sets the xDimension of the barcode.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.Dim2Barcode.XDimensionsPerInch">
            <summary>
            Gets or sets the XDimensionsPerInch of the barcode.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.Dim2Barcode.XDimensionsPerCentiMeter">
            <summary>
            Gets or sets the XDimensionsPerCentiMeter of the barcode.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.Dim2Barcode.XDimensionMils">
            <summary>
            Gets or sets the XDimensionMils of the barcode.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.Dim2Barcode.XDimensionMilliMeters">
            <summary>
            Gets or sets the XDimensionMilliMeters of the barcode.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixBarcode.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixBarcode"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixBarcode.#ctor(System.Byte[],System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixBarcode"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixBarcode.#ctor(System.String,System.Single,System.Single,ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixSymbolSize)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixBarcode"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="dataMatrixSymbolSize">The symbol size of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixBarcode.#ctor(System.Byte[],System.Single,System.Single,ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixSymbolSize)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixBarcode"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="dataMatrixSymbolSize">The symbol size of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixBarcode.#ctor(System.String,System.Single,System.Single,ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixSymbolSize,ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixEncodingType)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixBarcode"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="dataMatrixSymbolSize">The symbol size of the barcode.</param>
            <param name="dataMatrixEncodingType">The encoding type of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixBarcode.#ctor(System.Byte[],System.Single,System.Single,ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixSymbolSize,ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixEncodingType)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixBarcode"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="dataMatrixSymbolSize">The symbol size of the barcode.</param>
            <param name="dataMatrixEncodingType">The encoding type of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixBarcode.#ctor(System.Byte[],System.Single,System.Single,ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixSymbolSize,ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixEncodingType,ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixFunctionCharacter)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixBarcode"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="dataMatrixSymbolSize">The symbol size of the barcode.</param>
            <param name="dataMatrixEncodingType">The encoding type of the barcode.</param>
            <param name="dataMatrixFunctionCharacter">The function character of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixBarcode.#ctor(System.String,System.Single,System.Single,ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixSymbolSize,ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixEncodingType,ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixFunctionCharacter)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixBarcode"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="dataMatrixSymbolSize">The symbol size of the barcode.</param>
            <param name="dataMatrixEncodingType">The encoding type of the barcode.</param>
            <param name="dataMatrixFunctionCharacter">The function character of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixBarcode.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the datamatrix barcode to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the datamatrix barcode output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixBarcode.GetOverFlowDataMatrixBarcode(System.Single,System.Single)">
            <summary>
            Gets a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixBarcode"/> class.
            </summary>
            <param name="x">The X coordinate of the data matrix bar code.</param>
            <param name="y">The Y coordinate of the data matrix bar code.</param>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixBarcode"/> object.</returns>
            <remarks>This method returns a new <b>DataMatrixBarcode</b> object that contains the remaining data that did not fit.</remarks>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixBarcode.GetOverFlowDataMatrixBarcode">
            <summary>
            Gets a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixBarcode"/> class.
            </summary>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixBarcode"/> object.</returns>
            <remarks>This method returns a new <b>DataMatrixBarcode</b> object that contains the remaining data that did not fit.</remarks>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixBarcode.GetSymbolHeight">
            <summary>
            Returns the height required to display the Data Matrix bar code.
            </summary>
            <returns>A value representing the required height.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixBarcode.GetSymbolWidth">
            <summary>
            Returns the Width required to display the Data Matrix bar code.
            </summary>
            <returns>A value representing the required width.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixBarcode.ProcessTilde">
            <summary>
            Gets or sets wheter to process tilde character.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixEncodingType">
            <summary>
            Specifies EncodingType.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>    
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixEncodingType.Auto">
            <summary>
            Calulates Encoding based on Value.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixEncodingType.AutoAscii">
            <summary>
            Calulates ASCII Encoding based on Value.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixEncodingType.Ascii">
            <summary>
            ASCII Encoding.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixEncodingType.ExtendedAscii">
            <summary>
            Extended ASCII Encoding.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixEncodingType.DoubleDigit">
            <summary>
            Double digit Encoding.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixEncodingType.C40">
            <summary>
            C40 Encoding.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixEncodingType.Text">
            <summary>
            Text Encoding.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixEncodingType.AnsiX12">
            <summary>
            ANSI X12 Encoding.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixEncodingType.Edifact">
            <summary>
            EDIFACT Encoding.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixEncodingType.Base256">
            <summary>
            Base256 Encoding.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixFunctionCharacter">
            <summary>
            Specifies the Function Character.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>    
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixFunctionCharacter.Macro05">
            <summary>
            Macro 05 Character.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixFunctionCharacter.Macro06">
            <summary>
            Macro 06 Character.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixFunctionCharacter.ReaderProgramming">
            <summary>
            ReaderProgramming Character.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixFunctionCharacter.FNC1">
            <summary>
            FNC1 Character.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixFunctionCharacter.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixSymbolSize">
            <summary>
            Specifies the symbol size.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>    
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixSymbolSize.Auto">
            <summary>
            Calculates symbol size based on the value.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixSymbolSize.R10xC10">
            <summary>
            10 rows by 10 columns.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixSymbolSize.R12xC12">
            <summary>
            12 rows by 12 columns.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixSymbolSize.R14xC14">
            <summary>
            14 rows by 14 columns.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixSymbolSize.R16xC16">
            <summary>
            16 rows by 16 columns.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixSymbolSize.R18xC18">
            <summary>
            18 rows by 18 columns.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixSymbolSize.R20xC20">
            <summary>
            20 rows by 20 columns.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixSymbolSize.R22xC22">
            <summary>
            22 rows by 22 columns.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixSymbolSize.R24xC24">
            <summary>
            24 rows by 24 columns.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixSymbolSize.R26xC26">
            <summary>
            26 rows by 26 columns.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixSymbolSize.R32xC32">
            <summary>
            32 rows by 32 columns.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixSymbolSize.R36xC36">
            <summary>
            36 rows by 36 columns.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixSymbolSize.R40xC40">
            <summary>
            40 rows by 40 columns.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixSymbolSize.R44xC44">
            <summary>
            44 rows by 44 columns.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixSymbolSize.R48xC48">
            <summary>
            48 rows by 48 columns.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixSymbolSize.R52xC52">
            <summary>
            52 rows by 52 columns.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixSymbolSize.R64xC64">
            <summary>
            64 rows by 64 columns.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixSymbolSize.R72xC72">
            <summary>
            72 rows by 72 columns.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixSymbolSize.R80xC80">
            <summary>
            80 rows by 80 columns.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixSymbolSize.R88xC88">
            <summary>
            88 rows by 88 columns.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixSymbolSize.R96xC96">
            <summary>
            96 rows by 96 columns.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixSymbolSize.R104xC104">
            <summary>
            104 rows by 104 columns.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixSymbolSize.R120xC120">
            <summary>
            120 rows by 120 columns.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixSymbolSize.R132xC132">
            <summary>
            132 rows by 132 columns.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixSymbolSize.R144xC144">
            <summary>
            144 rows by 144 columns.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixSymbolSize.R8xC18">
            <summary>
            8 rows by 18 columns.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixSymbolSize.R8xC32">
            <summary>
            8 rows by 32 columns.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixSymbolSize.R12xC26">
            <summary>
            12 rows by 26 columns.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixSymbolSize.R12xC36">
            <summary>
            12 rows by 36 columns.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixSymbolSize.R16xC36">
            <summary>
            16 rows by 36 columns.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.DataMatrixSymbolSize.R16xC48">
            <summary>
            16 rows by 48 columns.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean13">
             <summary>
             Represents an EAN/JAN 13 bar code.
             </summary>
             <remarks>This class can be used to place an EAN/JAN 13 bar code on a page.</remarks>
             <example>The following example will place an EAN/JAN 13 bar code on the page.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements.BarCoding
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a bar code
                     Dim barCode As Ean13 = New Ean13("123456789012", 50, 50)
             
                     ' Add the bar code to the page
                     MyPage.Elements.Add(barCode)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements.BarCoding;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create a barcode
                     Ean13 barCode = new Ean13("123456789012", 50, 300);
             
                     // Add the barcode to the page
                     page.Elements.Add( barCode );	
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcBase">
            <summary>
            Base class from which UPC, EAN, and JAN bar code page elements are derived.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcBase.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcBase"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcBase.#ctor(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcBase"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="scale">The scale of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcBase.SetScale(System.Single)">
            <summary>
            Sets the scale of the bar code.
            </summary>
            <param name="scale">The scale to set.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean13.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean13"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean13.#ctor(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean13"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="scale">The scale of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean13.GetSymbolWidth">
            <summary>
            Returns the width required to display the full bar code.
            </summary>
            <returns>A value representing the required width.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean13.DrawBarCode(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the barcode to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the page element's output.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup2">
             <summary>
             Represents an EAN/JAN 13, 2 digit supplement bar code.
             </summary>
             <remarks>This class can be used to place an EAN/JAN 13, 2 digit supplement bar code on a page.</remarks>
             <example>The following example will place an EAN/JAN 13, 2 digit supplement bar code on the page.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements.BarCoding
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a bar code
                     Dim barCode As Ean13Sup2 = New Ean13Sup2("12345678901212", 50, 50)
             
                     ' Add the bar code to the page
                     MyPage.Elements.Add(barCode)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements.BarCoding;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create a barcode
                     Ean13Sup2 barCode = new Ean13Sup2("12345678901212", 50, 400);
             
                     // Add the barcode to the page
                     page.Elements.Add( barCode );	
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup2.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup2"/> class.
            </summary>
            <param name="value">The value (including supplemental value) of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup2.#ctor(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup2"/> class.
            </summary>
            <param name="value">The value (including supplemental value) of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="scale">The scale of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup2.#ctor(System.String,System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup2"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="supplementalValue">The supplemental value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup2.#ctor(System.String,System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup2"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="supplementalValue"></param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="scale">The scale of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup2.GetSymbolWidth">
            <summary>
            Returns the width required to display the full bar code.
            </summary>
            <returns>A value representing the required width.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup2.DrawBarCode(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the barcode to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the page element's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup2.SupplementalValue">
            <summary>
            Gets or sets the supplemental value of the barcode.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup5">
             <summary>
             Represents an EAN/JAN 13, 5 digit supplement bar code.
             </summary>
             <remarks>This class can be used to place an EAN/JAN 13, 5 digit supplement bar code on a page.</remarks>
             <example>The following example will place an EAN/JAN 13, 5 digit supplement bar code on the page.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements.BarCoding
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a bar code
                     Dim barCode As Ean13Sup5 = New Ean13Sup5("12345678901212345", 50, 50)
             
                     ' Add the bar code to the page
                     MyPage.Elements.Add(barCode)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements.BarCoding;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create a barcode
                     Ean13Sup5 barCode = new Ean13Sup5("12345678901212345", 50, 500);
             
                     // Add the barcode to the page
                     page.Elements.Add( barCode );	
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup5.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup5"/> class.
            </summary>
            <param name="value">The value (including supplemental value) of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup5.#ctor(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup5"/> class.
            </summary>
            <param name="value">The value (including supplemental value) of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="scale">The scale of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup5.#ctor(System.String,System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup5"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="supplementalValue"></param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup5.#ctor(System.String,System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup5"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="supplementalValue"></param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="scale">The scale of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup5.GetSymbolWidth">
            <summary>
            Returns the width required to display the full bar code.
            </summary>
            <returns>A value representing the required width.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup5.DrawBarCode(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the barcode to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the page element's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup5.SupplementalValue">
            <summary>
            Gets or sets the supplemental value of the barcode.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean8">
             <summary>
             Represents an EAN/JAN 8 bar code.
             </summary>
             <remarks>This class can be used to place an EAN/JAN 8 bar code on a page.</remarks>
             <example>The following example will place an EAN/JAN 8 bar code on the page.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements.BarCoding
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a bar code
                     Dim barCode As Ean8 = New Ean8("12345670", 50, 50)
             
                     ' Add the bar code to the page
                     MyPage.Elements.Add(barCode)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements.BarCoding;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create a barcode
                     Ean8 barCode = new Ean8("12345670", 50, 50);
             
                     // Add the barcode to the page
                     page.Elements.Add( barCode );	
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean8.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean8"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean8.#ctor(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean8"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="scale">The scale of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean8.GetSymbolWidth">
            <summary>
            Returns the width required to display the full bar code.
            </summary>
            <returns>A value representing the required width.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean8.DrawBarCode(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the barcode to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the page element's output.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup2">
             <summary>
             Represents an EAN/JAN 8, 2 digit supplement bar code.
             </summary>
             <remarks>This class can be used to place an EAN/JAN 8, 2 digit supplement bar code on a page.</remarks>
             <example>The following example will place an EAN/JAN 8, 2 digit supplement bar code on the page.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements.BarCoding
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a bar code
                     Dim barCode As Ean8Sup2 = New Ean8Sup2("1234567012", 50, 50)
             
                     ' Add the bar code to the page
                     MyPage.Elements.Add(barCode)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements.BarCoding;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create a barcode
                     Ean8Sup2 barCode = new Ean8Sup2("1234567012", 50, 50);
             
                     // Add the barcode to the page
                     page.Elements.Add( barCode );	
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup2.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup2"/> class.
            </summary>
            <param name="value">The value (including supplemental value) of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup2.#ctor(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup2"/> class.
            </summary>
            <param name="value">The value (including supplemental value) of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="scale">The scale of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup2.#ctor(System.String,System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup2"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="supplementalValue"></param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup2.#ctor(System.String,System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup2"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="supplementalValue"></param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="scale">The scale of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup2.GetSymbolWidth">
            <summary>
            Returns the width required to display the full bar code.
            </summary>
            <returns>A value representing the required width.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup2.DrawBarCode(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the barcode to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the page element's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup2.SupplementalValue">
            <summary>
            Gets or sets the supplemental value of the barcode.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup5">
             <summary>
             Represents an EAN/JAN 8, 5 digit supplement bar code.
             </summary>
             <remarks>This class can be used to place an EAN/JAN 8, 5 digit supplement bar code on a page.</remarks>
             <example>The following example will place an EAN/JAN 8, 5 digit supplement bar code on the page.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements.BarCoding
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a bar code
                     Dim barCode As Ean8Sup5 = New Ean8Sup5("1234567012345", 50, 50)
             
                     ' Add the bar code to the page
                     MyPage.Elements.Add(barCode)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements.BarCoding;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create a barcode
                     Ean8Sup5 barCode = new Ean8Sup5("1234567012345", 50, 50);
             
                     // Add the barcode to the page
                     page.Elements.Add( barCode );	
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup5.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup5"/> class.
            </summary>
            <param name="value">The value (including supplemental value) of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup5.#ctor(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup5"/> class.
            </summary>
            <param name="value">The value (including supplemental value) of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="scale">The scale of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup5.#ctor(System.String,System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup5"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="supplementalValue"></param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup5.#ctor(System.String,System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup5"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="supplementalValue"></param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="scale">The scale of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup5.GetSymbolWidth">
            <summary>
            Returns the width required to display the full bar code.
            </summary>
            <returns>A value representing the required width.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup5.DrawBarCode(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the barcode to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the page element's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup5.SupplementalValue">
            <summary>
            Gets or sets the supplemental value of the barcode.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.ErrorCorrection">
            <summary>
            The level of error correction to use.
            </summary>
            <licensing>
            This enumeration is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.ErrorCorrection.Level0">
            <summary>
            Error Correction Level 0.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.ErrorCorrection.Level1">
            <summary>
            Error Correction Level 1.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.ErrorCorrection.Level2">
            <summary>
            Error Correction Level 2.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.ErrorCorrection.Level3">
            <summary>
            Error Correction Level 3.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.ErrorCorrection.Level4">
            <summary>
            Error Correction Level 4.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.ErrorCorrection.Level5">
            <summary>
            Error Correction Level 5.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.ErrorCorrection.Level6">
            <summary>
            Error Correction Level 6.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.ErrorCorrection.Level7">
            <summary>
            Error Correction Level 7.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.ErrorCorrection.Level8">
            <summary>
            Error Correction Level 8.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.ErrorCorrection.Auto">
            <summary>
            Error Correction Auto.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.MailerIDLength">
            <summary>
            Specifies mailer ID length.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.MailerIDLength.Length6">
            <summary>Length is 6.</summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.MailerIDLength.Length9">
            <summary>Length is 9.</summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.IntelligentMailBarCode">
             <summary>
             Represents a Intelligent Mail  bar code.
             </summary>
             <remarks>This class can be used to place a Intelligent Mail bar code on a page.</remarks>
             <example>The following example will place a Intelligent Mail bar code on the page.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements.BarCoding
             
             Module MyModule
             
                 Sub Main()
             
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a intelligent mail barcode
                     Dim intelligentMailBarCode As IntelligentMailBarCode = New IntelligentMailBarCode("0123456709498765432101234567891",50, 150)
             
                     ' Add the intelligent mail barcode to the page
                     MyPage.Elements.Add(intelligentMailBarCode)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements.BarCoding;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create a intelligent mail barcode
                     IntelligentMailBarCode intelligentMailBarCode = new IntelligentMailBarCode("0123456709498765432101234567891",50, 150);
             
                     // Add the intelligent mail barcode to the page
                     page.Elements.Add( intelligentMailBarCode );	
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.IntelligentMailBarCode.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.IntelligentMailBarCode"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.IntelligentMailBarCode.#ctor(System.String,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.IntelligentMailBarCode"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="showText"><b>true</b> to display value of barcode as text. Otherwise, display barcode only.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.IntelligentMailBarCode.DrawBarCode(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the barcode to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the page element's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.IntelligentMailBarCode.GetSymbolWidth">
            <summary>
            Returns the width required to display the full bar code.
            </summary>
            <returns>A value representing the required width.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.IntelligentMailBarCode.ShowTextAbove">
            <summary>
            Gets or sets a value indicating if the value should be placed as text above or below the barcode.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.IntelligentMailBarCode.MailerIDLength">
            <summary>
            Gets or sets a value indicating the length of mailer ID.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.Interleaved25">
             <summary>
             Represents an interleaved 2 of 5 bar code.
             </summary>
             <remarks>This class can be used to place an interleaved 2 of 5 bar code on a page.</remarks>
             <example>The following example will place an interleaved 2 of 5 bar code on the page.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements.BarCoding
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a bar code
                     Dim barCode As Interleaved25 = New Interleaved25("1234567890", 50, 50, 48)
             
                     ' Add the bar code to the page
                     MyPage.Elements.Add(barCode)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements.BarCoding;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create a barcode
                     Interleaved25 barCode = new Interleaved25("1234567890", 50, 200, 48);
             
                     // Add the barcode to the page
                     page.Elements.Add( barCode );	
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Interleaved25.#ctor(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Interleaved25"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Interleaved25.#ctor(System.String,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Interleaved25"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="showText"><b>true</b> to display value of barcode as text. Otherwise, display barcode only.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Interleaved25.#ctor(System.String,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Interleaved25"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="font">The font to use when displaying text.</param>
            <param name="fontSize">The font size to use when displaying text.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Interleaved25.#ctor(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Interleaved25"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="xDimension">The XDimension of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Interleaved25.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Interleaved25"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="xDimension">The XDimension of the barcode.</param>
            <param name="showText"><b>true</b> to display value of barcode as text. Otherwise, display barcode only.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Interleaved25.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Interleaved25"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="xDimension">The XDimension of the barcode.</param>
            <param name="font">The font to use when displaying text.</param>
            <param name="fontSize">The font size to use when displaying text.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Interleaved25.GetSymbolWidth">
            <summary>
            Returns the width required to display the full bar code.
            </summary>
            <returns>A value representing the required width.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Interleaved25.DrawBarCode(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the barcode to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the page element's output.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.InvalidValueBarCodeException">
            <summary>
            The exception that is thrown when an invalid bar code value exists.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.InvalidValueBarCodeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.InvalidValueBarCodeException"/> class.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the error.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.InvalidValueBarCodeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.InvalidValueBarCodeException"/> class.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.MacroPdf417">
             <summary>
             Represents a MacroPdf417 bar code.
             </summary>
             <remarks>
             Class can be used to generate more than one PDF417 bar code symbols by taking input
             from the file.
             </remarks>
             <example>The following example will place a MacroPdf417 bar code on the page.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements.BarCoding
             
             Module MyModule
             
                 Sub Main()
             
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document
             
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a MacroPdf417 bar code
                     Dim macroPdf417 As MacroPdf417 = New MacroPdf417("MacroPdf417 Bar code", _
             			10.0f, 10.0f, 3, 2.0f)
             
                     ' Add the MacroPdf417 bar code to the page
                     MyPage.Elements.Add(macroPdf417)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements.BarCoding;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create a MacroPdf417 bar code
                     MacroPdf417 macroPdf417 = new MacroPdf417( "MacroPdf417 Bar code",
             			10.0f, 10.0f, 3, 2.0f );
            
                     // Add the MacroPdf417 Bar code to the page
                     page.Elements.Add( macroPdf417 );
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.Pdf417">
             <summary>
             Represents Pdf417 barcode.
             </summary>
             <remarks>
             This class can be used to generate Pdf417 barcode symbol.
            	</remarks>
             <example>The following example will place a Pdf417 bar code on the page.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements.BarCoding
             
             Module MyModule
             
                 Sub Main()
             
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document
             
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a Pdf417 bar code
                     Dim pdf417 As Pdf417 = New Pdf417("Pdf417 Bar code", _
             			10.0f, 10.0f, 2, 2.0f)
             
                     ' Add the Pdf417 bar code to the page
                     MyPage.Elements.Add(pdf417)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements.BarCoding;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create a Pdf417 bar code
                     Pdf417 pdf417 = new Pdf417( "Pdf417 Bar code", 10.0f, 10.0f, 2, 2.0f );
            
                     // Add the Pdf417 Bar code to the page
                     page.Elements.Add( pdf417 );
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Pdf417.#ctor(System.String,System.Single,System.Single,System.Int32,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Pdf417"/> class.
            </summary>
            <param name="value">String to be encoded.</param>
            <param name="x">The X coordinate of the PDF417 bar code.</param>
            <param name="y">The Y coordinate of the PDF417 bar code.</param>
            <param name="columns">Columns of the PDF417 bar code.</param>
            <param name="xDimension">The XDimension of the PDF417 bar code.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Pdf417.#ctor(System.Byte[],System.Single,System.Single,System.Int32,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Pdf417"/> class.
            </summary>
            <param name="values">Byte array to be encoded.</param>
            <param name="x">The X coordinate of the PDF417 bar code.</param>
            <param name="y">The Y coordinate of the PDF417 bar code.</param>
            <param name="columns">Columns of the PDF417 bar code.</param>
            <param name="xDimension">The XDimension of the PDF417 bar code.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Pdf417.GetSymbolWidth">
            <summary>
            Returns the width required to display the PDF417 bar code.
            </summary>
            <returns>A value representing the required width.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Pdf417.GetSymbolHeight">
            <summary>
            Returns the height required to display the PDF417 bar code.
            </summary>
            <returns>A value representing the required height.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Pdf417.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the PDF417 to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the PDF417's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.Pdf417.Value">
            <summary>
            Gets or sets the value of the barcode.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.Pdf417.YDimension">
            <summary>
            Gets or sets the yDimension of the barcode.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.Pdf417.YDimensionsPerInch">
            <summary>
            Gets or sets the YDimensionsPerInch of the barcode.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.Pdf417.YDimensionsPerCentiMeter">
            <summary>
            Gets or sets the YDimensionsPerCentiMeter of the barcode.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.Pdf417.YDimensionMils">
            <summary>
            Gets or sets the YDimensionMils of the barcode.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.Pdf417.YDimensionMilliMeters">
            <summary>
            Gets or sets the YDimensionMilliMeters of the barcode.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.Pdf417.CompactPdf417">
            <summary>
            Gets or sets the Compact Pdf417.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.Pdf417.Compaction">
            <summary>
            Gets or sets the type of compaction.
            </summary>
            <returns>Returns a <see cref="P:ceTe.DynamicPDF.PageElements.BarCoding.Pdf417.Compaction"/> object.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.Pdf417.ErrorCorrection">
            <summary>
            Gets or sets the error correction level for the PDF417 bar code.
            </summary>
            <returns>Returns a <see cref="P:ceTe.DynamicPDF.PageElements.BarCoding.Pdf417.ErrorCorrection"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.MacroPdf417.#ctor(System.String,System.Single,System.Single,System.Int32,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.MacroPdf417"/> class.
            </summary>
            <param name="value">String to be encoded.</param>
            <param name="x">The X coordinate of the macro PDF417 bar code.</param>
            <param name="y">The Y coordinate of the macro PDF417 bar code.</param>
            <param name="columns">Columns of the macro PDF417 bar code.</param>
            <param name="xDimension">The XDimension of the macro PDF417 bar code.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.MacroPdf417.#ctor(System.Byte[],System.Single,System.Single,System.Int32,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.MacroPdf417"/> class.
            </summary>
            <param name="values">Byte array to be encoded.</param>
            <param name="x">The X coordinate of the macro PDF417 bar code.</param>
            <param name="y">The Y coordinate of the macro PDF417 bar code.</param>
            <param name="columns">Columns of the macro PDF417 bar code.</param>
            <param name="xDimension">The XDimension of the macro PDF417 bar code.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.MacroPdf417.#ctor(System.Byte[],System.Single,System.Single,System.Int32,System.Int32,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.MacroPdf417"/> class.
            </summary>
            <param name="values">Byte array to be encoded.</param>
            <param name="x">The X coordinate of the macro PDF417 bar code.</param>
            <param name="y">The Y coordinate of the macro PDF417 bar code.</param>
            <param name="columns">Columns of the macro PDF417 bar code.</param>
            <param name="rows">Rows of the macro PDF417 bar code.</param>
            <param name="xDimension">The XDimension of the macro PDF417 bar code.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.MacroPdf417.#ctor(System.String,System.Single,System.Single,System.Int32,System.Int32,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.MacroPdf417"/> class.
            </summary>
            <param name="value">String to be encoded.</param>
            <param name="x">The X coordinate of the macro PDF417 bar code.</param>
            <param name="y">The Y coordinate of the macro PDF417 bar code.</param>
            <param name="columns">Columns of the macro PDF417 bar code.</param>
            <param name="rows">Rows of the macro PDF417 bar code.</param>
            <param name="xDimension">The XDimension of the macro PDF417 bar code.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.MacroPdf417.GetSymbolWidth">
            <summary>
            Returns the width required to display the macro PDF417 bar code.
            </summary>
            <returns>A value representing the required width.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.MacroPdf417.GetSymbolHeight">
            <summary>
            Returns the height required to display the PDF417 bar code.
            </summary>
            <returns>A value representing the required height.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.MacroPdf417.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the macro PDF417 to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the macro PDF417's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.MacroPdf417.GetOverflowMacroPdf417">
             <summary>
             Gets a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.MacroPdf417"/> class.
             </summary>
             <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.MacroPdf417"/> object.</returns>
             <remarks>This method returns a new <b>MacroPdf417</b> object that contains the remaining data that did not fit.</remarks>
             <example>The following example shows you how to use the GetOverflowMacroPdf417 method to allow MacroPdf417 bar codes to flow onto new pages as needed.<p/>
             <code lang="VB">
             Imports System
             Imports System.IO;
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements.BarCoding
             
             Module MyModule
            
            		Sub Main()
            
            			' Create a PDF Document
            			Dim MyDocument As Document = New Document
            
            			Dim bytArry(100) As Byte
            			Try
            				Dim fs As FileStream = New FileStream("C:/Textdata.txt", FileMode.Open)
            				Dim avail As Integer = CType(fi.Length,Integer)
             			ReDim bytArry(avial)
            				fs.Read(bytArry, 0, avial)
            				fs.Close()
            			Catch e As System.Exception
            				Console.WriteLine("EXCEPTION")
            			End Try
            
            			Dim x As Single
            			x = 10
            			Dim y As Single
            			y = 10
            
            			' Create a MacroPdf417 bar code
            			Dim macroPdf417 As MacroPdf417 = New MacroPdf417(bytArry, x, y, 14, 0.5F)
            
            			macroPdf417.FileName = "Textdata.txt"
            			macroPdf417.Sender = "Your Name"
            			macroPdf417.Address = "Your Address"
            			macroPdf417.IncludeFileSize = True
            			macroPdf417.IncludeCheckSum = True
            			macroPdf417.IncludeTimeStamp = True
            			macroPdf417.FileId = 22222222
            
            			Do
            	            ' Create a Page
            			    Dim MyPage As Page = New Page
            
             			 ' Add the MacroPdf417 bar code to the page
            			    MyPage.Elements.Add( macroPdf417 )
            
             			' Add Page to the document
             		    MyDocument.Pages.Add(MyPage)
            
             			' if there is no overflow MacroPdf417 set to null
             			macroPdf417 = macroPdf417.GetOverflowMacroPdf417()
            			Loop While Not macroPdf417 Is Nothing
            
            			' Save the PDF
            			MyDocument.Draw("C:\MyDocument.pdf")
            
            		End Sub
            	End Module
             </code>
             <code lang="C#">
             using System;
             using System.IO;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements.BarCoding;
             
             class MyClass
             {
             	static void Main()
             	{
             		// Create a PDF Document
             		Document document = new Document();
            
             		byte[] bytArry = null;
            			try
             		{
            		   		FileStream fs = new FileStream( @"C:/Textdata.txt", FileMode.Open );
            		    	bytArry = new byte[fs.Length];
            		    	fs.Read( bytArry, 0, (int)fs.Length );
            				fs.Close();
             		}
            			catch( Exception e )
            			{
            				Console.WriteLine( "EXCEPTION  "+e.Message );
            			}
            
             		float x = 10.0f;
             		float y = 10.0f;;
            
             		// Create a MacroPdf417 bar code
             		MacroPdf417 macroPdf417 = new MacroPdf417( bytArry, x, y, 14, 0.5f );
            
             		macroPdf417.FileName = "Textdata.txt";
             		macroPdf417.Sender = "Your Name";
             		macroPdf417.Address = "Your Address";
             		macroPdf417.IncludeFileSize = true;
             		macroPdf417.IncludeCheckSum = true;
             		macroPdf417.IncludeTimeStamp = true;
             		macroPdf417.FileId = 22222222;
            
             		do
             		{
             			// Create a Page
             		    Page page = new Page();
            
             			// Add the MacroPdf417 bar code to the page
             			page.Elements.Add( macroPdf417 );
             
             			// Add it to the document
             		    document.Pages.Add( page );
            
             			macroPdf417 = macroPdf417.GetOverflowMacroPdf417();
             		} while( macroPdf417 != null );
            
             		// Save the PDF
             		document.Draw( @"C:\MyDocument.pdf" );
             	}
             }
             </code>
             </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.MacroPdf417.GetOverflowMacroPdf417(System.Single,System.Single)">
             <summary>
             Gets a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.MacroPdf417"/> class.
             </summary>
             <param name="x">The X coordinate of the macro PDF417 bar code.</param>
             <param name="y">The Y coordinate of the macro PDF417 bar code.</param>
             <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.MacroPdf417"/> object.</returns>
             <remarks>This method returns a new <b>MacroPdf417</b> object that contains the remaining data that did not fit.</remarks>
             <example>The following example shows you how to use the GetOverflowMacroPdf417 method with x and y co ordinates to allow MacroPdf417 bar codes to flow onto new pages as needed.<p/>
             <code lang="VB">
             Imports System
             Imports System.IO;
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements.BarCoding
             
             Module MyModule
            
            		Sub Main()
            
            			' Create a PDF Document
            			Dim MyDocument As Document = New Document
            
            			' Create a Page and add it to the document
            			Dim MyPage As Page = New Page
             		MyDocument.Pages.Add(MyPage)
            
            			Dim bytArry(100) As Byte
            			Try
            				Dim fs As FileStream = New FileStream("C:/Textdata.txt", FileMode.Open)
            				Dim avail As Integer = CType(fi.Length,Integer)
             			ReDim bytArry(avail)
            				fs.Read(bytArry, 0, avail)
            				fs.Close()
            			Catch e As System.Exception
            				Console.WriteLine("EXCEPTION")
            			End Try
            
            			Dim x As Single
            			x = 10
            			Dim y As Single
            			y = 10
            
            			' Create a MacroPdf417 bar code
            			Dim macroPdf417 As MacroPdf417 = New MacroPdf417(bytArry, x, y, 14, 0.5F)
            
            			macroPdf417.FileName = "Textdata.txt"
            			macroPdf417.Sender = "Your Name"
            			macroPdf417.Address = "Your Address"
            			macroPdf417.IncludeFileSize = True
            			macroPdf417.IncludeCheckSum = True
            			macroPdf417.IncludeTimeStamp = True
            			macroPdf417.FileId = 22222222
            
            			' Add the MacroPdf417 bar code to the page
            			MyPage.Elements.Add( macroPdf417 )
            
            			y = y + macroPdf417.GetSymbolHeight() + 20
            
            			Dim objMacroPdf417 As MacroPdf417
            			Do
            				objMacroPdf417 = macroPdf417.GetOverflowMacroPdf417(x, y)
            				If Not (objMacroPdf417 Is Nothing) then
            					Mypage.Elements.Add(objMacroPdf417)
            					y = y + objMacroPdf417.GetSymbolHeight() + 20
            				End If
            			Loop Until Not (objMacroPdf417 Is Nothing)
            
            			' Save the PDF
            			MyDocument.Draw("C:\MyDocument.pdf")
            
            		End Sub
            	End Module
             </code>
             <code lang="C#">
             using System;
             using System.IO;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements.BarCoding;
             
             class MyClass
             {
             	static void Main()
             	{
             		// Create a PDF Document
             		Document document = new Document();
            
             		// Create a Page and add it to the document
             		Page page = new Page();
             		document.Pages.Add( page );
            
             		byte[] bytArry = null;
            			try
             		{
            		   		FileStream fs = new FileStream( @"C:/Textdata.txt", FileMode.Open );
            		    	bytArry = new byte[fs.Length];
            		    	fs.Read( bytArry, 0, (int)fs.Length );
            				fs.Close();
             		}
            			catch( Exception e )
            			{
            				Console.WriteLine( "EXCEPTION  "+e.Message );
            			}
            
             		float x = 10.0f;
             		float y = 10.0f;;
            
             		// Create a MacroPdf417 bar code
             		MacroPdf417 macroPdf417 = new MacroPdf417( bytArry, x, y, 14, 0.5f );
            
             		macroPdf417.FileName = "Textdata.txt";
             		macroPdf417.Sender = "Your Name";
             		macroPdf417.Address = "Your Address";
             		macroPdf417.IncludeFileSize = True;
             		macroPdf417.IncludeCheckSum = True;
             		macroPdf417.IncludeTimeStamp = True;
             		macroPdf417.FileId = 22222222;
            
             		// Add the MacroPdf417 bar code to the page
             		page.Elements.Add( macroPdf417 );
            
             		y += macroPdf417.GetSymbolHeight() + 20.0f;
            
             		MacroPdf417 objMacroPdf417 = null;
             		do
             		{
             			objMacroPdf417 = macroPdf417.GetOverflowMacroPdf417( x, y );
             			if( objMacroPdf417 != null )
             			{
             				page.Elements.Add( objMacroPdf417 );
             				y += objMacroPdf417.GetSymbolHeight() + 20.0f;
             			}
            
             		} while( objMacroPdf417 != null );
            
             		// Save the PDF
             		document.Draw( @"C:\MyDocument.pdf" );
             	}
             }
             </code>
             </example>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.MacroPdf417.FileName">
            <summary>
            Gets or sets included file name in the macro PDF417 bar code.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.MacroPdf417.Sender">
            <summary>
            Gets or sets included sender in the macro PDF417 bar code.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.MacroPdf417.Address">
            <summary>
            Gets or sets included address in the macro PDF417 bar code.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.MacroPdf417.FileId">
            <summary>
            Gets or sets included file id in the macro PDF417 bar code.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.MacroPdf417.IncludeFileSize">
            <summary>
            Specifies whether file size should be included in macro PDF417 bar code or not.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.MacroPdf417.IncludeCheckSum">
            <summary>
            Specifies whether check sum should be included in macro PDF417 bar code or not.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.MacroPdf417.IncludeTimeStamp">
            <summary>
            Specifies whether time stamp should be included in macro PDF417 bar code or not.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.Postnet">
             <summary>
             Represents a Postnet bar code.
             </summary>
             <remarks>This class can be used to place a Postnet bar code on a page.</remarks>
             <example>The following example will place a Postnet bar code on the page.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements.BarCoding
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a bar code
                     Dim barCode As Postnet = New Postnet("20815470412", 50, 50)
             
                     ' Add the bar code to the page
                     MyPage.Elements.Add(barCode)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements.BarCoding;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create a barcode
                     Postnet barCode = new Postnet("20815470412", 50, 250);
             
                     // Add the barcode to the page
                     page.Elements.Add( barCode );	
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Postnet.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Postnet"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Postnet.GetSymbolWidth">
            <summary>
            Returns the width required to display the full bar code.
            </summary>
            <returns>A value representing the required width.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Postnet.DrawBarCode(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the barcode to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the page element's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.Postnet.AppendCheckDigit">
            <summary>
            Gets or sets a value specifying if the check digit should calculated.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.QrCode">
             <summary>
             Represents a QR code.
             </summary>
             <remarks>
             This class can be used to place a QR code on a page.
            	</remarks>
             <example>The following example will place a QR code on the page.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements.BarCoding
             
             Module MyModule
             
                 Sub Main()
             
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document
             
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a QR Code 
                     Dim qrCode As QrCode = New QrCode("QR code sample.", 100, 100)
             
                     ' Add the QR code to the page
                     MyPage.Elements.Add(qrCode)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements.BarCoding;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create a QR code
                     QrCode qrCode = new QrCode("QR code sample.", 100, 100);
            
                     // Add the QR code to the page
                     page.Elements.Add(qrCode);
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
             
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.QrCode.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.QrCode"/> class.
            </summary>
            <param name="text">The text of the QR code.</param>
            <param name="x">The X coordinate of the QR code.</param>
            <param name="y">The Y coordinate of the QR code.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.QrCode.#ctor(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.QrCode"/> class.
            </summary>
            <param name="text">The text of the QR code.</param>
            <param name="x">The X coordinate of the QR code.</param>
            <param name="y">The Y coordinate of the QR code.</param>
            <param name="xDimension">The XDimension of QR code.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.QrCode.#ctor(System.String,System.Single,System.Single,System.Single,ceTe.DynamicPDF.PageElements.BarCoding.QrCodeEncoding)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.QrCode"/> class.
            </summary>
            <param name="text">The text of the QR code.</param>
            <param name="x">The X coordinate of the QR code.</param>
            <param name="y">The Y coordinate of the QR code.</param>
            <param name="xDimension">The XDimension of QR code.</param>
            <param name="encoding">The encoding of QR code.</param><see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeEncoding"/>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.QrCode.#ctor(System.String,System.Single,System.Single,System.Single,ceTe.DynamicPDF.PageElements.BarCoding.QrCodeEncoding,ceTe.DynamicPDF.PageElements.BarCoding.QrCodeErrorCorrectionLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.QrCode"/> class.
            </summary>
            <param name="text">The text of the QR code.</param>
            <param name="x">The X coordinate of the QR code.</param>
            <param name="y">The Y coordinate of the QR code.</param>
            <param name="xDimension">The XDimension of QR code.</param>
            <param name="encoding">The encoding of QR code.</param><see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeEncoding"/>
            <param name="errorCorrectionLevel">The error correction level of QR code.</param><see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeErrorCorrectionLevel"/>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.QrCode.#ctor(System.String,System.Single,System.Single,ceTe.DynamicPDF.PageElements.BarCoding.QrCodeEncoding)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.QrCode"/> class.
            </summary>
            <param name="text">The text of the QR code.</param>
            <param name="x">The X coordinate of the QR code.</param>
            <param name="y">The Y coordinate of the QR code.</param>
            <param name="encoding">The encoding type of QR code.</param><see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeEncoding"/>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.QrCode.#ctor(System.String,System.Single,System.Single,ceTe.DynamicPDF.PageElements.BarCoding.QrCodeEncoding,ceTe.DynamicPDF.PageElements.BarCoding.QrCodeErrorCorrectionLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.QrCode"/> class.
            </summary>
            <param name="text">The text of the QR code.</param>
            <param name="x">The X coordinate of the QR code.</param>
            <param name="y">The Y coordinate of the QR code.</param>
            <param name="encoding">The encoding type of QR code.</param><see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeEncoding"/>
            <param name="errorCorrectionLevel">The error correction level of QR code.</param><see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeErrorCorrectionLevel"/>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.QrCode.#ctor(System.String,System.Single,System.Single,ceTe.DynamicPDF.PageElements.BarCoding.QrCodeEncoding,ceTe.DynamicPDF.PageElements.BarCoding.QrCodeErrorCorrectionLevel,ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.QrCode"/> class.
            </summary>
            <param name="text">The text of the QR code.</param>
            <param name="x">The X coordinate of the QR code.</param>
            <param name="y">The Y coordinate of the QR code.</param>
            <param name="encoding">The encoding type of QR code.</param><see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeEncoding"/>
            <param name="errorCorrectionLevel">The error correction level of QR code.</param><see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeErrorCorrectionLevel"/>
            <param name="version">The version of QR code.</param><see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion"/>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.QrCode.#ctor(System.String,System.Single,System.Single,System.Single,ceTe.DynamicPDF.PageElements.BarCoding.QrCodeEncoding,ceTe.DynamicPDF.PageElements.BarCoding.QrCodeErrorCorrectionLevel,ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.QrCode"/> class.
            </summary>
            <param name="text">The text of the QR code.</param>
            <param name="x">The X coordinate of the QR code.</param>
            <param name="y">The Y coordinate of the QR code.</param>
            <param name="xDimension">The XDimension of QR code.</param>
            <param name="encoding">The encoding of QR code.</param><see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeEncoding"/>
            <param name="errorCorrectionLevel">The error correction level of QR code.</param><see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeErrorCorrectionLevel"/>
            <param name="version">The version of QR code.</param><see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion"/>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.QrCode.#ctor(System.Byte[],System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.QrCode"/> class.
            </summary>
            <param name="value">The value of the QR code.</param>
            <param name="x">The X coordinate of the QR code.</param>
            <param name="y">The Y coordinate of the QR code.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.QrCode.#ctor(System.Byte[],System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.QrCode"/> class.
            </summary>
            <param name="value">The value of the QR code.</param>
            <param name="x">The X coordinate of the QR code.</param>
            <param name="y">The Y coordinate of the QR code.</param>
            <param name="xDimension">The XDimension of QR code.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.QrCode.#ctor(System.Byte[],System.Single,System.Single,System.Single,ceTe.DynamicPDF.PageElements.BarCoding.QrCodeErrorCorrectionLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.QrCode"/> class.
            </summary>
            <param name="value">The value of the QR code.</param>
            <param name="x">The X coordinate of the QR code.</param>
            <param name="y">The Y coordinate of the QR code.</param>
            <param name="xDimension">The XDimension of the QR code.</param>
            <param name="errorCorrectionLevel">The error correction level of QR code.</param><see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeErrorCorrectionLevel"/>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.QrCode.#ctor(System.Byte[],System.Single,System.Single,ceTe.DynamicPDF.PageElements.BarCoding.QrCodeErrorCorrectionLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.QrCode"/> class.
            </summary>
            <param name="value">The value of the QR code.</param>
            <param name="x">The X coordinate of the QR code.</param>
            <param name="y">The Y coordinate of the QR code.</param>
            <param name="errorCorrectionLevel">The error correction level of QR code.</param><see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeErrorCorrectionLevel"/>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.QrCode.#ctor(System.Byte[],System.Single,System.Single,ceTe.DynamicPDF.PageElements.BarCoding.QrCodeErrorCorrectionLevel,ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.QrCode"/> class.
            </summary>
            <param name="value">The value of the QR code.</param>
            <param name="x">The X coordinate of the QR code.</param>
            <param name="y">The Y coordinate of the QR code.</param>
            <param name="errorCorrectionLevel">The error correction level of QR code.</param><see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeErrorCorrectionLevel"/>
            <param name="version">The version of QR code.</param><see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion"/>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.QrCode.#ctor(System.Byte[],System.Single,System.Single,System.Single,ceTe.DynamicPDF.PageElements.BarCoding.QrCodeErrorCorrectionLevel,ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.QrCode"/> class.
            </summary>
            <param name="value">The value of the QR code.</param>
            <param name="x">The X coordinate of the QR code.</param>
            <param name="y">The Y coordinate of the QR code.</param>
            <param name="xDimension">The XDimension of QR code</param>
            <param name="errorCorrectionLevel">The error correction level of QR code.</param><see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeErrorCorrectionLevel"/>
            <param name="version">The version of QR code.</param><see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion"/>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.QrCode.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws QR code to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"> <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the QR code output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.QrCode.GetSymbolWidth">
            <summary>
            Returns the width required to display the QR code.
            </summary>
            <returns>A value representing the required width.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.QrCode.GetSymbolHeight">
            <summary>
            Returns the height required to display the QR code.
            </summary>
            <returns>A value representing the required height.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.QrCode.Version">
            <summary>
            Gets the QR code version.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.QrCode.Fnc1">
            <summary>
            Gets or sets FNC1 mode.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeEncoding">
            <summary>
            The type of encoding mode to use.
            </summary>
            <licensing>
            This enumeration is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeEncoding.Numeric">
            <summary>
            Encoding mode Numeric. Allows digits 0-9.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeEncoding.Alphanumeric">
            <summary>
            Encoding mode Alphanumeric. Allows digits 0-9, upper case letters (no lower case) and the following special characters: space,$,%,*,+,-,.,/,:.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeEncoding.Byte">
            <summary>
            Encoding mode Byte. Allows all types of characters.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeEncoding.Kanji">
            <summary>
            Encoding mode Kanji. Allows only Kanji characters.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeEncoding.Auto">
            <summary>
            Encoding mode Auto. Automatically selects the encoding mode depending on the content.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeErrorCorrectionLevel">
            <summary>
            The level of error correction to use in the QR code.
            </summary>
            <licensing>
            This enumeration is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeErrorCorrectionLevel.L">
            <summary>
            Allows recovery of up to 7% data loss.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeErrorCorrectionLevel.M">
            <summary>
            Allows recovery of up to 15% data loss.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeErrorCorrectionLevel.Q">
            <summary>
            Allows recovery of up to 25% data loss.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeErrorCorrectionLevel.H">
            <summary>
            Allows recovery of up to 30% data loss.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeException">
            <summary>
            The exception that is thrown for a QR code error.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeException"/> class.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the error.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeFnc1">
            <summary>
            The type of FNC1 mode to use.
            </summary>
            <licensing>
            This enumeration is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeFnc1.Gs1">
            <summary>
            FNC1 Gs1.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeFnc1.Industry">
            <summary>
            FNC1 Industry.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeFnc1.None">
            <summary>
            FNC1 None.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion">
            <summary>
            The QR code version to use.
            </summary>
            <licensing>
            This enumeration is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion.Version1">
            <summary>
            QR code Version 1.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion.Version2">
            <summary>
            QR code Version 2.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion.Version3">
            <summary>
            QR code Version 3.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion.Version4">
            <summary>
            QR code Version 4.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion.Version5">
            <summary>
            QR code Version 5.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion.Version6">
            <summary>
            QR code Version 6.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion.Version7">
            <summary>
            QR code Version 7.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion.Version8">
            <summary>
            QR code Version 8.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion.Version9">
            <summary>
            QR code Version 9.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion.Version10">
            <summary>
            QR code Version 10.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion.Version11">
            <summary>
            QR code Version 11.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion.Version12">
            <summary>
            QR code Version 12.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion.Version13">
            <summary>
            QR code Version 13.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion.Version14">
            <summary>
            QR code Version 14.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion.Version15">
            <summary>
            QR code Version 15.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion.Version16">
            <summary>
            QR code Version 16.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion.Version17">
            <summary>
            QR code Version 17.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion.Version18">
            <summary>
            QR code Version 18.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion.Version19">
            <summary>
            QR code Version 19.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion.Version20">
            <summary>
            QR code Version 20.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion.Version21">
            <summary>
            QR code Version 21.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion.Version22">
            <summary>
            QR code Version 22.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion.Version23">
            <summary>
            QR code Version 23.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion.Version24">
            <summary>
            QR code Version 24.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion.Version25">
            <summary>
            QR code Version 25.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion.Version26">
            <summary>
            QR code Version 26.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion.Version27">
            <summary>
            QR code Version 27.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion.Version28">
            <summary>
            QR code Version 28.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion.Version29">
            <summary>
            QR code Version 29.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion.Version30">
            <summary>
            QR code Version 30.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion.Version31">
            <summary>
            QR code Version 31.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion.Version32">
            <summary>
            QR code Version 32.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion.Version33">
            <summary>
            QR code Version 33.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion.Version34">
            <summary>
            QR code Version 34.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion.Version35">
            <summary>
            QR code Version 35.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion.Version36">
            <summary>
            QR code Version 36.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion.Version37">
            <summary>
            QR code Version 37.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion.Version38">
            <summary>
            QR code Version 38.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion.Version39">
            <summary>
            QR code Version 39.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion.Version40">
            <summary>
            QR code Version 40.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.QrCodeVersion.Auto">
            <summary>
            Defualt Version Auto.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionA">
             <summary>
             Represents a UPC Version A bar code.
             </summary>
             <remarks>This class can be used to place a UPC Version A bar code on a page.</remarks>
             <example>The following example will place a UPC Version A bar code on the page.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements.BarCoding
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a bar code
                     Dim barCode As UpcVersionA = New UpcVersionA("12345678901", 50, 50)
             
                     ' Add the bar code to the page
                     MyPage.Elements.Add(barCode)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements.BarCoding;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create a barcode
                     UpcVersionA barCode = new UpcVersionA("12345678901", 50, 600);
             
                     // Add the barcode to the page
                     page.Elements.Add( barCode );	
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionA.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionA"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionA.#ctor(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionA"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="scale">The scale of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionA.GetSymbolWidth">
            <summary>
            Returns the width required to display the full bar code.
            </summary>
            <returns>A value representing the required width.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionA.DrawBarCode(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the barcode to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the page element's output.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup2">
             <summary>
             Represents a UPC Version A, 2 digit supplement bar code.
             </summary>
             <remarks>This class can be used to place a UPC Version A, 2 digit supplement bar code on a page.</remarks>
             <example>The following example will place a UPC Version A, 2 digit supplement bar code on the page.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements.BarCoding
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a bar code
                     Dim barCode As UpcVersionASup2 = New UpcVersionASup2("1234567890112", 50, 50)
             
                     ' Add the bar code to the page
                     MyPage.Elements.Add(barCode)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements.BarCoding;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create a barcode
                     UpcVersionASup2 barCode = new UpcVersionASup2("1234567890112", 50, 50);
             
                     // Add the barcode to the page
                     page.Elements.Add( barCode );	
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup2.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup2"/> class.
            </summary>
            <param name="value">The value (including supplemental value) of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup2.#ctor(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup2"/> class.
            </summary>
            <param name="value">The value (including supplemental value) of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="scale">The scale of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup2.#ctor(System.String,System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup2"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="supplementalValue"></param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup2.#ctor(System.String,System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup2"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="supplementalValue"></param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="scale">The scale of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup2.GetSymbolWidth">
            <summary>
            Returns the width required to display the full bar code.
            </summary>
            <returns>A value representing the required width.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup2.DrawBarCode(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the barcode to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the page element's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup2.SupplementalValue">
            <summary>
            Gets or sets the supplemental value of the barcode.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup5">
             <summary>
             Represents a UPC Version A, 5 digit supplement bar code.
             </summary>
             <remarks>This class can be used to place a UPC Version A, 5 digit supplement bar code on a page.</remarks>
             <example>The following example will place a UPC Version A, 5 digit supplement bar code on the page.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements.BarCoding
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a bar code
                     Dim barCode As UpcVersionASup5 = New UpcVersionASup5("1234567890112345", 50, 50)
             
                     ' Add the bar code to the page
                     MyPage.Elements.Add(barCode)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements.BarCoding;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create a barcode
                     UpcVersionASup5 barCode = new UpcVersionASup5("1234567890112345", 50, 50);
             
                     // Add the barcode to the page
                     page.Elements.Add( barCode );	
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup5.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup5"/> class.
            </summary>
            <param name="value">The value (including supplemental value) of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup5.#ctor(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup5"/> class.
            </summary>
            <param name="value">The value (including supplemental value) of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="scale">The scale of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup5.#ctor(System.String,System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup5"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="supplementalValue"></param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup5.#ctor(System.String,System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup5"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="supplementalValue"></param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="scale">The scale of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup5.GetSymbolWidth">
            <summary>
            Returns the width required to display the full bar code.
            </summary>
            <returns>A value representing the required width.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup5.DrawBarCode(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the barcode to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the page element's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup5.SupplementalValue">
            <summary>
            Gets or sets the supplemental value of the barcode.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionE">
             <summary>
             Represents a UPC Version E bar code.
             </summary>
             <remarks>This class can be used to place a UPC Version E bar code on a page.</remarks>
             <example>The following example will place a UPC Version E bar code on the page.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements.BarCoding
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a bar code
                     Dim barCode As UpcVersionE = New UpcVersionE("0123456", 50, 50)
             
                     ' Add the bar code to the page
                     MyPage.Elements.Add(barCode)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements.BarCoding;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create a barcode
                     UpcVersionE barCode = new UpcVersionE("0123456", 50, 50);
             
                     // Add the barcode to the page
                     page.Elements.Add( barCode );	
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionE.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionE"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionE.#ctor(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionE"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="scale">The scale of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionE.GetSymbolWidth">
            <summary>
            Returns the width required to display the full bar code.
            </summary>
            <returns>A value representing the required width.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionE.DrawBarCode(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the barcode to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the page element's output.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup2">
             <summary>
             Represents a UPC Version E, 2 digit supplement bar code.
             </summary>
             <remarks>This class can be used to place a UPC Version E, 2 digit supplement bar code on a page.</remarks>
             <example>The following example will place a UPC Version E, 2 digit supplement bar code on the page.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements.BarCoding
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a bar code
                     Dim barCode As UpcVersionESup2 = New UpcVersionESup2("012345612", 50, 50)
             
                     ' Add the bar code to the page
                     MyPage.Elements.Add(barCode)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements.BarCoding;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create a barcode
                     UpcVersionESup2 barCode = new UpcVersionESup2("012345612", 50, 50);
             
                     // Add the barcode to the page
                     page.Elements.Add( barCode );	
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup2.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup2"/> class.
            </summary>
            <param name="value">The value (including supplemental value) of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup2.#ctor(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup2"/> class.
            </summary>
            <param name="value">The value (including supplemental value) of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="scale">The scale of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup2.#ctor(System.String,System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup2"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="supplementalValue"></param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup2.#ctor(System.String,System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup2"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="supplementalValue"></param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="scale">The scale of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup2.GetSymbolWidth">
            <summary>
            Returns the width required to display the full bar code.
            </summary>
            <returns>A value representing the required width.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup2.DrawBarCode(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the barcode to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the page element's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup2.SupplementalValue">
            <summary>
            Gets or sets the supplemental value of the barcode.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup5">
             <summary>
             Represents a UPC Version E, 5 digit supplement bar code.
             </summary>
             <remarks>This class can be used to place a UPC Version E, 5 digit supplement bar code on a page.</remarks>
             <example>The following example will place a UPC Version E, 5 digit supplement bar code on the page.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements.BarCoding
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a bar code
                     Dim barCode As UpcVersionESup5 = New UpcVersionESup5("012345612345", 50, 50)
             
                     ' Add the bar code to the page
                     MyPage.Elements.Add(barCode)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements.BarCoding;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create a barcode
                     UpcVersionESup5 barCode = new UpcVersionESup5("012345612345", 50, 50);
             
                     // Add the barcode to the page
                     page.Elements.Add( barCode );	
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup5.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup5"/> class.
            </summary>
            <param name="value">The value (including supplemental value) of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup5.#ctor(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup5"/> class.
            </summary>
            <param name="value">The value (including supplemental value) of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="scale">The scale of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup5.#ctor(System.String,System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup5"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="supplementalValue"></param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup5.#ctor(System.String,System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup5"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="supplementalValue"></param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="scale">The scale of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup5.GetSymbolWidth">
            <summary>
            Returns the width required to display the full bar code.
            </summary>
            <returns>A value representing the required width.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup5.DrawBarCode(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the barcode to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the page element's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup5.SupplementalValue">
            <summary>
            Gets or sets the supplemental value of the barcode.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.AxisLabel">
            <summary>
            Base class from which all axis labels are derived.
            </summary>
            <remarks> If the AutoLayout property of the chart is set to true, 
            XAxisLabels and YAxisLabels are created automatically based on the given data.</remarks>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.AxisLabel.Text">
            <summary>
            Gets or sets the text of the axis label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.AxisLabel.Font">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.Axes.AxisLabel.Font"/> object to use for the text of the axis label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.AxisLabel.FontSize">
            <summary>
            Gets or sets the font size for the text of the axis label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.AxisLabel.TextColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the text of the axis label.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.AxisLabelList">
            <summary>
            Base class from which all axis label lists are derived.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.AxisLabelList.Font">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.Axes.AxisLabelList.Font"/> to use for the axis label list.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.AxisLabelList.FontSize">
            <summary>
            Gets or sets the font size of the axis label list.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.AxisLabelList.TextColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> to use for the axis label list.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.AxisLabelList.AutoLabels">
            <summary>
            Gets or sets the auto creation status of the axis label list. By default it is true.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.AxisLabelList.Count">
            <summary>
            Gets the number of elements actually contained.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.AxisLabelList.Visible">
            <summary>
            Gets or sets the axis label list visible status. By default it is true.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.AxisLabelList.WrapText">
            <summary>
            Gets or sets the WrapText property of the axis label list.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis">
             <summary>
             This class can be used to place the DateTimeXAxis on the plot area.
             </summary>
             <example>The following example creates a date time stacked line series chart and creates date time xaxis 
             to xaxis.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create date time xAxis
                     Dim xAxis As DateTimeXAxis = New DateTimeXAxis()
            
                     ' Create percentage yAxis
                     Dim yAxis As PercentageYAxis = New PercentageYAxis()
             
                     ' Create a date time 100 percent stacked line series element and add values to it
                     Dim MySeriesElement1 As DateTime100PercentStackedLineSeriesElement = New DateTime100PercentStackedLineSeriesElement("Website A")
                     MySeriesElement1.Values.Add(5, New DateTime(2007, 1, 1))
                     MySeriesElement1.Values.Add(7, New DateTime(2007, 2, 1))
                     MySeriesElement1.Values.Add(9, New DateTime(2007, 3, 1))
                     MySeriesElement1.Values.Add(6, New DateTime(2007, 4, 1))
                     Dim MySeriesElement2 As DateTime100PercentStackedLineSeriesElement = New DateTime100PercentStackedLineSeriesElement("Website B")
                     MySeriesElement2.Values.Add(4, New DateTime(2007, 1, 1))
                     MySeriesElement2.Values.Add(2, New DateTime(2007, 2, 1))
                     MySeriesElement2.Values.Add(5, New DateTime(2007, 3, 1))
                     MySeriesElement2.Values.Add(8, New DateTime(2007, 4, 1))
                     Dim MySeriesElement3 As DateTime100PercentStackedLineSeriesElement = New DateTime100PercentStackedLineSeriesElement("Website C")
                     MySeriesElement3.Values.Add(2, New DateTime(2007, 1, 1))
                     MySeriesElement3.Values.Add(4, New DateTime(2007, 2, 1))
                     MySeriesElement3.Values.Add(6, New DateTime(2007, 3, 1))
                     MySeriesElement3.Values.Add(9, New DateTime(2007, 4, 1))
            
                     ' Create a date time 100 percent stacked line series and add date time 100 percent stacked line series elements to it
                     Dim MyStackedLineSeries1 As DateTime100PercentStackedLineSeries = New DateTime100PercentStackedLineSeries(xAxis, yAxis)
                     MyStackedLineSeries1.Add(MySeriesElement1)
                     MyStackedLineSeries1.Add(MySeriesElement2)
                     MyStackedLineSeries1.Add(MySeriesElement3)
            
                     ' Add date time 100 percent stacked line series to the plot area
                     MyPlotArea.Series.Add(MyStackedLineSeries1)
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
             
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create datetime xAxis
                     DateTimeXAxis xAxis = new DateTimeXAxis();
            
                     // Create percentage yAxis
                     PercentageYAxis yAxis = new PercentageYAxis();
            
                     // Create a date time 100 percent stacked line series element and add values to it
                     DateTime100PercentStackedLineSeriesElement seriesElement1 = new DateTime100PercentStackedLineSeriesElement("Website A");
                     seriesElement1.Values.Add(5, new DateTime(2007, 1, 1));
                     seriesElement1.Values.Add(7, new DateTime(2007, 2, 1));
                     seriesElement1.Values.Add(9, new DateTime(2007, 3, 1));
                     seriesElement1.Values.Add(6, new DateTime(2007, 4, 1));
                     DateTime100PercentStackedLineSeriesElement seriesElement2 = new DateTime100PercentStackedLineSeriesElement("Website B");
                     seriesElement2.Values.Add(4, new DateTime(2007, 1, 1));
                     seriesElement2.Values.Add(2, new DateTime(2007, 2, 1));
                     seriesElement2.Values.Add(5, new DateTime(2007, 3, 1));
                     seriesElement2.Values.Add(8, new DateTime(2007, 4, 1));
                     DateTime100PercentStackedLineSeriesElement seriesElement3 = new DateTime100PercentStackedLineSeriesElement("Website C");
                     seriesElement3.Values.Add(2, new DateTime(2007, 1, 1));
                     seriesElement3.Values.Add(4, new DateTime(2007, 2, 1));
                     seriesElement3.Values.Add(6, new DateTime(2007, 3, 1));
                     seriesElement3.Values.Add(9, new DateTime(2007, 4, 1));
            
                     // Create a date time 100 percent stacked line series and add date time 100 percent stacked line series elements to it
                     DateTime100PercentStackedLineSeries stackedLineSeries1 = new DateTime100PercentStackedLineSeries(xAxis, yAxis);
                     stackedLineSeries1.Add(seriesElement1);
                     stackedLineSeries1.Add(seriesElement2);
                     stackedLineSeries1.Add(seriesElement3);
            
                     // Add date time 100 percent stacked line series to the plot area
                     plotArea.Series.Add(stackedLineSeries1);
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:/MyDocument.pdf"); 
                 }
             }
             </code>
             </example>   
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>	 
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxis">
            <summary>
            This class provides the base class from which all of the XAxes are derived.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axis">
            <summary>
            Base class from which x and y axes are derived.
            </summary>
            <remarks> When adding a series to the SeriesList, an axis is created. Maximum 
            and minimum values and intervals for the axis do not need to be set, as they are calculated based on the given data. Each series will 
            have a specific type of axis.</remarks>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axis.Offset">
            <summary>
            Gets or sets the offset of the axis. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axis.LineColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the line color of the axis.	
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axis.LineStyle">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.Axis.LineStyle"/> object specifying the line style of the axis.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axis.LineWidth">
            <summary>
            Gets or sets the line width of the axis.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axis.LabelOffset">
            <summary>
            Gets or sets the label offset of the axis.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axis.Visible">
            <summary>
             Gets or sets the visible status of the axis. By default it is true. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axis.LabelFormat">
            <summary>
            Gets or sets the format of the labels.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxis.AnchorType">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisAnchorType"/> enumeration that specifies the position of the XAxis.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxis.LabelLocation">
            <summary>
            <font color="red">Obsolete.</font> Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisLabelLocation"/> enumeration that specifies the position of the labels.
            </summary>
            <remarks><font color="red">NOTE: This property is obsolete.</font> Use LabelPosition property instead.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxis.LabelPosition">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisLabelPosition"/> enumeration that specifies the position of the labels.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxis.MajorGridLines">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisGridLines"/> object to use for the MajorGridLines of the XAxis.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxis.MinorGridLines">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisGridLines"/> object to use for the MinorGridLines of the XAxis.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxis.MajorTickMarks">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisTickMarks"/> object to use for the MajorTickMarks of the XAxis.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxis.MinorTickMarks">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisTickMarks"/> object to use for the MinorTickMarks of the XAxis.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxis.Titles">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.TitleList"/> object to use for the Title of the XAxis.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxis.TitleLocation">
            <summary>
            <font color="red">Obsolete.</font> Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisTitleLocation"/> enumeration that specifies the position of the Title.
            </summary>
            <remarks><font color="red">NOTE: This property is obsolete.</font> Use TitlePosition property instead.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxis.TitlePosition">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisTitlePosition"/> enumeration that specifies the position of the Title.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis"/> class. 
            </summary>
            <param name="offset">The border of plot area.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis.Min">
            <summary>
            Gets or sets the minimum value of the axis.
            <see cref="T:System.DateTime"/>
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis.Max">
            <summary>
            Gets or sets the maximum value of the axis.
            <see cref="T:System.DateTime"/>
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis.Interval">
            <summary>
            Gets or sets the interval of the axis.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis.AxisPaddingInterval">
            <summary>
            Gets or sets the padding interval of the axis.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis.DateTimeType">
            <summary>
            Gets or sets <see cref="P:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis.DateTimeType"/> enumeration that specifies the DateTimeType of the DateTimeXAxis.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis.Labels">
            <summary>
            Gets <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxisLabelList"/> object contained in the DateTimeXAxis.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxisLabel">
             <summary>
             Represents a DateTimeXAxisLabel.
             </summary>
             <example>The following example creates a date time 100 percent stacked line chart and creates a date time xaxis label
             to the xaxis.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create date time  xAxis
                     Dim xAxis As DateTimeXAxis = New DateTimeXAxis()
            
                     ' Create percentage yAxis
                     Dim yAxis As PercentageYAxis = New PercentageYAxis()
             
                     ' Create date time x axis label and add values to it
                     xAxis.Labels.Add(New DateTimeXAxisLabel("Jan", New DateTime(2007, 1, 1)))
                     xAxis.Labels.Add(New DateTimeXAxisLabel("Feb", New DateTime(2007, 2, 1)))
                     xAxis.Labels.Add(New DateTimeXAxisLabel("Mar", New DateTime(2007, 3, 1)))
                     xAxis.Labels.Add(New DateTimeXAxisLabel("Apr", New DateTime(2007, 4, 1)))
             
                     ' Create a date time 100 percent stacked line series element and add values to it
                     Dim MySeriesElement1 As DateTime100PercentStackedLineSeriesElement = New DateTime100PercentStackedLineSeriesElement("Website A")
                     MySeriesElement1.Values.Add(5, New DateTime(2007, 1, 1))
                     MySeriesElement1.Values.Add(7, New DateTime(2007, 2, 1))
                     MySeriesElement1.Values.Add(9, New DateTime(2007, 3, 1))
                     MySeriesElement1.Values.Add(6, New DateTime(2007, 4, 1))
                     Dim MySeriesElement2 As DateTime100PercentStackedLineSeriesElement = New DateTime100PercentStackedLineSeriesElement("Website B")
                     MySeriesElement2.Values.Add(4, New DateTime(2007, 1, 1))
                     MySeriesElement2.Values.Add(2, New DateTime(2007, 2, 1))
                     MySeriesElement2.Values.Add(5, New DateTime(2007, 3, 1))
                     MySeriesElement2.Values.Add(8, New DateTime(2007, 4, 1))
                     Dim MySeriesElement3 As DateTime100PercentStackedLineSeriesElement = New DateTime100PercentStackedLineSeriesElement("Website C")
                     MySeriesElement3.Values.Add(2, New DateTime(2007, 1, 1))
                     MySeriesElement3.Values.Add(4, New DateTime(2007, 2, 1))
                     MySeriesElement3.Values.Add(6, New DateTime(2007, 3, 1))
                     MySeriesElement3.Values.Add(9, New DateTime(2007, 4, 1))
            
                     ' Create a date time 100 percent stacked line series and add date time 100 percent stacked line series elements to it
                     Dim MyStackedLineSeries1 As DateTime100PercentStackedLineSeries = New DateTime100PercentStackedLineSeries(xAxis, yAxis)
                     MyStackedLineSeries1.Add(MySeriesElement1)
                     MyStackedLineSeries1.Add(MySeriesElement2)
                     MyStackedLineSeries1.Add(MySeriesElement3)
            
                     ' Add date time 100 percent stacked line series to the plot area
                     MyPlotArea.Series.Add(MyStackedLineSeries1)
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
             
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create date time  xAxis
                     DateTimeXAxis xAxis = new DateTimeXAxis();
            
                     // Create percentage yAxis
                     PercentageYAxis yAxis = new PercentageYAxis();
            
                     // Create date time x axis label and add values to it
                     xAxis.Labels.Add(new DateTimeXAxisLabel("Jan", new DateTime(2007, 1, 1)));
                     xAxis.Labels.Add(new DateTimeXAxisLabel("Feb", new DateTime(2007, 2, 1)));
                     xAxis.Labels.Add(new DateTimeXAxisLabel("Mar", new DateTime(2007, 3, 1)));
                     xAxis.Labels.Add(new DateTimeXAxisLabel("Apr", new DateTime(2007, 4, 1)));
             
                     // Create a date time 100 percent stacked line series element and add values to it
                     DateTime100PercentStackedLineSeriesElement seriesElement1 = new DateTime100PercentStackedLineSeriesElement("Website A");
                     seriesElement1.Values.Add(5, new DateTime(2007, 1, 1));
                     seriesElement1.Values.Add(7, new DateTime(2007, 2, 1));
                     seriesElement1.Values.Add(9, new DateTime(2007, 3, 1));
                     seriesElement1.Values.Add(6, new DateTime(2007, 4, 1));
                     DateTime100PercentStackedLineSeriesElement seriesElement2 = new DateTime100PercentStackedLineSeriesElement("Website B");
                     seriesElement2.Values.Add(4, new DateTime(2007, 1, 1));
                     seriesElement2.Values.Add(2, new DateTime(2007, 2, 1));
                     seriesElement2.Values.Add(5, new DateTime(2007, 3, 1));
                     seriesElement2.Values.Add(8, new DateTime(2007, 4, 1));
                     DateTime100PercentStackedLineSeriesElement seriesElement3 = new DateTime100PercentStackedLineSeriesElement("Website C");
                     seriesElement3.Values.Add(2, new DateTime(2007, 1, 1));
                     seriesElement3.Values.Add(4, new DateTime(2007, 2, 1));
                     seriesElement3.Values.Add(6, new DateTime(2007, 3, 1));
                     seriesElement3.Values.Add(9, new DateTime(2007, 4, 1));
            
                     // Create a date time 100 percent stacked line series and add date time 100 percent stacked line series elements to it
                     DateTime100PercentStackedLineSeries stackedLineSeries1 = new DateTime100PercentStackedLineSeries(xAxis, yAxis);
                     stackedLineSeries1.Add(seriesElement1);
                     stackedLineSeries1.Add(seriesElement2);
                     stackedLineSeries1.Add(seriesElement3);
            
                     // Add date time 100 percent stacked line series to the plot area
                     plotArea.Series.Add(stackedLineSeries1);
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:/MyDocument.pdf"); 
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>	 
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisLabel">
            <summary>
            Represents an XAxisLabel.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxisLabel.#ctor(System.String,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxisLabel"/> class. 
            </summary>
            <param name="text">Text to display in the date time xaxis label</param>
            <param name="value1">Position of the date time xaxis label.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxisLabel.#ctor(System.String,System.DateTime,ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxisLabel"/> class. 
            </summary>
            <param name="text">Text to display in the date time xaxis label.</param>
            <param name="value1">Position of the date time xaxis label.</param>
            <param name="font"><see cref="T:ceTe.DynamicPDF.Font"/> for the text of the date time xaxis label.</param>
            <param name="fontSize">Size for the text of the date time xaxis label.</param>
            <param name="textColor"><see cref="T:ceTe.DynamicPDF.Color"/> for the text of the date time xaxis label.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxisLabel.Value">
            <summary>
            Gets or sets the position of the DateTimeXAxisLabel. 
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxisLabelList">
            <summary>
            Represents a DateTimeXAxisLabelList.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisLabelList">
            <summary>
            Represents an XAxisLabelList.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisLabelList.Angle">
            <summary>
            Gets or sets the angle of the AxisLabelList.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxisLabelList.Add(ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxisLabel)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxisLabel"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxisLabelList"/> object. 
            </summary>
            <param name="dateTimeAxisLabel">The <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxisLabel"/> to be added to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxisLabelList"/>.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxisLabelList.AxisLabel(System.DateTime)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxisLabel"/> object at the given DateTime position. 
            </summary>
            <param name="value1">Position of the required date time axis label.</param>
            <returns>The <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxisLabel"/> object.</returns>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxis">
             <summary>
             This class can be used to place the DateTimeYAxis on the plot area.
             </summary>
             <example>The following example creates a bar chart and creates date time yaxis to yaxis.
             and displays the month format as y axis labels.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     ' Get the default plot from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create percentage xAxis
                     Dim xAxis As PercentageXAxis = New PercentageXAxis()
            
                     ' Create date time  yAxis
                     Dim yAxis As DateTimeYAxis = New DateTimeYAxis()
            
                     ' Create a date time 100 percent stacked bar series element and add values to it
                     Dim MySeriesElement1 As DateTime100PercentStackedBarSeriesElement = New DateTime100PercentStackedBarSeriesElement("Website A")
                     MySeriesElement1.Values.Add(5, New DateTime(2007, 1, 1))
                     MySeriesElement1.Values.Add(7, New DateTime(2007, 2, 1))
                     MySeriesElement1.Values.Add(9, New DateTime(2007, 3, 1))
                     MySeriesElement1.Values.Add(6, New DateTime(2007, 4, 1))
                     Dim MySeriesElement2 As DateTime100PercentStackedBarSeriesElement = New DateTime100PercentStackedBarSeriesElement("Website B")
                     MySeriesElement2.Values.Add(4, New DateTime(2007, 1, 1))
                     MySeriesElement2.Values.Add(2, New DateTime(2007, 2, 1))
                     MySeriesElement2.Values.Add(5, New DateTime(2007, 3, 1))
                     MySeriesElement2.Values.Add(8, New DateTime(2007, 4, 1))
                     Dim MySeriesElement3 As DateTime100PercentStackedBarSeriesElement = New DateTime100PercentStackedBarSeriesElement("Website C")
                     MySeriesElement3.Values.Add(2, New DateTime(2007, 1, 1))
                     MySeriesElement3.Values.Add(4, New DateTime(2007, 2, 1))
                     MySeriesElement3.Values.Add(6, New DateTime(2007, 3, 1))
                     MySeriesElement3.Values.Add(9, New DateTime(2007, 4, 1))
            
                     ' Create a date time 100 percent stacked bar series and add date time 100 percent stacked bar series elements to it
                     Dim MyStackedBarSeries1 As DateTime100PercentStackedBarSeries = New DateTime100PercentStackedBarSeries(xAxis, yAxis)
                     MyStackedBarSeries1.Add(MySeriesElement1)
                     MyStackedBarSeries1.Add(MySeriesElement2)
                     MyStackedBarSeries1.Add(MySeriesElement3)
            
                     ' Add date time 100 percent stacked bar series to the plot area
                     MyPlotArea.Series.Add(MyStackedBarSeries1)
            
                     ' Create a title and add it to the x axis
                     Dim MyTitle3 As Title = New Title("Viewers")
                     MyStackedBarSeries1.XAxis.Titles.Add(MyTitle3)
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     // Get the default plot from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create percentage xAxis
                     PercentageXAxis xAxis = new PercentageXAxis();
            
                     // Create date time yAxis
                     DateTimeYAxis yAxis = new DateTimeYAxis();
            
                     // Create a date time 100 percent stacked bar series element and add values to it
                     DateTime100PercentStackedBarSeriesElement seriesElement1 = new DateTime100PercentStackedBarSeriesElement("Website A");
                     seriesElement1.Values.Add(5, new DateTime(2007, 1, 1));
                     seriesElement1.Values.Add(7, new DateTime(2007, 2, 1));
                     seriesElement1.Values.Add(9, new DateTime(2007, 3, 1));
                     seriesElement1.Values.Add(6, new DateTime(2007, 4, 1));
                     DateTime100PercentStackedBarSeriesElement seriesElement2 = new DateTime100PercentStackedBarSeriesElement("Website B");
                     seriesElement2.Values.Add(4, new DateTime(2007, 1, 1));
                     seriesElement2.Values.Add(2, new DateTime(2007, 2, 1));
                     seriesElement2.Values.Add(5, new DateTime(2007, 3, 1));
                     seriesElement2.Values.Add(8, new DateTime(2007, 4, 1));
                     DateTime100PercentStackedBarSeriesElement seriesElement3 = new DateTime100PercentStackedBarSeriesElement("Website C");
                     seriesElement3.Values.Add(2, new DateTime(2007, 1, 1));
                     seriesElement3.Values.Add(4, new DateTime(2007, 2, 1));
                     seriesElement3.Values.Add(6, new DateTime(2007, 3, 1));
                     seriesElement3.Values.Add(9, new DateTime(2007, 4, 1));
            
                     // Create a date time 100 percent stacked bar series and add date time 100 percent stacked bar series elements to it
                     DateTime100PercentStackedBarSeries stackedBarSeries1 = new DateTime100PercentStackedBarSeries(xAxis, yAxis);
                     stackedBarSeries1.Add(seriesElement1);
                     stackedBarSeries1.Add(seriesElement2);
                     stackedBarSeries1.Add(seriesElement3);
            
                     // Add date time 100 percent stacked bar series to the plot area
                     plotArea.Series.Add(stackedBarSeries1);
            
                     // Create a title and add it to the x axis
                     Title title3 = new Title("Viewers");
                     stackedBarSeries1.XAxis.Titles.Add(title3);
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                    // Save the PDF
                    document.Draw(@"C:/MyDocument.pdf"); 
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>	
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxis">
            <summary>
            This class provides the base class from which all of the YAxes are derived.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxis.AnchorType">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisAnchorType"/> enumeration that specifies the position of the YAxis.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxis.LabelLocation">
            <summary>
            <font color="red">Obsolete.</font> Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisLabelLocation"/> enumeration that specifies the position of the labels.
            </summary>
            <remarks><font color="red">NOTE: This property is obsolete.</font> Use LabelPosition property instead.</remarks> 
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxis.LabelPosition">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisLabelPosition"/> enumeration that specifies the position of the labels.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxis.MajorGridLines">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisGridLines"/> object to use for the MajorGridLines of the YAxis.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxis.MinorGridLines">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisGridLines"/> object to use for the MinorGridLines of the YAxis.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxis.MajorTickMarks">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisTickMarks"/> object to use for the MajorTickMarks of the YAxis.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxis.MinorTickMarks">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisTickMarks"/> object to use for the MinorTickMarks of the YAxis.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxis.Titles">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Title"/> object to use for the Title of the YAxis.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxis.TitleLocation">
            <summary>
            <font color="red">Obsolete.</font> Gets or sets <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisTitleLocation"/> enumeration that specifies the position of the Title.
            </summary>
            <remarks><font color="red">NOTE: This property is obsolete.</font> Use TitlePosition property instead.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxis.TitlePosition">
            <summary>
            Gets or sets <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisTitlePosition"/> enumeration that specifies the position of the Title.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxis.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxis"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxis.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxis"/> class. 
            </summary>
            <param name="offset">Border of plot area.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxis.Min">
            <summary>
            Gets or sets the minimum value  of the axis.
            <see cref="T:System.DateTime"/> 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxis.Max">
            <summary>
            Gets or sets the maximum value of the axis.
            <see cref="T:System.DateTime"/>
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxis.Interval">
            <summary>
            Gets or sets the interval of the axis.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxis.AxisPaddingInterval">
            <summary>
            Gets or sets the padding interval of the axis.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxis.DateTimeType">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxis.DateTimeType"/> enumeration that specifies the DateTimeType of the DateTimeYAxis.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxis.Labels">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxisLabelList"/> object contained in the DateTimeYAxis.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxisLabel">
             <summary>
             Represents a DateTimeYAxisLabel.
             </summary>
             <example>The following example creates a date time 100 percent stacked bar chart and creates a date time yaxis label in the yaxis.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     ' Get the default plot from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create percentage xAxis
                     Dim xAxis As PercentageXAxis = New PercentageXAxis()
            
                     ' Create date time  yAxis
                     Dim yAxis As DateTimeYAxis = New DateTimeYAxis()
            
                     ' Create yAxisLabels and add values to it
                     yAxis.Labels.Add(New DateTimeYAxisLabel("Jan", New DateTime(2007, 1, 1)))
                     yAxis.Labels.Add(New DateTimeYAxisLabel("Feb", New DateTime(2007, 2, 1)))
                     yAxis.Labels.Add(New DateTimeYAxisLabel("Mar", New DateTime(2007, 3, 1)))
                     yAxis.Labels.Add(New DateTimeYAxisLabel("Apr", New DateTime(2007, 4, 1)))
            
                     ' Create a date time 100 percent stacked bar series element and add values to it
                     Dim MySeriesElement1 As DateTime100PercentStackedBarSeriesElement = New DateTime100PercentStackedBarSeriesElement("Website A")
                     MySeriesElement1.Values.Add(5, New DateTime(2007, 1, 1))
                     MySeriesElement1.Values.Add(7, New DateTime(2007, 2, 1))
                     MySeriesElement1.Values.Add(9, New DateTime(2007, 3, 1))
                     MySeriesElement1.Values.Add(6, New DateTime(2007, 4, 1))
                     Dim MySeriesElement2 As DateTime100PercentStackedBarSeriesElement = New DateTime100PercentStackedBarSeriesElement("Website B")
                     MySeriesElement2.Values.Add(4, New DateTime(2007, 1, 1))
                     MySeriesElement2.Values.Add(2, New DateTime(2007, 2, 1))
                     MySeriesElement2.Values.Add(5, New DateTime(2007, 3, 1))
                     MySeriesElement2.Values.Add(8, New DateTime(2007, 4, 1))
                     Dim MySeriesElement3 As DateTime100PercentStackedBarSeriesElement = New DateTime100PercentStackedBarSeriesElement("Website C")
                     MySeriesElement3.Values.Add(2, New DateTime(2007, 1, 1))
                     MySeriesElement3.Values.Add(4, New DateTime(2007, 2, 1))
                     MySeriesElement3.Values.Add(6, New DateTime(2007, 3, 1))
                     MySeriesElement3.Values.Add(9, New DateTime(2007, 4, 1))
            
                     ' Create a date time 100 percent stacked bar series and add date time 100 percent stacked bar series elements to it
                     Dim MyStackedBarSeries1 As DateTime100PercentStackedBarSeries = New DateTime100PercentStackedBarSeries(xAxis, yAxis)
                     MyStackedBarSeries1.Add(MySeriesElement1)
                     MyStackedBarSeries1.Add(MySeriesElement2)
                     MyStackedBarSeries1.Add(MySeriesElement3)
            
                     ' Add date time 100 percent stacked bar series to the plot area
                     MyPlotArea.Series.Add(MyStackedBarSeries1)
            
                     ' Create a title and add it to the x axis
                     Dim MyTitle3 As Title = New Title("Viewers")
                     MyStackedBarSeries1.XAxis.Titles.Add(MyTitle3)
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     // Get the default plot from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create percentage xAxis
                     PercentageXAxis xAxis = new PercentageXAxis();
            
                     // Create date time  yAxis
                     DateTimeYAxis yAxis = new DateTimeYAxis();
            
                     // Create yAxisLabels and add values to it
                     yAxis.Labels.Add(new DateTimeYAxisLabel("Jan", new DateTime(2007, 1, 1)));
                     yAxis.Labels.Add(new DateTimeYAxisLabel("Feb", new DateTime(2007, 2, 1)));
                     yAxis.Labels.Add(new DateTimeYAxisLabel("Mar", new DateTime(2007, 3, 1)));
                     yAxis.Labels.Add(new DateTimeYAxisLabel("Apr", new DateTime(2007, 4, 1)));
            
                     // Create a date time 100 percent stacked bar series element and add values to it
                     DateTime100PercentStackedBarSeriesElement seriesElement1 = new DateTime100PercentStackedBarSeriesElement("Website A");
                     seriesElement1.Values.Add(5, new DateTime(2007, 1, 1));
                     seriesElement1.Values.Add(7, new DateTime(2007, 2, 1));
                     seriesElement1.Values.Add(9, new DateTime(2007, 3, 1));
                     seriesElement1.Values.Add(6, new DateTime(2007, 4, 1));
                     DateTime100PercentStackedBarSeriesElement seriesElement2 = new DateTime100PercentStackedBarSeriesElement("Website B");
                     seriesElement2.Values.Add(4, new DateTime(2007, 1, 1));
                     seriesElement2.Values.Add(2, new DateTime(2007, 2, 1));
                     seriesElement2.Values.Add(5, new DateTime(2007, 3, 1));
                     seriesElement2.Values.Add(8, new DateTime(2007, 4, 1));
                     DateTime100PercentStackedBarSeriesElement seriesElement3 = new DateTime100PercentStackedBarSeriesElement("Website C");
                     seriesElement3.Values.Add(2, new DateTime(2007, 1, 1));
                     seriesElement3.Values.Add(4, new DateTime(2007, 2, 1));
                     seriesElement3.Values.Add(6, new DateTime(2007, 3, 1));
                     seriesElement3.Values.Add(9, new DateTime(2007, 4, 1));
            
                     // Create a date time 100 percent stacked bar series and add date time 100 percent stacked bar series elements to it
                     DateTime100PercentStackedBarSeries stackedBarSeries1 = new DateTime100PercentStackedBarSeries(xAxis, yAxis);
                     stackedBarSeries1.Add(seriesElement1);
                     stackedBarSeries1.Add(seriesElement2);
                     stackedBarSeries1.Add(seriesElement3);
            
                     // Add date time 100 percent stacked bar series to the plot area
                     plotArea.Series.Add(stackedBarSeries1);
            
                     // Create a title and add it to the x axis
                     Title title3 = new Title("Viewers");
                     stackedBarSeries1.XAxis.Titles.Add(title3);
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:/MyDocument.pdf"); 
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>	
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisLabel">
            <summary>
            Represents a YAxisLabel.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxisLabel.#ctor(System.String,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxisLabel"/> class. 
            </summary>
            <param name="text">Text to display in the date time yaxis label.</param>
            <param name="value1">Position of the date time yaxis label.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxisLabel.#ctor(System.String,System.DateTime,ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxisLabel"/> class. 
            </summary>
            <param name="text">Text to display in the date time yaxis label.</param>
            <param name="value1">Position of the date time yaxis label.</param>
            <param name="font"><see cref="T:ceTe.DynamicPDF.Font"/> for the text of the date time yaxis label.</param>
            <param name="fontSize">Size for the text of the date time yaxis label.</param>
            <param name="textColor"><see cref="T:ceTe.DynamicPDF.Color"/> for the text of the date time yaxis label.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxisLabel.Value">
            <summary>
            Gets or sets the position of the DateTimeYAxisLabel. 
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxisLabelList">
            <summary>
            Represents a DateTimeYAxisLabelList.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisLabelList">
            <summary>
             Represents a YAxisLabelList.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxisLabelList.Add(ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxisLabel)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxisLabel"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxisLabelList"/> object.
            </summary>
            <param name="dateTimeYAxisLabel">the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxisLabel"/> to be added to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxisLabelList"/>.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxisLabelList.AxisLabel(System.DateTime)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxisLabel"/> object at the given DateTime position. 
            </summary>
            <param name="value1">Position of the required date time axis label.</param>
            <returns>The <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxisLabel"/> object.</returns>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis">
             <summary>
             This class can be used to place the IndexedXAxis on the plot area.
             </summary>
             <example>The following example creates an indexed area chart and creates indexed xaxis to the xaxis.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 230)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a indexed xAxis
                     Dim xAxis As IndexedXAxis = New IndexedXAxis()
             
                     ' Create indexed axis labels and add those to indexed xAxis
                     xAxis.Labels.Add(New IndexedXAxisLabel("Q1", 0))
                     xAxis.Labels.Add(New IndexedXAxisLabel("Q2", 1))
                     xAxis.Labels.Add(New IndexedXAxisLabel("Q3", 2))
                     xAxis.Labels.Add(New IndexedXAxisLabel("Q4", 3))
             
                     ' Create a numeric yAxis
                     Dim yAxis As NumericYAxis = New NumericYAxis()
            
                     ' Create a title and add it to the YAxis
                     Dim MyTitle3 As Title = New Title("Visitors (in millions)")
                     yAxis.Titles.Add(MyTitle3)
            
                     ' Create a indexed area series and add values to it
                     Dim MyAreaSeries1 As IndexedAreaSeries = New IndexedAreaSeries("Website A", xAxis, yAxis)
                     MyAreaSeries1.Values.Add(New Single() {5, 7, 9, 6})
                     Dim MyAreaSeries2 As IndexedAreaSeries = New IndexedAreaSeries("Website B", xAxis, yAxis)
                     MyAreaSeries2.Values.Add(New Single() {4, 2, 5, 8})
                     Dim MyAreaSeries3 As IndexedAreaSeries = New IndexedAreaSeries("Website C", xAxis, yAxis)
                     MyAreaSeries3.Values.Add(New Single() {2, 4, 6, 9})
             
                     ' Add indexed area series to the plot area
                     MyPlotArea.Series.Add(MyAreaSeries1)
                     MyPlotArea.Series.Add(MyAreaSeries2)
                     MyPlotArea.Series.Add(MyAreaSeries3)
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 230);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a indexed xAxis
                     IndexedXAxis xAxis = new IndexedXAxis();
            
                     // Create indexed axis labels and add those to indexed xAxis
                     xAxis.Labels.Add(new IndexedXAxisLabel("Q1", 0));
                     xAxis.Labels.Add(new IndexedXAxisLabel("Q2", 1));
                     xAxis.Labels.Add(new IndexedXAxisLabel("Q3", 2));
                     xAxis.Labels.Add(new IndexedXAxisLabel("Q4", 3));
            
                     // Create a numeric yAxis
                     NumericYAxis yAxis = new NumericYAxis();
            
                     // Create a title and add it to the YAxis
                     Title lTitle = new Title("Visitors (in millions)");
                     yAxis.Titles.Add(lTitle);
             
                     // Create a indexed area series and add values to it
                     IndexedAreaSeries areaSeries1 = new IndexedAreaSeries("Website A", xAxis, yAxis);
                     areaSeries1.Values.Add(new float[] { 5, 7, 9, 6 });
                     IndexedAreaSeries areaSeries2 = new IndexedAreaSeries("Website B", xAxis, yAxis);
                     areaSeries2.Values.Add(new float[] { 4, 2, 5, 8 });
                     IndexedAreaSeries areaSeries3 = new IndexedAreaSeries("Website C", xAxis, yAxis);
                     areaSeries3.Values.Add(new float[] { 2, 4, 6, 9 });
             
                     // Add indexed area series to the plot area
                     plotArea.Series.Add(areaSeries1);
                     plotArea.Series.Add(areaSeries2);
                     plotArea.Series.Add(areaSeries3);
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:/MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>	
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis"/> class. 
            </summary>
            <param name="offset">Offset from the border of plot area.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis.Min">
            <summary>
            Gets the Minimum value of the axis.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis.Max">
            <summary>
            Gets or sets the Maximum value of the axis.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis.AxisPaddingInterval">
            <summary>
            Gets or sets the padding interval of the axis.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis.Labels">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxisLabelList"/> object contained in the IndexedXAxis.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxisLabel">
             <summary>
             Represents the IndexedXAxisLabel.
             </summary>
             <example>The following example creates an indexed area chart and creates an indexed xaxis label to xaxis.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 230)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a indexed xAxis
                     Dim xAxis As IndexedXAxis = New IndexedXAxis()
             
                     ' Create indexed axis labels and add those to indexed xAxis
                     xAxis.Labels.Add(New IndexedXAxisLabel("Q1", 0))
                     xAxis.Labels.Add(New IndexedXAxisLabel("Q2", 1))
                     xAxis.Labels.Add(New IndexedXAxisLabel("Q3", 2))
                     xAxis.Labels.Add(New IndexedXAxisLabel("Q4", 3))
            
                     ' Create a numeric yAxis
                     Dim yAxis As NumericYAxis = New NumericYAxis()
            
                     ' Create a title and add it to the YAxis
                     Dim MyTitle3 As Title = New Title("Visitors (in millions)")
                     yAxis.Titles.Add(MyTitle3)
            
                     ' Create a indexed area series and add values to it
                     Dim MyAreaSeries1 As IndexedAreaSeries = New IndexedAreaSeries("Website A", xAxis, yAxis)
                     MyAreaSeries1.Values.Add(New Single() {5, 7, 9, 6})
                     Dim MyAreaSeries2 As IndexedAreaSeries = New IndexedAreaSeries("Website B", xAxis, yAxis)
                     MyAreaSeries2.Values.Add(New Single() {4, 2, 5, 8})
                     Dim MyAreaSeries3 As IndexedAreaSeries = New IndexedAreaSeries("Website C", xAxis, yAxis)
                     MyAreaSeries3.Values.Add(New Single() {2, 4, 6, 9})
             
                     ' Add indexed area series to the plot area
                     MyPlotArea.Series.Add(MyAreaSeries1)
                     MyPlotArea.Series.Add(MyAreaSeries2)
                     MyPlotArea.Series.Add(MyAreaSeries3)
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 230);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a indexed xAxis
                     IndexedXAxis xAxis = new IndexedXAxis();
            
                     // Create indexed axis labels and add those to indexed xAxis
                     xAxis.Labels.Add(new IndexedXAxisLabel("Q1", 0));
                     xAxis.Labels.Add(new IndexedXAxisLabel("Q2", 1));
                     xAxis.Labels.Add(new IndexedXAxisLabel("Q3", 2));
                     xAxis.Labels.Add(new IndexedXAxisLabel("Q4", 3));
            
                     // Create a numeric yAxis
                     NumericYAxis yAxis = new NumericYAxis();
            
                     // Create a title and add it to the YAxis
                     Title lTitle = new Title("Visitors (in millions)");
                     yAxis.Titles.Add(lTitle);
             
                     // Create a indexed area series and add values to it
                     IndexedAreaSeries areaSeries1 = new IndexedAreaSeries("Website A", xAxis, yAxis);
                     areaSeries1.Values.Add(new float[] { 5, 7, 9, 6 });
                     IndexedAreaSeries areaSeries2 = new IndexedAreaSeries("Website B", xAxis, yAxis);
                     areaSeries2.Values.Add(new float[] { 4, 2, 5, 8 });
                     IndexedAreaSeries areaSeries3 = new IndexedAreaSeries("Website C", xAxis, yAxis);
                     areaSeries3.Values.Add(new float[] { 2, 4, 6, 9 });
             
                     // Add indexed area series to the plot area
                     plotArea.Series.Add(areaSeries1);
                     plotArea.Series.Add(areaSeries2);
                     plotArea.Series.Add(areaSeries3);
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>	
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxisLabel.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxisLabel"/> class. 
            </summary>
            <param name="text">Text to display in the indexed xaxis label.</param>
            <param name="value1">Position of the indexed xaxis label.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxisLabel.#ctor(System.String,System.Int32,ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxisLabel"/> class. 
            </summary>
            <param name="text">Text to display in the indexed xaxis label.</param>
            <param name="value1">Position of the indexed xaxis label.</param>
            <param name="font"><see cref="T:ceTe.DynamicPDF.Font"/> for the text of the indexed xaxis label.</param>
            <param name="fontSize">Size for the text of the indexed xaxis label.</param>
            <param name="textColor"><see cref="T:ceTe.DynamicPDF.Color"/> for the text of the indexed xaxis label.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxisLabel.Value">
            <summary>
            Gets or sets the position of the IndexedXAxisLabel. 
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxisLabelList">
            <summary>
            Represents the IndexedXAxisLabelList.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxisLabelList.Add(ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxisLabel)">
            <summary>
            Adds an <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxisLabel"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxisLabelList"/> object. 
            </summary>
            <param name="indexedXAxisLabel">The <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxisLabel"/> to be added to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxisLabelList"/>.</param> 
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxisLabelList.Item(System.Int32)">
             <summary>
             Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxisLabel"/> at the given integer position. 
             </summary>
            <returns>The <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxisLabel"/> object.</returns>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxis">
             <summary>
             This class can be used to place the IndexedYAxis on the plot area.
             </summary>
             <example>The following example creates an indexed bar chart and creates indexed yaxis to yaxis.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 230)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a indexed yAxis
                     Dim yAxis As IndexedYAxis = New IndexedYAxis()
             
                     ' Create indexed Y axis labels and add those to indexed Y Axis
                     yAxis.Labels.Add(New IndexedYAxisLabel("Q1", 0))
                     yAxis.Labels.Add(New IndexedYAxisLabel("Q2", 1))
                     yAxis.Labels.Add(New IndexedYAxisLabel("Q3", 2))
                     yAxis.Labels.Add(New IndexedYAxisLabel("Q4", 3))
            
                     ' Create a numeric xAxis
                     Dim xAxis As NumericXAxis = New NumericXAxis()
            
                     ' Create a title and add it to the XAxis
                     Dim MyTitle As Title = New Title("Visitors (in millions)")
                     xAxis.Titles.Add(MyTitle)
            
                     ' Create a indexed bar series and add values to it
                     Dim MyBarSeries1 As IndexedBarSeries = New IndexedBarSeries("Website A", xAxis, yAxis)
                     MyBarSeries1.Values.Add(New Single() {5, 7, 9, 6})
                     Dim MyBarSeries2 As IndexedBarSeries = New IndexedBarSeries("Website B", xAxis, yAxis)
                     MyBarSeries2.Values.Add(New Single() {4, 2, 5, 8})
                     Dim MyBarSeries3 As IndexedBarSeries = New IndexedBarSeries("Website C", xAxis, yAxis)
                     MyBarSeries3.Values.Add(New Single() {2, 4, 6, 9})
            
                     ' Add indexed bar series to the plot area
                     MyPlotArea.Series.Add(MyBarSeries1)
                     MyPlotArea.Series.Add(MyBarSeries2)
                     MyPlotArea.Series.Add(MyBarSeries3)
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 { 
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 230);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a indexed yAxis
                     IndexedYAxis yAxis = new IndexedYAxis();
             
                     // Create indexed y axis labels and add those to indexed y Axis
                     yAxis.Labels.Add(new IndexedYAxisLabel("Q1", 0));
                     yAxis.Labels.Add(new IndexedYAxisLabel("Q2", 1));
                     yAxis.Labels.Add(new IndexedYAxisLabel("Q3", 2));
                     yAxis.Labels.Add(new IndexedYAxisLabel("Q4", 3));
            
                     // Create a numeric xAxis
                     NumericXAxis xAxis = new NumericXAxis();
            
                     // Create a title and add it to the XAxis
                     Title lTitle = new Title("Visitors (in millions)");
                     xAxis.Titles.Add(lTitle);
            
                     // Create a indexed bar series and add values to it
                     IndexedBarSeries barSeries1 = new IndexedBarSeries("Website A", xAxis, yAxis);
                     barSeries1.Values.Add(new float[] { 5, 7, 9, 6 });
                     IndexedBarSeries barSeries2 = new IndexedBarSeries("Website B", xAxis, yAxis);
                     barSeries2.Values.Add(new float[] { 4, 2, 5, 8 });
                     IndexedBarSeries barSeries3 = new IndexedBarSeries("Website C", xAxis, yAxis);
                     barSeries3.Values.Add(new float[] { 2, 4, 6, 9 });
            
                     // Add indexed bar series to the plot area
                     plotArea.Series.Add(barSeries1);
                     plotArea.Series.Add(barSeries2);
                     plotArea.Series.Add(barSeries3);
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>	
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxis.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxis"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxis.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxis"/> class. 
            </summary>
            <param name="offset">Offset from the border of plot area.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxis.Min">
            <summary>
            Gets the Minimum value of the axis.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxis.Max">
            <summary>
            Gets or sets the Maximum value of the axis.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxis.Labels">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxisLabelList"/> object contained in the IndexedYAxis.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxis.AxisPaddingInterval">
            <summary>
            Gets or sets the padding interval of the axis.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxisLabel">
             <summary>
             Represents the IndexedYAxisLabel.
             </summary>
             <example>The following example creates an indexed bar chart and creates indexed yaxis label to yaxis.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 230)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a indexed yAxis
                     Dim yAxis As IndexedYAxis = New IndexedYAxis()
            
                     ' Create indexed Y axis labels and add those to indexed y Axis
                     yAxis.Labels.Add(New IndexedYAxisLabel("Q1", 0))
                     yAxis.Labels.Add(New IndexedYAxisLabel("Q2", 1))
                     yAxis.Labels.Add(New IndexedYAxisLabel("Q3", 2))
                     yAxis.Labels.Add(New IndexedYAxisLabel("Q4", 3))
            
                     ' Create a numeric xAxis
                     Dim xAxis As NumericXAxis = New NumericXAxis()
            
                     ' Create a title and add it to the XAxis
                     Dim MyTitle As Title = New Title("Visitors (in millions)")
                     xAxis.Titles.Add(MyTitle)
            
                     ' Create a indexed bar series and add values to it
                     Dim MyBarSeries1 As IndexedBarSeries = New IndexedBarSeries("Website A", xAxis, yAxis)
                     MyBarSeries1.Values.Add(New Single() {5, 7, 9, 6})
                     Dim MyBarSeries2 As IndexedBarSeries = New IndexedBarSeries("Website B", xAxis, yAxis)
                     MyBarSeries2.Values.Add(New Single() {4, 2, 5, 8})
                     Dim MyBarSeries3 As IndexedBarSeries = New IndexedBarSeries("Website C", xAxis, yAxis)
                     MyBarSeries3.Values.Add(New Single() {2, 4, 6, 9})
            
                     ' Add indexed bar series to the plot area
                     MyPlotArea.Series.Add(MyBarSeries1)
                     MyPlotArea.Series.Add(MyBarSeries2)
                     MyPlotArea.Series.Add(MyBarSeries3)
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 { 
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 230);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a indexed yAxis
                     IndexedYAxis yAxis = new IndexedYAxis();
            
                     // Create indexed Y axis labels and add those to indexed Y Axis
                     yAxis.Labels.Add(new IndexedYAxisLabel("Q1", 0));
                     yAxis.Labels.Add(new IndexedYAxisLabel("Q2", 1));
                     yAxis.Labels.Add(new IndexedYAxisLabel("Q3", 2));
                     yAxis.Labels.Add(new IndexedYAxisLabel("Q4", 3));
            
                     // Create a numeric xAxis
                     NumericXAxis xAxis = new NumericXAxis();
            
                     // Create a title and add it to the XAxis
                     Title lTitle = new Title("Visitors (in millions)");
                     xAxis.Titles.Add(lTitle);
            
                     // Create a indexed bar series and add values to it
                     IndexedBarSeries barSeries1 = new IndexedBarSeries("Website A", xAxis, yAxis);
                     barSeries1.Values.Add(new float[] { 5, 7, 9, 6 });
                     IndexedBarSeries barSeries2 = new IndexedBarSeries("Website B", xAxis, yAxis);
                     barSeries2.Values.Add(new float[] { 4, 2, 5, 8 });
                     IndexedBarSeries barSeries3 = new IndexedBarSeries("Website C", xAxis, yAxis);
                     barSeries3.Values.Add(new float[] { 2, 4, 6, 9 });
            
                     // Add indexed bar series to the plot area
                     plotArea.Series.Add(barSeries1);
                     plotArea.Series.Add(barSeries2);
                     plotArea.Series.Add(barSeries3);
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>	
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxisLabel.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxisLabel"/> class. 
            </summary>
            <param name="text">Text to display in the indexed yaxis label.</param>
            <param name="value1">Position of the indexed yaxis label.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxisLabel.#ctor(System.String,System.Int32,ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxisLabel"/> class. 
            </summary>
            <param name="text">Text to display in the indexed yaxis label.</param>
            <param name="value1">Position of the indexed yaxis label.</param>
            <param name="font"><see cref="T:ceTe.DynamicPDF.Font"/> for the text of the indexed yaxis label.</param>
            <param name="fontSize">Size for the text of the indexed yaxis label.</param>
            <param name="textColor"><see cref="T:ceTe.DynamicPDF.Color"/> for the text of the indexed yaxis label.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxisLabel.Value">
            <summary>
            Gets or sets the position of the IndexedYAxisLabel. 
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxisLabelList">
            <summary>
            Represents the IndexedYAxisLabelList.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxisLabelList.Add(ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxisLabel)">
            <summary>
            Adds an <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxisLabel"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxisLabelList"/> object.
            </summary>
            <param name="indexedYAxisLabel">The <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxisLabel"/> to be added to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxisLabelList"/>.</param> 
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxisLabelList.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxisLabel"/> at the given integer position.
            </summary>
            <returns> the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxisLabel"/> object.</returns>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis">
             <summary>
             This class can be used to place the NumericXAxis on the plot area.
             </summary>
             <example>The following example creates a date time bar chart and creates a numeric xaxis to xaxis.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     'Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
             
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create date time yAxis
                     Dim yAxis As DateTimeYAxis = New DateTimeYAxis()
            
                     ' Create a numeric xAxis
                     Dim xAxis As NumericXAxis = New NumericXAxis()
            
                     ' Create a date time bar series and add values to it
                     Dim MyBarSeries1 As DateTimeBarSeries = New DateTimeBarSeries("Website A", xAxis, yAxis)
                     MyBarSeries1.Values.Add(5, New DateTime(2007, 1, 1))
                     MyBarSeries1.Values.Add(7, New DateTime(2007, 2, 1))
                     MyBarSeries1.Values.Add(9, New DateTime(2007, 3, 1))
                     MyBarSeries1.Values.Add(6, New DateTime(2007, 4, 1))
                     Dim MyBarSeries2 As DateTimeBarSeries = New DateTimeBarSeries("Website B", xAxis, yAxis)
                     MyBarSeries2.Values.Add(4, New DateTime(2007, 1, 1))
                     MyBarSeries2.Values.Add(2, New DateTime(2007, 2, 1))
                     MyBarSeries2.Values.Add(5, New DateTime(2007, 3, 1))
                     MyBarSeries2.Values.Add(8, New DateTime(2007, 4, 1))
                     Dim MyBarSeries3 As DateTimeBarSeries = New DateTimeBarSeries("Website C", xAxis, yAxis)
                     MyBarSeries3.Values.Add(2, New DateTime(2007, 1, 1))
                     MyBarSeries3.Values.Add(4, New DateTime(2007, 2, 1))
                     MyBarSeries3.Values.Add(6, New DateTime(2007, 3, 1))
                     MyBarSeries3.Values.Add(9, New DateTime(2007, 4, 1))
            
                     ' Add date time bar series to the plot area
                     MyPlotArea.Series.Add(MyBarSeries1)
                     MyPlotArea.Series.Add(MyBarSeries2)
                     MyPlotArea.Series.Add(MyBarSeries3)
            
                     ' Create a title and add it to the XAxis
                     Dim MyTitle3 As Title = New Title("Viewers (in millions)")
                     xAxis.Titles.Add(MyTitle3)
            
                     ' Set label list format for the axislabels
                     MyBarSeries1.YAxis.LabelFormat = "MMM"
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     //Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a date time  yAxis
                     DateTimeYAxis yAxis = new DateTimeYAxis();
            
                     // Create a numeric xAxis 
                     NumericXAxis xAxis = new NumericXAxis();
            
                     // Create a date time bar series and add values to it
                     DateTimeBarSeries barSeries1 = new DateTimeBarSeries("Website A", xAxis, yAxis);
                     barSeries1.Values.Add(5, new DateTime(2007, 1, 1));
                     barSeries1.Values.Add(7, new DateTime(2007, 2, 1));
                     barSeries1.Values.Add(9, new DateTime(2007, 3, 1));
                     barSeries1.Values.Add(6, new DateTime(2007, 4, 1));
                     DateTimeBarSeries barSeries2 = new DateTimeBarSeries("Website B", xAxis, yAxis);
                     barSeries2.Values.Add(4, new DateTime(2007, 1, 1));
                     barSeries2.Values.Add(2, new DateTime(2007, 2, 1));
                     barSeries2.Values.Add(5, new DateTime(2007, 3, 1));
                     barSeries2.Values.Add(8, new DateTime(2007, 4, 1));
                     DateTimeBarSeries barSeries3 = new DateTimeBarSeries("Website C", xAxis, yAxis);
                     barSeries3.Values.Add(2, new DateTime(2007, 1, 1));
                     barSeries3.Values.Add(4, new DateTime(2007, 2, 1));
                     barSeries3.Values.Add(6, new DateTime(2007, 3, 1));
                     barSeries3.Values.Add(9, new DateTime(2007, 4, 1));
            
                     // Add date time  bar series to the plot area
                     plotArea.Series.Add(barSeries1);
                     plotArea.Series.Add(barSeries2);
                     plotArea.Series.Add(barSeries3);
            
                     // Create a title and add it to the xAxis
                     Title title3 = new Title("Viewers (in millions)");
                     xAxis.Titles.Add(title3);
            
                     // Set label  format for the axislabels
                     barSeries1.YAxis.LabelFormat = "MMM";
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf"); 
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>	
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis"/> class. 
            </summary>
            <param name="offset">Offset from the border of plot area.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis.Min">
            <summary>
            Gets or sets the Minimum value of the axis. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis.Max">
            <summary>
            Gets or sets the Maximum value of the axis.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis.Interval">
            <summary>
            Gets or sets the interval of the axis.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis.Labels">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxisLabelList"/> object contained in the NumericXAxis.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxisLabel">
             <summary>
             Represents the NumericXAxisLabel.
             </summary>
             <example>The following example creates a date time bar chart and creates a numeric xaxis label.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     'Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
             
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create date time  yAxis
                     Dim yAxis As DateTimeYAxis = New DateTimeYAxis()
            
                     ' Create a numeric xAxis and add labels to it
                     Dim xAxis As NumericXAxis = New NumericXAxis()
                     xAxis.Labels.Add(New NumericXAxisLabel("0", 0))
                     xAxis.Labels.Add(New NumericXAxisLabel("1", 1))
                     xAxis.Labels.Add(New NumericXAxisLabel("2", 2))
                     xAxis.Labels.Add(New NumericXAxisLabel("3", 3))
                     xAxis.Labels.Add(New NumericXAxisLabel("4", 4))
                     xAxis.Labels.Add(New NumericXAxisLabel("5", 5))
                     xAxis.Labels.Add(New NumericXAxisLabel("6", 6))
                     xAxis.Labels.Add(New NumericXAxisLabel("7", 7))
                     xAxis.Labels.Add(New NumericXAxisLabel("8", 8))
                     xAxis.Labels.Add(New NumericXAxisLabel("9", 9))
            
                     ' Create a date time bar series and add values to it
                     Dim MyBarSeries1 As DateTimeBarSeries = New DateTimeBarSeries("Website A", xAxis, yAxis)
                     MyBarSeries1.Values.Add(5, New DateTime(2007, 1, 1))
                     MyBarSeries1.Values.Add(7, New DateTime(2007, 2, 1))
                     MyBarSeries1.Values.Add(9, New DateTime(2007, 3, 1))
                     MyBarSeries1.Values.Add(6, New DateTime(2007, 4, 1))
                     Dim MyBarSeries2 As DateTimeBarSeries = New DateTimeBarSeries("Website B", xAxis, yAxis)
                     MyBarSeries2.Values.Add(4, New DateTime(2007, 1, 1))
                     MyBarSeries2.Values.Add(2, New DateTime(2007, 2, 1))
                     MyBarSeries2.Values.Add(5, New DateTime(2007, 3, 1))
                     MyBarSeries2.Values.Add(8, New DateTime(2007, 4, 1))
                     Dim MyBarSeries3 As DateTimeBarSeries = New DateTimeBarSeries("Website C", xAxis, yAxis)
                     MyBarSeries3.Values.Add(2, New DateTime(2007, 1, 1))
                     MyBarSeries3.Values.Add(4, New DateTime(2007, 2, 1))
                     MyBarSeries3.Values.Add(6, New DateTime(2007, 3, 1))
                     MyBarSeries3.Values.Add(9, New DateTime(2007, 4, 1))
            
                     ' Add date time bar series to the plot area
                     MyPlotArea.Series.Add(MyBarSeries1)
                     MyPlotArea.Series.Add(MyBarSeries2)
                     MyPlotArea.Series.Add(MyBarSeries3)
            
                     ' Create a title and add it to the XAxis
                     Dim MyTitle3 As Title = New Title("Viewers (in millions)")
                     xAxis.Titles.Add(MyTitle3)
            
                     ' Set label list format for the axislabels
                     MyBarSeries1.YAxis.LabelFormat = "MMM"
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     //Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create date time yAxis
                     DateTimeYAxis yAxis = new DateTimeYAxis();
            
                     // Create a numeric xAxis and add labels to it
                     NumericXAxis xAxis = new NumericXAxis();
                     xAxis.Labels.Add(new NumericXAxisLabel("0", 0));
                     xAxis.Labels.Add(new NumericXAxisLabel("1", 1));
                     xAxis.Labels.Add(new NumericXAxisLabel("2", 2));
                     xAxis.Labels.Add(new NumericXAxisLabel("3", 3));
                     xAxis.Labels.Add(new NumericXAxisLabel("4", 4));
                     xAxis.Labels.Add(new NumericXAxisLabel("5", 5));
                     xAxis.Labels.Add(new NumericXAxisLabel("6", 6));
                     xAxis.Labels.Add(new NumericXAxisLabel("7", 7));
                     xAxis.Labels.Add(new NumericXAxisLabel("8", 8));
                     xAxis.Labels.Add(new NumericXAxisLabel("9", 9));
            
                     // Create a date time bar series and add values to it
                     DateTimeBarSeries barSeries1 = new DateTimeBarSeries("Website A", xAxis, yAxis);
                     barSeries1.Values.Add(5, new DateTime(2007, 1, 1));
                     barSeries1.Values.Add(7, new DateTime(2007, 2, 1));
                     barSeries1.Values.Add(9, new DateTime(2007, 3, 1));
                     barSeries1.Values.Add(6, new DateTime(2007, 4, 1));
                     DateTimeBarSeries barSeries2 = new DateTimeBarSeries("Website B", xAxis, yAxis);
                     barSeries2.Values.Add(4, new DateTime(2007, 1, 1));
                     barSeries2.Values.Add(2, new DateTime(2007, 2, 1));
                     barSeries2.Values.Add(5, new DateTime(2007, 3, 1));
                     barSeries2.Values.Add(8, new DateTime(2007, 4, 1));
                     DateTimeBarSeries barSeries3 = new DateTimeBarSeries("Website C", xAxis, yAxis);
                     barSeries3.Values.Add(2, new DateTime(2007, 1, 1));
                     barSeries3.Values.Add(4, new DateTime(2007, 2, 1));
                     barSeries3.Values.Add(6, new DateTime(2007, 3, 1));
                     barSeries3.Values.Add(9, new DateTime(2007, 4, 1));
            
                     // Add date time bar series to the plot area
                     plotArea.Series.Add(barSeries1);
                     plotArea.Series.Add(barSeries2);
                     plotArea.Series.Add(barSeries3);
            
                     // Create a title and add it to the XAxis
                     Title title3 = new Title("Viewers (in millions)");
                     xAxis.Titles.Add(title3);
            
                     // Set label  format for the axislabels
                     barSeries1.YAxis.LabelFormat = "MMM";
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf"); 
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>	
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxisLabel.#ctor(System.String,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxisLabel"/> class. 
            </summary>
            <param name="text">Text to display in the numeric xaxis label.</param>
            <param name="value1">Position of the numeric xaxis label.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxisLabel.#ctor(System.String,System.Single,ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxisLabel"/> class. 
            </summary>
            <param name="text">Text to display in the numeric xaxis label.</param>
            <param name="value1">Position of the numeric xaxis label.</param>
            <param name="font"><see cref="T:ceTe.DynamicPDF.Font"/> for the text of the numeric xaxis label.</param>
            <param name="fontSize">Font size for the text of the numeric xaxis label.</param>
            <param name="textColor"><see cref="T:ceTe.DynamicPDF.Color"/> for the text of the numeric xaxis label.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxisLabel.Value">
            <summary>
            Gets or sets the position of the NumericXAxisLabel. 
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxisLabelList">
            <summary>
            Represents the NumericXAxisLabelList.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxisLabelList.Add(ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxisLabel)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxisLabel"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxisLabelList"/> object.
            </summary>
            <param name="numericXAxisLabel">The<see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxisLabel"/> to be added to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxisLabelList"/>.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxisLabelList.AxisLabel(System.Single)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxisLabel"/> at the given float position. 
            </summary>
            <param name="value1">Position of the required numeric axis label.</param>
            <returns>The<see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxisLabel"/> object.</returns>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis">
             <summary>
             This class can be used to place the NumericYAxis on the plot area. 
             </summary>
             <example>The following example creates date time area series chart and creates numeric yaxis.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     'Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create date time xAxis
                     Dim xAxis As DateTimeXAxis = New DateTimeXAxis()
            
                     ' Create a numeric yAxis 
                     Dim yAxis As NumericYAxis = New NumericYAxis()
            
                     ' Create a date time area series and add values to it
                     Dim MyAreaSeries1 As DateTimeAreaSeries = New DateTimeAreaSeries("Website A", xAxis, yAxis)
                     MyAreaSeries1.Values.Add(5, New DateTime(2007, 1, 1))
                     MyAreaSeries1.Values.Add(7, New DateTime(2007, 2, 1))
                     MyAreaSeries1.Values.Add(9, New DateTime(2007, 3, 1))
                     MyAreaSeries1.Values.Add(6, New DateTime(2007, 4, 1))
                     Dim MyAreaSeries2 As DateTimeAreaSeries = New DateTimeAreaSeries("Website B", xAxis, yAxis)
                     MyAreaSeries2.Values.Add(4, New DateTime(2007, 1, 1))
                     MyAreaSeries2.Values.Add(2, New DateTime(2007, 2, 1))
                     MyAreaSeries2.Values.Add(5, New DateTime(2007, 3, 1))
                     MyAreaSeries2.Values.Add(8, New DateTime(2007, 4, 1))
                     Dim MyAreaSeries3 As DateTimeAreaSeries = New DateTimeAreaSeries("Website C", xAxis, yAxis)
                     MyAreaSeries3.Values.Add(2, New DateTime(2007, 1, 1))
                     MyAreaSeries3.Values.Add(4, New DateTime(2007, 2, 1))
                     MyAreaSeries3.Values.Add(6, New DateTime(2007, 3, 1))
                     MyAreaSeries3.Values.Add(9, New DateTime(2007, 4, 1))
            
                     ' Add date time  area series to the plot area
                     MyPlotArea.Series.Add(MyAreaSeries1)
                     MyPlotArea.Series.Add(MyAreaSeries2)
                     MyPlotArea.Series.Add(MyAreaSeries3)
            
                     ' Create a title and add it to the YAxis
                     Dim MyTitle3 As Title = New Title("Viewers (in millions)")
                     yAxis.Titles.Add(MyTitle3)
            
                     ' Set label  format for the axislabels
                     MyAreaSeries1.XAxis.LabelFormat = "MMM"
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     //Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create date time xAxis
                     DateTimeXAxis xAxis = new DateTimeXAxis();
            
                     // Create a numeric yAxis 
                     NumericYAxis yAxis = new NumericYAxis();
            
                     // Create a date time area series and add values to it
                     DateTimeAreaSeries areaSeries1 = new DateTimeAreaSeries("Website A", xAxis, yAxis);
                     areaSeries1.Values.Add(5, new DateTime(2007, 1, 1));
                     areaSeries1.Values.Add(7, new DateTime(2007, 2, 1));
                     areaSeries1.Values.Add(9, new DateTime(2007, 3, 1));
                     areaSeries1.Values.Add(6, new DateTime(2007, 4, 1));
                     DateTimeAreaSeries areaSeries2 = new DateTimeAreaSeries("Website B", xAxis, yAxis);
                     areaSeries2.Values.Add(4, new DateTime(2007, 1, 1));
                     areaSeries2.Values.Add(2, new DateTime(2007, 2, 1));
                     areaSeries2.Values.Add(5, new DateTime(2007, 3, 1));
                     areaSeries2.Values.Add(8, new DateTime(2007, 4, 1));
                     DateTimeAreaSeries areaSeries3 = new DateTimeAreaSeries("Website C", xAxis, yAxis);
                     areaSeries3.Values.Add(2, new DateTime(2007, 1, 1));
                     areaSeries3.Values.Add(4, new DateTime(2007, 2, 1));
                     areaSeries3.Values.Add(6, new DateTime(2007, 3, 1));
                     areaSeries3.Values.Add(9, new DateTime(2007, 4, 1));
            
                     // Add date time  area series to the plot area
                     plotArea.Series.Add(areaSeries1);
                     plotArea.Series.Add(areaSeries2);
                     plotArea.Series.Add(areaSeries3);
            
                     // Create a title and add it to the YAxis
                     Title title3 = new Title("Viewers (in millions)");
                     yAxis.Titles.Add(title3);
            
                     // Set label  format for the axislabels
                     areaSeries1.XAxis.LabelFormat = "MMM";
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>	
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis.#ctor">
            <summary>
            Initializes a new instance of the <ses cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> class. 
            </summary>
            <param name="offset">Offset from the border of plot area.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis.Min">
            <summary>
            Gets or sets the minimum value of the axis.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis.Max">
            <summary>
            Gets or sets the Maximum value of the axis.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis.Interval">
            <summary>
            Gets or sets the interval of the axis.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis.Labels">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxisLabelList"/> object contained in the NumericXAxis.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxisLabel">
             <summary>
             Represents the NumericYAxisLabel.
             </summary>
             <example>The following example creates a date time area series and creates numeric yaxis label to yaxis.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     'Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create date time xAxis
                     Dim xAxis As DateTimeXAxis = New DateTimeXAxis()
            
                     ' Create a numeric yAxis and add labels to it
                     Dim yAxis As NumericYAxis = New NumericYAxis()
                     yAxis.Labels.Add(New NumericYAxisLabel("0", 0))
                     yAxis.Labels.Add(New NumericYAxisLabel("1", 1))
                     yAxis.Labels.Add(New NumericYAxisLabel("2", 2))
                     yAxis.Labels.Add(New NumericYAxisLabel("3", 3))
                     yAxis.Labels.Add(New NumericYAxisLabel("4", 4))
                     yAxis.Labels.Add(New NumericYAxisLabel("5", 5))
                     yAxis.Labels.Add(New NumericYAxisLabel("6", 6))
                     yAxis.Labels.Add(New NumericYAxisLabel("7", 7))
                     yAxis.Labels.Add(New NumericYAxisLabel("8", 8))
                     yAxis.Labels.Add(New NumericYAxisLabel("9", 9))
            
                     ' Create a date time area series and add values to it
                     Dim MyAreaSeries1 As DateTimeAreaSeries = New DateTimeAreaSeries("Website A", xAxis, yAxis)
                     MyAreaSeries1.Values.Add(5, New DateTime(2007, 1, 1))
                     MyAreaSeries1.Values.Add(7, New DateTime(2007, 2, 1))
                     MyAreaSeries1.Values.Add(9, New DateTime(2007, 3, 1))
                     MyAreaSeries1.Values.Add(6, New DateTime(2007, 4, 1))
                     Dim MyAreaSeries2 As DateTimeAreaSeries = New DateTimeAreaSeries("Website B", xAxis, yAxis)
                     MyAreaSeries2.Values.Add(4, New DateTime(2007, 1, 1))
                     MyAreaSeries2.Values.Add(2, New DateTime(2007, 2, 1))
                     MyAreaSeries2.Values.Add(5, New DateTime(2007, 3, 1))
                     MyAreaSeries2.Values.Add(8, New DateTime(2007, 4, 1))
                     Dim MyAreaSeries3 As DateTimeAreaSeries = New DateTimeAreaSeries("Website C", xAxis, yAxis)
                     MyAreaSeries3.Values.Add(2, New DateTime(2007, 1, 1))
                     MyAreaSeries3.Values.Add(4, New DateTime(2007, 2, 1))
                     MyAreaSeries3.Values.Add(6, New DateTime(2007, 3, 1))
                     MyAreaSeries3.Values.Add(9, New DateTime(2007, 4, 1))
            
                     ' Add date time area series to the plot area
                     MyPlotArea.Series.Add(MyAreaSeries1)
                     MyPlotArea.Series.Add(MyAreaSeries2)
                     MyPlotArea.Series.Add(MyAreaSeries3)
            
                     ' Create a title and add it to the YAxis
                     Dim MyTitle3 As Title = New Title("Viewers (in millions)")
                     yAxis.Titles.Add(MyTitle3)
            
                     ' Set label list format for the axislabels
                     MyAreaSeries1.XAxis.LabelFormat = "MMM"
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     //Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create date time  xAxis
                     DateTimeXAxis xAxis = new DateTimeXAxis();
            
                     // Create a numeric yAxis and add labels to it
                     NumericYAxis yAxis = new NumericYAxis();
                     yAxis.Labels.Add(new NumericYAxisLabel("0", 0));
                     yAxis.Labels.Add(new NumericYAxisLabel("1", 1));
                     yAxis.Labels.Add(new NumericYAxisLabel("2", 2));
                     yAxis.Labels.Add(new NumericYAxisLabel("3", 3));
                     yAxis.Labels.Add(new NumericYAxisLabel("4", 4));
                     yAxis.Labels.Add(new NumericYAxisLabel("5", 5));
                     yAxis.Labels.Add(new NumericYAxisLabel("6", 6));
                     yAxis.Labels.Add(new NumericYAxisLabel("7", 7));
                     yAxis.Labels.Add(new NumericYAxisLabel("8", 8));
                     yAxis.Labels.Add(new NumericYAxisLabel("9", 9));
            
                     // Create a date time area series and add values to it
                     DateTimeAreaSeries areaSeries1 = new DateTimeAreaSeries("Website A", xAxis, yAxis);
                     areaSeries1.Values.Add(5, new DateTime(2007, 1, 1));
                     areaSeries1.Values.Add(7, new DateTime(2007, 2, 1));
                     areaSeries1.Values.Add(9, new DateTime(2007, 3, 1));
                     areaSeries1.Values.Add(6, new DateTime(2007, 4, 1));
                     DateTimeAreaSeries areaSeries2 = new DateTimeAreaSeries("Website B", xAxis, yAxis);
                     areaSeries2.Values.Add(4, new DateTime(2007, 1, 1));
                     areaSeries2.Values.Add(2, new DateTime(2007, 2, 1));
                     areaSeries2.Values.Add(5, new DateTime(2007, 3, 1));
                     areaSeries2.Values.Add(8, new DateTime(2007, 4, 1));
                     DateTimeAreaSeries areaSeries3 = new DateTimeAreaSeries("Website C", xAxis, yAxis);
                     areaSeries3.Values.Add(2, new DateTime(2007, 1, 1));
                     areaSeries3.Values.Add(4, new DateTime(2007, 2, 1));
                     areaSeries3.Values.Add(6, new DateTime(2007, 3, 1));
                     areaSeries3.Values.Add(9, new DateTime(2007, 4, 1));
            
                     // Add date time area series to the plot area
                     plotArea.Series.Add(areaSeries1);
                     plotArea.Series.Add(areaSeries2);
                     plotArea.Series.Add(areaSeries3);
            
                     // Create a title and add it to the YAxis
                     Title title3 = new Title("Viewers (in millions)");
                     yAxis.Titles.Add(title3);
            
                     // Set label  format for the axislabels
                     areaSeries1.XAxis.LabelFormat = "MMM";
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>	
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxisLabel.#ctor(System.String,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxisLabel"/> class. 
            </summary>
            <param name="text">Text to display in the numeric yaxis label.</param>
            <param name="value1">Position of the numeric yaxis label.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxisLabel.#ctor(System.String,System.Single,ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxisLabel"/> class. 
            </summary>
            <param name="text">Text to display in the numeric yaxis label.</param>
            <param name="value1">Position of the numeric yaxis label.</param>
            <param name="font"><see cref="T:ceTe.DynamicPDF.Font"/> for the text of the numeric yaxis label.</param>
            <param name="fontSize">Size for the text of the numeric yaxis label.</param>
            <param name="textColor"><see cref="T:ceTe.DynamicPDF.Color"/> for the text of the numeric yaxis label.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxisLabel.Value">
            <summary>
            Gets or sets the position of the NumericYAxisLabel.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxisLabelList">
            <summary>
            Represents the NumericYAxisLabelList.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxisLabelList.Add(ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxisLabel)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxisLabel"/>to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxisLabelList"/> object.
            </summary>
            <param name="numericYAxisLabel">The<see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxisLabel"/> to be added to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxisLabelList"/>.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxisLabelList.AxisLabel(System.Single)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxisLabel"/> at the given float position. 
            </summary>
            <param name="value1">Position of the required numeric axis label.</param>
            <returns>the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxisLabel"/> object.</returns>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageXAxis">
             <summary>
             This class can be used to place the PercentageXAxis on the plot area.
             </summary>
             <example>The following example creates a date time 100 percent stacked bar series chart and creates a percentage
             xaxis to xaxis.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
             
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     'Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create percentage xAxis 
                     Dim xAxis As PercentageXAxis = New PercentageXAxis()
            
                     ' Create a date time yAxis
                     Dim yAxis As DateTimeYAxis = New DateTimeYAxis()
            
                     ' Create a date time 100percent stacked bar series element and add values to it
                     Dim MyBarSeriesElement1 As DateTime100PercentStackedBarSeriesElement = New DateTime100PercentStackedBarSeriesElement("Website A")
                     MyBarSeriesElement1.Values.Add(5, New DateTime(2007, 1, 1))
                     MyBarSeriesElement1.Values.Add(7, New DateTime(2007, 2, 1))
                     MyBarSeriesElement1.Values.Add(9, New DateTime(2007, 3, 1))
                     MyBarSeriesElement1.Values.Add(6, New DateTime(2007, 4, 1))
                     Dim MyBarSeriesElement2 As DateTime100PercentStackedBarSeriesElement = New DateTime100PercentStackedBarSeriesElement("Website B")
                     MyBarSeriesElement2.Values.Add(4, New DateTime(2007, 1, 1))
                     MyBarSeriesElement2.Values.Add(2, New DateTime(2007, 2, 1))
                     MyBarSeriesElement2.Values.Add(5, New DateTime(2007, 3, 1))
                     MyBarSeriesElement2.Values.Add(8, New DateTime(2007, 4, 1))
                     Dim MyBarSeriesElement3 As DateTime100PercentStackedBarSeriesElement = New DateTime100PercentStackedBarSeriesElement("Website C")
                     MyBarSeriesElement3.Values.Add(2, New DateTime(2007, 1, 1))
                     MyBarSeriesElement3.Values.Add(4, New DateTime(2007, 2, 1))
                     MyBarSeriesElement3.Values.Add(6, New DateTime(2007, 3, 1))
                     MyBarSeriesElement3.Values.Add(9, New DateTime(2007, 4, 1))
            
                     ' Create a date time 100 percent stacked bar series and add date time 100 percent stacked bar series elements to it
                     Dim MyStackedBarSeries1 As DateTime100PercentStackedBarSeries = New DateTime100PercentStackedBarSeries(xAxis, yAxis)
                     MyStackedBarSeries1.Add(MyBarSeriesElement1)
                     MyStackedBarSeries1.Add(MyBarSeriesElement2)
                     MyStackedBarSeries1.Add(MyBarSeriesElement3)
            
                     ' Add date time 100 percent stacked bar series to the plot area
                     MyPlotArea.Series.Add(MyStackedBarSeries1)
            
                     ' Set label list  for the axislabels
                     MyStackedBarSeries1.YAxis.LabelFormat = "MMM"
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     //Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create percentage xAxis 
                     PercentageXAxis xAxis = new PercentageXAxis();
            
                     // Create a date time yAxis
                     DateTimeYAxis yAxis = new DateTimeYAxis();
            
                     // Create a date time 100percent stacked bar series element and add values to it
                     DateTime100PercentStackedBarSeriesElement barSeriesElement1 = new DateTime100PercentStackedBarSeriesElement("Website A");
                     barSeriesElement1.Values.Add(5, new DateTime(2007, 1, 1));
                     barSeriesElement1.Values.Add(7, new DateTime(2007, 2, 1));
                     barSeriesElement1.Values.Add(9, new DateTime(2007, 3, 1));
                     barSeriesElement1.Values.Add(6, new DateTime(2007, 4, 1));
                     DateTime100PercentStackedBarSeriesElement barSeriesElement2 = new DateTime100PercentStackedBarSeriesElement("Website B");
                     barSeriesElement2.Values.Add(4, new DateTime(2007, 1, 1));
                     barSeriesElement2.Values.Add(2, new DateTime(2007, 2, 1));
                     barSeriesElement2.Values.Add(5, new DateTime(2007, 3, 1));
                     barSeriesElement2.Values.Add(8, new DateTime(2007, 4, 1));
                     DateTime100PercentStackedBarSeriesElement barSeriesElement3 = new DateTime100PercentStackedBarSeriesElement("Website C");
                     barSeriesElement3.Values.Add(2, new DateTime(2007, 1, 1));
                     barSeriesElement3.Values.Add(4, new DateTime(2007, 2, 1));
                     barSeriesElement3.Values.Add(6, new DateTime(2007, 3, 1));
                     barSeriesElement3.Values.Add(9, new DateTime(2007, 4, 1));
             
                     // Create a date time 100percent stacked bar series and add date time 100percent stacked bar series elements to it
                     DateTime100PercentStackedBarSeries stackedBarSeries1 = new DateTime100PercentStackedBarSeries(xAxis, yAxis);
                     stackedBarSeries1.Add(barSeriesElement1);
                     stackedBarSeries1.Add(barSeriesElement2);
                     stackedBarSeries1.Add(barSeriesElement3);
            
                     // Add date time 100percent stacked bar series to the plot area
                     plotArea.Series.Add(stackedBarSeries1);
            
                     // Set label  format for the axislabels
                     stackedBarSeries1.YAxis.LabelFormat = "MMM";
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>	
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageXAxis.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageXAxis"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageXAxis.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageXAxis"/> class. 
            </summary>
            <param name="offset">Offset from the border of plot area.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageXAxis.Min">
            <summary>
            Gets or sets the Minimum value of the axis.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageXAxis.Interval">
            <summary>
            Gets or sets the interval of the axis.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageXAxis.Max">
            <summary>
            Gets or sets the Maximum value  of the axis.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageXAxis.Labels">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageXAxisLabelList"/> object contained in the PercentageXAxis.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageXAxisLabel">
             <summary>
             Represents the PercentageXAxisLabel.
             </summary>
             <example>The following example creates a date time 100 percent stacked bar series chart and creates a percentage
             xaxis label to xaxis.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
             
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create percentage xAxis and add labels to it
                     Dim xAxis As PercentageXAxis = New PercentageXAxis()
                     xAxis.Labels.Add(New PercentageXAxisLabel("0", 0))
                     xAxis.Labels.Add(New PercentageXAxisLabel("20%", 20))
                     xAxis.Labels.Add(New PercentageXAxisLabel("40%", 40))
                     xAxis.Labels.Add(New PercentageXAxisLabel("60%", 60))
                     xAxis.Labels.Add(New PercentageXAxisLabel("80%", 80))
                     xAxis.Labels.Add(New PercentageXAxisLabel("100%", 100))
            
                     ' Create a date time yAxis
                     Dim yAxis As DateTimeYAxis = New DateTimeYAxis()
            
                     ' Create a date time 100percent stacked bar series element and add values to it
                     Dim MyBarSeriesElement1 As DateTime100PercentStackedBarSeriesElement = New DateTime100PercentStackedBarSeriesElement("Website A")
                     MyBarSeriesElement1.Values.Add(5, New DateTime(2007, 1, 1))
                     MyBarSeriesElement1.Values.Add(7, New DateTime(2007, 2, 1))
                     MyBarSeriesElement1.Values.Add(9, New DateTime(2007, 3, 1))
                     MyBarSeriesElement1.Values.Add(6, New DateTime(2007, 4, 1))
                     Dim MyBarSeriesElement2 As DateTime100PercentStackedBarSeriesElement = New DateTime100PercentStackedBarSeriesElement("Website B")
                     MyBarSeriesElement2.Values.Add(4, New DateTime(2007, 1, 1))
                     MyBarSeriesElement2.Values.Add(2, New DateTime(2007, 2, 1))
                     MyBarSeriesElement2.Values.Add(5, New DateTime(2007, 3, 1))
                     MyBarSeriesElement2.Values.Add(8, New DateTime(2007, 4, 1))
                     Dim MyBarSeriesElement3 As DateTime100PercentStackedBarSeriesElement = New DateTime100PercentStackedBarSeriesElement("Website C")
                     MyBarSeriesElement3.Values.Add(2, New DateTime(2007, 1, 1))
                     MyBarSeriesElement3.Values.Add(4, New DateTime(2007, 2, 1))
                     MyBarSeriesElement3.Values.Add(6, New DateTime(2007, 3, 1))
                     MyBarSeriesElement3.Values.Add(9, New DateTime(2007, 4, 1))
            
                     ' Create a date time 100 percent stacked bar series and add date time 100 percent stacked bar series elements to it
                     Dim MyStackedBarSeries1 As DateTime100PercentStackedBarSeries = New DateTime100PercentStackedBarSeries(xAxis, yAxis)
                     MyStackedBarSeries1.Add(MyBarSeriesElement1)
                     MyStackedBarSeries1.Add(MyBarSeriesElement2)
                     MyStackedBarSeries1.Add(MyBarSeriesElement3)
            
                     ' Add date time 100 percent stacked bar series to the plot area
                     MyPlotArea.Series.Add(MyStackedBarSeries1)
            
                     ' Set label  format for the axislabels
                     MyStackedBarSeries1.YAxis.LabelFormat = "MMM"
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create percentage xAxis and add labels to it
                     PercentageXAxis xAxis = new PercentageXAxis();
                     xAxis.Labels.Add(new PercentageXAxisLabel("0", 0));
                     xAxis.Labels.Add(new PercentageXAxisLabel("20%", 20));
                     xAxis.Labels.Add(new PercentageXAxisLabel("40%", 40));
                     xAxis.Labels.Add(new PercentageXAxisLabel("60%", 60));
                     xAxis.Labels.Add(new PercentageXAxisLabel("80%", 80));
                     xAxis.Labels.Add(new PercentageXAxisLabel("100%", 100));
            
                     // Create a date time yAxis
                     DateTimeYAxis yAxis = new DateTimeYAxis();
            
                     // Create a date time 100percent stacked bar series element and add values to it
                     DateTime100PercentStackedBarSeriesElement barSeriesElement1 = new DateTime100PercentStackedBarSeriesElement("Website A");
                     barSeriesElement1.Values.Add(5, new DateTime(2007, 1, 1));
                     barSeriesElement1.Values.Add(7, new DateTime(2007, 2, 1));
                     barSeriesElement1.Values.Add(9, new DateTime(2007, 3, 1));
                     barSeriesElement1.Values.Add(6, new DateTime(2007, 4, 1));
                     DateTime100PercentStackedBarSeriesElement barSeriesElement2 = new DateTime100PercentStackedBarSeriesElement("Website B");
                     barSeriesElement2.Values.Add(4, new DateTime(2007, 1, 1));
                     barSeriesElement2.Values.Add(2, new DateTime(2007, 2, 1));
                     barSeriesElement2.Values.Add(5, new DateTime(2007, 3, 1));
                     barSeriesElement2.Values.Add(8, new DateTime(2007, 4, 1));
                     DateTime100PercentStackedBarSeriesElement barSeriesElement3 = new DateTime100PercentStackedBarSeriesElement("Website C");
                     barSeriesElement3.Values.Add(2, new DateTime(2007, 1, 1));
                     barSeriesElement3.Values.Add(4, new DateTime(2007, 2, 1));
                     barSeriesElement3.Values.Add(6, new DateTime(2007, 3, 1));
                     barSeriesElement3.Values.Add(9, new DateTime(2007, 4, 1));
             
                     // Create a date time 100percent stacked bar series and add date time stacked bar series elements to it
                     DateTime100PercentStackedBarSeries stackedBarSeries1 = new DateTime100PercentStackedBarSeries(xAxis, yAxis);
                     stackedBarSeries1.Add(barSeriesElement1);
                     stackedBarSeries1.Add(barSeriesElement2);
                     stackedBarSeries1.Add(barSeriesElement3);
            
                     // Add date time 100percent  stacked bar series to the plot area
                     plotArea.Series.Add(stackedBarSeries1);
            
                     // Set label  format for the axislabels
                     stackedBarSeries1.YAxis.LabelFormat = "MMM";
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>	
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageXAxisLabel.#ctor(System.String,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageXAxisLabel"/> class. 
            </summary>
            <param name="text">Text to display in the percentage xaxis label.</param>
            <param name="value1">Position of the percentage xaxis label.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageXAxisLabel.#ctor(System.String,System.Single,ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageXAxisLabel"/> class. 
            </summary>
            <param name="text">Text to display in the percentage xaxis label.</param>
            <param name="value1">Position of the percentage xaxis label.</param>
            <param name="font"><see cref="T:ceTe.DynamicPDF.Font"/> for the text of the percentage xaxis label.</param>
            <param name="fontSize">Size for the text of the percentage xaxis label.</param>
            <param name="textColor"><see cref="T:ceTe.DynamicPDF.Color"/> for the text of the percentage xaxis label.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageXAxisLabel.Value">
            <summary>
            Gets or sets the position of the PercentageXAxisLabel.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageXAxisLabelList">
            <summary>
            Represents the PercentageXAxisLabelList.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageXAxisLabelList.Add(ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageXAxisLabel)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageXAxisLabel"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageXAxisLabelList"/> object.
            </summary>
            <param name="percentageXAxisLabel">The<see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageXAxisLabel"/> to be added to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageXAxisLabelList"/>.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageXAxisLabelList.AxisLabel(System.Single)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageXAxisLabel"/> at the given float position. 
            </summary>
            <param name="value1">Position of the required percentage axis label.</param>
            <returns>The<see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageXAxisLabel"/> object.</returns>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis">
             <summary>
             This class can be used to place the PercentageYAxis on the plot area.
             </summary>
             <example>The following example creates a date time 100 percent stacked area chart and creates a percentage
             yaxis to yaxis.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
             
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create percentage yAxis and add labels to it
                     Dim yAxis As PercentageYAxis = New PercentageYAxis()
            
                     ' Create a date time xAxis
                     Dim xAxis As DateTimeXAxis = New DateTimeXAxis()
            
                     ' Create a date time 100percent stacked area series element and add values to it
                     Dim MyAreaSeriesElement1 As DateTime100PercentStackedAreaSeriesElement = New DateTime100PercentStackedAreaSeriesElement("Website A")
                     MyAreaSeriesElement1.Values.Add(5, New DateTime(2007, 1, 1))
                     MyAreaSeriesElement1.Values.Add(7, New DateTime(2007, 2, 1))
                     MyAreaSeriesElement1.Values.Add(9, New DateTime(2007, 3, 1))
                     MyAreaSeriesElement1.Values.Add(6, New DateTime(2007, 4, 1))
                     Dim MyAreaSeriesElement2 As DateTime100PercentStackedAreaSeriesElement = New DateTime100PercentStackedAreaSeriesElement("Website B")
                     MyAreaSeriesElement2.Values.Add(4, New DateTime(2007, 1, 1))
                     MyAreaSeriesElement2.Values.Add(2, New DateTime(2007, 2, 1))
                     MyAreaSeriesElement2.Values.Add(5, New DateTime(2007, 3, 1))
                     MyAreaSeriesElement2.Values.Add(8, New DateTime(2007, 4, 1))
                     Dim MyAreaSeriesElement3 As DateTime100PercentStackedAreaSeriesElement = New DateTime100PercentStackedAreaSeriesElement("Website C")
                     MyAreaSeriesElement3.Values.Add(2, New DateTime(2007, 1, 1))
                     MyAreaSeriesElement3.Values.Add(4, New DateTime(2007, 2, 1))
                     MyAreaSeriesElement3.Values.Add(6, New DateTime(2007, 3, 1))
                     MyAreaSeriesElement3.Values.Add(9, New DateTime(2007, 4, 1))
            
                     ' Create a date time 100 percent stacked area series and add date time 100 percent stacked area series elements to it
                     Dim MyStackedAreaSeries1 As DateTime100PercentStackedAreaSeries = New DateTime100PercentStackedAreaSeries(xAxis, yAxis)
                     MyStackedAreaSeries1.Add(MyAreaSeriesElement1)
                     MyStackedAreaSeries1.Add(MyAreaSeriesElement2)
                     MyStackedAreaSeries1.Add(MyAreaSeriesElement3)
            
                     ' Add date time 100 percent stacked bar series to the plot area
                     MyPlotArea.Series.Add(MyStackedAreaSeries1)
            
                     ' Set label list format for the axislabels
                     MyStackedAreaSeries1.XAxis.LabelFormat = "MMM"
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create percentage yAxis and add labels to it
                     PercentageYAxis yAxis = new PercentageYAxis();
            
                     // Create a date time xAxis
                     DateTimeXAxis xAxis = new DateTimeXAxis();
            
                     // Create a date time 100percent stacked area series element and add values to it
                     DateTime100PercentStackedAreaSeriesElement areaSeriesElement1 = new DateTime100PercentStackedAreaSeriesElement("Website A");
                     areaSeriesElement1.Values.Add(5, new DateTime(2007, 1, 1));
                     areaSeriesElement1.Values.Add(7, new DateTime(2007, 2, 1));
                     areaSeriesElement1.Values.Add(9, new DateTime(2007, 3, 1));
                     areaSeriesElement1.Values.Add(6, new DateTime(2007, 4, 1));
                     DateTime100PercentStackedAreaSeriesElement areaSeriesElement2 = new DateTime100PercentStackedAreaSeriesElement("Website B");
                     areaSeriesElement2.Values.Add(4, new DateTime(2007, 1, 1));
                     areaSeriesElement2.Values.Add(2, new DateTime(2007, 2, 1));
                     areaSeriesElement2.Values.Add(5, new DateTime(2007, 3, 1));
                     areaSeriesElement2.Values.Add(8, new DateTime(2007, 4, 1));
                     DateTime100PercentStackedAreaSeriesElement areaSeriesElement3 = new DateTime100PercentStackedAreaSeriesElement("Website C");
                     areaSeriesElement3.Values.Add(2, new DateTime(2007, 1, 1));
                     areaSeriesElement3.Values.Add(4, new DateTime(2007, 2, 1));
                     areaSeriesElement3.Values.Add(6, new DateTime(2007, 3, 1));
                     areaSeriesElement3.Values.Add(9, new DateTime(2007, 4, 1));
            
                     // Create a date time  100 percent stacked area  series and add date time 100 percent stacked area series elements to it
                     DateTime100PercentStackedAreaSeries stackedAreaSeries1 = new DateTime100PercentStackedAreaSeries(xAxis, yAxis);
                     stackedAreaSeries1.Add(areaSeriesElement1);
                     stackedAreaSeries1.Add(areaSeriesElement2);
                     stackedAreaSeries1.Add(areaSeriesElement3);
            
                     // Add date time  100 percent stacked bar series to the plot area
                     plotArea.Series.Add(stackedAreaSeries1);
            
                     // Set label list format for the axislabels
                     stackedAreaSeries1.XAxis.LabelFormat = "MMM";
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf"); 
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>	
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis"/> class. 
            </summary>
            <param name="offset">Offset from the border of plot area.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis.Min">
            <summary>
            Gets or sets the Minimum value of the axis.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis.Interval">
            <summary>
            Gets or sets the interval of the axis.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis.Max">
            <summary>
            Gets or sets the Maximum value  of the axis.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis.Labels">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxisLabelList"/> object contained in the PercentageYAxis.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxisLabel">
             <summary>
             Represents the PercentageYAxisLabel.
             </summary>
             <example>The following example creates a date time 100 percent stacked area series chart and createsa percentage
             yaxis label to yaxis.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
             
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create percentage yAxis and add labels to it
                     Dim yAxis As PercentageYAxis = New PercentageYAxis()
                     yAxis.Labels.Add(New PercentageYAxisLabel("0", 0))
                     yAxis.Labels.Add(New PercentageYAxisLabel("20%", 20))
                     yAxis.Labels.Add(New PercentageYAxisLabel("40%", 40))
                     yAxis.Labels.Add(New PercentageYAxisLabel("60%", 60))
                     yAxis.Labels.Add(New PercentageYAxisLabel("80%", 80))
                     yAxis.Labels.Add(New PercentageYAxisLabel("100%", 100))
            
                     ' Create a date time xAxis
                     Dim xAxis As DateTimeXAxis = New DateTimeXAxis()
            
                     ' Create a date time 100percent stacked area series element and add values to it
                     Dim MyAreaSeriesElement1 As DateTime100PercentStackedAreaSeriesElement = New DateTime100PercentStackedAreaSeriesElement("Website A")
                     MyAreaSeriesElement1.Values.Add(5, New DateTime(2007, 1, 1))
                     MyAreaSeriesElement1.Values.Add(7, New DateTime(2007, 2, 1))
                     MyAreaSeriesElement1.Values.Add(9, New DateTime(2007, 3, 1))
                     MyAreaSeriesElement1.Values.Add(6, New DateTime(2007, 4, 1))
                     Dim MyAreaSeriesElement2 As DateTime100PercentStackedAreaSeriesElement = New DateTime100PercentStackedAreaSeriesElement("Website B")
                     MyAreaSeriesElement2.Values.Add(4, New DateTime(2007, 1, 1))
                     MyAreaSeriesElement2.Values.Add(2, New DateTime(2007, 2, 1))
                     MyAreaSeriesElement2.Values.Add(5, New DateTime(2007, 3, 1))
                     MyAreaSeriesElement2.Values.Add(8, New DateTime(2007, 4, 1))
                     Dim MyAreaSeriesElement3 As DateTime100PercentStackedAreaSeriesElement = New DateTime100PercentStackedAreaSeriesElement("Website C")
                     MyAreaSeriesElement3.Values.Add(2, New DateTime(2007, 1, 1))
                     MyAreaSeriesElement3.Values.Add(4, New DateTime(2007, 2, 1))
                     MyAreaSeriesElement3.Values.Add(6, New DateTime(2007, 3, 1))
                     MyAreaSeriesElement3.Values.Add(9, New DateTime(2007, 4, 1))
            
                     ' Create a date time 100 percent stacked area series and add date time 100 percent stacked area series elements to it
                     Dim MyStackedAreaSeries1 As DateTime100PercentStackedAreaSeries = New DateTime100PercentStackedAreaSeries(xAxis, yAxis)
                     MyStackedAreaSeries1.Add(MyAreaSeriesElement1)
                     MyStackedAreaSeries1.Add(MyAreaSeriesElement2)
                     MyStackedAreaSeries1.Add(MyAreaSeriesElement3)
            
                     ' Add date time 100 percent stacked area series to the plot area
                     MyPlotArea.Series.Add(MyStackedAreaSeries1)
            
                     ' Set label  format for the axislabels
                     MyStackedAreaSeries1.XAxis.LabelFormat = "MMM"
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create percentage yAxis and add labels to it
                     PercentageYAxis yAxis = new PercentageYAxis();
                     yAxis.Labels.Add(new PercentageYAxisLabel("0", 0));
                     yAxis.Labels.Add(new PercentageYAxisLabel("20%", 20));
                     yAxis.Labels.Add(new PercentageYAxisLabel("40%", 40));
                     yAxis.Labels.Add(new PercentageYAxisLabel("60%", 60));
                     yAxis.Labels.Add(new PercentageYAxisLabel("80%", 80));
                     yAxis.Labels.Add(new PercentageYAxisLabel("100%", 100));
            
                     // Create a date time xAxis
                     DateTimeXAxis xAxis = new DateTimeXAxis();
            
                     // Create a date time 100percent stacked area series element and add values to it
                     DateTime100PercentStackedAreaSeriesElement areaSeriesElement1 = new DateTime100PercentStackedAreaSeriesElement("Website A");
                     areaSeriesElement1.Values.Add(5, new DateTime(2007, 1, 1));
                     areaSeriesElement1.Values.Add(7, new DateTime(2007, 2, 1));
                     areaSeriesElement1.Values.Add(9, new DateTime(2007, 3, 1));
                     areaSeriesElement1.Values.Add(6, new DateTime(2007, 4, 1));
                     DateTime100PercentStackedAreaSeriesElement areaSeriesElement2 = new DateTime100PercentStackedAreaSeriesElement("Website B");
                     areaSeriesElement2.Values.Add(4, new DateTime(2007, 1, 1));
                     areaSeriesElement2.Values.Add(2, new DateTime(2007, 2, 1));
                     areaSeriesElement2.Values.Add(5, new DateTime(2007, 3, 1));
                     areaSeriesElement2.Values.Add(8, new DateTime(2007, 4, 1));
                     DateTime100PercentStackedAreaSeriesElement areaSeriesElement3 = new DateTime100PercentStackedAreaSeriesElement("Website C");
                     areaSeriesElement3.Values.Add(2, new DateTime(2007, 1, 1));
                     areaSeriesElement3.Values.Add(4, new DateTime(2007, 2, 1));
                     areaSeriesElement3.Values.Add(6, new DateTime(2007, 3, 1));
                     areaSeriesElement3.Values.Add(9, new DateTime(2007, 4, 1));
            
                     // Create a date time 100percent stacked area series and add date time 100percent stacked area series elements to it
                     DateTime100PercentStackedAreaSeries stackedAreaSeries1 = new DateTime100PercentStackedAreaSeries(xAxis, yAxis);
                     stackedAreaSeries1.Add(areaSeriesElement1);
                     stackedAreaSeries1.Add(areaSeriesElement2);
                     stackedAreaSeries1.Add(areaSeriesElement3);
            
                     // Add date time 100percent stacked area series to the plot area
                     plotArea.Series.Add(stackedAreaSeries1);
            
                     // Set label  format for the axislabels
                     stackedAreaSeries1.XAxis.LabelFormat = "MMM";
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf"); 
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>	
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxisLabel.#ctor(System.String,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxisLabel"/> class.
            </summary>
            <param name="text">Text to display in the percentage yaxis label.</param>
            <param name="value1">Position of the percentage yaxis label.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxisLabel.#ctor(System.String,System.Single,ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxisLabel"/> class. 
            </summary>
            <param name="text">Text to display in the percentage yaxis label.</param>
            <param name="value1">Position of the percentage yaxis label.</param>
            <param name="font"><see cref="T:ceTe.DynamicPDF.Font"/> for the text of the percentage yaxis label.</param>
            <param name="fontSize">Size for the text of the percentage yaxis label.</param>
            <param name="textColor"><see cref="T:ceTe.DynamicPDF.Color"/> for the text of the percentage yaxis label.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxisLabel.Value">
            <summary>
            Gets or sets the position of the PercentageYAxisLabel. 
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxisLabelList">
            <summary>
            Represents the PercentageYAxisLabelList.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxisLabelList.Add(ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxisLabel)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxisLabel"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxisLabelList"/> object.
            </summary>
            <param name="percentageAxisLabel">The <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxisLabel"/> to be added to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxisLabelList"/>.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxisLabelList.AxisLabel(System.Single)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxisLabel"/> at the given float position. 
            </summary>
            <param name="value1">Position of the required percentage axis label.</param>
            <returns>The <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxisLabel"/> object.</returns>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisAnchorType">
            <summary>
            Represents the position of the XAxis on the plot area.
            </summary>
            <licensing>
            This enumeration is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisAnchorType.Bottom">
            <summary>
            Shows the XAxis at the bottom of the plot area.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisAnchorType.Top">
            <summary>
            Shows the XAxis at the top of the plot area.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisAnchorType.Floating">
            <summary>
            Shows the XAxis at the zero position of the plot area.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisGridLines">
             <summary>
             This class represents the Gridlines of the XAxis. 
             </summary>
             <example>The following example creates a indexed bar series chart and adds gridlines to xaxis with gridlines 
             property set to black color.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 230)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a indexed y axis
                     Dim yAxis As IndexedYAxis = New IndexedYAxis()
            
                     ' Create a numeric x axis and Xaxis gridlines
                     Dim xAxis As NumericXAxis = New NumericXAxis()
                     Dim xGrid As XAxisGridLines = New XAxisGridLines()
                     xAxis.Interval = 2
                     xAxis.MajorGridLines = xGrid
             
                     ' set Xaxis gridlines color property to black
                     xGrid.Color = RgbColor.Black
            
                     ' Create a indexed bar series and add values to it
                     Dim MyBarSeries1 As IndexedBarSeries = New IndexedBarSeries("Website A", xAxis, yAxis)
                     MyBarSeries1.Values.Add(New Single() {5, 7, 9, 6})
                     Dim MyBarSeries2 As IndexedBarSeries = New IndexedBarSeries("Website B", xAxis, yAxis)
                     MyBarSeries2.Values.Add(New Single() {4, 2, 5, 8})
                     Dim MyBarSeries3 As IndexedBarSeries = New IndexedBarSeries("Website C", xAxis, yAxis)
                     MyBarSeries3.Values.Add(New Single() {2, 4, 6, 9})
            
                     ' Add indexed bar series to the plot area
                     MyPlotArea.Series.Add(MyBarSeries1)
                     MyPlotArea.Series.Add(MyBarSeries2)
                     MyPlotArea.Series.Add(MyBarSeries3)
            
                     ' Create a footer title and add it to the chart
                     Dim MyTitle3 As Title = New Title("Visitors (in millions)")
                     MyChart.FooterTitles.Add(MyTitle3)
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 230);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a indexed y axis
                     IndexedYAxis yAxis = new IndexedYAxis();
            
                     // Create a numeric x axis and Xaxis gridlines
                     NumericXAxis xAxis = new NumericXAxis();
                     XAxisGridLines xGrid = new XAxisGridLines();
                     xAxis.Interval = 2;
                     xAxis.MajorGridLines = xGrid;
             
                     // set Xaxis gridlines color property to black
                     xGrid.Color = RgbColor.Black;
            
                     // Create a indexed bar series and add values to it
                     IndexedBarSeries barSeries1 = new IndexedBarSeries("Website A", xAxis, yAxis);
                     barSeries1.Values.Add(new float[] { 5, 7, 9, 6 });
                     IndexedBarSeries barSeries2 = new IndexedBarSeries("Website B", xAxis, yAxis);
                     barSeries2.Values.Add(new float[] { 4, 2, 5, 8 });
                     IndexedBarSeries barSeries3 = new IndexedBarSeries("Website C", xAxis, yAxis);
                     barSeries3.Values.Add(new float[] { 2, 4, 6, 9 });
            
                     // Add indexed bar series to the plot area
                     plotArea.Series.Add(barSeries1);
                     plotArea.Series.Add(barSeries2);
                     plotArea.Series.Add(barSeries3);
            
                     // Create a footer title and add it to the chart
                     Title title3 = new Title("Visitors (in millions)");
                     chart.FooterTitles.Add(title3);
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf"); 
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>	
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.GridLines">
            <summary>
            Base class from which x and y grid lines are derived.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	 
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.GridLines.Interval">
            <summary>
            Gets or sets the interval of the grid lines.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.GridLines.LineStyle">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.GridLines.LineStyle"/> enumeration that specifies the line style of the grid lines.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.GridLines.Width">
            <summary>
            Gets or sets the width of the grid lines.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.GridLines.Color">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.GridLines.Color"/> object to use for the color of the grid lines.    
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.GridLines.Visible">
            <summary>
            Gets or sets the visible status of the grid lines on the plot area. By default it is true. 
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisGridLines.#ctor">
             <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisGridLines"/> class. 
             </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisGridLines.#ctor(System.Single)">
             <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisGridLines"/> class. 
             </summary>
             <param name="interval">Interval of the x grid lines.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisLabelLocation">
            <summary>
            <font color="red">Obsolete.</font> Represents the location of the XAxisLabels.
            </summary>
            <remarks><font color="red">NOTE: This enumeration is obsolete.</font> Use <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisLabelPosition"/> enumeration instead.</remarks>
            <licensing>
            This enumeration is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisLabelLocation.BelowPlotArea">
            <summary>
            Shows the axis labels below the plot area.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisLabelLocation.AbovePlotArea">
            <summary>
            Shows the axis labels above the plot area.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisLabelLocation.BelowXAxis">
            <summary>
            Shows the axis labels below the XAxis.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisLabelLocation.AboveXAxis">
            <summary>
            Shows the axis labels above the XAxis.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisLabelLocation.Automatic">
            <summary>
            Shows the axis labels automatically below or above the XAxis depending on the X anchor type.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisLabelPosition">
            <summary>
            Represents the position of the XAxisLabels.
            </summary>
            <licensing>
            This enumeration is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisLabelPosition.BelowPlotArea">
            <summary>
            Shows the axis labels below the plot area.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisLabelPosition.AbovePlotArea">
            <summary>
            Shows the axis labels above the plot area.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisLabelPosition.BelowXAxis">
            <summary>
            Shows the axis labels below the XAxis.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisLabelPosition.AboveXAxis">
            <summary>
            Shows the axis labels above the XAxis.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisLabelPosition.Automatic">
            <summary>
            Shows the axis labels automatically below or above the XAxis depending on the X anchor type.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisList">
            <summary>
            This class represents the XAxisList of the plot area.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisList.Add(ceTe.DynamicPDF.PageElements.Charting.Axes.XAxis)">
            <summary>
            Adds an <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxis"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisList"/> object.
            </summary>
            <param name="xAxis">The <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxis"/> to be displayed in the plot area.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisList.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxis"/> at the given index.
            </summary>
            <returns>The <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxis"/> object.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisList.Count">
            <summary>
            Gets the number of elements actually contained in the XAxis List.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisList.DefaultNumericAxis">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisList.NumericXAxis"/> object to use for the default numeric xAxis of the plot area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisList.DefaultIndexedAxis">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisList.IndexedXAxis"/> object to use for the default indexed xAxis of the plot area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisList.DefaultDateTimeAxis">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisList.DateTimeXAxis"/> object to use for the default dateTime xAxis of the plot area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisList.DefaultPercentageAxis">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisList.PercentageXAxis"/> object to use for the default percentage xAxis of the plot area.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisTickMarks">
             <summary>
             This class represents the Tickmarks of the XAxis. 
             </summary>
             <example>The following example creates a indexed bar series chart and creates a tickmark to xaxis.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 230)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a indexed y axis
                     Dim yAxis As IndexedYAxis = New IndexedYAxis()
            
                     ' Create a numeric x axis and add tickmarks
                     Dim xAxis As NumericXAxis = New NumericXAxis()
                     Dim xTicks As XAxisTickMarks = New XAxisTickMarks()
                     xAxis.MajorTickMarks = xTicks
            
                     ' Create a indexed bar series and add values to it
                     Dim MyBarSeries1 As IndexedBarSeries = New IndexedBarSeries("Website A", xAxis, yAxis)
                     MyBarSeries1.Values.Add(New Single() {5, 7, 9, 6})
                     Dim MyBarSeries2 As IndexedBarSeries = New IndexedBarSeries("Website B", xAxis, yAxis)
                     MyBarSeries2.Values.Add(New Single() {4, 2, 5, 8})
                     Dim MyBarSeries3 As IndexedBarSeries = New IndexedBarSeries("Website C", xAxis, yAxis)
                     MyBarSeries3.Values.Add(New Single() {2, 4, 6, 9})
            
                     ' Add indexed bar series to the plot area
                     MyPlotArea.Series.Add(MyBarSeries1)
                     MyPlotArea.Series.Add(MyBarSeries2)
                     MyPlotArea.Series.Add(MyBarSeries3)
            
                     ' Create a footer title and add it to the chart
                     Dim MyTitle3 As Title = New Title("Visitors (in millions)")
                     MyChart.FooterTitles.Add(MyTitle3)
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
            
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 230);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a indexed y axis
                     IndexedYAxis yAxis = new IndexedYAxis();
            
                     // Create a numeric x axis and add tickmarks
                     NumericXAxis xAxis = new NumericXAxis();
                     XAxisTickMarks xTicks = new XAxisTickMarks();
                     xAxis.MajorTickMarks = xTicks;
            
                     // Create a indexed bar series and add values to it
                     IndexedBarSeries barSeries1 = new IndexedBarSeries("Website A", xAxis, yAxis);
                     barSeries1.Values.Add(new float[] { 5, 7, 9, 6 });
                     IndexedBarSeries barSeries2 = new IndexedBarSeries("Website B", xAxis, yAxis);
                     barSeries2.Values.Add(new float[] { 4, 2, 5, 8 });
                     IndexedBarSeries barSeries3 = new IndexedBarSeries("Website C", xAxis, yAxis);
                     barSeries3.Values.Add(new float[] { 2, 4, 6, 9 });
            
                     // Add indexed bar series to the plot area
                     plotArea.Series.Add(barSeries1);
                     plotArea.Series.Add(barSeries2);
                     plotArea.Series.Add(barSeries3);
            
                     // Create a footer title and add it to the chart
                     Title title3 = new Title("Visitors (in millions)");
                     chart.FooterTitles.Add(title3);
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>	
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.TickMarks">
            <summary>
            The base class from which x and y TickMarks are derived.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.TickMarks.Interval">
            <summary>
            Gets or sets the interval of the TickMarks.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.TickMarks.LineStyle">
            <summary>
            Gets or sets <see cref="P:ceTe.DynamicPDF.PageElements.Charting.TickMarks.LineStyle"/> enumeration that specifies the LineStyle of the TickMarks.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.TickMarks.Width">
            <summary>
            Gets or sets the width of the TickMarks.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.TickMarks.Color">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.TickMarks.Color"/> object to use for the color of the TickMarks.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.TickMarks.Length">
            <summary>
            Gets or sets the length of the TickMarks.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.TickMarks.Visible">
            <summary>
            Gets or sets the visible status of the TickMarks. By default it is true.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisTickMarks.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisTickMarks"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisTickMarks.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisTickMarks"/> class. 
            </summary>
            <param name="interval">Indicating interval of the xaxis tick marks.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisTickMarks.Position">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisTickMarksPosition"/> enumeration that specifies the position of the XAxisTickMarks.
            </summary>		
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisTickMarksPosition">
            <summary>
            Represents the position of the XAxisTickMarks. 
            </summary>
            <licensing>
            This enumeration is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisTickMarksPosition.Above">
            <summary>
            Shows the tick marks above the XAxis.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisTickMarksPosition.Below">
            <summary>
            Shows the tick marks below the XAxis.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisTickMarksPosition.Across">
            <summary>
            Shows the tick marks across the XAxis.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisTickMarksPosition.Automatic">
            <summary>
            Shows the tick marks based on the XAxis anchor type. 
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisTitleLocation">
            <summary>
            <font color="red">Obsolete.</font> Represents the location of the XAxisTitle.
            </summary>
            <remarks><font color="red">NOTE: This enumeration is obsolete.</font> Use <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisTitlePosition"/> enumeration instead.</remarks>
            <licensing>
            This enumeration is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisTitleLocation.BelowPlotArea">
            <summary>
            Shows the XAxis title below the plot area.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisTitleLocation.AbovePlotArea">
            <summary>
            Shows the XAxis title above the plot area.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisTitleLocation.BelowXAxis">
            <summary>
            Shows the XAxis title below the XAxis.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisTitleLocation.AboveXAxis">
            <summary>
            Shows the XAxis title above the XAxis.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisTitleLocation.Automatic">
            <summary>
            Shows the XAxis title automatically below or above the XAxis depending on the X anchor type.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisTitlePosition">
            <summary>
            Represents the position of the XAxisTitle.
            </summary>
            <licensing>
            This enumeration is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisTitlePosition.BelowPlotArea">
            <summary>
            Shows the XAxis title below the plot area.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisTitlePosition.AbovePlotArea">
            <summary>
            Shows the XAxis title above the plot area.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisTitlePosition.BelowXAxis">
            <summary>
            Shows the XAxis title below the XAxis.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisTitlePosition.AboveXAxis">
            <summary>
            Shows the XAxis title above the XAxis.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisTitlePosition.Automatic">
            <summary>
            Shows the XAxis title automatically below or above the XAxis depending on the X anchor type.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisAnchorType">
            <summary>
            Represents the position of the YAxis on the plot area.
            </summary>
            <licensing>
            This enumeration is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisAnchorType.Left">
            <summary>
            Shows the YAxis at the left side of the plot area.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisAnchorType.Right">
            <summary>
            Shows the YAxis at the right side of the plot area.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisAnchorType.Floating">
            <summary>
            Shows the YAxis at the zero position of the plot area.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisGridLines">
             <summary>
             This class represents the Gridlines of YAxis.
             </summary>
             <example>The following example creates an indexed column series chart and adds gridlines to yaxis.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
             
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 230)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a indexed x axis
                     Dim xAxis As IndexedXAxis = New IndexedXAxis()
            
                     ' Create a numeric y axis and Yaxis gridlines
                     Dim yAxis As NumericYAxis = New NumericYAxis()
                     Dim yGrid As YAxisGridLines = New YAxisGridLines()
                     yAxis.Interval = 2
                     yAxis.MajorGridLines = yGrid
             
                     ' set Yaxis gridlines color property to black
                     yGrid.Color = RgbColor.Black
            
                     ' Create a indexed column series and add values to it
                     Dim MyColumnSeries1 As IndexedColumnSeries = New IndexedColumnSeries("Website A", xAxis, yAxis)
                     MyColumnSeries1.Values.Add(New Single() {5, 7, 9, 6})
                     Dim MyColumnSeries2 As IndexedColumnSeries = New IndexedColumnSeries("Website B", xAxis, yAxis)
                     MyColumnSeries2.Values.Add(New Single() {4, 2, 5, 8})
                     Dim MyColumnSeries3 As IndexedColumnSeries = New IndexedColumnSeries("Website C", xAxis, yAxis)
                     MyColumnSeries3.Values.Add(New Single() {2, 4, 6, 9})
            
                     ' Add indexed column series to the plot area
                     MyPlotArea.Series.Add(MyColumnSeries1)
                     MyPlotArea.Series.Add(MyColumnSeries2)
                     MyPlotArea.Series.Add(MyColumnSeries3)
            
                     ' Create a title and add it to the yaxis
                     Dim MyTitle3 As Title = New Title("Visitors (in millions)")
                     MyColumnSeries1.YAxis.Titles.Add(MyTitle3)
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 230);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a indexed x axis
                     IndexedXAxis xAxis = new IndexedXAxis();
            
                     // Create a numeric y axis and Yaxis gridlines
                     NumericYAxis yAxis = new NumericYAxis();
                     YAxisGridLines yGrid = new YAxisGridLines();
                     yAxis.Interval = 2;
                     yAxis.MajorGridLines = yGrid;
             
                     // set Xaxis gridlines color property to black
                     yGrid.Color = RgbColor.Black;
            
                     // Create a indexed column series and add values to it
                     IndexedColumnSeries columnSeries1 = new IndexedColumnSeries("Website A", xAxis, yAxis);
                     columnSeries1.Values.Add(new float[] { 5, 7, 9, 6 });
                     IndexedColumnSeries columnSeries2 = new IndexedColumnSeries("Website B", xAxis, yAxis);
                     columnSeries2.Values.Add(new float[] { 4, 2, 5, 8 });
                     IndexedColumnSeries columnSeries3 = new IndexedColumnSeries("Website C", xAxis, yAxis);
                     columnSeries3.Values.Add(new float[] { 2, 4, 6, 9 });
            
                     // Add indexed column series to the plot area
                     plotArea.Series.Add(columnSeries1);
                     plotArea.Series.Add(columnSeries2);
                     plotArea.Series.Add(columnSeries3);
            
                     // Create a title and add it to the yaxis
                     Title lTitle = new Title("Visitors (in millions)");
                     columnSeries1.YAxis.Titles.Add(lTitle);
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>	
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisGridLines.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisGridLines"/> class.
            </summary>		
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisGridLines.#ctor(System.Single)">
             <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisGridLines"/> class. 
             </summary>
             <param name="interval">Interval of yaxis grid lines.</param>															
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisLabelLocation">
            <summary>
            Represents the location of the YAxisLabels.
            </summary>
            <licensing>
            This enumeration is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisLabelLocation.LeftOfPlotArea">
            <summary>
            Shows the axis labels left of the plot area.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisLabelLocation.RightOfPlotArea">
            <summary>
            Shows the axis labels right of the plot area.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisLabelLocation.LeftOfYAxis">
            <summary>
            Shows the axis labels left of the YAxis.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisLabelLocation.RightOfYAxis">
            <summary>
            Shows the axis labels right of the YAxis.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisLabelLocation.Automatic">
            <summary>
            Show the axis labels automatically left or right of the YAxis depending on the Y anchor type.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisLabelPosition">
            <summary>
            Represents the location of the YAxisLabels.
            </summary>
            <licensing>
            This enumeration is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisLabelPosition.LeftOfPlotArea">
            <summary>
            Shows the axis labels left of the plot area.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisLabelPosition.RightOfPlotArea">
            <summary>
            Shows the axis labels right of the plot area.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisLabelPosition.LeftOfYAxis">
            <summary>
            Shows the axis labels left of the YAxis.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisLabelPosition.RightOfYAxis">
            <summary>
            Shows the axis labels right of the YAxis.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisLabelPosition.Automatic">
            <summary>
            Show the axis labels automatically left or right of the YAxis depending on the Y anchor type.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisList">
            <summary>
            This class represents the YAxisList of the plot area.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisList.Add(ceTe.DynamicPDF.PageElements.Charting.Axes.YAxis)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxis"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisList"/> object.
            </summary>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxis"/> to be displayed in the plot area.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisList.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxis"/> at the given index. 
            </summary>
            <returns>The <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxis"/> object.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisList.Count">
            <summary>
            Gets the number of elements actually contained in the yAxis llist.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisList.DefaultNumericAxis">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisList.NumericYAxis"/> object to use for the default numeric yAxis of the plot area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisList.DefaultIndexedAxis">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisList.IndexedYAxis"/> object to use for the default indexed yAxis of the plot area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisList.DefaultDateTimeAxis">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisList.DateTimeYAxis"/> object to use for the default dateTime yAxis of the plot area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisList.DefaultPercentageAxis">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisList.PercentageYAxis"/> object to use for the default percentage yAxis of the plot area.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisTickMarks">
             <summary>
             This class represents the TickMarks of the YAxis. 
             </summary>
             <example>The following example creates indexed column series chart and adds tickmarks to yaxis.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 230)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
             
                     ' Create a indexed x axis
                     Dim xAxis As IndexedXAxis = New IndexedXAxis()
            
                     ' Create a numeric y axis and add tickmarks
                     Dim yAxis As NumericYAxis = New NumericYAxis()
                     Dim yTicks As YAxisTickMarks = New YAxisTickMarks()
                     yAxis.MajorTickMarks = yTicks
            
                     ' Create a indexed column series and add values to it
                     Dim MyColumnSeries1 As IndexedColumnSeries = New IndexedColumnSeries("Website A", xAxis, yAxis)
                     MyColumnSeries1.Values.Add(New Single() {5, 7, 9, 6})
                     Dim MyColumnSeries2 As IndexedColumnSeries = New IndexedColumnSeries("Website B", xAxis, yAxis)
                     MyColumnSeries2.Values.Add(New Single() {4, 2, 5, 8})
                     Dim MyColumnSeries3 As IndexedColumnSeries = New IndexedColumnSeries("Website C", xAxis, yAxis)
                     MyColumnSeries3.Values.Add(New Single() {2, 4, 6, 9})
            
                     ' Add indexed column series to the plot area
                     MyPlotArea.Series.Add(MyColumnSeries1)
                     MyPlotArea.Series.Add(MyColumnSeries2)
                     MyPlotArea.Series.Add(MyColumnSeries3)
            
                     ' Create a title and add it to the yaxis
                     Dim MyTitle3 As Title = New Title("Visitors (in millions)")
                     MyColumnSeries1.YAxis.Titles.Add(MyTitle3)
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 230);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a indexed x axis
                     IndexedXAxis xAxis = new IndexedXAxis();
            
                     // Create a numeric y axis and add tickmarks
                     NumericYAxis yAxis = new NumericYAxis();
                     YAxisTickMarks yTicks = new YAxisTickMarks();
                     yAxis.MajorTickMarks = yTicks;
            
                     // Create a indexed column series and add values to it
                     IndexedColumnSeries columnSeries1 = new IndexedColumnSeries("Website A", xAxis, yAxis);
                     columnSeries1.Values.Add(new float[] { 5, 7, 9, 6 });
                     IndexedColumnSeries columnSeries2 = new IndexedColumnSeries("Website B", xAxis, yAxis);
                     columnSeries2.Values.Add(new float[] { 4, 2, 5, 8 });
                     IndexedColumnSeries columnSeries3 = new IndexedColumnSeries("Website C", xAxis, yAxis);
                     columnSeries3.Values.Add(new float[] { 2, 4, 6, 9 });
            
                     // Add indexed column series to the plot area
                     plotArea.Series.Add(columnSeries1);
                     plotArea.Series.Add(columnSeries2);
                     plotArea.Series.Add(columnSeries3);
            
                     // Create a title and add it to the yaxis
                     Title lTitle = new Title("Visitors (in millions)");
                     columnSeries1.YAxis.Titles.Add(lTitle);
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:/MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>	
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisTickMarks.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisTickMarks"/> class. 
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisTickMarks.#ctor(System.Single)">
             <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisTickMarks"/> class. 
             </summary>
             <param name="interval">Interval of the yaxis tick marks.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisTickMarks.Position">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisTickMarksPosition"/> enumeration that specifies the position of the YaxisTickMarks.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisTickMarksPosition">
            <summary>
            Represents the position of the YAxisTickMarks. 
            </summary>
            <licensing>
            This enumeration is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisTickMarksPosition.Right">
            <summary>
            Shows the tick marks right of the YAxis.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisTickMarksPosition.Left">
            <summary>
            Shows the tick marks left of the YAxis.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisTickMarksPosition.Across">
            <summary>
            Shows the tick marks across the YAxis.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisTickMarksPosition.Automatic">
            <summary>
            Shows the tick marks based on the YAxis anchor type. 
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisTitleLocation">
            <summary>
            <font color="red">Obsolete.</font> Represents the location of the YAxisTitle.
            </summary>
            <remarks><font color="red">NOTE: This enumeration is obsolete.</font> Use <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisTitlePosition"/> enumeration instead.</remarks>
            <licensing>
            This enumeration is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisTitleLocation.LeftOfPlotArea">
            <summary>
            Shows the YAxis title left of the plot area. 
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisTitleLocation.RightOfPlotArea">
            <summary>
            Shows the YAxis title right of the plot area.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisTitleLocation.LeftOfYAxis">
            <summary>
            Shows the YAxis title left of the YAxis.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisTitleLocation.RightOfYAxis">
            <summary>
            Shows the YAxis title right of the YAxis.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisTitleLocation.Automatic">
            <summary>
            Shows the YAxis title automatically left or right of the YAxis depending on the Y anchor type.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisTitlePosition">
            <summary>
            Represents the position of the YAxisTitle.
            </summary>
            <licensing>
            This enumeration is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisTitlePosition.LeftOfPlotArea">
            <summary>
            Shows the YAxis title left of the plot area. 
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisTitlePosition.RightOfPlotArea">
            <summary>
            Shows the YAxis title right of the plot area.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisTitlePosition.LeftOfYAxis">
            <summary>
            Shows the YAxis title left of the YAxis.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisTitlePosition.RightOfYAxis">
            <summary>
            Shows the YAxis title right of the YAxis.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisTitlePosition.Automatic">
            <summary>
            Shows the YAxis title automatically left or right of the YAxis depending on the Y anchor type.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.AreaSeries">
            <summary>
            Base class from which date-time and indexed area series are derived.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.LegendXYSeries">
            <summary>
            This class provides the base class from which all xy series are derived.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.XYSeries">
            <summary>
            The base class from which the legends of the XYSeries and StackedSeries are derived.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.SeriesBase">
            <summary>
            The base class from which all the Series are derived.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.PlotAreaElement">
            <summary>
            Base class from which series and series elements are derived.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.PlotAreaElement.Legend">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.PlotAreaElement.Legend"/> object of the PlotAreaElement.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.PlotAreaElement.PlotArea">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.PlotAreaElement.PlotArea"/> object of the PlotAreaElement.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.SeriesBase.DrawBehindAxis">
            <summary>
            Gets or sets the position of the Series either below or above the axis. By default it is true.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.LegendXYSeries.Name">
            <summary>
            Gets the name of the series.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.LegendXYSeries.Color">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.Series.LegendXYSeries.Color"/> object to use for the color of the series.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.LegendXYSeries.LegendLabel">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.Series.LegendXYSeries.LegendLabel"/> object to use for the series.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.AreaSeries.ValueFormat">
            <summary>
            Gets or sets the value Format String of the area series.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.AreaSeries.DataLabel">
            <summary>
             Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.ValuePositionDataLabel"/> of the area series. This is the
            default data label for the series.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.AreaSeries.Marker">
            <summary>
             Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.Series.AreaSeries.Marker"/> of the area series.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.BarSeries">
            <summary>
            Base class from which date-time and indexed bar series are derived.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.BarSeries.BorderWidth">
            <summary>
            Gets or sets the border width of the bar series. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.BarSeries.BorderColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> to use for the border of the bar series.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.BarSeries.DataLabel">
            <summary>
             Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.BarColumnValuePositionDataLabel"/> to use for the data label of the bar series. This is the
            default data label for the series.
            </summary>        
            <p/><b>NOTE:</b> Prior to Version 6.0 DataLabel was of type ValuePositionDataLabel.
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.BarSeries.ValueFormat">
            <summary>
            Gets or sets the format to use for the value of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.ValuePositionDataLabel"/>.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.ColumnSeries">
            <summary>
            Base class from which DateTime and IndexedColumnSeries are derived.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.ColumnSeries.BorderWidth">
            <summary>
            Gets or sets the border width of the column series. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.ColumnSeries.BorderColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> to use for the border of the column series. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.ColumnSeries.DataLabel">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.BarColumnValuePositionDataLabel"/> to use for the data label of the column series. This is the
            default data label for the series.
            </summary>
            <p/><b>NOTE:</b> Prior to Version 6.0 DataLabel was of type ValuePositionDataLabel.
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.ColumnSeries.ValueFormat">
            <summary>
            Gets or sets the format to use for the value of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.ValuePositionDataLabel"/> object. 
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedAreaSeries">
             <summary>
             Represents a DateTime100PercentStackedAreaSeries.
             </summary>
             <example>The following example creates a date time 100 percent stacked area series chart.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a date time 100 percent stacked area series element and add values to it
                     Dim MySeriesElement1 As DateTime100PercentStackedAreaSeriesElement = New DateTime100PercentStackedAreaSeriesElement("Website A")
                     MySeriesElement1.Values.Add(5, New DateTime(2007, 1, 1))
                     MySeriesElement1.Values.Add(7, New DateTime(2007, 2, 1))
                     MySeriesElement1.Values.Add(9, New DateTime(2007, 3, 1))
                     MySeriesElement1.Values.Add(6, New DateTime(2007, 4, 1))
                     Dim MySeriesElement2 As DateTime100PercentStackedAreaSeriesElement = New DateTime100PercentStackedAreaSeriesElement("Website B")
                     MySeriesElement2.Values.Add(4, New DateTime(2007, 1, 1))
                     MySeriesElement2.Values.Add(2, New DateTime(2007, 2, 1))
                     MySeriesElement2.Values.Add(5, New DateTime(2007, 3, 1))
                     MySeriesElement2.Values.Add(8, New DateTime(2007, 4, 1))
                     Dim MySeriesElement3 As DateTime100PercentStackedAreaSeriesElement = New DateTime100PercentStackedAreaSeriesElement("Website C")
                     MySeriesElement3.Values.Add(2, New DateTime(2007, 1, 1))
                     MySeriesElement3.Values.Add(4, New DateTime(2007, 2, 1))
                     MySeriesElement3.Values.Add(6, New DateTime(2007, 3, 1))
                     MySeriesElement3.Values.Add(9, New DateTime(2007, 4, 1))
            
                     ' Create a date time 100 percent  stacked area series and add date time 100 percent stacked area series elements to it
                     Dim MyStackedAreaSeries1 As DateTime100PercentStackedAreaSeries = New DateTime100PercentStackedAreaSeries()
                     MyStackedAreaSeries1.Add(MySeriesElement1)
                     MyStackedAreaSeries1.Add(MySeriesElement2)
                     MyStackedAreaSeries1.Add(MySeriesElement3)
            
                     ' Add date time 100 percent stacked area series to the plot area
                     MyPlotArea.Series.Add(MyStackedAreaSeries1)
            
                     ' set label  format for the axislabels
                     MyStackedAreaSeries1.XAxis.LabelFormat = "MMM"
             
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             
             class MyClass
             {
                 static void Main()
                 {     
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     //Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a date time 100 percent stacked area series element and add values to it
                     DateTime100PercentStackedAreaSeriesElement seriesElement1 = new DateTime100PercentStackedAreaSeriesElement("Website A");
                     seriesElement1.Values.Add(5, new DateTime(2007, 1, 1));
                     seriesElement1.Values.Add(7, new DateTime(2007, 2, 1));
                     seriesElement1.Values.Add(9, new DateTime(2007, 3, 1));
                     seriesElement1.Values.Add(6, new DateTime(2007, 4, 1));
                     DateTime100PercentStackedAreaSeriesElement seriesElement2 = new DateTime100PercentStackedAreaSeriesElement("Website B");
                     seriesElement2.Values.Add(4, new DateTime(2007, 1, 1));
                     seriesElement2.Values.Add(2, new DateTime(2007, 2, 1));
                     seriesElement2.Values.Add(5, new DateTime(2007, 3, 1));
                     seriesElement2.Values.Add(8, new DateTime(2007, 4, 1));
                     DateTime100PercentStackedAreaSeriesElement seriesElement3 = new DateTime100PercentStackedAreaSeriesElement("Website C");
                     seriesElement3.Values.Add(2, new DateTime(2007, 1, 1));
                     seriesElement3.Values.Add(4, new DateTime(2007, 2, 1));
                     seriesElement3.Values.Add(6, new DateTime(2007, 3, 1));
                     seriesElement3.Values.Add(9, new DateTime(2007, 4, 1));
            
                     // Create a date time 100 percent stacked area series and add date time 100 percent stacked area series elements to it
                     DateTime100PercentStackedAreaSeries stackedAreaSeries1 = new DateTime100PercentStackedAreaSeries();
                     stackedAreaSeries1.Add(seriesElement1);
                     stackedAreaSeries1.Add(seriesElement2);
                     stackedAreaSeries1.Add(seriesElement3);
            
                     // Add date time 100 percent stacked area series to the plot area
                     plotArea.Series.Add(stackedAreaSeries1);
            
                     // set label  format for the axislabels
                     stackedAreaSeries1.XAxis.LabelFormat = "MMM";
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf"); 
                 }
              }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.Stacked100PercentAreaSeries">
            <summary>
             Represents a Stacked100PercentAreaSeries.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.Stacked100PercentSeries">
            <summary>
            Represents a Stacked100PercentSeries.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.StackedSeries">
            <summary>
            The base class from which the StackedSeries are derived. 
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.StackedSeries.Count">
            <summary>
            Gets the number of StackedSeriesElements actually contained in the StackedSeries.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedAreaSeries.#ctor">
             <summary>
            Initializes a new instance of <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedAreaSeries"/> object.
             </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedAreaSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis)">
            <summary>
            Initializes a new instance of <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedAreaSeries"/> object.
            </summary>
            <param name="xAxis"> <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis"/> of the  dateTime 100Percent stacked area series.</param>
            <param name="yAxis"> <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis"/> of the dateTime 100Percent stacked area series.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedAreaSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedAreaSeries"/> object.
            </summary>
            <param name="xAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis"/> of the  eateTime 100Percent stacked area series.</param>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis"/> of the dateTime 100Percent stacked area series. </param>
            <param name="legend">Legend of the dateTime 100Percent stacked area series.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedAreaSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis)">
            <summary>
            Initializes a new instance of <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedAreaSeries"/> object.
            </summary>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis"/> of the dateTime 100Percent stacked area series.  </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedAreaSeries.Add(ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedAreaSeriesElement)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedAreaSeriesElement"/> object to the
            <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedAreaSeries"/> elements list.
            </summary>
            <param name="element">DateTime100PercentStackedAreaSeriesElement.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedAreaSeries.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedAreaSeriesElement"/> object at the given index.
            </summary>
            <param name="index">index position of the required Date Time 100Percent stacked area Series element </param>
            <returns>DateTime100PercentStackedAreaSeriesElement </returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedAreaSeries.XAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis"/> of the series.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedAreaSeries.YAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis"/> of the series.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedAreaSeriesElement">
             <summary>
             Represents a DateTime100PercentStackedAreaSeriesElement.
             </summary>
             <example>The following example creates a date time 100 percent stacked area series elements and creates a date 
             time 100 percent stacked area series chart to it.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a date time 100 percent stacked area series element and add values to it
                     Dim MySeriesElement1 As DateTime100PercentStackedAreaSeriesElement = New DateTime100PercentStackedAreaSeriesElement("Website A")
                     MySeriesElement1.Values.Add(5, New DateTime(2007, 1, 1))
                     MySeriesElement1.Values.Add(7, New DateTime(2007, 2, 1))
                     MySeriesElement1.Values.Add(9, New DateTime(2007, 3, 1))
                     MySeriesElement1.Values.Add(6, New DateTime(2007, 4, 1))
                     Dim MySeriesElement2 As DateTime100PercentStackedAreaSeriesElement = New DateTime100PercentStackedAreaSeriesElement("Website B")
                     MySeriesElement2.Values.Add(4, New DateTime(2007, 1, 1))
                     MySeriesElement2.Values.Add(2, New DateTime(2007, 2, 1))
                     MySeriesElement2.Values.Add(5, New DateTime(2007, 3, 1))
                     MySeriesElement2.Values.Add(8, New DateTime(2007, 4, 1))
                     Dim MySeriesElement3 As DateTime100PercentStackedAreaSeriesElement = New DateTime100PercentStackedAreaSeriesElement("Website C")
                     MySeriesElement3.Values.Add(2, New DateTime(2007, 1, 1))
                     MySeriesElement3.Values.Add(4, New DateTime(2007, 2, 1))
                     MySeriesElement3.Values.Add(6, New DateTime(2007, 3, 1))
                     MySeriesElement3.Values.Add(9, New DateTime(2007, 4, 1))
            
                     ' Create a date time 100 pecent stacked area series and add date time 100 percent stacked area series elements to it
                     Dim MyStackedAreaSeries1 As DateTime100PercentStackedAreaSeries = New DateTime100PercentStackedAreaSeries()
                     MyStackedAreaSeries1.Add(MySeriesElement1)
                     MyStackedAreaSeries1.Add(MySeriesElement2)
                     MyStackedAreaSeries1.Add(MySeriesElement3)
            
                     ' Add date time 100 percent stacked area series to the plot area
                     MyPlotArea.Series.Add(MyStackedAreaSeries1)
            
                     ' set label  format for the axislabels
                     MyStackedAreaSeries1.XAxis.LabelFormat = "MMM"
             
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             
             class MyClass
             {
                 static void Main()
                 {     
                     // Create a PDF Document
                      Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     //Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a date time 100 percent stacked area series element and add values to it
                     DateTime100PercentStackedAreaSeriesElement seriesElement1 = new DateTime100PercentStackedAreaSeriesElement("Website A");
                     seriesElement1.Values.Add(5, new DateTime(2007, 1, 1));
                     seriesElement1.Values.Add(7, new DateTime(2007, 2, 1));
                     seriesElement1.Values.Add(9, new DateTime(2007, 3, 1));
                     seriesElement1.Values.Add(6, new DateTime(2007, 4, 1));
                     DateTime100PercentStackedAreaSeriesElement seriesElement2 = new DateTime100PercentStackedAreaSeriesElement("Website B");
                     seriesElement2.Values.Add(4, new DateTime(2007, 1, 1));
                     seriesElement2.Values.Add(2, new DateTime(2007, 2, 1));
                     seriesElement2.Values.Add(5, new DateTime(2007, 3, 1));
                     seriesElement2.Values.Add(8, new DateTime(2007, 4, 1));
                     DateTime100PercentStackedAreaSeriesElement seriesElement3 = new DateTime100PercentStackedAreaSeriesElement("Website C");
                     seriesElement3.Values.Add(2, new DateTime(2007, 1, 1));
                     seriesElement3.Values.Add(4, new DateTime(2007, 2, 1));
                     seriesElement3.Values.Add(6, new DateTime(2007, 3, 1));
                     seriesElement3.Values.Add(9, new DateTime(2007, 4, 1));
            
                     // Create a date time 100 percent stacked area series and add date time 100 percent stacked area series elements to it
                     DateTime100PercentStackedAreaSeries stackedAreaSeries1 = new DateTime100PercentStackedAreaSeries();
                     stackedAreaSeries1.Add(seriesElement1);
                     stackedAreaSeries1.Add(seriesElement2);
                     stackedAreaSeries1.Add(seriesElement3);
            
                     // Add date time 100 percent stacked area series to the plot area
                     plotArea.Series.Add(stackedAreaSeries1);
            
                     // set label  format for the axislabels
                     stackedAreaSeries1.XAxis.LabelFormat = "MMM";
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:/MyDocument.pdf"); 
                 }
              }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.Stacked100PercentAreaSeriesElement">
            <summary>
            Represents a Stacked100PercentAreaSeriesElement.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.Stacked100PercentSeriesElement">
            <summary>
            Represents a Stacked100PercentSeriesElement.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.StackedSeriesElementBase">
            <summary>
             Base class from which stacked series elements are derived.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.SeriesElement">
            <summary>
            The base class from which the SeriesElements are derived.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.SeriesElement.Color">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.Series.SeriesElement.Color"/> object to use for the color of the SeriesElement.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.SeriesElement.Name">
            <summary>
            Gets the name of the SeriesElement.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.SeriesElement.LegendLabel">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.Series.SeriesElement.LegendLabel"/> of the SeriesElement.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.StackedSeriesElementBase.ValueFormat">
            <summary>
             Gets or sets the format to use for the value of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.PercentageDataLabel"/> object.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.Stacked100PercentSeriesElement.PercentageFormat">
            <summary>
            Gets or sets the format to use for the percentage of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.PercentageDataLabel"/> object.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.Stacked100PercentAreaSeriesElement.Marker">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.Series.Stacked100PercentAreaSeriesElement.Marker"/> of the Stacked100PercentAreaSeriesElement.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.Stacked100PercentAreaSeriesElement.DataLabel">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.PercentageDataLabel"/> object to use for the DataLabel of the stacked 100Percent series element. This is the
            default data label for the series element.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedAreaSeriesElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the  <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedAreaSeriesElement"/> object.
            </summary>
            <param name="name">Name of the dateTime 100Percent stacked area series element.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedAreaSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the  <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedAreaSeriesElement"/> object.
            
            </summary>
            <param name="name">Name of the dateTime 100Percent stacked area series element.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the dateTime 100Percent stacked area series element.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedAreaSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedAreaSeriesElement"/> object.
            </summary>
            <param name="name"> Name of the dateTime 100Percent stacked area series element.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/>of the dateTime 100Percent stacked area series element.</param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/>of the dateTime 100Percent stacked area series element.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedAreaSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Marker)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedAreaSeriesElement"/> object.
            </summary>
            <param name="name"> Name of the dateTime 100Percent stacked area series element.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the dateTime 100Percent stacked area series element.</param>
            <param name="marker"> <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Marker"/>of the dateTime 100Percent stacked area series element.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedAreaSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Marker,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedAreaSeriesElement"/> object.
            </summary>
            <param name="name">Name of the dateTime 100Percent stacked areaSeries element. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/>of the dateTime 100Percent stacked area series element. </param>
            <param name="marker"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Marker"/> of the dateTime 100Percent stacked area series element.</param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/>of the dateTime 100Percent stacked area series element. </param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedAreaSeriesElement.Values">
            <summary>
            Gets the DateTime100PercentStackedAreaValueList from the DateTime100PercentStackedAreaSeriesElement.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedBarSeries">
             <summary>
             Represents a DateTime100PercentStackedBarSeries.
             </summary>
             <example>The following example creates a date time 100 percent stacked bar series chart.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a date time 100 percent stacked bar series element and add values to it
                     Dim MySeriesElement1 As DateTime100PercentStackedBarSeriesElement = New DateTime100PercentStackedBarSeriesElement("Website A")
                     MySeriesElement1.Values.Add(5, New DateTime(2007, 1, 1))
                     MySeriesElement1.Values.Add(7, New DateTime(2007, 2, 1))
                     MySeriesElement1.Values.Add(9, New DateTime(2007, 3, 1))
                     MySeriesElement1.Values.Add(6, New DateTime(2007, 4, 1))
                     Dim MySeriesElement2 As DateTime100PercentStackedBarSeriesElement = New DateTime100PercentStackedBarSeriesElement("Website B")
                     MySeriesElement2.Values.Add(4, New DateTime(2007, 1, 1))
                     MySeriesElement2.Values.Add(2, New DateTime(2007, 2, 1))
                     MySeriesElement2.Values.Add(5, New DateTime(2007, 3, 1))
                     MySeriesElement2.Values.Add(8, New DateTime(2007, 4, 1))
                     Dim MySeriesElement3 As DateTime100PercentStackedBarSeriesElement = New DateTime100PercentStackedBarSeriesElement("Website C")
                     MySeriesElement3.Values.Add(2, New DateTime(2007, 1, 1))
                     MySeriesElement3.Values.Add(4, New DateTime(2007, 2, 1))
                     MySeriesElement3.Values.Add(6, New DateTime(2007, 3, 1))
                     MySeriesElement3.Values.Add(9, New DateTime(2007, 4, 1))
            
                     ' Create a date time 100 percent stacked bar series and add date time 100 percent stacked bar series elements to it
                     Dim MyStackedBarSeries1 As DateTime100PercentStackedBarSeries = New DateTime100PercentStackedBarSeries()
                     MyStackedBarSeries1.Add(MySeriesElement1)
                     MyStackedBarSeries1.Add(MySeriesElement2)
                     MyStackedBarSeries1.Add(MySeriesElement3)
            
                     ' Add date time 100 percent stacked bar series to the plot area
                     MyPlotArea.Series.Add(MyStackedBarSeries1)
            
                     ' Create a title and add it to the Xaxis
                     Dim MyTitle3 As Title = New Title("Viewers")
                     MyStackedBarSeries1.XAxis.Titles.Add(MyTitle3)
            
                     ' Set label  format to the axislabels
                     MyStackedBarSeries1.YAxis.LabelFormat = "MMM"
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a date time 100 percent stacked bar series element and add values to it
                     DateTime100PercentStackedBarSeriesElement seriesElement1 = new DateTime100PercentStackedBarSeriesElement("Website A");
                     seriesElement1.Values.Add(5, new DateTime(2007, 1, 1));
                     seriesElement1.Values.Add(7, new DateTime(2007, 2, 1));
                     seriesElement1.Values.Add(9, new DateTime(2007, 3, 1));
                     seriesElement1.Values.Add(6, new DateTime(2007, 4, 1));
                     DateTime100PercentStackedBarSeriesElement seriesElement2 = new DateTime100PercentStackedBarSeriesElement("Website B");
                     seriesElement2.Values.Add(4, new DateTime(2007, 1, 1));
                     seriesElement2.Values.Add(2, new DateTime(2007, 2, 1));
                     seriesElement2.Values.Add(5, new DateTime(2007, 3, 1));
                     seriesElement2.Values.Add(8, new DateTime(2007, 4, 1));
                     DateTime100PercentStackedBarSeriesElement seriesElement3 = new DateTime100PercentStackedBarSeriesElement("Website C");
                     seriesElement3.Values.Add(2, new DateTime(2007, 1, 1));
                     seriesElement3.Values.Add(4, new DateTime(2007, 2, 1));
                     seriesElement3.Values.Add(6, new DateTime(2007, 3, 1));
                     seriesElement3.Values.Add(9, new DateTime(2007, 4, 1));
            
                     // Create a date time 100 percent stacked bar series and add date time 100 percent stacked bar series elements to it
                     DateTime100PercentStackedBarSeries stackedBarSeries1 = new DateTime100PercentStackedBarSeries();
                     stackedBarSeries1.Add(seriesElement1);
                     stackedBarSeries1.Add(seriesElement2);
                     stackedBarSeries1.Add(seriesElement3);
            
                     // Add date time stacked bar series to the plot area
                     plotArea.Series.Add(stackedBarSeries1);
            
                     // Create a title and add it to the Xaxis
                     Title title3 = new Title("Viewers");
                     stackedBarSeries1.XAxis.Titles.Add(title3);
            
                     // Set label  format to the axislabels
                     stackedBarSeries1.YAxis.LabelFormat = "MMM";
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.Stacked100PercentBarSeries">
            <summary>
            Represents a Stacked100PercentBarSeries.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedBarSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedBarSeries"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedBarSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedBarSeries"/> class.
            </summary>
            <param name="percentageXAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageXAxis"/>of the dateTime 100Percent stacked barSeries.</param>
            <param name="dateTimeYAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxis"/>of the dateTime 100Percent stacked barSeries.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedBarSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxis,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedBarSeries"/> class.
            </summary>
            <param name="percentageXAxis"> <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageXAxis"/>of the dateTime 100Percent stacked barSeries. </param>
            <param name="dateTimeYAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxis"/> of the dateTime 100Percent stacked barSeries. </param>
            <param name="legend"> <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/>of the dateTime 100Percent stacked barSeries. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedBarSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageXAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedBarSeries"/> class.
            </summary>
            <param name="percentageXAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageXAxis"/> of the date time 100Percent stacked bar series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedBarSeries.Add(ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedBarSeriesElement)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedBarSeriesElement"/> object to the end of the
               <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedBarSeries"/> elements list.
            </summary>
            <param name="dateTimeStackedBarSeriesElement"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedBarSeriesElement"/> object</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedBarSeries.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedBarSeriesElement"/> object at the given index.
            </summary>
            <param name="index"> position of the required Date Time 100Percent Stacked Bar Series Element. </param>
            <returns>DateTime100PercentStackedBarSeriesElement. </returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedBarSeries.YAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxis"/> of the series.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedBarSeries.XAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageXAxis"/> of the series.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedBarSeriesElement">
             <summary>
             Represents a DateTime100PercentStackedBarSeriesElement.
             </summary>
                /// <example>The following example creates a date time 100 percent stacked bar series elements and creates a 
             date time 100 percent stacked bar series chart to it.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a date time 100 percent stacked bar series element and add values to it
                     Dim MySeriesElement1 As DateTime100PercentStackedBarSeriesElement = New DateTime100PercentStackedBarSeriesElement("Website A")
                     MySeriesElement1.Values.Add(5, New DateTime(2007, 1, 1))
                     MySeriesElement1.Values.Add(7, New DateTime(2007, 2, 1))
                     MySeriesElement1.Values.Add(9, New DateTime(2007, 3, 1))
                     MySeriesElement1.Values.Add(6, New DateTime(2007, 4, 1))
                     Dim MySeriesElement2 As DateTime100PercentStackedBarSeriesElement = New DateTime100PercentStackedBarSeriesElement("Website B")
                     MySeriesElement2.Values.Add(4, New DateTime(2007, 1, 1))
                     MySeriesElement2.Values.Add(2, New DateTime(2007, 2, 1))
                     MySeriesElement2.Values.Add(5, New DateTime(2007, 3, 1))
                     MySeriesElement2.Values.Add(8, New DateTime(2007, 4, 1))
                     Dim MySeriesElement3 As DateTime100PercentStackedBarSeriesElement = New DateTime100PercentStackedBarSeriesElement("Website C")
                     MySeriesElement3.Values.Add(2, New DateTime(2007, 1, 1))
                     MySeriesElement3.Values.Add(4, New DateTime(2007, 2, 1))
                     MySeriesElement3.Values.Add(6, New DateTime(2007, 3, 1))
                     MySeriesElement3.Values.Add(9, New DateTime(2007, 4, 1))
            
                     ' Create a date time 100 percent stacked bar series and add date time 100 percent stacked bar series elements to it
                     Dim MyStackedBarSeries1 As DateTime100PercentStackedBarSeries = New DateTime100PercentStackedBarSeries()
                     MyStackedBarSeries1.Add(MySeriesElement1)
                     MyStackedBarSeries1.Add(MySeriesElement2)
                     MyStackedBarSeries1.Add(MySeriesElement3)
            
                     ' Add date time 100 percent stacked bar series to the plot area
                     MyPlotArea.Series.Add(MyStackedBarSeries1)
            
                     ' Create a title and add it to the Xaxis
                     Dim MyTitle3 As Title = New Title("Viewers")
                     MyStackedBarSeries1.XAxis.Titles.Add(MyTitle3)
            
                     ' Set label  format to the axislabels
                     MyStackedBarSeries1.YAxis.LabelFormat = "MMM"
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a date time 100 percent stacked bar series element and add values to it
                     DateTime100PercentStackedBarSeriesElement seriesElement1 = new DateTime100PercentStackedBarSeriesElement("Website A");
                     seriesElement1.Values.Add(5, new DateTime(2007, 1, 1));
                     seriesElement1.Values.Add(7, new DateTime(2007, 2, 1));
                     seriesElement1.Values.Add(9, new DateTime(2007, 3, 1));
                     seriesElement1.Values.Add(6, new DateTime(2007, 4, 1));
                     DateTime100PercentStackedBarSeriesElement seriesElement2 = new DateTime100PercentStackedBarSeriesElement("Website B");
                     seriesElement2.Values.Add(4, new DateTime(2007, 1, 1));
                     seriesElement2.Values.Add(2, new DateTime(2007, 2, 1));
                     seriesElement2.Values.Add(5, new DateTime(2007, 3, 1));
                     seriesElement2.Values.Add(8, new DateTime(2007, 4, 1));
                     DateTime100PercentStackedBarSeriesElement seriesElement3 = new DateTime100PercentStackedBarSeriesElement("Website C");
                     seriesElement3.Values.Add(2, new DateTime(2007, 1, 1));
                     seriesElement3.Values.Add(4, new DateTime(2007, 2, 1));
                     seriesElement3.Values.Add(6, new DateTime(2007, 3, 1));
                     seriesElement3.Values.Add(9, new DateTime(2007, 4, 1));
            
                     // Create a date time 100 percent stacked bar series and add date time 100 percent stacked bar series elements to it
                     DateTime100PercentStackedBarSeries stackedBarSeries1 = new DateTime100PercentStackedBarSeries();
                     stackedBarSeries1.Add(seriesElement1);
                     stackedBarSeries1.Add(seriesElement2);
                     stackedBarSeries1.Add(seriesElement3);
            
                     // Add date time 100 percent stacked bar series to the plot area
                     plotArea.Series.Add(stackedBarSeries1);
            
                     // Create a title and add it to the Xaxis
                     Title title3 = new Title("Viewers");
                     stackedBarSeries1.XAxis.Titles.Add(title3);
            
                     // Set label  format to the axislabels
                     stackedBarSeries1.YAxis.LabelFormat = "MMM";
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.Stacked100PercentBarSeriesElement">
            <summary>
            Represents a Stacked100PercentBarSeriesElement.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.Stacked100PercentBarSeriesElement.BorderWidth">
            <summary>
            Gets or sets the BorderWidth of the Stacked100PercentBarSeriesElement.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.Stacked100PercentBarSeriesElement.BorderColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the borders of the Stacked100PercentBarSeriesElement.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.Stacked100PercentBarSeriesElement.DataLabel">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.BarColumnPercentageDataLabel"/> object to use for the DataLabel of the stacked 100Percent series element. This is the
            default data label for the series element.
            </summary>
            <p/><b>NOTE:</b> Prior to Version 6.0 DataLabel was of type PercentageDataLabel.
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedBarSeriesElement.#ctor(System.String)">
            <summary>
             Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedBarSeriesElement"/> class.
            </summary>
            <param name="name">Name of the date time100Percent stacked bar series element.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedBarSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedBarSeriesElement"/> class.
            </summary>
            <param name="name"> Name of the dateTime 100Percent stacked barSeries element.</param>
            <param name="color"> <see cref="T:ceTe.DynamicPDF.Color"/> of the dateTime 100Percent stacked barSeries element. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedBarSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedBarSeriesElement"/> class.
            </summary>
            <param name="name"> Name of the dateTime 100Percent stacked barSeries element.</param>
            <param name="color"> <see cref="T:ceTe.DynamicPDF.Color"/> of the dateTime 100Percent stacked barSeries element.</param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the dateTime 100Percent stacked barSeries element. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedBarSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedBarSeriesElement"/> class.
            </summary>
            <param name="name"> Name of the date time 100Percent stacked barSeries element.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the dateTime 100Percent stacked barSeries element. </param>
            <param name="borderWidth">Border width of the dateTime 100Percent stacked barSeries element. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedBarSeriesElement.#ctor(System.String,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedBarSeriesElement"/> class. 
            </summary>
            <param name="name">Name of the dateTime 100Percent stacked barSeries element </param>
            <param name="borderWidth">Border width of the dateTime 100Percent stacked barSeries element </param>
            <param name="borderColor">Border <see cref="T:ceTe.DynamicPDF.Color"/> of the dateTime 100Percent Stacked barSeries element. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedBarSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedBarSeriesElement"/> class.
            </summary>
            <param name="name">Name of the dateTime 100Percent stacked barSeries element. </param>
            <param name="color"> <see cref="T:ceTe.DynamicPDF.Color"/> of the dateTime 100Percent stacked barSeries element.</param>
            <param name="borderWidth">Border width of the dateTime 100Percent stacked barSeries element. </param>
            <param name="borderColor">Border <see cref="T:ceTe.DynamicPDF.Color"/> of the dateTime 100Percent stacked barSeries element. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedBarSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedBarSeriesElement"/> class.
            </summary>
            <param name="name">Name of the dateTime 100Percent stacked barSeries element.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the dateTime 100Percent stacked barSeries element. </param>
            <param name="borderWidth"> Border width of the dateTime 100Percent stacked barSeries element. </param>
            <param name="borderColor">Border <see cref="T:ceTe.DynamicPDF.Color"/> of the dateTime 100Percent stacked barSeries element. </param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the dateTime 100Percent stacked barSeries element. </param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedBarSeriesElement.Values">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedBarValueList"/> contained in the
             date-time stacked 100Percent bar series element.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedColumnSeries">
             <summary>
             Represents a DateTime100PercentStackedColumnSeries.
             </summary>
             <example>The following example creates a date time 100 percent stacked column series chart.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     'Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a date time 100 percent stacked column series elements and add values to it          
                     Dim MySeriesElement1 As DateTime100PercentStackedColumnSeriesElement = New DateTime100PercentStackedColumnSeriesElement("Website A")
                     MySeriesElement1.Values.Add(5, New DateTime(2007, 1, 1))
                     MySeriesElement1.Values.Add(7, New DateTime(2007, 2, 1))
                     MySeriesElement1.Values.Add(4, New DateTime(2007, 3, 1))
                     MySeriesElement1.Values.Add(3, New DateTime(2007, 4, 1))
                     Dim MySeriesElement2 As DateTime100PercentStackedColumnSeriesElement = New DateTime100PercentStackedColumnSeriesElement("Website B")
                     MySeriesElement2.Values.Add(4, New DateTime(2007, 1, 1))
                     MySeriesElement2.Values.Add(2, New DateTime(2007, 2, 1))
                     MySeriesElement2.Values.Add(5, New DateTime(2007, 3, 1))
                     MySeriesElement2.Values.Add(8, New DateTime(2007, 4, 1))
                     Dim MySeriesElement3 As DateTime100PercentStackedColumnSeriesElement = New DateTime100PercentStackedColumnSeriesElement("Website C")
                     MySeriesElement3.Values.Add(2, New DateTime(2007, 1, 1))
                     MySeriesElement3.Values.Add(4, New DateTime(2007, 2, 1))
                     MySeriesElement3.Values.Add(6, New DateTime(2007, 3, 1))
                     MySeriesElement3.Values.Add(9, New DateTime(2007, 4, 1))
             
                     ' Create a date time 100 percent stacked column series and add date time 100 percent stacked column series elements to it
                     Dim MyStackedColumnSeries1 As DateTime100PercentStackedColumnSeries = New DateTime100PercentStackedColumnSeries()
                     MyStackedColumnSeries1.Add(MySeriesElement1)
                     MyStackedColumnSeries1.Add(MySeriesElement2)
                     MyStackedColumnSeries1.Add(MySeriesElement3)
            
                     ' Add date time 100 percent stacked column series to plot area 
                     MyPlotArea.Series.Add(MyStackedColumnSeries1)
            
                     ' set label  format for the axislabels
                     MyStackedColumnSeries1.XAxis.LabelFormat = "MMM"
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
            
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     //Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a date time 100 percent stacked column series elements and add values to it          
                     DateTime100PercentStackedColumnSeriesElement seriesElement1 = new DateTime100PercentStackedColumnSeriesElement("Website A");
                     seriesElement1.Values.Add(5, new DateTime(2007, 1, 1));
                     seriesElement1.Values.Add(7, new DateTime(2007, 2, 1));
                     seriesElement1.Values.Add(4, new DateTime(2007, 3, 1));
                     seriesElement1.Values.Add(3, new DateTime(2007, 4, 1));
                     DateTime100PercentStackedColumnSeriesElement seriesElement2 = new DateTime100PercentStackedColumnSeriesElement("Website B");
                     seriesElement2.Values.Add(4, new DateTime(2007, 1, 1));
                     seriesElement2.Values.Add(2, new DateTime(2007, 2, 1));
                     seriesElement2.Values.Add(5, new DateTime(2007, 3, 1));
                     seriesElement2.Values.Add(8, new DateTime(2007, 4, 1));
                     DateTime100PercentStackedColumnSeriesElement seriesElement3 = new DateTime100PercentStackedColumnSeriesElement("Website C");
                     seriesElement3.Values.Add(2, new DateTime(2007, 1, 1));
                     seriesElement3.Values.Add(4, new DateTime(2007, 2, 1));
                     seriesElement3.Values.Add(6, new DateTime(2007, 3, 1));
                     seriesElement3.Values.Add(9, new DateTime(2007, 4, 1));
            
                     // Create a date time 100 percent stacked column series and add date time 100 percent stacked column series elements to it
                     DateTime100PercentStackedColumnSeries stackedColumnSeries1 = new DateTime100PercentStackedColumnSeries();
                     stackedColumnSeries1.Add(seriesElement1);
                     stackedColumnSeries1.Add(seriesElement2);
                     stackedColumnSeries1.Add(seriesElement3);
            
                     // Add date time 100 percent stacked column series to plot area 
                     plotArea.Series.Add(stackedColumnSeries1);
            
                     // set label  format for the axislabels
                     stackedColumnSeries1.XAxis.LabelFormat = "MMM";
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf"); 
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.Stacked100PercentColumnSeries">
            <summary>
            Represents the Stacked100PercentColumnSeries.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedColumnSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedColumnSeries"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedColumnSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedColumnSeries"/> class.
            </summary>
            <param name="dateTimeXAxis"> <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis"/> of the date time 100Percent stacked column series.</param>
            <param name="percentageYAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis"/> of the date time 100Percent stacked column series.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedColumnSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedColumnSeries"/> class.
            </summary>
            <param name="dateTimeXAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis"/> of the date time 100Percent stacked column series.</param>
            <param name="percentageYAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis"/> of the date time 100Percent stacked column series.</param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the date time 100Percent stacked column series.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedColumnSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedColumnSeries"/> class.
            </summary>
            <param name="percentageYAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis"/> of the date time 100Percent stacked column series.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedColumnSeries.Add(ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedColumnSeriesElement)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedColumnSeriesElement"/> object to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedColumnSeries"/> element list.
            </summary>
            <param name="dateTimeStackedColumnSeriesElement"> <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedColumnSeriesElement"/> to be added. </param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedColumnSeries.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedColumnSeriesElement"/> at the given index.
            </summary>
            <param name="index">Index position of the required Date Time 100Percent Stacked Column Series Element.</param>
            <returns></returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedColumnSeries.XAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis"/> of the series.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedColumnSeries.YAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis"/> of the series.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedColumnSeriesElement">
             <summary>
             Represents a DateTime100PercentStackedColumnSeriesElement.
             </summary>
             <example>The following example creates a date time 100 percent stacked column series elements and creates a 
             date time 100 percent stacked column series chart to it.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a date time 100 percent stacked column series elements and add values to it          
                     Dim MySeriesElement1 As DateTime100PercentStackedColumnSeriesElement = New DateTime100PercentStackedColumnSeriesElement("Website A")
                     MySeriesElement1.Values.Add(5, New DateTime(2007, 1, 1))
                     MySeriesElement1.Values.Add(7, New DateTime(2007, 2, 1))
                     MySeriesElement1.Values.Add(4, New DateTime(2007, 3, 1))
                     MySeriesElement1.Values.Add(3, New DateTime(2007, 4, 1))
                     Dim MySeriesElement2 As DateTime100PercentStackedColumnSeriesElement = New DateTime100PercentStackedColumnSeriesElement("Website B")
                     MySeriesElement2.Values.Add(4, New DateTime(2007, 1, 1))
                     MySeriesElement2.Values.Add(2, New DateTime(2007, 2, 1))
                     MySeriesElement2.Values.Add(5, New DateTime(2007, 3, 1))
                     MySeriesElement2.Values.Add(8, New DateTime(2007, 4, 1))
                     Dim MySeriesElement3 As DateTime100PercentStackedColumnSeriesElement = New DateTime100PercentStackedColumnSeriesElement("Website C")
                     MySeriesElement3.Values.Add(2, New DateTime(2007, 1, 1))
                     MySeriesElement3.Values.Add(4, New DateTime(2007, 2, 1))
                     MySeriesElement3.Values.Add(6, New DateTime(2007, 3, 1))
                     MySeriesElement3.Values.Add(9, New DateTime(2007, 4, 1))
             
                     ' Create a date time 100 percent stacked column series and add date time 100 percent stacked column series elements to it
                     Dim MyStackedColumnSeries1 As DateTime100PercentStackedColumnSeries = New DateTime100PercentStackedColumnSeries()
                     MyStackedColumnSeries1.Add(MySeriesElement1)
                     MyStackedColumnSeries1.Add(MySeriesElement2)
                     MyStackedColumnSeries1.Add(MySeriesElement3)
            
                     ' Add date time 100 percent stacked column series to plot area 
                     MyPlotArea.Series.Add(MyStackedColumnSeries1)
            
                     ' set label  format for the axislabels
                     MyStackedColumnSeries1.XAxis.LabelFormat = "MMM"
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
            
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     //Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a date time 100 percent stacked column series elements and add values to it          
                     DateTime100PercentStackedColumnSeriesElement seriesElement1 = new DateTime100PercentStackedColumnSeriesElement("Website A");
                     seriesElement1.Values.Add(5, new DateTime(2007, 1, 1));
                     seriesElement1.Values.Add(7, new DateTime(2007, 2, 1));
                     seriesElement1.Values.Add(4, new DateTime(2007, 3, 1));
                     seriesElement1.Values.Add(3, new DateTime(2007, 4, 1));
                     DateTime100PercentStackedColumnSeriesElement seriesElement2 = new DateTime100PercentStackedColumnSeriesElement("Website B");
                     seriesElement2.Values.Add(4, new DateTime(2007, 1, 1));
                     seriesElement2.Values.Add(2, new DateTime(2007, 2, 1));
                     seriesElement2.Values.Add(5, new DateTime(2007, 3, 1));
                     seriesElement2.Values.Add(8, new DateTime(2007, 4, 1));
                     DateTime100PercentStackedColumnSeriesElement seriesElement3 = new DateTime100PercentStackedColumnSeriesElement("Website C");
                     seriesElement3.Values.Add(2, new DateTime(2007, 1, 1));
                     seriesElement3.Values.Add(4, new DateTime(2007, 2, 1));
                     seriesElement3.Values.Add(6, new DateTime(2007, 3, 1));
                     seriesElement3.Values.Add(9, new DateTime(2007, 4, 1));
            
                     // Create a date time 100 percent stacked column series and add date time 100 percent stacked column series elements to it
                     DateTime100PercentStackedColumnSeries stackedColumnSeries1 = new DateTime100PercentStackedColumnSeries();
                     stackedColumnSeries1.Add(seriesElement1);
                     stackedColumnSeries1.Add(seriesElement2);
                     stackedColumnSeries1.Add(seriesElement3);
            
                     // Add date time 100 percent stacked column series to plot area 
                     plotArea.Series.Add(stackedColumnSeries1);
            
                     // set label list format for the axislabels
                     stackedColumnSeries1.XAxis.LabelFormat = "MMM";
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf"); 
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.Stacked100PercentColumnSeriesElement">
            <summary>
            Represents the Stacked100PercentColumnSeriesElement.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.Stacked100PercentColumnSeriesElement.BorderWidth">
            <summary>
            Gets or sets the BorderWidth of the Stacked100PercentColumnSeriesElement. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.Stacked100PercentColumnSeriesElement.DataLabel">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.BarColumnPercentageDataLabel"/> object to use for the DataLabel of the stacked 100Percent series element. This is the
            default data label for the series element.
            </summary>
            <p/><b>NOTE:</b> Prior to Version 6.0 DataLabel was of type PercentageDataLabel.
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.Stacked100PercentColumnSeriesElement.BorderColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> to use for the borders of the Stacked100PercentColumnSeriesElement.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedColumnSeriesElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedColumnSeriesElement"/> class.
            </summary>
            <param name="name">Name of the dateTime 100Percent stacked columnSeries element. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedColumnSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedColumnSeriesElement"/> class.
            </summary>
            <param name="name">Name of the dateTime 100Percent stacked columnSeries element. </param>
            <param name="color"> <see cref="T:ceTe.DynamicPDF.Color"/> of the dateTime 100Percent stacked columnSeries element. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedColumnSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedColumnSeriesElement"/> class.
            </summary>
            <param name="name">Name of the dateTime 100Percent stacked columnSeries element. </param>
            <param name="color"> <see cref="T:ceTe.DynamicPDF.Color"/> of the dateTime 100Percent stacked columnSeries element. </param>
            <param name="legend"> <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the dateTime 100Percent stacked columnSeries element. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedColumnSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedColumnSeriesElement"/> class. 
            </summary>
            <param name="name">Name of the dateTime 100Percent stacked columnSeries element. </param>
            <param name="color"> <see cref="T:ceTe.DynamicPDF.Color"/> of the dateTime 100Percent stacked columnSeries element. </param>
            <param name="borderWidth">Border width of the dateTime 100Percent stacked columnSeries element. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedColumnSeriesElement.#ctor(System.String,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedColumnSeriesElement"/> class. 
            </summary>
            <param name="name">Name of the dateTime 100Percent stacked columnSeries element. </param>
            <param name="borderWidth">Border width of the dateTime 100Percent stacked columnSeries element.</param>
            <param name="borderColor">Border <see cref="T:ceTe.DynamicPDF.Color"/> of the dateTime 100Percent stacked columnSeries element. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedColumnSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedColumnSeriesElement"/> class.  
            </summary>
            <param name="name">Name of the dateTime 100Percent stacked columnSeries element. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the dateTime 100Percent stacked columnSeries element. </param>
            <param name="borderWidth">Border width of the dateTime 100Percent stacked columnSeries element. </param>
            <param name="borderColor">Border <see cref="T:ceTe.DynamicPDF.Color"/> of the dateTime 100Percent stacked columnSeries element. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedColumnSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedColumnSeriesElement"/> class. 
            </summary>
            <param name="name">Name of the dateTime 100Percent stacked columnSeries element. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the dateTime 100Percent stacked columnSeries element. </param>
            <param name="borderWidth">Border width of the dateTime 100Percent stacked columnSeries element. </param>
            <param name="borderColor">Border <see cref="T:ceTe.DynamicPDF.Color"/> of the dateTime 100Percent stacked columnSeries element. </param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the dateTime 100Percent stacked columnSeries element. </param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedColumnSeriesElement.Values">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedColumnValueList"/> object contained in the DateTime100PercentStackedColumnSeriesElement.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedLineSeries">
             <summary>
              Represents a DateTime100PercentStackedLineSeries.
             </summary>
             <example>The following example creates a date time 100 percent stacked line series chart.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     ' Add a plot area to the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
             
                     ' Create a date time 100 percent stacked line series element and add values to it
                     Dim MySeriesElement1 As DateTime100PercentStackedLineSeriesElement = New DateTime100PercentStackedLineSeriesElement("Website A")
                     MySeriesElement1.Values.Add(5, New DateTime(2007, 1, 1))
                     MySeriesElement1.Values.Add(7, New DateTime(2007, 2, 1))
                     MySeriesElement1.Values.Add(9, New DateTime(2007, 3, 1))
                     MySeriesElement1.Values.Add(6, New DateTime(2007, 4, 1))
                     Dim MySeriesElement2 As DateTime100PercentStackedLineSeriesElement = New DateTime100PercentStackedLineSeriesElement("Website B")
                     MySeriesElement2.Values.Add(4, New DateTime(2007, 1, 1))
                     MySeriesElement2.Values.Add(2, New DateTime(2007, 2, 1))
                     MySeriesElement2.Values.Add(5, New DateTime(2007, 3, 1))
                     MySeriesElement2.Values.Add(8, New DateTime(2007, 4, 1))
                     Dim MySeriesElement3 As DateTime100PercentStackedLineSeriesElement = New DateTime100PercentStackedLineSeriesElement("Website C")
                     MySeriesElement3.Values.Add(2, New DateTime(2007, 1, 1))
                     MySeriesElement3.Values.Add(4, New DateTime(2007, 2, 1))
                     MySeriesElement3.Values.Add(6, New DateTime(2007, 3, 1))
                     MySeriesElement3.Values.Add(9, New DateTime(2007, 4, 1))
            
                     ' Create a date time 100 percent stacked line series and add date time 100 percent stacked line series elements to it
                     Dim MyStackedLineSeries1 As DateTime100PercentStackedLineSeries = New DateTime100PercentStackedLineSeries()
                     MyStackedLineSeries1.Add(MySeriesElement1)
                     MyStackedLineSeries1.Add(MySeriesElement2)
                     MyStackedLineSeries1.Add(MySeriesElement3)
            
                     ' Add date time 100 percent stacked line series to plot area
                     MyPlotArea.Series.Add(MyStackedLineSeries1)
            
                     ' set label  format for the axislabels
                     MyStackedLineSeries1.XAxis.LabelFormat = "MMM"
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             
             End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                 	Document document = new Document();
            
                 	// Create a Page and add it to the document
                 	Page page = new Page();
                 	document.Pages.Add(page);
            
                 	// Create a chart
                 	Chart chart = new Chart(0, 0, 400, 200);
            
                 	// Add a plot area to the chart
                 	PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                 	// Create a date time 100 percent stacked line series element and add values to it
                 	DateTime100PercentStackedLineSeriesElement seriesElement1 = new DateTime100PercentStackedLineSeriesElement("Website A");
                 	seriesElement1.Values.Add(5, new DateTime(2007, 1, 1));
                 	seriesElement1.Values.Add(7, new DateTime(2007, 2, 1));
                 	seriesElement1.Values.Add(9, new DateTime(2007, 3, 1));
                 	seriesElement1.Values.Add(6, new DateTime(2007, 4, 1));
                 	DateTime100PercentStackedLineSeriesElement seriesElement2 = new DateTime100PercentStackedLineSeriesElement("Website B");
                 	seriesElement2.Values.Add(4, new DateTime(2007, 1, 1));
                 	seriesElement2.Values.Add(2, new DateTime(2007, 2, 1));
                 	seriesElement2.Values.Add(5, new DateTime(2007, 3, 1));
                 	seriesElement2.Values.Add(8, new DateTime(2007, 4, 1));
                 	DateTime100PercentStackedLineSeriesElement seriesElement3 = new DateTime100PercentStackedLineSeriesElement("Website C");
                 	seriesElement3.Values.Add(2, new DateTime(2007, 1, 1));
                 	seriesElement3.Values.Add(4, new DateTime(2007, 2, 1));
                 	seriesElement3.Values.Add(6, new DateTime(2007, 3, 1));
                 	seriesElement3.Values.Add(9, new DateTime(2007, 4, 1));
            
                 	// Create a date time 100 percent stacked line series and add date time 100 percent stacked line series elements to it
                 	DateTime100PercentStackedLineSeries stackedLineSeries1 = new DateTime100PercentStackedLineSeries();
                 	stackedLineSeries1.Add(seriesElement1);
                 	stackedLineSeries1.Add(seriesElement2);
                 	stackedLineSeries1.Add(seriesElement3);
            
                 	// Add date time 100 percent stacked line series to plot area
                 	plotArea.Series.Add(stackedLineSeries1);
            
                 	// set label  format for the axislabels
                 	stackedLineSeries1.XAxis.LabelFormat = "MMM";
             
                 	// Add the chart to the page
                 	page.Elements.Add(chart);
            
                 	// Save the PDF
                 	document.Draw(@"C:\MyDocument.pdf"); 
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.Stacked100PercentLineSeries">
            <summary>
            Represents a Stacked100PercentLineSeries.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedLineSeries.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedLineSeries"/> object.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedLineSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedLineSeries"/> object.
            </summary>
            <param name="xAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis"/>of the dateTime 100Percent stacked line series.</param>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis"/> of the dateTime 100Percent stacked line series.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedLineSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedLineSeries"/> object.
            </summary>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis"/> of the dateTime 100Percent stacked line series </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedLineSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedLineSeries"/> object.
            </summary>
            <param name="xAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis"/> of the dateTime 100Percent stacked line series. </param>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis"/> of the dateTime 100Percent stacked line series. </param>
            <param name="legend"> Legend of the dateTime 100Percent stacked line series.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedLineSeries.Add(ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedLineSeriesElement)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedLineSeriesElement"/> object to the
            <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedLineSeries"/> elements list.
            </summary>
            <param name="element"> <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedLineSeriesElement"/> object to be added.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedLineSeries.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedLineSeriesElement"/> object at the given index.
            </summary>
            <param name="index"> Index of the required date time 100Percent stacked line series element. </param>
            <returns> The <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedLineSeriesElement"/> object. </returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedLineSeries.XAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis"/> of the series.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedLineSeries.YAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis"/> of the series.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedLineSeriesElement">
             <summary>
             Represents a DateTime100PercentStackedLineSeriesElement.
             </summary>
             <example>The following example creates a date time 100 percent stacked line series elements and creates 
             date time 100 percent stacked line series chart to it.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     ' Add a plot area to the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
             
                     ' Create a date time 100 percent stacked line series element and add values to it
                     Dim MySeriesElement1 As DateTime100PercentStackedLineSeriesElement = New DateTime100PercentStackedLineSeriesElement("Website A")
                     MySeriesElement1.Values.Add(5, New DateTime(2007, 1, 1))
                     MySeriesElement1.Values.Add(7, New DateTime(2007, 2, 1))
                     MySeriesElement1.Values.Add(9, New DateTime(2007, 3, 1))
                     MySeriesElement1.Values.Add(6, New DateTime(2007, 4, 1))
                     Dim MySeriesElement2 As DateTime100PercentStackedLineSeriesElement = New DateTime100PercentStackedLineSeriesElement("Website B")
                     MySeriesElement2.Values.Add(4, New DateTime(2007, 1, 1))
                     MySeriesElement2.Values.Add(2, New DateTime(2007, 2, 1))
                     MySeriesElement2.Values.Add(5, New DateTime(2007, 3, 1))
                     MySeriesElement2.Values.Add(8, New DateTime(2007, 4, 1))
                     Dim MySeriesElement3 As DateTime100PercentStackedLineSeriesElement = New DateTime100PercentStackedLineSeriesElement("Website C")
                     MySeriesElement3.Values.Add(2, New DateTime(2007, 1, 1))
                     MySeriesElement3.Values.Add(4, New DateTime(2007, 2, 1))
                     MySeriesElement3.Values.Add(6, New DateTime(2007, 3, 1))
                     MySeriesElement3.Values.Add(9, New DateTime(2007, 4, 1))
            
                     ' Create a date time 100 percent stacked line series and add date time 100 percentstacked line series elements to it
                     Dim MyStackedLineSeries1 As DateTime100PercentStackedLineSeries = New DateTime100PercentStackedLineSeries()
                     MyStackedLineSeries1.Add(MySeriesElement1)
                     MyStackedLineSeries1.Add(MySeriesElement2)
                     MyStackedLineSeries1.Add(MySeriesElement3)
            
                     ' Add date time 100 percent stacked line series to plot area
                     MyPlotArea.Series.Add(MyStackedLineSeries1)
            
                     ' set label  format for the axislabels
                     MyStackedLineSeries1.XAxis.LabelFormat = "MMM"
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                 	Document document = new Document();
            
                 	// Create a Page and add it to the document
                 	Page page = new Page();
                 	document.Pages.Add(page);
            
                 	// Create a chart
                 	Chart chart = new Chart(0, 0, 400, 200);
            
                 	// Add a plot area to the chart
                 	PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                 	// Create a date time 100 percent stacked line series element and add values to it
                 	DateTime100PercentStackedLineSeriesElement seriesElement1 = new DateTime100PercentStackedLineSeriesElement("Website A");
                 	seriesElement1.Values.Add(5, new DateTime(2007, 1, 1));
                 	seriesElement1.Values.Add(7, new DateTime(2007, 2, 1));
                 	seriesElement1.Values.Add(9, new DateTime(2007, 3, 1));
                 	seriesElement1.Values.Add(6, new DateTime(2007, 4, 1));
                 	DateTime100PercentStackedLineSeriesElement seriesElement2 = new DateTime100PercentStackedLineSeriesElement("Website B");
                 	seriesElement2.Values.Add(4, new DateTime(2007, 1, 1));
                 	seriesElement2.Values.Add(2, new DateTime(2007, 2, 1));
                 	seriesElement2.Values.Add(5, new DateTime(2007, 3, 1));
                 	seriesElement2.Values.Add(8, new DateTime(2007, 4, 1));
                 	DateTime100PercentStackedLineSeriesElement seriesElement3 = new DateTime100PercentStackedLineSeriesElement("Website C");
                 	seriesElement3.Values.Add(2, new DateTime(2007, 1, 1));
                 	seriesElement3.Values.Add(4, new DateTime(2007, 2, 1));
                 	seriesElement3.Values.Add(6, new DateTime(2007, 3, 1));
                 	seriesElement3.Values.Add(9, new DateTime(2007, 4, 1));
            
                 	// Create a date time 100 percent stacked line series and add date time 100 percentstacked line series elements to it
                 	DateTime100PercentStackedLineSeries stackedLineSeries1 = new DateTime100PercentStackedLineSeries();
                 	stackedLineSeries1.Add(seriesElement1);
                 	stackedLineSeries1.Add(seriesElement2);
                 	stackedLineSeries1.Add(seriesElement3);
            
                 	// Add date time 100 percent stacked line series to plot area
                 	plotArea.Series.Add(stackedLineSeries1);
            
                 	// set label  format for the axislabels
                 	stackedLineSeries1.XAxis.LabelFormat = "MMM";
             
                 	// Add the chart to the page
                 	page.Elements.Add(chart);
            
                 	// Save the PDF
                 	document.Draw(@"C:\MyDocument.pdf"); 
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.Stacked100PercentLineSeriesElement">
            <summary>
            Represents a Stacked100PercentLineSeriesElement.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.Stacked100PercentLineSeriesElement.Marker">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.Series.Stacked100PercentLineSeriesElement.Marker"/> of the Stacked100PercentLineSeriesElement.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.Stacked100PercentLineSeriesElement.DataLabel">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.PercentageDataLabel"/> object to use for the DataLabel of the stacked 100Percent series element. This is the
            default data label for the series element.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.Stacked100PercentLineSeriesElement.LineCap">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.Series.Stacked100PercentLineSeriesElement.LineCap"/> of the Stacked100PercentLineSeriesElement.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.Stacked100PercentLineSeriesElement.LineJoin">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.Series.Stacked100PercentLineSeriesElement.LineJoin"/> of the Stacked100PercentLineSeriesElement.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.Stacked100PercentLineSeriesElement.Width">
            <summary>
            Gets or sets the LineWidth of the Stacked100PercentLineSeriesElement.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.Stacked100PercentLineSeriesElement.LineStyle">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.Series.Stacked100PercentLineSeriesElement.LineStyle"/> of the Stacked100PercentLineSeriesElement.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedLineSeriesElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedLineSeriesElement"/> object.
            </summary>
            <param name="name">Name of the dateTime 100Percent stacked line series element.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedLineSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedLineSeriesElement"/> object.
            </summary>
            <param name="name">Name of the dateTime 100Percent stacked line series element </param>
            <param name="color"> <see cref="T:ceTe.DynamicPDF.Color"/> of the dateTime 100Percent stacked line series element.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedLineSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedLineSeriesElement"/> object.
            </summary>
            <param name="name"> Name of the dateTime 100Percent stacked line series element.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the dateTime 100Percent stacked line series element. </param>
            <param name="lineWidth">line width of the dateTime 100Percent stacked line series element. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedLineSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.LineStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedLineSeriesElement"/> object.
            </summary>
            <param name="name">Name of the dateTime 100Percent stacked line series element.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the dateTime 100Percent stacked line series element. </param>
            <param name="lineWidth">line width of the dateTime 100Percent stacked line series element. </param>
            <param name="style"><see cref="T:ceTe.DynamicPDF.LineStyle"/> of the dateTime 100Percent stacked line series element. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedLineSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.LineStyle,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedLineSeriesElement"/> object.
            </summary>
            <param name="name">Name of the dateTime 100Percent stacked lineSeries element. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the dateTime 100Percent stacked line series element. </param>
            <param name="lineWidth"> Line width of the dateTime 100Percent stacked line series element </param>
            <param name="style"><see cref="T:ceTe.DynamicPDF.LineStyle"/> of the dateTime 100Percent stacked line series element. </param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the dateTime 100Percent stacked line series element. </param>       
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedLineSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.LineStyle,ceTe.DynamicPDF.PageElements.Charting.Marker)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedLineSeriesElement"/> object.
            </summary>
            <param name="name"> Name of the dateTime 100Percent stacked lineSeries element. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the dateTime 100Percent stacked line series element. </param>
            <param name="lineWidth">Line width of the dateTime 100Percent stacked line series element. </param>
            <param name="style"><see cref="T:ceTe.DynamicPDF.LineStyle"/> of the dateTime 100Percent stacked line series element. </param>
            <param name="marker"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Marker"/> of the dateTime 100Percent stacked line series element. </param>       
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedLineSeriesElement.#ctor(System.String,System.Single,ceTe.DynamicPDF.LineStyle,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Marker,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedLineSeriesElement"/> object.
            </summary>
            <param name="name">Name of the dateTime 100Percent stacked lineSeries element. </param>
            <param name="lineWidth"> Line width of the dateTime 100Percent stacked line series element.</param>
            <param name="style"><see cref="T:ceTe.DynamicPDF.LineStyle"/> of the dateTime 100Percent stacked line series element. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the dateTime 100Percent stacked line series element. </param>
            <param name="marker"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Marker"/> of the dateTime 100Percent stacked line series element. </param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the dateTime 100Percent stacked line series element </param>       
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.DateTime100PercentStackedLineSeriesElement.Values">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedLineValueList"/> contained in the DateTime100PercentStackedLineSeriesElement.
            </summary>        
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeAreaSeries">
             <summary>
             Represents a DateTimeAreaSeries.
             </summary>
             <example>The following example creates a date time area series chart.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create positions
                     Dim p0 As DateTime = New DateTime(2007, 1, 1)
                     Dim p1 As DateTime = New DateTime(2007, 2, 1)
                     Dim p2 As DateTime = New DateTime(2007, 3, 1)
                     Dim p3 As DateTime = New DateTime(2007, 4, 1)
            
                     ' Create date time area series and add values to it
                     Dim MyAreaSeries1 As DateTimeAreaSeries = New DateTimeAreaSeries("Website A")
                     MyAreaSeries1.Values.Add(5, p0)
                     MyAreaSeries1.Values.Add(7, p1)
                     MyAreaSeries1.Values.Add(9, p2)
                     MyAreaSeries1.Values.Add(6, p3)
                     Dim MyAreaSeries2 As DateTimeAreaSeries = New DateTimeAreaSeries("Website B")
                     MyAreaSeries2.Values.Add(4, p0)
                     MyAreaSeries2.Values.Add(2, p1)
                     MyAreaSeries2.Values.Add(5, p2)
                     MyAreaSeries2.Values.Add(8, p3)
                     Dim MyAreaSeries3 As DateTimeAreaSeries = New DateTimeAreaSeries("Website C")
                     MyAreaSeries3.Values.Add(2, p0)
                     MyAreaSeries3.Values.Add(4, p1)
                     MyAreaSeries3.Values.Add(6, p2)
                     MyAreaSeries3.Values.Add(9, p3)
             
                     'Add date time area series to the plot area
                     MyPlotArea.Series.Add(MyAreaSeries1)
                     MyPlotArea.Series.Add(MyAreaSeries2)
                     MyPlotArea.Series.Add(MyAreaSeries3)
            
                     ' Create a title and add it to yaxis
                     Dim MyTitle3 As Title = New Title("Viewers (in millions)")
                     MyAreaSeries1.YAxis.Titles.Add(MyTitle3)
            
                     ' Set label  format for the axislabels
                     MyAreaSeries1.XAxis.LabelFormat = "MMM"
            
                     'Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create positions
                     DateTime p0 = new DateTime(2007, 1, 1);
                     DateTime p1 = new DateTime(2007, 2, 1);
                     DateTime p2 = new DateTime(2007, 3, 1);
                     DateTime p3 = new DateTime(2007, 4, 1);
            
                     // Create date time area series and add values to it
                     DateTimeAreaSeries areaSeries1 = new DateTimeAreaSeries("Website A");
                     areaSeries1.Values.Add(5, p0);
                     areaSeries1.Values.Add(7, p1);
                     areaSeries1.Values.Add(9, p2);
                     areaSeries1.Values.Add(6, p3);
                     DateTimeAreaSeries areaSeries2 = new DateTimeAreaSeries("Website B");
                     areaSeries2.Values.Add(4, p0);
                     areaSeries2.Values.Add(2, p1);
                     areaSeries2.Values.Add(5, p2);
                     areaSeries2.Values.Add(8, p3);
                     DateTimeAreaSeries areaSeries3 = new DateTimeAreaSeries("Website C");
                     areaSeries3.Values.Add(2, p0);
                     areaSeries3.Values.Add(4, p1);
                     areaSeries3.Values.Add(6, p2);
                     areaSeries3.Values.Add(9, p3);
            
                     //Add date time area series to the plot area
                     plotArea.Series.Add(areaSeries1);
                     plotArea.Series.Add(areaSeries2);
                     plotArea.Series.Add(areaSeries3);
                    
                     // Create a title and add it to yaxis
                     Title title3 = new Title("Viewers (in millions)");
                     areaSeries1.YAxis.Titles.Add(title3);
            
                     // Set label  format for the axislabels
                     areaSeries1.XAxis.LabelFormat = "MMM";
            
                     //Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf"); 
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeAreaSeries.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeAreaSeries"/> object.
            </summary>
            <param name="name">Name of the datetime Area series </param>       
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeAreaSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeAreaSeries"/> object.
            </summary>
            <param name="name"> Name of the datetime Area series.</param>
            <param name="xAxis"> <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis"/> of the datetime area series.</param>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the datetime area series </param>       
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeAreaSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeAreaSeries"/> object.
            </summary>
            <param name="name">Name of the datetime Area series. </param>
            <param name="xAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis"/> of the datetime area series. </param>
            <param name="yAxis"> <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the datetime area series.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the datetime area series. </param>        
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeAreaSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeAreaSeries"/> object.
            </summary>
            <param name="name">Name of the datetime Area series. </param>
            <param name="xAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis"/> of the datetime area series. </param>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the datetime area series. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the datetime area series. </param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the datetime area series. </param>                
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeAreaSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Marker)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeAreaSeries"/> object.
            </summary>
            <param name="name"> Name of the datetime Area series.</param>
            <param name="xAxis"> <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis"/> of the datetime area series.</param>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the datetime area series. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/>of the datetime area series. </param>
            <param name="marker"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Marker"/> of the dateTime area series </param>        
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeAreaSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Marker,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeAreaSeries"/> object.
            </summary>
            <param name="name">Name of the datetime Area series. </param>
            <param name="xAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis"/> of the datetime area series. </param>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the datetime area series </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the datetime area series </param>
            <param name="marker"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Marker"/> of the dateTime area series. </param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the datetime area series. </param>       
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeAreaSeries.XAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis"/> object of the series.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeAreaSeries.YAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> object of the series.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeAreaSeries.Values">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeAreaValueList"/> object contained in the DateTimeAreaSeries.
            </summary>       
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeBarSeries">
             <summary>
             This class represents the DateTimeBarSeries.
             </summary>
             <example>The following example creates a date time bar series chart.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     'Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a date time bar series and add values to it
                     Dim MyBarSeries1 As DateTimeBarSeries = New DateTimeBarSeries("Website A")
                     MyBarSeries1.Values.Add(5, New DateTime(2007, 1, 1))
                     MyBarSeries1.Values.Add(7, New DateTime(2007, 2, 1))
                     MyBarSeries1.Values.Add(9, New DateTime(2007, 3, 1))
                     MyBarSeries1.Values.Add(6, New DateTime(2007, 4, 1))
                     Dim MyBarSeries2 As DateTimeBarSeries = New DateTimeBarSeries("Website B")
                     MyBarSeries2.Values.Add(4, New DateTime(2007, 1, 1))
                     MyBarSeries2.Values.Add(2, New DateTime(2007, 2, 1))
                     MyBarSeries2.Values.Add(5, New DateTime(2007, 3, 1))
                     MyBarSeries2.Values.Add(8, New DateTime(2007, 4, 1))
                     Dim MyBarSeries3 As DateTimeBarSeries = New DateTimeBarSeries("Website C")
                     MyBarSeries3.Values.Add(2, New DateTime(2007, 1, 1))
                     MyBarSeries3.Values.Add(4, New DateTime(2007, 2, 1))
                     MyBarSeries3.Values.Add(6, New DateTime(2007, 3, 1))
                     MyBarSeries3.Values.Add(9, New DateTime(2007, 4, 1))
            
                     ' Add date time bar series to the plot area
                     MyPlotArea.Series.Add(MyBarSeries1)
                     MyPlotArea.Series.Add(MyBarSeries2)
                     MyPlotArea.Series.Add(MyBarSeries3)
            
                     ' Create a title and add it to the Xaxis
                     Dim MyTitle3 As Title = New Title("Viewers (in millions)")
                     MyBarSeries1.XAxis.Titles.Add(MyTitle3)
            
                     ' set label  format for the axislabels
                     MyBarSeries1.YAxis.LabelFormat = "MMM"
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf") 
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     //Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
             
                     // Create a date time bar series and add values to it
                     DateTimeBarSeries barSeries1 = new DateTimeBarSeries("Website A");
                     barSeries1.Values.Add(5, new DateTime(2007, 1, 1));
                     barSeries1.Values.Add(7, new DateTime(2007, 2, 1));
                     barSeries1.Values.Add(9, new DateTime(2007, 3, 1));
                     barSeries1.Values.Add(6, new DateTime(2007, 4, 1));
                     DateTimeBarSeries barSeries2 = new DateTimeBarSeries("Website B");
                     barSeries2.Values.Add(4, new DateTime(2007, 1, 1));
                     barSeries2.Values.Add(2, new DateTime(2007, 2, 1));
                     barSeries2.Values.Add(5, new DateTime(2007, 3, 1));
                     barSeries2.Values.Add(8, new DateTime(2007, 4, 1));
                     DateTimeBarSeries barSeries3 = new DateTimeBarSeries("Website C");
                     barSeries3.Values.Add(2, new DateTime(2007, 1, 1));
                     barSeries3.Values.Add(4, new DateTime(2007, 2, 1));
                     barSeries3.Values.Add(6, new DateTime(2007, 3, 1));
                     barSeries3.Values.Add(9, new DateTime(2007, 4, 1));
            
                     // Add date time bar series to the plot area
                     plotArea.Series.Add(barSeries1);
                     plotArea.Series.Add(barSeries2);
                     plotArea.Series.Add(barSeries3);
            
                     // Create a title and add it to the Xaxis
                     Title title3 = new Title("Viewers (in millions)");
                     barSeries1.XAxis.Titles.Add(title3);
            
                     // set label  format for the axislabels
                     barSeries1.YAxis.LabelFormat = "MMM";
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf"); 
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
              </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeBarSeries.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeBarSeries"/> class.
            </summary>
            <param name="name">Name of the date time bar series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeBarSeries.#ctor(System.String,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeBarSeries"/> class.
            </summary>
            <param name="name">Name of the date time bar series. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the date time bar series </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeBarSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeBarSeries"/> class.
            </summary>
            <param name="name"> Name of the date time bar series</param>
            <param name="numericXAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis"/> of the date time bar series.</param>
            <param name="dateTimeYAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxis"/> of the date time bar series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeBarSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeBarSeries"/> class.
            </summary>
            <param name="name">Name of the date time bar series. </param>
            <param name="numericXAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis"/> of the date time bar series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeBarSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeBarSeries"/> class.
            </summary>
            <param name="name"> Name of the date time bar series. </param>
            <param name="dateTimeYAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxis"/> of the date time bar series</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeBarSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxis,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeBarSeries"/> class.
            </summary>
            <param name="name">Name of the date time bar series </param>
            <param name="numericXAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis"/> of the date time bar series. </param>
            <param name="dateTimeYAxis"> <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxis"/> of the date time bar series. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the date time bar series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeBarSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxis,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeBarSeries"/> class.
            </summary>
            <param name="name"> Name of the date time bar series. </param>
            <param name="numericXAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis"/> of the date time bar series. </param>
            <param name="dateTimeYAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxis"/> of the date time bar series. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the date time bar series. </param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the date time bar series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeBarSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxis,ceTe.DynamicPDF.Color,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeBarSeries"/> class.
            </summary>
            <param name="name">Name of the date time bar series. </param>
            <param name="numericXAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis"/> of the date time bar series. </param>
            <param name="dateTimeYAxis"> <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxis"/> of the date time bar series.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the date time bar series. </param>
            <param name="borderWidth">Border width of the date time bar series </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeBarSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxis,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeBarSeries"/> class.
            </summary>
            <param name="name">Name of the date time bar series.</param>
            <param name="numericXAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis"/> of the date time bar series.</param>
            <param name="dateTimeYAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxis"/> of the date time bar series.</param>
            <param name="borderWidth">Border width of the date time bar series.</param>
            <param name="borderColor"> Border <see cref="T:ceTe.DynamicPDF.Color"/> for the border of the date time bar series.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeBarSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxis,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeBarSeries"/> class.
            </summary>
            <param name="name">Name of the date time bar series.</param>
            <param name="numericXAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis"/> of the date time bar series.</param>
            <param name="dateTimeYAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxis"/> of the date time bar series. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the date time bar series.</param>
            <param name="borderWidth">Border width of the date time bar series.</param>
            <param name="borderColor">Border <see cref="T:ceTe.DynamicPDF.Color"/> for border of the date time bar series.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeBarSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxis,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeBarSeries"/> class.
            </summary>
            <param name="name">Name of the date time bar series</param>
            <param name="numericXAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis"/> of the date time bar series.</param>
            <param name="dateTimeYAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxis"/> of the date time bar series.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the date time bar series.</param>
            <param name="borderWidth">Border width of the date time bar series.</param>
            <param name="borderColor">Border <see cref="T:ceTe.DynamicPDF.Color"/> for border of the date time bar series.</param>
            <param name="legend">code&gt;<see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the date time bar series.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeBarSeries.Values">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeBarValueList"/> object contained in the series.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeBarSeries.XAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis"/> object of the series.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeBarSeries.YAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxis"/> object of the series.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeColumnSeries">
             <summary>
             Represents the DateTimeColumnSeries.
             </summary>
             <example>The following example creates a date time column series chart.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a date time column series and add values to it          
                     Dim MyColumnSeries1 As DateTimeColumnSeries = New DateTimeColumnSeries("Website A")
                     MyColumnSeries1.Values.Add(5, New DateTime(2007, 1, 1))
                     MyColumnSeries1.Values.Add(7, New DateTime(2007, 2, 1))
                     MyColumnSeries1.Values.Add(4, New DateTime(2007, 3, 1))
                     MyColumnSeries1.Values.Add(3, New DateTime(2007, 4, 1))
                     Dim MyColumnSeries2 As DateTimeColumnSeries = New DateTimeColumnSeries("Website B")
                     MyColumnSeries2.Values.Add(4, New DateTime(2007, 1, 1))
                     MyColumnSeries2.Values.Add(2, New DateTime(2007, 2, 1))
                     MyColumnSeries2.Values.Add(5, New DateTime(2007, 3, 1))
                     MyColumnSeries2.Values.Add(8, New DateTime(2007, 4, 1))
                     Dim MyColumnSeries3 As DateTimeColumnSeries = New DateTimeColumnSeries("Website C")
                     MyColumnSeries3.Values.Add(2, New DateTime(2007, 1, 1))
                     MyColumnSeries3.Values.Add(4, New DateTime(2007, 2, 1))
                     MyColumnSeries3.Values.Add(6, New DateTime(2007, 3, 1))
                     MyColumnSeries3.Values.Add(9, New DateTime(2007, 4, 1))
             
                     ' Add date time column series to the plot area
                     MyPlotArea.Series.Add(MyColumnSeries1)
                     MyPlotArea.Series.Add(MyColumnSeries2)
                     MyPlotArea.Series.Add(MyColumnSeries3)
            
                     ' Create a title and add it to the yaxis
                     Dim MyTitle3 As Title = New Title("Viewers (in millions)")
                     MyColumnSeries1.YAxis.Titles.Add(MyTitle3)
            
                     ' set label  format for the axislabels
                     MyColumnSeries1.XAxis.LabelFormat = "MMM"
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a date time  column series element and add values to it
                     DateTimeColumnSeries seriesElement1 = new DateTimeColumnSeries("Website A");
                     seriesElement1.Values.Add(5, new DateTime(2007, 1, 1));
                     seriesElement1.Values.Add(7, new DateTime(2007, 2, 1));
                     seriesElement1.Values.Add(9, new DateTime(2007, 3, 1));
                     seriesElement1.Values.Add(6, new DateTime(2007, 4, 1));
                     DateTimeColumnSeries seriesElement2 = new DateTimeColumnSeries("Website B");
                     seriesElement2.Values.Add(4, new DateTime(2007, 1, 1));
                     seriesElement2.Values.Add(2, new DateTime(2007, 2, 1));
                     seriesElement2.Values.Add(5, new DateTime(2007, 3, 1));
                     seriesElement2.Values.Add(8, new DateTime(2007, 4, 1));
                     DateTimeColumnSeries seriesElement3 = new DateTimeColumnSeries("Website C");
                     seriesElement3.Values.Add(2, new DateTime(2007, 1, 1));
                     seriesElement3.Values.Add(4, new DateTime(2007, 2, 1));
                     seriesElement3.Values.Add(6, new DateTime(2007, 3, 1));
                     seriesElement3.Values.Add(9, new DateTime(2007, 4, 1));
            
                     // Add date time  column series to plot area 
                     plotArea.Series.Add(seriesElement1);
                     plotArea.Series.Add(seriesElement2);
                     plotArea.Series.Add(seriesElement3);
            
                     // Create a title and add it to the yaxis
                     Title title3 = new Title("Viewers (in millions)");
                     seriesElement1.YAxis.Titles.Add(title3);
            
                     // set label  format for the axislabels
                     seriesElement1.XAxis.LabelFormat = "MMM";
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf"); 
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeColumnSeries.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeColumnSeries"/> class. 
            </summary>
            <param name="name">Name of the date time column series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeColumnSeries.#ctor(System.String,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeColumnSeries"/> class.
            </summary>
            <param name="name">Name of the date time column series. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the date time column series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeColumnSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeColumnSeries"/> class. 
            </summary>
            <param name="name"> Name of the date time column series. </param>
            <param name="dateTimeXAxis"> <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis"/> of the date time column series. </param>
            <param name="numericYAxis"> <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the date time column series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeColumnSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeColumnSeries"/> class. 
            </summary>
            <param name="name">Name of the date time column series. </param>
            <param name="dateTimeXAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis"/> of the date time column series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeColumnSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeColumnSeries"/> class. 
            </summary>
            <param name="name">Name of the date time column series. </param>
            <param name="numericYAxis"> <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the date time column series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeColumnSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeColumnSeries"/> class. 
            </summary>
            <param name="name">Name of the date time column series. </param>
            <param name="dateTimeXAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis"/> of the date time column series. </param>
            <param name="numericYAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the date time column series.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the date time column series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeColumnSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeColumnSeries"/> class. 
            </summary>
            <param name="name">Name of the date time column series. </param>
            <param name="dateTimeXAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis"/> of the date time column series. </param>
            <param name="numericYAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the date time column series. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the date time column series. </param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the date time column series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeColumnSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis,ceTe.DynamicPDF.Color,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeColumnSeries"/> class. 
            </summary>
            <param name="name">Name of the date time column series. </param>
            <param name="dateTimeXAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis"/> of the date time column series. </param>
            <param name="numericYAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the date time column series. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the date time column series. </param>
            <param name="borderWidth">Border width of the date time column series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeColumnSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeColumnSeries"/> class. 
            </summary>
            <param name="name">Name of the date time column series. </param>
            <param name="dateTimeXAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis"/> of the date time column series. </param>
            <param name="numericYAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the date time column series. </param>
            <param name="borderWidth">Border width of the date time column series. </param>
            <param name="borderColor">Border <see cref="T:ceTe.DynamicPDF.Color"/> for border of the date time column series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeColumnSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeColumnSeries"/> class. 
            </summary>
            <param name="name">Name of the date time column series. </param>
            <param name="dateTimeXAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis"/> of the date time column series. </param>
            <param name="numericYAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the date time column series. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the date time column series. </param>
            <param name="borderWidth">Border width of the date time column series. </param>
            <param name="borderColor">Border <see cref="T:ceTe.DynamicPDF.Color"/> for the border of the date time column series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeColumnSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeColumnSeries"/> class.
            </summary>
            <param name="name">Name of the date time column series. </param>
            <param name="dateTimeXAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis"/> of the date time column series. </param>
            <param name="numericYAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the date time column series. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the date time column series. </param>
            <param name="borderWidth">Border width of the date time column series. </param>
            <param name="borderColor">Border <see cref="T:ceTe.DynamicPDF.Color"/> for the border of the date time column series. </param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the date time column series. </param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeColumnSeries.Values">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeColumnValueList"/> object contained in the DateTimeColumnSeries. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeColumnSeries.XAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis"/> object of the series. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeColumnSeries.YAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> object of the series.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeLineSeries">
             <summary>
             Represents a DateTimeLineSeries.
             </summary>
             <example>The following example creates a date time line series chart.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create positions
                     Dim p0 As DateTime = New DateTime(2007, 1, 1)
                     Dim p1 As DateTime = New DateTime(2007, 2, 1)
                     Dim p2 As DateTime = New DateTime(2007, 3, 1)
                     Dim p3 As DateTime = New DateTime(2007, 4, 1)
            
                     ' Create a date time line series and add values to it
                     Dim MyLineSeries1 As DateTimeLineSeries = New DateTimeLineSeries("Website A")
                     MyLineSeries1.Values.Add(5, p0)
                     MyLineSeries1.Values.Add(7, p1)
                     MyLineSeries1.Values.Add(9, p2)
                     MyLineSeries1.Values.Add(6, p3)
                     Dim MyLineSeries2 As DateTimeLineSeries = New DateTimeLineSeries("Website B")
                     MyLineSeries2.Values.Add(4, p0)
                     MyLineSeries2.Values.Add(2, p1)
                     MyLineSeries2.Values.Add(5, p2)
                     MyLineSeries2.Values.Add(8, p3)
                     Dim MyLineSeries3 As DateTimeLineSeries = New DateTimeLineSeries("Website C")
                     MyLineSeries3.Values.Add(2, p0)
                     MyLineSeries3.Values.Add(4, p1)
                     MyLineSeries3.Values.Add(6, p2)
                     MyLineSeries3.Values.Add(9, p3)
            
                     ' Add date time line series to the plot area
                     MyPlotArea.Series.Add(MyLineSeries1)
                     MyPlotArea.Series.Add(MyLineSeries2)
                     MyPlotArea.Series.Add(MyLineSeries3)
            
                     ' Create a title and add it to the yaxis
                     Dim MyTitle3 As Title = New Title("Viewers (in millions)")
                     MyLineSeries1.YAxis.Titles.Add(MyTitle3)
            
                     ' set label  format for the axislabels
                     MyLineSeries1.XAxis.LabelFormat = "MMM"
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create positions
                     DateTime p0 = new DateTime(2007, 1, 1);
                     DateTime p1 = new DateTime(2007, 2, 1);
                     DateTime p2 = new DateTime(2007, 3, 1);
                     DateTime p3 = new DateTime(2007, 4, 1);
            
                     // Create a date time line series and add values to it
                     DateTimeLineSeries lineSeries1 = new DateTimeLineSeries("Website A");
                     lineSeries1.Values.Add(5, p0);
                     lineSeries1.Values.Add(7, p1);
                     lineSeries1.Values.Add(9, p2);
                     lineSeries1.Values.Add(6, p3);
                     DateTimeLineSeries lineSeries2 = new DateTimeLineSeries("Website B");
                     lineSeries2.Values.Add(4, p0);
                     lineSeries2.Values.Add(2, p1);
                     lineSeries2.Values.Add(5, p2);
                     lineSeries2.Values.Add(8, p3);
                     DateTimeLineSeries lineSeries3 = new DateTimeLineSeries("Website C");
                     lineSeries3.Values.Add(2, p0);
                     lineSeries3.Values.Add(4, p1);
                     lineSeries3.Values.Add(6, p2);
                     lineSeries3.Values.Add(9, p3);
            
                     // Add date time line series to the plot area
                     plotArea.Series.Add(lineSeries1);
                     plotArea.Series.Add(lineSeries2);
                     plotArea.Series.Add(lineSeries3);
            
                     // Create a title and add it to the yaxis
                     Title title3 = new Title("Viewers (in millions)");
                     lineSeries1.YAxis.Titles.Add(title3);
            
                     // set label  format for the axislabels
                     lineSeries1.XAxis.LabelFormat = "MMM";
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf"); 
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.LineSeries">
            <summary>
            Base class from which date-time and indexed LineSeries are derived.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.LineSeries.ValueFormat">
            <summary>
            Gets or sets the ValueFormat of the line series.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.LineSeries.DataLabel">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.ValuePositionDataLabel"/> of the line series. This is the
            default data label for the series.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.LineSeries.Marker">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.Series.LineSeries.Marker"/> of the line series.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.LineSeries.LineCap">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.Series.LineSeries.LineCap"/> of the LineSeries.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.LineSeries.LineJoin">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.Series.LineSeries.LineJoin"/> of the LineSeries.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.LineSeries.Width">
            <summary>
            Gets or sets the LineWidth of the LineSeries.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.LineSeries.LineStyle">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.Series.LineSeries.LineStyle"/> of the LineSeries.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeLineSeries.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeLineSeries"/> object.
            </summary>
            <param name="name"> Name of the datetime line series. </param>        
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeLineSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeLineSeries"/> object.
            </summary>
            <param name="name"> Name of the datetime lineseries.</param>
            <param name="xAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis"/> of the datetime line series </param>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the datetime line series. </param>        
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeLineSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeLineSeries"/> object.
            </summary>
            <param name="name">  Name of the datetime lineseries. </param>
            <param name="xAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis"/> of the datetime line series. </param>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the datetime line series. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the datetime line series. </param>       
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeLineSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis,ceTe.DynamicPDF.Color,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeLineSeries"/> object.
            </summary>
            <param name="name">Name of the datetime lineseries</param>
            <param name="xAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis"/> of the datetime line series.</param>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the datetime line series</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the datetime line series.</param>
            <param name="lineWidth">line width of the datetime line series</param>                
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeLineSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.LineStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeLineSeries"/> object.
            </summary>
            <param name="name">Name of the datetime lineseries.</param>
            <param name="xAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis"/> of the datetime line series.</param>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the datetime line series.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the datetime line series</param>
            <param name="lineWidth">line width of the datetime line series.</param>
            <param name="style"><see cref="T:ceTe.DynamicPDF.LineStyle"/> of the datetime line series.</param>       
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeLineSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.LineStyle,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeLineSeries"/> object.
            </summary>
            <param name="name">Name of the datetime lineseries. </param>
            <param name="xAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis"/> of the datetime line series. </param>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the datetime line series. </param>
            <param name="color"> <see cref="T:ceTe.DynamicPDF.Color"/> of the datetime line series</param>
            <param name="lineWidth">line width of the datetime line series. </param>
            <param name="style"><see cref="T:ceTe.DynamicPDF.LineStyle"/> of the datetime line series. </param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the datetime line series. </param>       
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeLineSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.LineStyle,ceTe.DynamicPDF.PageElements.Charting.Marker)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeLineSeries"/> object.
            </summary>
            <param name="name">Name of the datetime lineseries.</param>
            <param name="xAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis"/>of the datetime line series.</param>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the datetime line series.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the datetime line series.</param>
            <param name="lineWidth">line width of the datetime line series.</param>
            <param name="style"><see cref="T:ceTe.DynamicPDF.LineStyle"/>of the datetime line series</param>
            <param name="marker"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Marker"/> of the dateTime line series.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeLineSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis,System.Single,ceTe.DynamicPDF.LineStyle,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Marker,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeLineSeries"/> object.
            </summary>
            <param name="name">Name of the datetime lineseries.</param>
            <param name="xAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis"/> of the datetime line series </param>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the datetime line series.</param>
            <param name="lineWidth">Line width of the datetime line series. </param>
            <param name="style"><see cref="T:ceTe.DynamicPDF.LineStyle"/> of the datetime line series. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the datetime line series. </param>
            <param name="marker"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Marker"/> of the dateTime line series. </param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the datetime line series. </param>       
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeLineSeries.XAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis"/> object of the series.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeLineSeries.YAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> object of the series.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeLineSeries.Values">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeLineValueList"/> object contained in the DateTimeLineSeries.
            </summary>               
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedAreaSeries">
             <summary>
             Represents a DateTimeStackedAreaSeries.
             </summary>
             <example>The following example creates a date time stacked area series chart.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     'Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a date time stacked area series element and add values to it
                     Dim MySeriesElement1 As DateTimeStackedAreaSeriesElement = New DateTimeStackedAreaSeriesElement("Website A")
                     MySeriesElement1.Values.Add(5, New DateTime(2007, 1, 1))
                     MySeriesElement1.Values.Add(7, New DateTime(2007, 2, 1))
                     MySeriesElement1.Values.Add(9, New DateTime(2007, 3, 1))
                     MySeriesElement1.Values.Add(6, New DateTime(2007, 4, 1))
                     Dim MySeriesElement2 As DateTimeStackedAreaSeriesElement = New DateTimeStackedAreaSeriesElement("Website B")
                     MySeriesElement2.Values.Add(4, New DateTime(2007, 1, 1))
                     MySeriesElement2.Values.Add(2, New DateTime(2007, 2, 1))
                     MySeriesElement2.Values.Add(5, New DateTime(2007, 3, 1))
                     MySeriesElement2.Values.Add(8, New DateTime(2007, 4, 1))
                     Dim MySeriesElement3 As DateTimeStackedAreaSeriesElement = New DateTimeStackedAreaSeriesElement("Website C")
                     MySeriesElement3.Values.Add(2, New DateTime(2007, 1, 1))
                     MySeriesElement3.Values.Add(4, New DateTime(2007, 2, 1))
                     MySeriesElement3.Values.Add(6, New DateTime(2007, 3, 1))
                     MySeriesElement3.Values.Add(9, New DateTime(2007, 4, 1))
            
                     ' Create a date time stacked area series and add date time stacked area series elements to it
                     Dim MyStackedAreaSeries1 As DateTimeStackedAreaSeries = New DateTimeStackedAreaSeries()
                     MyStackedAreaSeries1.Add(MySeriesElement1)
                     MyStackedAreaSeries1.Add(MySeriesElement2)
                     MyStackedAreaSeries1.Add(MySeriesElement3)
             
                     ' Add date time stacked area series to the plot area
                     MyPlotArea.Series.Add(MyStackedAreaSeries1)
            
                     ' Create a title and add it to the yaxis
                     Dim MyTitle3 As Title = New Title("Viewers (in millions)")
                     MyStackedAreaSeries1.YAxis.Titles.Add(MyTitle3)
            
                     ' set label  format for the axislabels
                     MyStackedAreaSeries1.XAxis.LabelFormat = "MMM"
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
             
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     //Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a date time stacked area series element and add values to it
                     DateTimeStackedAreaSeriesElement seriesElement1 = new DateTimeStackedAreaSeriesElement("Website A");
                     seriesElement1.Values.Add(5, new DateTime(2007, 1, 1));
                     seriesElement1.Values.Add(7, new DateTime(2007, 2, 1));
                     seriesElement1.Values.Add(9, new DateTime(2007, 3, 1));
                     seriesElement1.Values.Add(6, new DateTime(2007, 4, 1));
                     DateTimeStackedAreaSeriesElement seriesElement2 = new DateTimeStackedAreaSeriesElement("Website B");
                     seriesElement2.Values.Add(4, new DateTime(2007, 1, 1));
                     seriesElement2.Values.Add(2, new DateTime(2007, 2, 1));
                     seriesElement2.Values.Add(5, new DateTime(2007, 3, 1));
                     seriesElement2.Values.Add(8, new DateTime(2007, 4, 1));
                     DateTimeStackedAreaSeriesElement seriesElement3 = new DateTimeStackedAreaSeriesElement("Website C");
                     seriesElement3.Values.Add(2, new DateTime(2007, 1, 1));
                     seriesElement3.Values.Add(4, new DateTime(2007, 2, 1));
                     seriesElement3.Values.Add(6, new DateTime(2007, 3, 1));
                     seriesElement3.Values.Add(9, new DateTime(2007, 4, 1));
            
                     // Create a date time stacked area series and add date time stacked area series elements to it
                     DateTimeStackedAreaSeries stackedAreaSeries1 = new DateTimeStackedAreaSeries();
                     stackedAreaSeries1.Add(seriesElement1);
                     stackedAreaSeries1.Add(seriesElement2);
                     stackedAreaSeries1.Add(seriesElement3);
            
                     // Add date time stacked area series to the plot area
                     plotArea.Series.Add(stackedAreaSeries1);
            
                     // Create a title and add it to the yaxis
                     Title title3 = new Title("Viewers (in millions)");
                     stackedAreaSeries1.YAxis.Titles.Add(title3);
            
                     // set label list format for the axislabels
                     stackedAreaSeries1.XAxis.LabelFormat = "MMM";
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf");
                  }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.StackedAreaSeries">
            <summary>
            Represents a StackedAreaSeries.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedAreaSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedAreaSeries"/> object.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedAreaSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedAreaSeries"/> object.
            </summary>
            <param name="xAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis"/> of the dateTime stacked area series. </param>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the dateTime stacked area series. </param>               
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedAreaSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedAreaSeries"/> object.
            </summary>
            <param name="xAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis"/> of the dateTime stacked area series. </param>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the dateTime stacked area series. </param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the dateTime stacked area series </param>               
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedAreaSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedAreaSeries"/> object.
            </summary>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the dateTime stacked area series. </param>       
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedAreaSeries.Add(ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedAreaSeriesElement)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedAreaSeriesElement"/> object to the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedAreaSeries"/> elements list.
            </summary>
            <param name="element"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedAreaSeriesElement"/> object to be added.</param>                
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedAreaSeries.XAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis"/> of the series.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedAreaSeries.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedAreaSeriesElement"/> object at the given index.
            </summary>
            <param name="index">Position of the required date Time stacked area series element.</param>
            <returns>The <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedAreaSeriesElement"/> object. </returns>       
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedAreaSeries.YAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the series.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedAreaSeriesElement">
             <summary>
             Represents a DateTimeStackedAreaSeriesElement.
             </summary>
             <example>The following example creates a date time stacked area series elements and creates a date time stacked
             area series chart to it.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     'Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a date time stacked area series element and add values to it
                     Dim MySeriesElement1 As DateTimeStackedAreaSeriesElement = New DateTimeStackedAreaSeriesElement("Website A")
                     MySeriesElement1.Values.Add(5, New DateTime(2007, 1, 1))
                     MySeriesElement1.Values.Add(7, New DateTime(2007, 2, 1))
                     MySeriesElement1.Values.Add(9, New DateTime(2007, 3, 1))
                     MySeriesElement1.Values.Add(6, New DateTime(2007, 4, 1))
                     Dim MySeriesElement2 As DateTimeStackedAreaSeriesElement = New DateTimeStackedAreaSeriesElement("Website B")
                     MySeriesElement2.Values.Add(4, New DateTime(2007, 1, 1))
                     MySeriesElement2.Values.Add(2, New DateTime(2007, 2, 1))
                     MySeriesElement2.Values.Add(5, New DateTime(2007, 3, 1))
                     MySeriesElement2.Values.Add(8, New DateTime(2007, 4, 1))
                     Dim MySeriesElement3 As DateTimeStackedAreaSeriesElement = New DateTimeStackedAreaSeriesElement("Website C")
                     MySeriesElement3.Values.Add(2, New DateTime(2007, 1, 1))
                     MySeriesElement3.Values.Add(4, New DateTime(2007, 2, 1))
                     MySeriesElement3.Values.Add(6, New DateTime(2007, 3, 1))
                     MySeriesElement3.Values.Add(9, New DateTime(2007, 4, 1))
            
                     ' Create a date time stacked area series and add date time stacked area series elements to it
                     Dim MyStackedAreaSeries1 As DateTimeStackedAreaSeries = New DateTimeStackedAreaSeries()
                     MyStackedAreaSeries1.Add(MySeriesElement1)
                     MyStackedAreaSeries1.Add(MySeriesElement2)
                     MyStackedAreaSeries1.Add(MySeriesElement3)
             
                     ' Add date time stacked area series to the plot area
                     MyPlotArea.Series.Add(MyStackedAreaSeries1)
            
                     ' Create a title and add it to the yaxis
                     Dim MyTitle3 As Title = New Title("Viewers (in millions)")
                     MyStackedAreaSeries1.YAxis.Titles.Add(MyTitle3)
            
                     ' set label  format for the axislabels
                     MyStackedAreaSeries1.XAxis.LabelFormat = "MMM"
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
             
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     //Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a date time stacked area series element and add values to it
                     DateTimeStackedAreaSeriesElement seriesElement1 = new DateTimeStackedAreaSeriesElement("Website A");
                     seriesElement1.Values.Add(5, new DateTime(2007, 1, 1));
                     seriesElement1.Values.Add(7, new DateTime(2007, 2, 1));
                     seriesElement1.Values.Add(9, new DateTime(2007, 3, 1));
                     seriesElement1.Values.Add(6, new DateTime(2007, 4, 1));
                     DateTimeStackedAreaSeriesElement seriesElement2 = new DateTimeStackedAreaSeriesElement("Website B");
                     seriesElement2.Values.Add(4, new DateTime(2007, 1, 1));
                     seriesElement2.Values.Add(2, new DateTime(2007, 2, 1));
                     seriesElement2.Values.Add(5, new DateTime(2007, 3, 1));
                     seriesElement2.Values.Add(8, new DateTime(2007, 4, 1));
                     DateTimeStackedAreaSeriesElement seriesElement3 = new DateTimeStackedAreaSeriesElement("Website C");
                     seriesElement3.Values.Add(2, new DateTime(2007, 1, 1));
                     seriesElement3.Values.Add(4, new DateTime(2007, 2, 1));
                     seriesElement3.Values.Add(6, new DateTime(2007, 3, 1));
                     seriesElement3.Values.Add(9, new DateTime(2007, 4, 1));
            
                     // Create a date time stacked area series and add date time stacked area series elements to it
                     DateTimeStackedAreaSeries stackedAreaSeries1 = new DateTimeStackedAreaSeries();
                     stackedAreaSeries1.Add(seriesElement1);
                     stackedAreaSeries1.Add(seriesElement2);
                     stackedAreaSeries1.Add(seriesElement3);
            
                     // Add date time stacked area series to the plot area
                     plotArea.Series.Add(stackedAreaSeries1);
            
                     // Create a title and add it to the yaxis
                     Title title3 = new Title("Viewers (in millions)");
                     stackedAreaSeries1.YAxis.Titles.Add(title3);
            
                     // set label  format for the axislabels
                     stackedAreaSeries1.XAxis.LabelFormat = "MMM";
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf");
                  }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.StackedAreaSeriesElement">
            <summary>
            Represents a StackedAreaSeriesElement.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.StackedSeriesElement">
            <summary>
            Represents a StackedSeriesElement.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.StackedAreaSeriesElement.Marker">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.Series.StackedAreaSeriesElement.Marker"/> of the StackedAreaSeriesElement.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.StackedAreaSeriesElement.DataLabel">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.ValuePositionDataLabel"/> object to use for the DataLabel of the stacked series element. This is the
            default data label for the series element.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedAreaSeriesElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedAreaSeriesElement"/> object.
            </summary>
            <param name="name">Name of the dateTime stacked area series element.</param>        
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedAreaSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedAreaSeriesElement"/> object.
            </summary>
            <param name="name">  Name of the dateTime stacked area series element.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the dateTime stacked area series element. </param>       
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedAreaSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
             Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedAreaSeriesElement"/> object.
            </summary>
            <param name="name"> Name of the dateTime stacked area series element.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the dateTime stacked area series element.</param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the dateTime stacked area series element.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedAreaSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Marker)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedAreaSeriesElement"/> object.
            </summary>
            <param name="name"> Name of the dateTime stacked area series element. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the dateTime stacked area series element. </param>
            <param name="marker"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Marker"/> of the dateTime stacked area series element. </param>        
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedAreaSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Marker,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedAreaSeriesElement"/> object.
            </summary>
            <param name="name"> Name of the dateTime stacked area series element.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the dateTime stacked area series element.</param>
            <param name="marker"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Marker"/> of the dateTime stacked area series element.</param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the dateTime stacked area series element.</param>        
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedAreaSeriesElement.Values">
            <summary>
            Gets the DateTimeStackedAreaValueList from the DateTimeStackedAreaSeriesElement.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedBarSeries">
             <summary>
             This class represents the DateTimeStackedBarSeries.
             </summary>
             <example>The following example creates a date time stacked bar series chart.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
            
             Module MyModule
                
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a date time stacked bar series element and add values to it
                     Dim MySeriesElement1 As DateTimeStackedBarSeriesElement = New DateTimeStackedBarSeriesElement("Website A")
                     MySeriesElement1.Values.Add(5, New DateTime(2007, 1, 1))
                     MySeriesElement1.Values.Add(7, New DateTime(2007, 2, 1))
                     MySeriesElement1.Values.Add(9, New DateTime(2007, 3, 1))
                     MySeriesElement1.Values.Add(6, New DateTime(2007, 4, 1))
                     Dim MySeriesElement2 As DateTimeStackedBarSeriesElement = New DateTimeStackedBarSeriesElement("Website B")
                     MySeriesElement2.Values.Add(4, New DateTime(2007, 1, 1))
                     MySeriesElement2.Values.Add(2, New DateTime(2007, 2, 1))
                     MySeriesElement2.Values.Add(5, New DateTime(2007, 3, 1))
                     MySeriesElement2.Values.Add(8, New DateTime(2007, 4, 1))
                     Dim MySeriesElement3 As DateTimeStackedBarSeriesElement = New DateTimeStackedBarSeriesElement("Website C")
                     MySeriesElement3.Values.Add(2, New DateTime(2007, 1, 1))
                     MySeriesElement3.Values.Add(4, New DateTime(2007, 2, 1))
                     MySeriesElement3.Values.Add(6, New DateTime(2007, 3, 1))
                     MySeriesElement3.Values.Add(9, New DateTime(2007, 4, 1))
            
                     ' Create a date time stacked bar series and add date time stacked bar series elements to it
                     Dim MyStackedBarSeries1 As DateTimeStackedBarSeries = New DateTimeStackedBarSeries()
                     MyStackedBarSeries1.Add(MySeriesElement1)
                     MyStackedBarSeries1.Add(MySeriesElement2)
                     MyStackedBarSeries1.Add(MySeriesElement3)
            
                     ' Add date time stacked bar series to the plot area
                     MyPlotArea.Series.Add(MyStackedBarSeries1)
            
                     ' Create a title and add it to the Xaxis
                     Dim MyTitle3 As Title = New Title("Viewers")
                     MyStackedBarSeries1.XAxis.Titles.Add(MyTitle3)
            
                     ' Set label  format for axis labels
                     MyStackedBarSeries1.YAxis.LabelFormat = "MMM"
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a date time stacked bar series element and add values to it
                     DateTimeStackedBarSeriesElement seriesElement1 = new DateTimeStackedBarSeriesElement("Website A");
                     seriesElement1.Values.Add(5, new DateTime(2007, 1, 1));
                     seriesElement1.Values.Add(7, new DateTime(2007, 2, 1));
                     seriesElement1.Values.Add(9, new DateTime(2007, 3, 1));
                     seriesElement1.Values.Add(6, new DateTime(2007, 4, 1));
                     DateTimeStackedBarSeriesElement seriesElement2 = new DateTimeStackedBarSeriesElement("Website B");
                     seriesElement2.Values.Add(4, new DateTime(2007, 1, 1));
                     seriesElement2.Values.Add(2, new DateTime(2007, 2, 1));
                     seriesElement2.Values.Add(5, new DateTime(2007, 3, 1));
                     seriesElement2.Values.Add(8, new DateTime(2007, 4, 1));
                     DateTimeStackedBarSeriesElement seriesElement3 = new DateTimeStackedBarSeriesElement("Website C");
                     seriesElement3.Values.Add(2, new DateTime(2007, 1, 1));
                     seriesElement3.Values.Add(4, new DateTime(2007, 2, 1));
                     seriesElement3.Values.Add(6, new DateTime(2007, 3, 1));
                     seriesElement3.Values.Add(9, new DateTime(2007, 4, 1));
            
                     // Create a date time stacked bar series and add date time stacked bar series elements to it
                     DateTimeStackedBarSeries stackedBarSeries1 = new DateTimeStackedBarSeries();
                     stackedBarSeries1.Add(seriesElement1);
                     stackedBarSeries1.Add(seriesElement2);
                     stackedBarSeries1.Add(seriesElement3);
            
                     // Add date time stacked bar series to the plot area
                     plotArea.Series.Add(stackedBarSeries1);
            
                     // Create a title and add it to the Xaxis
                     Title title3 = new Title("Viewers");
                     stackedBarSeries1.XAxis.Titles.Add(title3);
            
                     // Set label  format for axis labels
                     stackedBarSeries1.YAxis.LabelFormat = "MMM";
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf"); 
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.StackedBarSeries">
            <summary>
            The base class from which the date-time and indexed StackedBarSeries are derived.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedBarSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedBarSeries"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedBarSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedBarSeries"/> class.
            </summary>
            <param name="numericXAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis"/> of the date time stacked bar series.</param>
            <param name="dateTimeYAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxis"/> of the date time stacked bar series.</param>        
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedBarSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxis,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedBarSeries"/> class.
            </summary>
            <param name="numericXAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis"/> of the date time stacked bar series.</param>
            <param name="dateTimeYAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxis"/> of the date time stacked bar series.</param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the date time stacked bar series.</param>                  
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedBarSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedBarSeries"/> class.
            </summary>
            <param name="numericXAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis"/> of the date time stacked bar series.</param>             
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedBarSeries.Add(ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedBarSeriesElement)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedBarSeriesElement"/> object to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedBarSeries"/> element list.
            </summary>
            <param name="dateTimeStackedBarSeriesElement"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedBarSeriesElement"/> object to be added.</param>      
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedBarSeries.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedBarSeriesElement"/> object at the given index.
            </summary>
            <param name="index">Position of the required Date Time Stacked Bar Series Element.</param>
            <returns>The <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedBarSeriesElement"/> object.</returns>       
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedBarSeries.XAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis"/> of the series.
            </summary>		
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedBarSeries.YAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeYAxis"/> of the series.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedBarSeriesElement">
             <summary>
             This class represents the DateTimeStackedBarSeriesElement.
             </summary>
             <example>The following example creates a date time stacked bar series elements and creates a date time stacked
             bar series chart to it.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
            
             Module MyModule
                
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a date time stacked bar series element and add values to it
                     Dim MySeriesElement1 As DateTimeStackedBarSeriesElement = New DateTimeStackedBarSeriesElement("Website A")
                     MySeriesElement1.Values.Add(5, New DateTime(2007, 1, 1))
                     MySeriesElement1.Values.Add(7, New DateTime(2007, 2, 1))
                     MySeriesElement1.Values.Add(9, New DateTime(2007, 3, 1))
                     MySeriesElement1.Values.Add(6, New DateTime(2007, 4, 1))
                     Dim MySeriesElement2 As DateTimeStackedBarSeriesElement = New DateTimeStackedBarSeriesElement("Website B")
                     MySeriesElement2.Values.Add(4, New DateTime(2007, 1, 1))
                     MySeriesElement2.Values.Add(2, New DateTime(2007, 2, 1))
                     MySeriesElement2.Values.Add(5, New DateTime(2007, 3, 1))
                     MySeriesElement2.Values.Add(8, New DateTime(2007, 4, 1))
                     Dim MySeriesElement3 As DateTimeStackedBarSeriesElement = New DateTimeStackedBarSeriesElement("Website C")
                     MySeriesElement3.Values.Add(2, New DateTime(2007, 1, 1))
                     MySeriesElement3.Values.Add(4, New DateTime(2007, 2, 1))
                     MySeriesElement3.Values.Add(6, New DateTime(2007, 3, 1))
                     MySeriesElement3.Values.Add(9, New DateTime(2007, 4, 1))
            
                     ' Create a date time stacked bar series and add date time stacked bar series elements to it
                     Dim MyStackedBarSeries1 As DateTimeStackedBarSeries = New DateTimeStackedBarSeries()
                     MyStackedBarSeries1.Add(MySeriesElement1)
                     MyStackedBarSeries1.Add(MySeriesElement2)
                     MyStackedBarSeries1.Add(MySeriesElement3)
            
                     ' Add date time stacked bar series to the plot area
                     MyPlotArea.Series.Add(MyStackedBarSeries1)
            
                     ' Create a title and add it to the Xaxis
                     Dim MyTitle3 As Title = New Title("Viewers")
                     MyStackedBarSeries1.XAxis.Titles.Add(MyTitle3)
            
                     ' Set label  format for axis labels
                     MyStackedBarSeries1.YAxis.LabelFormat = "MMM"
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a date time stacked bar series element and add values to it
                     DateTimeStackedBarSeriesElement seriesElement1 = new DateTimeStackedBarSeriesElement("Website A");
                     seriesElement1.Values.Add(5, new DateTime(2007, 1, 1));
                     seriesElement1.Values.Add(7, new DateTime(2007, 2, 1));
                     seriesElement1.Values.Add(9, new DateTime(2007, 3, 1));
                     seriesElement1.Values.Add(6, new DateTime(2007, 4, 1));
                     DateTimeStackedBarSeriesElement seriesElement2 = new DateTimeStackedBarSeriesElement("Website B");
                     seriesElement2.Values.Add(4, new DateTime(2007, 1, 1));
                     seriesElement2.Values.Add(2, new DateTime(2007, 2, 1));
                     seriesElement2.Values.Add(5, new DateTime(2007, 3, 1));
                     seriesElement2.Values.Add(8, new DateTime(2007, 4, 1));
                     DateTimeStackedBarSeriesElement seriesElement3 = new DateTimeStackedBarSeriesElement("Website C");
                     seriesElement3.Values.Add(2, new DateTime(2007, 1, 1));
                     seriesElement3.Values.Add(4, new DateTime(2007, 2, 1));
                     seriesElement3.Values.Add(6, new DateTime(2007, 3, 1));
                     seriesElement3.Values.Add(9, new DateTime(2007, 4, 1));
            
                     // Create a date time stacked bar series and add date time stacked bar series elements to it
                     DateTimeStackedBarSeries stackedBarSeries1 = new DateTimeStackedBarSeries();
                     stackedBarSeries1.Add(seriesElement1);
                     stackedBarSeries1.Add(seriesElement2);
                     stackedBarSeries1.Add(seriesElement3);
            
                     // Add date time stacked bar series to the plot area
                     plotArea.Series.Add(stackedBarSeries1);
            
                     // Create a title and add it to the Xaxis
                     Title title3 = new Title("Viewers");
                     stackedBarSeries1.XAxis.Titles.Add(title3);
            
                     // Set label  format for axis labels
                     stackedBarSeries1.YAxis.LabelFormat = "MMM";
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf"); 
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.StackedBarSeriesElement">
            <summary>
            The base class from which the date-time and indexed StackedBarSeriesElements are derived.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.StackedBarSeriesElement.BorderWidth">
            <summary>
            Gets or sets the BorderWidth of the StackedBarSeriesElement.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.StackedBarSeriesElement.DataLabel">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.BarColumnValuePositionDataLabel"/> object to use for the DataLabel of the stacked series element. This is the
            default data label for the series element.
            </summary>
            <p/><b>NOTE:</b> Prior to Version 6.0 DataLabel was of type ValuePositionDataLabel.
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.StackedBarSeriesElement.BorderColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the borders of the StackedBarSeriesElement.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedBarSeriesElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedBarSeriesElement"/> class.
            </summary>
            <param name="name"> Name of the date time stacked bar series element.</param>        
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedBarSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedBarSeriesElement"/> class.
            </summary>
            <param name="name"> Name of the date time stacked bar series element. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the date time stacked bar series element.</param>       
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedBarSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedBarSeriesElement"/> class.
            </summary>
            <param name="name">Name of the date time stacked bar series element. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the date time stacked bar series element. </param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the date time stacked bar series element. </param>      
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedBarSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedBarSeriesElement"/> class.
            </summary>
            <param name="name">Name of the date time stacked bar series element.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the date time stacked bar series element.</param>
            <param name="borderWidth">Border width of the date time stacked bar series element.</param>       
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedBarSeriesElement.#ctor(System.String,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedBarSeriesElement"/> class.
            </summary>
            <param name="name"> Name of the date time stacked bar series element.</param>
            <param name="borderWidth"> Border width of the date time stacked bar series element.</param>
            <param name="borderColor"> Border <see cref="T:ceTe.DynamicPDF.Color"/> of the date time stacked bar series element.</param>       
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedBarSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedBarSeriesElement"/> class.
            </summary>
            <param name="name"> Name of the date time stacked bar series element.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of date time stacked bar series element. </param>
            <param name="borderWidth">Border width of the date time stacked bar series element. </param>
            <param name="borderColor">Border <see cref="T:ceTe.DynamicPDF.Color"/> of the date time stacked bar series element. </param>       
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedBarSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedBarSeriesElement"/> class.
            </summary>
            <param name="name"> Name of the date time stacked bar series element. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the date time stacked bar series element. </param>
            <param name="borderWidth">Border width of the date time stacked bar series element. </param>
            <param name="borderColor"> Border <see cref="T:ceTe.DynamicPDF.Color"/> of the date time stacked bar series element. </param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the date time stacked bar series element. </param>        
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedBarSeriesElement.Values">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedBarValueList"/> object contained in the DateTimeStackedBarSeriesElement.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedColumnSeries">
             <summary>
             Represents a DateTimeStackedColumnSeries.
             </summary>
             <example>The following example creates a date time stacked column series chart.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series    
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
             
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a date time stacked column series element and add values to it
                     Dim MySeriesElement1 As DateTimeStackedColumnSeriesElement = New DateTimeStackedColumnSeriesElement("Website A")
                     MySeriesElement1.Values.Add(5, New DateTime(2007, 1, 1))
                     MySeriesElement1.Values.Add(7, New DateTime(2007, 2, 1))
                     MySeriesElement1.Values.Add(9, New DateTime(2007, 3, 1))
                     MySeriesElement1.Values.Add(6, New DateTime(2007, 4, 1))
                     Dim MySeriesElement2 As DateTimeStackedColumnSeriesElement = New DateTimeStackedColumnSeriesElement("Website B")
                     MySeriesElement2.Values.Add(4, New DateTime(2007, 1, 1))
                     MySeriesElement2.Values.Add(2, New DateTime(2007, 2, 1))
                     MySeriesElement2.Values.Add(5, New DateTime(2007, 3, 1))
                     MySeriesElement2.Values.Add(8, New DateTime(2007, 4, 1))
                     Dim MySeriesElement3 As DateTimeStackedColumnSeriesElement = New DateTimeStackedColumnSeriesElement("Website C")
                     MySeriesElement3.Values.Add(2, New DateTime(2007, 1, 1))
                     MySeriesElement3.Values.Add(4, New DateTime(2007, 2, 1))
                     MySeriesElement3.Values.Add(6, New DateTime(2007, 3, 1))
                     MySeriesElement3.Values.Add(9, New DateTime(2007, 4, 1))
            
                     ' Create a date time stacked column series and add date time stacked column series elements to it
                     Dim MyStackedColumnSeries1 As DateTimeStackedColumnSeries = New DateTimeStackedColumnSeries()
                     MyStackedColumnSeries1.Add(MySeriesElement1)
                     MyStackedColumnSeries1.Add(MySeriesElement2)
                     MyStackedColumnSeries1.Add(MySeriesElement3)
            
                     ' Add date time stacked column series to plot area 
                     MyPlotArea.Series.Add(MyStackedColumnSeries1)
            
                     ' Create a title and add it to the yaxis
                     Dim MyTitle3 As Title = New Title("Viewers (in millions)")
                     MyStackedColumnSeries1.YAxis.Titles.Add(MyTitle3)
            
                     ' set label  format for the axislabels
                     MyStackedColumnSeries1.XAxis.LabelFormat = "MMM"
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     //Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a date time stacked column series element and add values to it
                     DateTimeStackedColumnSeriesElement seriesElement1 = new DateTimeStackedColumnSeriesElement("Website A");
                     seriesElement1.Values.Add(5, new DateTime(2007, 1, 1));
                     seriesElement1.Values.Add(7, new DateTime(2007, 2, 1));
                     seriesElement1.Values.Add(9, new DateTime(2007, 3, 1));
                     seriesElement1.Values.Add(6, new DateTime(2007, 4, 1));
                     DateTimeStackedColumnSeriesElement seriesElement2 = new DateTimeStackedColumnSeriesElement("Website B");
                     seriesElement2.Values.Add(4, new DateTime(2007, 1, 1));
                     seriesElement2.Values.Add(2, new DateTime(2007, 2, 1));
                     seriesElement2.Values.Add(5, new DateTime(2007, 3, 1));
                     seriesElement2.Values.Add(8, new DateTime(2007, 4, 1));
                     DateTimeStackedColumnSeriesElement seriesElement3 = new DateTimeStackedColumnSeriesElement("Website C");
                     seriesElement3.Values.Add(2, new DateTime(2007, 1, 1));
                     seriesElement3.Values.Add(4, new DateTime(2007, 2, 1));
                     seriesElement3.Values.Add(6, new DateTime(2007, 3, 1));
                     seriesElement3.Values.Add(9, new DateTime(2007, 4, 1));
            
                     // Create a date time stacked column series and add date time stacked column series elements to it
                     DateTimeStackedColumnSeries stackedColumnSeries1 = new DateTimeStackedColumnSeries();
                     stackedColumnSeries1.Add(seriesElement1);
                     stackedColumnSeries1.Add(seriesElement2);
                     stackedColumnSeries1.Add(seriesElement3);
            
                     // Add date time stacked column series to plot area 
                     plotArea.Series.Add(stackedColumnSeries1);
            
                     // Create a title and add it to the yaxis
                     Title title3 = new Title("Viewers (in millions)");
                     stackedColumnSeries1.YAxis.Titles.Add(title3);
            
                     // set label  format for the axislabels
                     stackedColumnSeries1.XAxis.LabelFormat = "MMM";
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.StackedColumnSeries">
            <summary>
            The base class from which the date-time and indexed StackedColumnSeries are derived.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedColumnSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedColumnSeries"/> class. 
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedColumnSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedColumnSeries"/> class. 
            </summary>
            <param name="dateTimeXAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis"/> of the date time stacked column series. </param>
            <param name="numericYAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the date time stacked column series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedColumnSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedColumnSeries"/> class.
            </summary>
            <param name="dateTimeXAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis"/> of the date time stacked column series. </param>
            <param name="numericYAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the date time stacked column series. </param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of date time stacked column series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedColumnSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedColumnSeries"/> class. 
            </summary>
            <param name="numericYAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the date time stacked column series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedColumnSeries.Add(ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedColumnSeriesElement)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedColumnSeriesElement"/> object to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedColumnSeries"/> element list.
            </summary>
            <param name="dateTimeStackedColumnSeriesElement"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedColumnSeriesElement"/> to be added.  </param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedColumnSeries.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedColumnSeriesElement"/> object at the given index.
            </summary>
            <param name="index">Position of the required Date Time Stacked Column Series Element. </param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedColumnSeries.YAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the series. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedColumnSeries.XAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis"/> of the series. 
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedColumnSeriesElement">
             <summary>
             Represents a DateTimeStackedColumnSeriesElement.
             </summary>
             <example>The following example creates a date time stacked column series element and adds it to
             date time stacked column series chart.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series    
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
             
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a date time stacked column series element and add values to it
                     Dim MySeriesElement1 As DateTimeStackedColumnSeriesElement = New DateTimeStackedColumnSeriesElement("Website A")
                     MySeriesElement1.Values.Add(5, New DateTime(2007, 1, 1))
                     MySeriesElement1.Values.Add(7, New DateTime(2007, 2, 1))
                     MySeriesElement1.Values.Add(9, New DateTime(2007, 3, 1))
                     MySeriesElement1.Values.Add(6, New DateTime(2007, 4, 1))
                     Dim MySeriesElement2 As DateTimeStackedColumnSeriesElement = New DateTimeStackedColumnSeriesElement("Website B")
                     MySeriesElement2.Values.Add(4, New DateTime(2007, 1, 1))
                     MySeriesElement2.Values.Add(2, New DateTime(2007, 2, 1))
                     MySeriesElement2.Values.Add(5, New DateTime(2007, 3, 1))
                     MySeriesElement2.Values.Add(8, New DateTime(2007, 4, 1))
                     Dim MySeriesElement3 As DateTimeStackedColumnSeriesElement = New DateTimeStackedColumnSeriesElement("Website C")
                     MySeriesElement3.Values.Add(2, New DateTime(2007, 1, 1))
                     MySeriesElement3.Values.Add(4, New DateTime(2007, 2, 1))
                     MySeriesElement3.Values.Add(6, New DateTime(2007, 3, 1))
                     MySeriesElement3.Values.Add(9, New DateTime(2007, 4, 1))
            
                     ' Create a date time stacked column series and add date time stacked column series elements to it
                     Dim MyStackedColumnSeries1 As DateTimeStackedColumnSeries = New DateTimeStackedColumnSeries()
                     MyStackedColumnSeries1.Add(MySeriesElement1)
                     MyStackedColumnSeries1.Add(MySeriesElement2)
                     MyStackedColumnSeries1.Add(MySeriesElement3)
            
                     ' Add date time stacked column series to plot area 
                     MyPlotArea.Series.Add(MyStackedColumnSeries1)
            
                     ' Create a title and add it to the yaxis
                     Dim MyTitle3 As Title = New Title("Viewers (in millions)")
                     MyStackedColumnSeries1.YAxis.Titles.Add(MyTitle3)
            
                     ' set label  format for the axislabels
                     MyStackedColumnSeries1.XAxis.LabelFormat = "MMM"
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     //Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a date time stacked column series element and add values to it
                     DateTimeStackedColumnSeriesElement seriesElement1 = new DateTimeStackedColumnSeriesElement("Website A");
                     seriesElement1.Values.Add(5, new DateTime(2007, 1, 1));
                     seriesElement1.Values.Add(7, new DateTime(2007, 2, 1));
                     seriesElement1.Values.Add(9, new DateTime(2007, 3, 1));
                     seriesElement1.Values.Add(6, new DateTime(2007, 4, 1));
                     DateTimeStackedColumnSeriesElement seriesElement2 = new DateTimeStackedColumnSeriesElement("Website B");
                     seriesElement2.Values.Add(4, new DateTime(2007, 1, 1));
                     seriesElement2.Values.Add(2, new DateTime(2007, 2, 1));
                     seriesElement2.Values.Add(5, new DateTime(2007, 3, 1));
                     seriesElement2.Values.Add(8, new DateTime(2007, 4, 1));
                     DateTimeStackedColumnSeriesElement seriesElement3 = new DateTimeStackedColumnSeriesElement("Website C");
                     seriesElement3.Values.Add(2, new DateTime(2007, 1, 1));
                     seriesElement3.Values.Add(4, new DateTime(2007, 2, 1));
                     seriesElement3.Values.Add(6, new DateTime(2007, 3, 1));
                     seriesElement3.Values.Add(9, new DateTime(2007, 4, 1));
            
                     // Create a date time stacked column series and add date time stacked column series elements to it
                     DateTimeStackedColumnSeries stackedColumnSeries1 = new DateTimeStackedColumnSeries();
                     stackedColumnSeries1.Add(seriesElement1);
                     stackedColumnSeries1.Add(seriesElement2);
                     stackedColumnSeries1.Add(seriesElement3);
            
                     // Add date time stacked column series to plot area 
                     plotArea.Series.Add(stackedColumnSeries1);
            
                     // Create a title and add it to the yaxis
                     Title title3 = new Title("Viewers (in millions)");
                     stackedColumnSeries1.YAxis.Titles.Add(title3);
            
                     // set label  format for the axislabels
                     stackedColumnSeries1.XAxis.LabelFormat = "MMM";
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.StackedColumnSeriesElement">
            <summary>
            The base class from which the date-time and indexed StackedColumnSeriesElements are derived.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.StackedColumnSeriesElement.BorderWidth">
            <summary>
            Gets or sets the BorderWidth of the StackedColumnSeriesElement.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.StackedColumnSeriesElement.DataLabel">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.BarColumnValuePositionDataLabel"/> object to use for the DataLabel of the stacked series element. This is the
            default data label for the series element.
            </summary>
            <p/><b>NOTE:</b> Prior to Version 6.0 DataLabel was of type ValuePositionDataLabel.
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.StackedColumnSeriesElement.BorderColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> to use for the borders of the StackedColumnSeriesElement.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedColumnSeriesElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedColumnSeriesElement"/> class. 
            </summary>
            <param name="name">Name of the date time stacked column series element. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedColumnSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedColumnSeriesElement"/> class. 
            </summary>
            <param name="name">Name of the date time stacked column series element. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the date time stacked column series element. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedColumnSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedColumnSeriesElement"/> class.
            </summary>
            <param name="name">Name of the date time stacked column series element. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the date time stacked column series element. </param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the date time stacked column series element. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedColumnSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedColumnSeriesElement"/> class. 
            </summary>
            <param name="name">Name of the date time stacked column series element. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the date time stacked column series element. </param>
            <param name="borderWidth">Border width of the date time stacked column series element. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedColumnSeriesElement.#ctor(System.String,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedColumnSeriesElement"/> class. 
            </summary>
            <param name="name">Name of the date time stacked column series element. </param>
            <param name="borderWidth">Border width of the date time stacked column series element. </param>
            <param name="borderColor">Border<see cref="T:ceTe.DynamicPDF.Color"/> of the date time stacked column series element. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedColumnSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedColumnSeriesElement"/> class. 
            </summary>
            <param name="name">Name of the date time stacked column series element. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the date time stacked column series element. </param>
            <param name="borderWidth">Border width of the date time stacked column series element. </param>
            <param name="borderColor">Border <see cref="T:ceTe.DynamicPDF.Color"/> of the date time stacked column series element. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedColumnSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedColumnSeriesElement"/> class. 
            </summary>
            <param name="name">Name of the date time stacked column series element. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the date time stacked column series element. </param>
            <param name="borderWidth">Border width of the date time stacked column series element. </param>
            <param name="borderColor">Border <see cref="T:ceTe.DynamicPDF.Color"/> of the date time stacked column series element. </param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the date time stacked column series element. </param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedColumnSeriesElement.Values">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedColumnValueList"/> object contained in the DateTimeStackedColumnSeriesElement.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedLineSeries">
             <summary>
             Represents a DateTimeStackedLineSeries.
             </summary>
             <example>The following example creates a date time stacked line series chart.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
                
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a date time stacked line series element and add values to it
                     Dim MySeriesElement1 As DateTimeStackedLineSeriesElement = New DateTimeStackedLineSeriesElement("Website A")
                     MySeriesElement1.Values.Add(5, New DateTime(2007, 1, 1))
                     MySeriesElement1.Values.Add(7, New DateTime(2007, 2, 1))
                     MySeriesElement1.Values.Add(9, New DateTime(2007, 3, 1))
                     MySeriesElement1.Values.Add(6, New DateTime(2007, 4, 1))
                     Dim MySeriesElement2 As DateTimeStackedLineSeriesElement = New DateTimeStackedLineSeriesElement("Website B")
                     MySeriesElement2.Values.Add(4, New DateTime(2007, 1, 1))
                     MySeriesElement2.Values.Add(2, New DateTime(2007, 2, 1))
                     MySeriesElement2.Values.Add(5, New DateTime(2007, 3, 1))
                     MySeriesElement2.Values.Add(8, New DateTime(2007, 4, 1))
                     Dim MySeriesElement3 As DateTimeStackedLineSeriesElement = New DateTimeStackedLineSeriesElement("Website C")
                     MySeriesElement3.Values.Add(2, New DateTime(2007, 1, 1))
                     MySeriesElement3.Values.Add(4, New DateTime(2007, 2, 1))
                     MySeriesElement3.Values.Add(6, New DateTime(2007, 3, 1))
                     MySeriesElement3.Values.Add(9, New DateTime(2007, 4, 1))
            
                     ' Create a date time stacked line series and add date time stacked line series elements to it
                     Dim MyStackedLineSeries1 As DateTimeStackedLineSeries = New DateTimeStackedLineSeries()
                     MyStackedLineSeries1.Add(MySeriesElement1)
                     MyStackedLineSeries1.Add(MySeriesElement2)
                     MyStackedLineSeries1.Add(MySeriesElement3)
            
                     ' Add date time stacked line series to plot area
                     MyPlotArea.Series.Add(MyStackedLineSeries1)
            
                     ' set label  format for the axislabels
                     MyStackedLineSeries1.XAxis.LabelFormat = "MMM"
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             class MyClass
             {
                 static void Main()
                 { 
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a date time stacked line series element and add values to it
                     DateTimeStackedLineSeriesElement seriesElement1 = new DateTimeStackedLineSeriesElement("Website A");
                     seriesElement1.Values.Add(5, new DateTime(2007, 1, 1));
                     seriesElement1.Values.Add(7, new DateTime(2007, 2, 1));
                     seriesElement1.Values.Add(9, new DateTime(2007, 3, 1));
                     seriesElement1.Values.Add(6, new DateTime(2007, 4, 1));
                     DateTimeStackedLineSeriesElement seriesElement2 = new DateTimeStackedLineSeriesElement("Website B");
                     seriesElement2.Values.Add(4, new DateTime(2007, 1, 1));
                     seriesElement2.Values.Add(2, new DateTime(2007, 2, 1));
                     seriesElement2.Values.Add(5, new DateTime(2007, 3, 1));
                     seriesElement2.Values.Add(8, new DateTime(2007, 4, 1));
                     DateTimeStackedLineSeriesElement seriesElement3 = new DateTimeStackedLineSeriesElement("Website C");
                     seriesElement3.Values.Add(2, new DateTime(2007, 1, 1));
                     seriesElement3.Values.Add(4, new DateTime(2007, 2, 1));
                     seriesElement3.Values.Add(6, new DateTime(2007, 3, 1));
                     seriesElement3.Values.Add(9, new DateTime(2007, 4, 1));
            
                     // Create a date time stacked line series and add date time stacked line series elements to it
                     DateTimeStackedLineSeries stackedLineSeries1 = new DateTimeStackedLineSeries();
                     stackedLineSeries1.Add(seriesElement1);
                     stackedLineSeries1.Add(seriesElement2);
                     stackedLineSeries1.Add(seriesElement3);
            
                     // Add date time stacked line series to plot area
                     plotArea.Series.Add(stackedLineSeries1);
            
                     // set label  format for the axislabels
                     stackedLineSeries1.XAxis.LabelFormat = "MMM";
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.StackedLineSeries">
            <summary>
            Represents a StackedLineSeries.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedLineSeries.#ctor">
             <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedLineSeries"/> object.
             </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedLineSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedLineSeries"/> object.
            </summary>
            <param name="xAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis"/> of the dateTime stacked line series. </param>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the dateTime stacked line series</param>        
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedLineSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedLineSeries"/> object.
            </summary>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the dateTime stacked line series.</param>       
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedLineSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedLineSeries"/> object.
            </summary>
            <param name="xAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis"/> of the dateTime stacked line series. </param>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the dateTime stacked line series </param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the dateTime stacked line series</param>               
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedLineSeries.Add(ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedLineSeriesElement)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedLineSeriesElement"/> object to the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedLineSeries"/> elements list.
            </summary>
            <param name="element"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedLineSeriesElement"/> object to be added.</param>        
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedLineSeries.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedLineSeriesElement"/> object at the given index.
            </summary>
            <param name="index">Position of the required date Time stacked line series element. </param>
            <returns> The <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedLineSeriesElement"/> object. </returns>              
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedLineSeries.YAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the series.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedLineSeries.XAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.DateTimeXAxis"/> of the series.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedLineSeriesElement">
             <summary>
             Represents a DateTimeStackedLineSeriesElement.
             </summary>
             <example>The following example creates a date time stacked line series elements and creates a date time stacked
             line series chart to it.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
                
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a date time stacked line series element and add values to it
                     Dim MySeriesElement1 As DateTimeStackedLineSeriesElement = New DateTimeStackedLineSeriesElement("Website A")
                     MySeriesElement1.Values.Add(5, New DateTime(2007, 1, 1))
                     MySeriesElement1.Values.Add(7, New DateTime(2007, 2, 1))
                     MySeriesElement1.Values.Add(9, New DateTime(2007, 3, 1))
                     MySeriesElement1.Values.Add(6, New DateTime(2007, 4, 1))
                     Dim MySeriesElement2 As DateTimeStackedLineSeriesElement = New DateTimeStackedLineSeriesElement("Website B")
                     MySeriesElement2.Values.Add(4, New DateTime(2007, 1, 1))
                     MySeriesElement2.Values.Add(2, New DateTime(2007, 2, 1))
                     MySeriesElement2.Values.Add(5, New DateTime(2007, 3, 1))
                     MySeriesElement2.Values.Add(8, New DateTime(2007, 4, 1))
                     Dim MySeriesElement3 As DateTimeStackedLineSeriesElement = New DateTimeStackedLineSeriesElement("Website C")
                     MySeriesElement3.Values.Add(2, New DateTime(2007, 1, 1))
                     MySeriesElement3.Values.Add(4, New DateTime(2007, 2, 1))
                     MySeriesElement3.Values.Add(6, New DateTime(2007, 3, 1))
                     MySeriesElement3.Values.Add(9, New DateTime(2007, 4, 1))
            
                     ' Create a date time stacked line series and add date time stacked line series elements to it
                     Dim MyStackedLineSeries1 As DateTimeStackedLineSeries = New DateTimeStackedLineSeries()
                     MyStackedLineSeries1.Add(MySeriesElement1)
                     MyStackedLineSeries1.Add(MySeriesElement2)
                     MyStackedLineSeries1.Add(MySeriesElement3)
            
                     ' Add date time stacked line series to plot area
                     MyPlotArea.Series.Add(MyStackedLineSeries1)
            
                     ' set label  format for the axislabels
                     MyStackedLineSeries1.XAxis.LabelFormat = "MMM"
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             class MyClass
             {
                 static void Main()
                 { 
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a date time stacked line series element and add values to it
                     DateTimeStackedLineSeriesElement seriesElement1 = new DateTimeStackedLineSeriesElement("Website A");
                     seriesElement1.Values.Add(5, new DateTime(2007, 1, 1));
                     seriesElement1.Values.Add(7, new DateTime(2007, 2, 1));
                     seriesElement1.Values.Add(9, new DateTime(2007, 3, 1));
                     seriesElement1.Values.Add(6, new DateTime(2007, 4, 1));
                     DateTimeStackedLineSeriesElement seriesElement2 = new DateTimeStackedLineSeriesElement("Website B");
                     seriesElement2.Values.Add(4, new DateTime(2007, 1, 1));
                     seriesElement2.Values.Add(2, new DateTime(2007, 2, 1));
                     seriesElement2.Values.Add(5, new DateTime(2007, 3, 1));
                     seriesElement2.Values.Add(8, new DateTime(2007, 4, 1));
                     DateTimeStackedLineSeriesElement seriesElement3 = new DateTimeStackedLineSeriesElement("Website C");
                     seriesElement3.Values.Add(2, new DateTime(2007, 1, 1));
                     seriesElement3.Values.Add(4, new DateTime(2007, 2, 1));
                     seriesElement3.Values.Add(6, new DateTime(2007, 3, 1));
                     seriesElement3.Values.Add(9, new DateTime(2007, 4, 1));
            
                     // Create a date time stacked line series and add date time stacked line series elements to it
                     DateTimeStackedLineSeries stackedLineSeries1 = new DateTimeStackedLineSeries();
                     stackedLineSeries1.Add(seriesElement1);
                     stackedLineSeries1.Add(seriesElement2);
                     stackedLineSeries1.Add(seriesElement3);
            
                     // Add date time stacked line series to plot area
                     plotArea.Series.Add(stackedLineSeries1);
            
                     // set label  format for the axislabels
                     stackedLineSeries1.XAxis.LabelFormat = "MMM";
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.StackedLineSeriesElement">
            <summary>
            Represents a StackedLineSeriesElement.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.StackedLineSeriesElement.Marker">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.Series.StackedLineSeriesElement.Marker"/> of the StackedLineSeriesElement.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.StackedLineSeriesElement.DataLabel">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.ValuePositionDataLabel"/> object to use for the DataLabel of the stacked series element. This is the
            default data label for the series element.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.StackedLineSeriesElement.LineCap">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.Series.StackedLineSeriesElement.LineCap"/> of the StackedLineSeriesElement.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.StackedLineSeriesElement.LineJoin">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.Series.StackedLineSeriesElement.LineJoin"/> of the StackedLineSeriesElement.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.StackedLineSeriesElement.Width">
            <summary>
            Gets or sets the LineWidth of the StackedLineSeriesElement.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.StackedLineSeriesElement.LineStyle">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.Series.StackedLineSeriesElement.LineStyle"/> of the StackedLineSeriesElement.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedLineSeriesElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedLineSeriesElement"/> object.
            </summary>
            <param name="name">Name of the dateTime stacked line series element.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedLineSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedLineSeriesElement"/> object.
            </summary>
            <param name="name">Name of the dateTime stacked line series element. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the dateTime stacked line series element.</param>        
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedLineSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedLineSeriesElement"/> object.
            </summary>
            <param name="name">Name of the dateTime stacked line series element. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the dateTime stacked line series element.</param>
            <param name="lineWidth">Line width of the dateTime stacked line series element.</param>      
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedLineSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.LineStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedLineSeriesElement"/> object.
            </summary>
            <param name="name">Name of the dateTime stacked line series element. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the dateTime stacked line series element.</param>
            <param name="lineWidth">Line width of the dateTime stacked lineSeries element. </param>
            <param name="style"><see cref="T:ceTe.DynamicPDF.LineStyle"/> of the dateTime stacked line series element. </param>        
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedLineSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.LineStyle,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedLineSeriesElement"/> object.
            </summary>
            <param name="name"> Name of the dateTime stacked line series element.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the dateTime stacked line series element.</param>
            <param name="lineWidth">Line width of the dateTime stacked line series element.</param>
            <param name="style"><see cref="T:ceTe.DynamicPDF.LineStyle"/> of the dateTime stacked line series element.</param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the dateTime stacked line series element.</param>       
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedLineSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.LineStyle,ceTe.DynamicPDF.PageElements.Charting.Marker)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedLineSeriesElement"/> object.
            </summary>
            <param name="name">Name of the dateTime stacked line series element. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the dateTime stacked line series element. </param>
            <param name="lineWidth">Line width of the dateTime stacked line series element. </param>
            <param name="style"><see cref="T:ceTe.DynamicPDF.LineStyle"/> of the dateTime stacked line series element. </param>
            <param name="marker"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Marker"/> of the dateTime stacked line series element. </param>        
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedLineSeriesElement.#ctor(System.String,System.Single,ceTe.DynamicPDF.LineStyle,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Marker,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedLineSeriesElement"/> object.
            </summary>
            <param name="name">Name of the dateTime Stacked Line Series Element.</param>
            <param name="lineWidth">Line width of the dateTime stacked line series element.</param>
            <param name="style"><see cref="T:ceTe.DynamicPDF.LineStyle"/> of the dateTime stacked line series element.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the dateTime stacked line Series element.</param>
            <param name="marker"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Marker"/> of the dateTime stacked line series element.</param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the dateTime stacked line series element.</param>                
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedLineSeriesElement.Values">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedLineValueList"/> object contained in the DateTimeStackedLineSeriesElement.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedAreaSeries">
             <summary>
             Represents an Indexed100PercentStackedAreaSeries.
             </summary>
             <example>The following example creates an indexed 100 percent stacked area series chart.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 230)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a indexed x axis 
                     Dim xAxis As IndexedXAxis = New IndexedXAxis()
            
                     ' Create a percentage y axis
                     Dim yAxis As PercentageYAxis = New PercentageYAxis()
            
                     ' Create a indexed 100 percent stacked area series element and add values to it
                     Dim MySeriesElement1 As Indexed100PercentStackedAreaSeriesElement = New Indexed100PercentStackedAreaSeriesElement("Website A")
                     MySeriesElement1.Values.Add(New Single() {5, 7, 9, 6})
                     Dim MySeriesElement2 As Indexed100PercentStackedAreaSeriesElement = New Indexed100PercentStackedAreaSeriesElement("Website B")
                     MySeriesElement2.Values.Add(New Single() {4, 2, 5, 8})
                     Dim MySeriesElement3 As Indexed100PercentStackedAreaSeriesElement = New Indexed100PercentStackedAreaSeriesElement("Website C")
                     MySeriesElement3.Values.Add(New Single() {2, 4, 6, 9})
            
                     ' Create a indexed 100 percent stacked area series and add 100 percent indexed stacked area series elements to it
                     Dim MyStackedAreaSeries1 As Indexed100PercentStackedAreaSeries = New Indexed100PercentStackedAreaSeries(xAxis, yAxis)
                     MyStackedAreaSeries1.Add(MySeriesElement1)
                     MyStackedAreaSeries1.Add(MySeriesElement2)
                     MyStackedAreaSeries1.Add(MySeriesElement3)
            
                     ' Add indexed 100 percent stacked area series to the plot area
                     MyPlotArea.Series.Add(MyStackedAreaSeries1)
            
                     ' Adding Indexed X AxisLabels to the XAxis
                     MyStackedAreaSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q1", 0))
                     MyStackedAreaSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q2", 1))
                     MyStackedAreaSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q3", 2))
                     MyStackedAreaSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q4", 3))
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 230);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
             
                     // Create a indexed x axis 
                     IndexedXAxis xAxis = new IndexedXAxis();
            
                     // Create a percentage y axis
                     PercentageYAxis yAxis = new PercentageYAxis();
            
                     // Create a indexed 100 percent stacked area series element and add values to it
                     Indexed100PercentStackedAreaSeriesElement seriesElement1 = new Indexed100PercentStackedAreaSeriesElement("Website A");
                     seriesElement1.Values.Add(new float[] { 5, 7, 9, 6 });
                     Indexed100PercentStackedAreaSeriesElement seriesElement2 = new Indexed100PercentStackedAreaSeriesElement("Website B");
                     seriesElement2.Values.Add(new float[] { 4, 2, 5, 8 });
                     Indexed100PercentStackedAreaSeriesElement seriesElement3 = new Indexed100PercentStackedAreaSeriesElement("Website C");
                     seriesElement3.Values.Add(new float[] { 2, 4, 6, 9 });
            
                     // Create a indexed 100 percent stacked area series and add 100 percent indexed stacked area series elements to it
                     Indexed100PercentStackedAreaSeries stackedAreaSeries1 = new Indexed100PercentStackedAreaSeries(xAxis, yAxis);
                     stackedAreaSeries1.Add(seriesElement1);
                     stackedAreaSeries1.Add(seriesElement2);
                     stackedAreaSeries1.Add(seriesElement3);
            
                     // Add indexed 100 percent stacked area series to the plot area
                     plotArea.Series.Add(stackedAreaSeries1);
            
                     // Adding Indexed X AxisLabels to the XAxis
                     stackedAreaSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q1", 0));
                     stackedAreaSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q2", 1));
                     stackedAreaSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q3", 2));
                     stackedAreaSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q4", 3));
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:/MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedAreaSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedAreaSeries"/> object.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedAreaSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedAreaSeries"/> object.
            </summary>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis"/> of the indexed 100Percent stacked area series.</param>       
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedAreaSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedAreaSeries"/> object.
            </summary>
            <param name="xAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis"/> of the indexed 100Percent stacked area series.</param>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis"/> of the indexed 100Percent stacked area series.</param>       
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedAreaSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedAreaSeries"/> object.
            </summary>
            <param name="xAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis"/> of the indexed 100Percent stacked area series.</param>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis"/> of the indexed 100Percent stacked area series.</param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the indexed 100Percent stacked area series.</param>       
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedAreaSeries.Add(ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedAreaSeriesElement)">
            <summary>
            Adds an <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedAreaSeriesElement"/> object to the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedAreaSeries"/> elements list.
            </summary>
            <param name="element"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedAreaSeriesElement"/> object to be added.</param>      
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedAreaSeries.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedAreaSeriesElement"/> object at the given index.
            </summary>
            <param name="index">Position of the required indexed 100Percent stacked area series element.</param>
            <returns>the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedAreaSeriesElement"/> object.</returns>       
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedAreaSeries.YAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis"/> of the series.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedAreaSeries.XAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis"/> of the series.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedAreaSeriesElement">
             <summary>
             Represents an Indexed100PercentStackedAreaSeriesElement.
             </summary> 
             <example>The following example creates a indexed 100 percent stacked area series elements and creates indexed
             100 percent stacked area series chart to it.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 230)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a indexed x axis 
                     Dim xAxis As IndexedXAxis = New IndexedXAxis()
            
                     ' Create a percentage y axis
                     Dim yAxis As PercentageYAxis = New PercentageYAxis()
            
                     ' Create a indexed 100 percent stacked area series element and add values to it
                     Dim MySeriesElement1 As Indexed100PercentStackedAreaSeriesElement = New Indexed100PercentStackedAreaSeriesElement("Website A")
                     MySeriesElement1.Values.Add(New Single() {5, 7, 9, 6})
                     Dim MySeriesElement2 As Indexed100PercentStackedAreaSeriesElement = New Indexed100PercentStackedAreaSeriesElement("Website B")
                     MySeriesElement2.Values.Add(New Single() {4, 2, 5, 8})
                     Dim MySeriesElement3 As Indexed100PercentStackedAreaSeriesElement = New Indexed100PercentStackedAreaSeriesElement("Website C")
                     MySeriesElement3.Values.Add(New Single() {2, 4, 6, 9})
            
                     ' Create a indexed 100 percent stacked area series and add 100 percent indexed stacked area series elements to it
                     Dim MyStackedAreaSeries1 As Indexed100PercentStackedAreaSeries = New Indexed100PercentStackedAreaSeries(xAxis, yAxis)
                     MyStackedAreaSeries1.Add(MySeriesElement1)
                     MyStackedAreaSeries1.Add(MySeriesElement2)
                     MyStackedAreaSeries1.Add(MySeriesElement3)
            
                     ' Add indexed 100 percent stacked area series to the plot area
                     MyPlotArea.Series.Add(MyStackedAreaSeries1)
            
                     ' Adding indexed X AxisLabels to the XAxis
                     MyStackedAreaSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q1", 0))
                     MyStackedAreaSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q2", 1))
                     MyStackedAreaSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q3", 2))
                     MyStackedAreaSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q4", 3))
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 230);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
             
                     // Create a indexed x axis 
                     IndexedXAxis xAxis = new IndexedXAxis();
            
                     // Create a percentage y axis
                     PercentageYAxis yAxis = new PercentageYAxis();
            
                     // Create a indexed 100 percent stacked area series element and add values to it
                     Indexed100PercentStackedAreaSeriesElement seriesElement1 = new Indexed100PercentStackedAreaSeriesElement("Website A");
                     seriesElement1.Values.Add(new float[] { 5, 7, 9, 6 });
                     Indexed100PercentStackedAreaSeriesElement seriesElement2 = new Indexed100PercentStackedAreaSeriesElement("Website B");
                     seriesElement2.Values.Add(new float[] { 4, 2, 5, 8 });
                     Indexed100PercentStackedAreaSeriesElement seriesElement3 = new Indexed100PercentStackedAreaSeriesElement("Website C");
                     seriesElement3.Values.Add(new float[] { 2, 4, 6, 9 });
            
                     // Create a indexed 100 percent stacked area series and add 100 percent indexed stacked area series elements to it
                     Indexed100PercentStackedAreaSeries stackedAreaSeries1 = new Indexed100PercentStackedAreaSeries(xAxis, yAxis);
                     stackedAreaSeries1.Add(seriesElement1);
                     stackedAreaSeries1.Add(seriesElement2);
                     stackedAreaSeries1.Add(seriesElement3);
            
                     // Add indexed 100 precent stacked area series to the plot area
                     plotArea.Series.Add(stackedAreaSeries1);
            
                     // Adding indexed x AxisLabels to the XAxis
                     stackedAreaSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q1", 0));
                     stackedAreaSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q2", 1));
                     stackedAreaSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q3", 2));
                     stackedAreaSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q4", 3));
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedAreaSeriesElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedAreaSeriesElement"/> object.
            </summary>
            <param name="name"> Name of the indexed 100Percent stacked area series element.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedAreaSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedAreaSeriesElement"/> object.
            </summary>
            <param name="name">Name of the indexed 100Percent stacked area series element.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed 100Percent stacked area series element.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedAreaSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Marker)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedAreaSeriesElement"/> object.
            </summary>
            <param name="name">Name of the indexed 100Percent stacked area series element. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed 100Percent stacked area series element. </param>
            <param name="marker"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Marker"/> of the indexed 100Percent stacked area series element. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedAreaSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedAreaSeriesElement"/> object.
            </summary>
            <param name="name"> Name of the indexed 100Percent stacked areaSeries element.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed 100Percent stacked area series element.</param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the indexed 100Percent stacked area series element.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedAreaSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Marker,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedAreaSeriesElement"/> object.
            </summary>
            <param name="name">Name of the indexed 100Percent stacked areaSeries element. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed 100Percent stacked area series element. </param>
            <param name="marker"> <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Marker"/> of the indexed 100Percent stacked area series element.</param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the indexed 100Percent stacked area series element. </param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedAreaSeriesElement.Values">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedAreaValueList"/> object contained in the Indexed100PercentStackedAreaSeriesElement.	  
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedBarSeries">
             <summary>
             Represents an Indexed100PercentStackedBarSeries.
             </summary>
             <example>The following example creates an indexed 100 percent stacked bar series chart.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 230)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a indexed 100 percent stacked bar series element and add values to it
                     Dim MySeriesElement1 As Indexed100PercentStackedBarSeriesElement = New Indexed100PercentStackedBarSeriesElement("Website A")
                     MySeriesElement1.Values.Add(New Single() {5, 7, 9, 6})
                     Dim MySeriesElement2 As Indexed100PercentStackedBarSeriesElement = New Indexed100PercentStackedBarSeriesElement("Website B")
                     MySeriesElement2.Values.Add(New Single() {4, 2, 5, 8})
                     Dim MySeriesElement3 As Indexed100PercentStackedBarSeriesElement = New Indexed100PercentStackedBarSeriesElement("Website C")
                     MySeriesElement3.Values.Add(New Single() {2, 4, 6, 9})
            
                     ' Create a indexed 100 percent stacked bar series and add indexed 100 percent stacked bar series elements to it
                     Dim MyStackedBarSeries1 As Indexed100PercentStackedBarSeries = New Indexed100PercentStackedBarSeries()
                     MyStackedBarSeries1.Add(MySeriesElement1)
                     MyStackedBarSeries1.Add(MySeriesElement2)
                     MyStackedBarSeries1.Add(MySeriesElement3)
            
                     ' Add indexed 100 percent stacked bar  series to the plot area
                     MyPlotArea.Series.Add(MyStackedBarSeries1)
            
                     ' Adding indexed Y AxisLabels to the YAxis
                     MyStackedBarSeries1.YAxis.Labels.Add(New IndexedYAxisLabel("Q1", 0))
                     MyStackedBarSeries1.YAxis.Labels.Add(New IndexedYAxisLabel("Q2", 1))
                     MyStackedBarSeries1.YAxis.Labels.Add(New IndexedYAxisLabel("Q3", 2))
                     MyStackedBarSeries1.YAxis.Labels.Add(New IndexedYAxisLabel("Q4", 3))
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 230);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a indexed 100 percent stacked bar series element and add values to it
                     Indexed100PercentStackedBarSeriesElement seriesElement1 = new Indexed100PercentStackedBarSeriesElement("Website A");
                     seriesElement1.Values.Add(new float[] { 5, 7, 9, 6 });
                     Indexed100PercentStackedBarSeriesElement seriesElement2 = new Indexed100PercentStackedBarSeriesElement("Website B");
                     seriesElement2.Values.Add(new float[] { 4, 2, 5, 8 });
                     Indexed100PercentStackedBarSeriesElement seriesElement3 = new Indexed100PercentStackedBarSeriesElement("Website C");
                     seriesElement3.Values.Add(new float[] { 2, 4, 6, 9 });
            
                     // Create a indexed 100 percent stacked bar series and add indexed 100 percent stacked bar series elements to it
                     Indexed100PercentStackedBarSeries stackedBarSeries1 = new Indexed100PercentStackedBarSeries();
                     stackedBarSeries1.Add(seriesElement1);
                     stackedBarSeries1.Add(seriesElement2);
                     stackedBarSeries1.Add(seriesElement3);
            
                     // Add indexed 100 percent stacked  bar series to the plot area
                     plotArea.Series.Add(stackedBarSeries1);
            
                     // Adding Indexed Y AxisLabels to the YAxis
                     stackedBarSeries1.YAxis.Labels.Add(new IndexedYAxisLabel("Q1", 0));
                     stackedBarSeries1.YAxis.Labels.Add(new IndexedYAxisLabel("Q2", 1));
                     stackedBarSeries1.YAxis.Labels.Add(new IndexedYAxisLabel("Q3", 2));
                     stackedBarSeries1.YAxis.Labels.Add(new IndexedYAxisLabel("Q4", 3));
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf"); 
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedBarSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedBarSeries"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedBarSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedBarSeries"/> class.
            </summary>
            <param name="percentageXAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageXAxis"/> of the indexed 100Percent stacked bar series. </param>
            <param name="indexedYAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxis"/> of the indexed 100Percent stacked bar series. </param>        
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedBarSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxis,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedBarSeries"/> class.
            </summary>
            <param name="percentageXAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageXAxis"/> of the indexed 100Percent stacked bar series. </param>
            <param name="indexedYAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxis"/> of the indexed 100Percent stacked bar series.</param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the indexed 100Percent stacked bar series. </param>        
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedBarSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageXAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedBarSeries"/> class.
            </summary>
            <param name="percentageXAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageXAxis"/> of the indexed 100Percent stacked bar series. </param>      
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedBarSeries.Add(ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedBarSeriesElement)">
            <summary>
            Adds an <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedBarSeriesElement"/> to the end of the Indexed100PercentStackedBarSeriesElement list.
            </summary>
            <param name="indexedStackedBarSeriesElement"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedBarSeriesElement"/> to be added.</param>       
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedBarSeries.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedBarSeriesElement"/> object at the given index.
            </summary>
            <param name="index">index of the required Indexed 100Percent Stacked Bar Series Element.</param>
            <returns>The <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedBarSeriesElement"/> object.</returns>        
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedBarSeries.XAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageXAxis"/> of the series.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedBarSeries.YAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxis"/> of the series.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedBarSeriesElement">
             <summary>
             Represents an Indexed100PercentStackedBarSeriesElement.
             </summary>
             <example>The following example creates indexed 100 percent stacked bar series elements and creates indexed
             100 percent stacked bar series chart to it.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 230)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a indexed 100 percent stacked bar series element and add values to it
                     Dim MySeriesElement1 As Indexed100PercentStackedBarSeriesElement = New Indexed100PercentStackedBarSeriesElement("Website A")
                     MySeriesElement1.Values.Add(New Single() {5, 7, 9, 6})
                     Dim MySeriesElement2 As Indexed100PercentStackedBarSeriesElement = New Indexed100PercentStackedBarSeriesElement("Website B")
                     MySeriesElement2.Values.Add(New Single() {4, 2, 5, 8})
                     Dim MySeriesElement3 As Indexed100PercentStackedBarSeriesElement = New Indexed100PercentStackedBarSeriesElement("Website C")
                     MySeriesElement3.Values.Add(New Single() {2, 4, 6, 9})
            
                     ' Create a indexed 100 percent stacked bar series and add indexed 100 percent stacked bar series elements to it
                     Dim MyStackedBarSeries1 As Indexed100PercentStackedBarSeries = New Indexed100PercentStackedBarSeries()
                     MyStackedBarSeries1.Add(MySeriesElement1)
                     MyStackedBarSeries1.Add(MySeriesElement2)
                     MyStackedBarSeries1.Add(MySeriesElement3)
            
                     ' Add indexed 100 percent stacked  bar series to the plot area
                     MyPlotArea.Series.Add(MyStackedBarSeries1)
            
                     ' Adding Indexed Y AxisLabels to the YAxis
                     MyStackedBarSeries1.YAxis.Labels.Add(New IndexedYAxisLabel("Q1", 0))
                     MyStackedBarSeries1.YAxis.Labels.Add(New IndexedYAxisLabel("Q2", 1))
                     MyStackedBarSeries1.YAxis.Labels.Add(New IndexedYAxisLabel("Q3", 2))
                     MyStackedBarSeries1.YAxis.Labels.Add(New IndexedYAxisLabel("Q4", 3))
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 230);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a indexed 100 percent stacked bar series element and add values to it
                     Indexed100PercentStackedBarSeriesElement seriesElement1 = new Indexed100PercentStackedBarSeriesElement("Website A");
                     seriesElement1.Values.Add(new float[] { 5, 7, 9, 6 });
                     Indexed100PercentStackedBarSeriesElement seriesElement2 = new Indexed100PercentStackedBarSeriesElement("Website B");
                     seriesElement2.Values.Add(new float[] { 4, 2, 5, 8 });
                     Indexed100PercentStackedBarSeriesElement seriesElement3 = new Indexed100PercentStackedBarSeriesElement("Website C");
                     seriesElement3.Values.Add(new float[] { 2, 4, 6, 9 });
            
                     // Create a indexed 100 percent stacked bar series and add indexed 100 percent stacked bar series elements to it
                     Indexed100PercentStackedBarSeries stackedBarSeries1 = new Indexed100PercentStackedBarSeries();
                     stackedBarSeries1.Add(seriesElement1);
                     stackedBarSeries1.Add(seriesElement2);
                     stackedBarSeries1.Add(seriesElement3);
            
                     // Add indexed 100 percent stacked  bar series to the plot area
                     plotArea.Series.Add(stackedBarSeries1);
            
                     // Add Indexed Y AxisLabels to the YAxis
                     stackedBarSeries1.YAxis.Labels.Add(new IndexedYAxisLabel("Q1", 0));
                     stackedBarSeries1.YAxis.Labels.Add(new IndexedYAxisLabel("Q2", 1));
                     stackedBarSeries1.YAxis.Labels.Add(new IndexedYAxisLabel("Q3", 2));
                     stackedBarSeries1.YAxis.Labels.Add(new IndexedYAxisLabel("Q4", 3));
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf"); 
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedBarSeriesElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedBarSeriesElement"/> class.
            </summary>
            <param name="name">Name of the indexed 100Percent stacked barSeries element.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedBarSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedBarSeriesElement"/> class.
            </summary>
            <param name="name">Name of the indexed 100percent stacked barSeries element.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed 100Percent stacked barSeries element.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedBarSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedBarSeriesElement"/> class.
            </summary>
            <param name="name">  Name of the indexed 100Percent stacked barSeries element.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed 100Percent stacked barSeries element. </param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the indexed 100Percent stacked barSeries element. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedBarSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedBarSeriesElement"/> class.
            </summary>
            <param name="name"> Name of the indexed 100Percent stacked barSeries element.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed 100Percent stacked barSeries element. </param>
            <param name="borderWidth">Border width of the indexed 100Percent stacked barSeries element. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedBarSeriesElement.#ctor(System.String,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedBarSeriesElement"/> class.
            </summary>
            <param name="name">Name of the indexed 100Percent stacked barSeries element. </param>
            <param name="borderWidth">Border width of the indexed 100Percent stacked barSeries element. </param>
            <param name="borderColor"> Border <see cref="T:ceTe.DynamicPDF.Color"/> of the indexed 100Percent stacked barSeries element.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedBarSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedBarSeriesElement"/> class.
            </summary>
            <param name="name"> Name of the indexed 100Percent stacked barSeries element.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed 100Percent stacked barSeries element. </param>
            <param name="borderWidth">Border width of the indexed 100Percent stacked barSeries element. </param>
            <param name="borderColor">Border <see cref="T:ceTe.DynamicPDF.Color"/> of the indexed 100Percent stacked barSeries element.</param>    
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedBarSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedBarSeriesElement"/> class.
            </summary>
            <param name="name">Name of the indexed 100Percent stacked barSeries element. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed 100Percent stacked barSeries element. </param>
            <param name="borderWidth">Border width of the indexed 100Percent stacked barSeries element. </param>
            <param name="borderColor">Border <see cref="T:ceTe.DynamicPDF.Color"/> of indexed 100Percent stacked barSeries element. </param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the indexed 100Percent stacked barSeries element. </param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedBarSeriesElement.Values">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedBarValueList"/> object contained in the Indexed100PercentStackedBarSeriesElement.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedColumnSeries">
             <summary>
             Represents an Indexed100PercentStackedColumnSeries.
             </summary>
             <example>The following example creates indexed 100 percent stacked column series chart.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 230)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a indexed 100 percent stacked column series element and add values to it
                     Dim MySeriesElement1 As Indexed100PercentStackedColumnSeriesElement = New Indexed100PercentStackedColumnSeriesElement("Website A")
                     MySeriesElement1.Values.Add(New Single() {5, 7, 9, 6})
                     Dim MySeriesElement2 As Indexed100PercentStackedColumnSeriesElement = New Indexed100PercentStackedColumnSeriesElement("Website B")
                     MySeriesElement2.Values.Add(New Single() {4, 2, 5, 8})
                     Dim MySeriesElement3 As Indexed100PercentStackedColumnSeriesElement = New Indexed100PercentStackedColumnSeriesElement("Website C")
                     MySeriesElement3.Values.Add(New Single() {2, 4, 6, 9})
            
                     ' Create a indexed 100 percent stacked column series and add indexed 100 percent stacked column series elements to it
                     Dim MyStackedColumnSeries1 As Indexed100PercentStackedColumnSeries = New Indexed100PercentStackedColumnSeries()
                     MyStackedColumnSeries1.Add(MySeriesElement1)
                     MyStackedColumnSeries1.Add(MySeriesElement2)
                     MyStackedColumnSeries1.Add(MySeriesElement3)
            
                     ' Add indexed 100 percent stacked column series to the plot area
                     MyPlotArea.Series.Add(MyStackedColumnSeries1)
            
                     ' Add Indexed X AxisLabels to the XAxis
                     MyStackedColumnSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q1", 0))
                     MyStackedColumnSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q2", 1))
                     MyStackedColumnSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q3", 2))
                     MyStackedColumnSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q4", 3))
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 230);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a indexed 100 percent stacked column series element and add values to it
                     Indexed100PercentStackedColumnSeriesElement seriesElement1 = new Indexed100PercentStackedColumnSeriesElement("Website A");
                     seriesElement1.Values.Add(new float[] { 5, 7, 9, 6 });
                     Indexed100PercentStackedColumnSeriesElement seriesElement2 = new Indexed100PercentStackedColumnSeriesElement("Website B");
                     seriesElement2.Values.Add(new float[] { 4, 2, 5, 8 });
                     Indexed100PercentStackedColumnSeriesElement seriesElement3 = new Indexed100PercentStackedColumnSeriesElement("Website C");
                     seriesElement3.Values.Add(new float[] { 2, 4, 6, 9 });
             
                     // Create a indexed 100 percent stacked column series and add indexed 100 percent stacked column series elements to it
                     Indexed100PercentStackedColumnSeries stackedColumnSeries1 = new Indexed100PercentStackedColumnSeries();
                     stackedColumnSeries1.Add(seriesElement1);
                     stackedColumnSeries1.Add(seriesElement2);
                     stackedColumnSeries1.Add(seriesElement3);
            
                     // Add indexed 100 percent stacked column series to the plot area
                     plotArea.Series.Add(stackedColumnSeries1);
             
                     // Add Indexed X AxisLabels to the XAxis
                     stackedColumnSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q1", 0));
                     stackedColumnSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q2", 1));
                     stackedColumnSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q3", 2));
                     stackedColumnSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q4", 3));
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedColumnSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedColumnSeries"/> class. 
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedColumnSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis)">
            <summary>
            Initializes a new instance of the <see href ="Indexed100PercentStackedColumnSeries"/> class.
            </summary>
            <param name="indexedXAxis"><see href ="IndexedXAxis"/> of the indexed 100Percent stacked column series. </param>
            <param name="percentageYAxis"><see href ="PercentageYAxis"/> of the indexed 100Percent stacked column series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedColumnSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedColumnSeries"/> class.
            </summary>
            <param name="indexedXAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis"/> of the indexed 100Percent stacked column series. </param>
            <param name="percentageYAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis"/> of the indexed 100Percent stacked column series. </param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of indexed 100Percent stacked column series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedColumnSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedColumnSeries"/> class. 
            </summary>
            <param name="percentageYAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis"/> of the indexed 100Percent stacked column series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedColumnSeries.Add(ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedColumnSeriesElement)">
            <summary>
            Adds an <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedColumnSeriesElement"/> object to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedColumnSeries"/> element list.
            </summary>
            <param name="indexedStackedColumnSeriesElement"> <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedColumnSeriesElement"/>  to be added. </param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedColumnSeries.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedColumnSeriesElement"/> object at the given index.
            </summary>
            <param name="index">Position of the required Indexed 100Percent Stacked Column Series Element. </param>
            <returns> The <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedColumnSeriesElement"/> object. </returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedColumnSeries.YAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis"/> of the series. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedColumnSeries.XAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis"/> of the series. 
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedColumnSeriesElement">
             <summary>
             Represents an Indexed100PercentStackedColumnSeriesElement.
             </summary>
             <example>The following example creates indexed 100 percent stacked column series elements and creates indexed
             100 percent stacked column series chart to it.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 230)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a indexed 100 percent stacked column series element and add values to it
                     Dim MySeriesElement1 As Indexed100PercentStackedColumnSeriesElement = New Indexed100PercentStackedColumnSeriesElement("Website A")
                     MySeriesElement1.Values.Add(New Single() {5, 7, 9, 6})
                     Dim MySeriesElement2 As Indexed100PercentStackedColumnSeriesElement = New Indexed100PercentStackedColumnSeriesElement("Website B")
                     MySeriesElement2.Values.Add(New Single() {4, 2, 5, 8})
                     Dim MySeriesElement3 As Indexed100PercentStackedColumnSeriesElement = New Indexed100PercentStackedColumnSeriesElement("Website C")
                     MySeriesElement3.Values.Add(New Single() {2, 4, 6, 9})
            
                     ' Create a indexed 100 percent stacked column series and add indexed 100 percent stacked column series elements to it
                     Dim MyStackedColumnSeries1 As Indexed100PercentStackedColumnSeries = New Indexed100PercentStackedColumnSeries()
                     MyStackedColumnSeries1.Add(MySeriesElement1)
                     MyStackedColumnSeries1.Add(MySeriesElement2)
                     MyStackedColumnSeries1.Add(MySeriesElement3)
            
                     ' Add indexed 100 percent stacked column series to the plot area
                     MyPlotArea.Series.Add(MyStackedColumnSeries1)
            
                     ' Add Indexed X AxisLabels to the XAxis
                     MyStackedColumnSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q1", 0))
                     MyStackedColumnSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q2", 1))
                     MyStackedColumnSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q3", 2))
                     MyStackedColumnSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q4", 3))
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 230);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a indexed 100 percent stacked column series element and add values to it
                     Indexed100PercentStackedColumnSeriesElement seriesElement1 = new Indexed100PercentStackedColumnSeriesElement("Website A");
                     seriesElement1.Values.Add(new float[] { 5, 7, 9, 6 });
                     Indexed100PercentStackedColumnSeriesElement seriesElement2 = new Indexed100PercentStackedColumnSeriesElement("Website B");
                     seriesElement2.Values.Add(new float[] { 4, 2, 5, 8 });
                     Indexed100PercentStackedColumnSeriesElement seriesElement3 = new Indexed100PercentStackedColumnSeriesElement("Website C");
                     seriesElement3.Values.Add(new float[] { 2, 4, 6, 9 });
             
                     // Create a indexed 100 percent stacked column series and add indexed 100 percent stacked column series elements to it
                     Indexed100PercentStackedColumnSeries stackedColumnSeries1 = new Indexed100PercentStackedColumnSeries();
                     stackedColumnSeries1.Add(seriesElement1);
                     stackedColumnSeries1.Add(seriesElement2);
                     stackedColumnSeries1.Add(seriesElement3);
            
                     // Add indexed 100 percent stacked column series to the plot area
                     plotArea.Series.Add(stackedColumnSeries1);
             
                     // Add Indexed X AxisLabels to the XAxis
                     stackedColumnSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q1", 0));
                     stackedColumnSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q2", 1));
                     stackedColumnSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q3", 2));
                     stackedColumnSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q4", 3));
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedColumnSeriesElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedColumnSeriesElement"/> class. 
            </summary>
            <param name="name">Name of the indexed 100Percent stacked columnSeries element. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedColumnSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedColumnSeriesElement"/> class. 
            </summary>
            <param name="name">Name of the indexed 100Percent stacked columnSeries element. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed 100Percent stacked columnSeries element. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedColumnSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedColumnSeriesElement"/> class. 
            </summary>
            <param name="name">Name of the indexed 100Percent stacked columnSeries element. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of indexed 100Percent stacked columnSeries element. </param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the indexed 100Percent stacked columnSeries element. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedColumnSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedColumnSeriesElement"/> class. 
            </summary>
            <param name="name">Name of the indexed 100Percent stacked columnSeries element. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed 100Percent stacked columnSeries element. </param>
            <param name="borderWidth">Border width of the indexed 100Percent stacked columnSeries element. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedColumnSeriesElement.#ctor(System.String,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedColumnSeriesElement"/> class. 
            </summary>
            <param name="name">Name of the indexed 100Percent stacked columnSeries element. </param>
            <param name="borderWidth">Border width of the indexed 100Percent stacked columnSeries element. </param>
            <param name="borderColor">Border <see cref="T:ceTe.DynamicPDF.Color"/> of the indexed 100Percent stacked columnSeries element. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedColumnSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedColumnSeriesElement"/> class. 
            </summary>
            <param name="name">Name of the indexed 100Percent stacked columnSeries element. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed 100Percent stacked columnSeries element. </param>
            <param name="borderWidth">Border width of the indexed 100Percent stacked columnSeries element. </param>
            <param name="borderColor">Border <see cref="T:ceTe.DynamicPDF.Color"/> of the indexed 100Percent stacked columnSeries element. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedColumnSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedColumnSeriesElement"/> class. 
            </summary>
            <param name="name">Name of the indexed 100Percent stacked columnSeries element. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed 100Percent stacked ColumnSeries element. </param>
            <param name="borderWidth">Border width of the indexed 100Percent stacked columnSeries Element. </param>
            <param name="borderColor">Border <see cref="T:ceTe.DynamicPDF.Color"/> of the indexed 100Percent stacked columnSeries element. </param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the indexed 100Percent Stacked columnSeries element. </param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedColumnSeriesElement.Values">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedColumnValueList"/> object contained in the Indexed100PercentStackedColumnSeriesElement.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedLineSeries">
             <summary>
             Represents an Indexed100PercentStackedLineSeries.
             </summary>
             <example>The following example creates an indexed 100 percent stacked line series chart.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 230)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a indexed 100 percent stacked line series element and add values to it
                     Dim MySeriesElement1 As Indexed100PercentStackedLineSeriesElement = New Indexed100PercentStackedLineSeriesElement("Website A")
                     MySeriesElement1.Values.Add(New Single() {5, 7, 9, 6})
                     Dim MySeriesElement2 As Indexed100PercentStackedLineSeriesElement = New Indexed100PercentStackedLineSeriesElement("Website B")
                     MySeriesElement2.Values.Add(New Single() {4, 2, 5, 8})
                     Dim MySeriesElement3 As Indexed100PercentStackedLineSeriesElement = New Indexed100PercentStackedLineSeriesElement("Website C")
                     MySeriesElement3.Values.Add(New Single() {2, 4, 6, 9})
            
                     ' Create a indexed 100 percent stacked line series and add indexed 100 percent stacked line series elements to it
                     Dim MyStackedLineSeries1 As Indexed100PercentStackedLineSeries = New Indexed100PercentStackedLineSeries()
                     MyStackedLineSeries1.Add(MySeriesElement1)
                     MyStackedLineSeries1.Add(MySeriesElement2)
                     MyStackedLineSeries1.Add(MySeriesElement3)
            
                     ' Add indexed 100 percent stacked line series to the plot line
                     MyPlotArea.Series.Add(MyStackedLineSeries1)
            
                     ' Add Indexed X AxisLabels to the XAxis
                     MyStackedLineSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q1", 0))
                     MyStackedLineSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q2", 1))
                     MyStackedLineSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q3", 2))
                     MyStackedLineSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q4", 3))
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf") 
            
                 End Sub
             End Module
             </code>
             <code>
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 230);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a indexed 100 percent stacked line series element and add values to it
                     Indexed100PercentStackedLineSeriesElement seriesElement1 = new Indexed100PercentStackedLineSeriesElement("Website A");
                     seriesElement1.Values.Add(new float[] { 5, 7, 9, 6 });
                     Indexed100PercentStackedLineSeriesElement seriesElement2 = new Indexed100PercentStackedLineSeriesElement("Website B");
                     seriesElement2.Values.Add(new float[] { 4, 2, 5, 8 });
                     Indexed100PercentStackedLineSeriesElement seriesElement3 = new Indexed100PercentStackedLineSeriesElement("Website C");
                     seriesElement3.Values.Add(new float[] { 2, 4, 6, 9 });
            
                     // Create a indexed 100 percent stacked line series and add indexed 100 percent stacked line series elements to it
                     Indexed100PercentStackedLineSeries stackedLineSeries1 = new Indexed100PercentStackedLineSeries();
                     stackedLineSeries1.Add(seriesElement1);
                     stackedLineSeries1.Add(seriesElement2);
                     stackedLineSeries1.Add(seriesElement3);
            
                     // Add indexed 100 percent stacked line series to the plot line
                     plotArea.Series.Add(stackedLineSeries1);
            
                     // Add indexed X AxisLabels to the XAxis
                     stackedLineSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q1", 0));
                     stackedLineSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q2", 1));
                     stackedLineSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q3", 2));
                     stackedLineSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q4", 3));
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf");       
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedLineSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedLineSeries"/> object.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedLineSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedLineSeries"/> object.
            </summary>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis"/> of the indexed 100Percent stacked line series</param>        
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedLineSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedLineSeries"/> object.
            </summary>
            <param name="xAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis"/> of the indexed 100Percent stacked line series. </param>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis"/> of the indexed 100Percent stacked line series. </param>       
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedLineSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedLineSeries"/> object.
            </summary>
            <param name="xAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis"/> of the indexed 100Percent stacked line series. </param>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis"/> of the indexed 100Percent stacked line series. </param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the indexed 100Percent stacked line series.</param>        
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedLineSeries.Add(ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedLineSeriesElement)">
            <summary>
            Adds an <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedLineSeriesElement"/> object to the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedLineSeries"/> elements list.
            </summary>
            <param name="element"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedLineSeriesElement"/> object to be added.</param>       		 
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedLineSeries.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedLineSeriesElement"/> object at the given index.
            </summary>
            <param name="index"> Index of the required Indexed 100Percent Stacked line series element.</param>
            <returns>The <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedLineSeriesElement"/> object. </returns>        
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedLineSeries.YAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.PercentageYAxis"/> of the series.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedLineSeries.XAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis"/> of the series.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedLineSeriesElement">
             <summary>
             Represents an Indexed100PercentStackedLineSeriesElement.
             </summary>
             <example>The following example creates indexed 100 percent stacked line series elements and creates indexed
             100 percent stacked line series chart to it.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 230)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a indexed 100 percent stacked line series element and add values to it
                     Dim MySeriesElement1 As Indexed100PercentStackedLineSeriesElement = New Indexed100PercentStackedLineSeriesElement("Website A")
                     MySeriesElement1.Values.Add(New Single() {5, 7, 9, 6})
                     Dim MySeriesElement2 As Indexed100PercentStackedLineSeriesElement = New Indexed100PercentStackedLineSeriesElement("Website B")
                     MySeriesElement2.Values.Add(New Single() {4, 2, 5, 8})
                     Dim MySeriesElement3 As Indexed100PercentStackedLineSeriesElement = New Indexed100PercentStackedLineSeriesElement("Website C")
                     MySeriesElement3.Values.Add(New Single() {2, 4, 6, 9})
            
                     ' Create a indexed 100 percent stacked line series and add indexed 100 percent stacked line series elements to it
                     Dim MyStackedLineSeries1 As Indexed100PercentStackedLineSeries = New Indexed100PercentStackedLineSeries()
                     MyStackedLineSeries1.Add(MySeriesElement1)
                     MyStackedLineSeries1.Add(MySeriesElement2)
                     MyStackedLineSeries1.Add(MySeriesElement3)
            
                     ' Add indexed 100 percent stacked line series to the plot line
                     MyPlotArea.Series.Add(MyStackedLineSeries1)
            
                     ' Add indexed X AxisLabels to the XAxis
                     MyStackedLineSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q1", 0))
                     MyStackedLineSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q2", 1))
                     MyStackedLineSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q3", 2))
                     MyStackedLineSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q4", 3))
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf") 
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 230);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a indexed 100 percent stacked line series element and add values to it
                     Indexed100PercentStackedLineSeriesElement seriesElement1 = new Indexed100PercentStackedLineSeriesElement("Website A");
                     seriesElement1.Values.Add(new float[] { 5, 7, 9, 6 });
                     Indexed100PercentStackedLineSeriesElement seriesElement2 = new Indexed100PercentStackedLineSeriesElement("Website B");
                     seriesElement2.Values.Add(new float[] { 4, 2, 5, 8 });
                     Indexed100PercentStackedLineSeriesElement seriesElement3 = new Indexed100PercentStackedLineSeriesElement("Website C");
                     seriesElement3.Values.Add(new float[] { 2, 4, 6, 9 });
            
                     // Create a indexed 100 percent stacked line series and add indexed 100 percent stacked line series elements to it
                     Indexed100PercentStackedLineSeries stackedLineSeries1 = new Indexed100PercentStackedLineSeries();
                     stackedLineSeries1.Add(seriesElement1);
                     stackedLineSeries1.Add(seriesElement2);
                     stackedLineSeries1.Add(seriesElement3);
            
                     // Add indexed 100 percent stacked line series to the plot line
                     plotArea.Series.Add(stackedLineSeries1);
            
                     // Add indexed X AxisLabels to the XAxis
                     stackedLineSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q1", 0));
                     stackedLineSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q2", 1));
                     stackedLineSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q3", 2));
                     stackedLineSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q4", 3));
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf");       
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedLineSeriesElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedLineSeriesElement"/> object.
            </summary>
            <param name="name"> Name of the indexed 100Percent stacked line series element.</param>       
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedLineSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedLineSeriesElement"/> object.
            </summary>
            <param name="name"> Name of the indexed 100Percent stacked line series element.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed 100Percent stacked line series element.</param>       
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedLineSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedLineSeriesElement"/> object.
            </summary>
            <param name="name"> Name of the indexed 100Percent stacked line series element.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed 100Percent stacked line series element.</param>
            <param name="lineWidth">Line width of the indexed 100Percent stacked line series element.</param>       
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedLineSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.LineStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedLineSeriesElement"/> object.
            </summary>
            <param name="name"> Name of the indexed 100Percent stacked line series element. </param>
            <param name="color"> <see cref="T:ceTe.DynamicPDF.Color"/> of the indexed 100Percent stacked line series element. </param>
            <param name="lineWidth"> Line width of the indexed 100Percent stacked line series element. </param>
            <param name="style"><see cref="T:ceTe.DynamicPDF.LineStyle"/> of the indexed 100Percent stacked line series element. </param>        
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedLineSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.LineStyle,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedLineSeriesElement"/> object.
            </summary>
            <param name="name"> Name of the indexed 100Percent stacked line series element.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed 100Percent stacked line series element.</param>
            <param name="lineWidth">Line width of the indexed 100Percent stacked line series element.</param>
            <param name="style"><see cref="T:ceTe.DynamicPDF.LineStyle"/> of the indexed 100Percent stacked line series element.</param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the indexed 100Percent stacked line series element.</param>        
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedLineSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.LineStyle,ceTe.DynamicPDF.PageElements.Charting.Marker)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedLineSeriesElement"/> object.
            </summary>
            <param name="name">Name of the indexed 100Percent stacked line series element.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed 100Percent stacked line series element.</param>
            <param name="lineWidth">Line width of the indexed 100Percent stacked line series element.</param>
            <param name="style"><see cref="T:ceTe.DynamicPDF.LineStyle"/> of the indexed 100Percent stacked line series element.</param>
            <param name="marker"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Marker"/> of the indexed 100Percent stacked line series element.</param>       
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedLineSeriesElement.#ctor(System.String,System.Single,ceTe.DynamicPDF.LineStyle,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Marker,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedLineSeriesElement"/> object.
            </summary>
            <param name="name"> Name of the indexed 100Percent stacked lineSeries element.</param>
            <param name="lineWidth">Line width of the indexed 100Percent stacked line series element.</param>
            <param name="style"><see cref="T:ceTe.DynamicPDF.LineStyle"/> of the indexed 100Percent stacked line series element.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed 100Percent stacked line series element.</param>
            <param name="marker"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Marker"/> of the indexed indexed 100Percent stacked line series element.</param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the indexed 100Percent stacked line series element.</param>        
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.Indexed100PercentStackedLineSeriesElement.Values">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedLineValueList"/> object contained in the Indexed100PercentStackedLineSeriesElement.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedAreaSeries">
             <summary>
             Represents an IndexedAreaSeries.
             </summary>
             <example>The following example creates an indexed area series chart.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 230)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a indexed area series and add values to it
                     Dim MyAreaSeries1 As IndexedAreaSeries = New IndexedAreaSeries("Website A")
                     MyAreaSeries1.Values.Add(New Single() {5, 7, 9, 6})
                     Dim MyAreaSeries2 As IndexedAreaSeries = New IndexedAreaSeries("Website B")
                     MyAreaSeries2.Values.Add(New Single() {4, 2, 5, 8})
                     Dim MyAreaSeries3 As IndexedAreaSeries = New IndexedAreaSeries("Website C")
                     MyAreaSeries3.Values.Add(New Single() {2, 4, 6, 9})
            
                     ' Add indexed area series to the plot area
                     MyPlotArea.Series.Add(MyAreaSeries1)
                     MyPlotArea.Series.Add(MyAreaSeries2)
                     MyPlotArea.Series.Add(MyAreaSeries3)
             
                     ' Create indexed x axis labels and add those to indexed xAxis
                     MyAreaSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Jan", 0))
                     MyAreaSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Feb", 1))
                     MyAreaSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Mar", 2))
                     MyAreaSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Apr", 3))
            
                     ' Create a  title and add it to the Y axis
                     Dim MyTitle3 As Title = New Title("Visitors (in millions)")
                     MyAreaSeries1.YAxis.Titles.Add(MyTitle3)
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 230);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a indexed area series and add values to it
                     IndexedAreaSeries areaSeries1 = new IndexedAreaSeries("Website A");
                     areaSeries1.Values.Add(new float[] { 5, 7, 9, 6 });
                     IndexedAreaSeries areaSeries2 = new IndexedAreaSeries("Website B");
                     areaSeries2.Values.Add(new float[] { 4, 2, 5, 8 });
                     IndexedAreaSeries areaSeries3 = new IndexedAreaSeries("Website C");
                     areaSeries3.Values.Add(new float[] { 2, 4, 6, 9 });
            
                     // Add indexed area series to the plot area
                     plotArea.Series.Add(areaSeries1);
                     plotArea.Series.Add(areaSeries2);
                     plotArea.Series.Add(areaSeries3);
            
                     // Create a title and add it to the yaxis
                     Title title3 = new Title("Visitors (in millions)");
                     areaSeries1.YAxis.Titles.Add(title3);
            
                     // Add indexed x AxisLabels to the XAxis
                     areaSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q1", 0));
                     areaSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q2", 1));
                     areaSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q3", 2));
                     areaSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q4", 3));
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf"); 
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>	
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedAreaSeries.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedAreaSeries"/> object. 
            </summary>
            <param name="name">Name of the indexed Area series.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedAreaSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedAreaSeries"/> object. 
            </summary>
            <param name="name">Name of the indexed Area series.</param>
            <param name="xAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis"/> of the indexed area series.</param>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the indexed area series.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedAreaSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedAreaSeries"/> object. 
            </summary>
            <param name="name">Name of the indexed area series.</param>
            <param name="xAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis"/> of the indexed area series.</param>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the indexed area series.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed areaseries.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedAreaSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Marker)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedAreaSeries"/> object. 
            </summary>
            <param name="name">Name of the indexed Area series.</param>
            <param name="xAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis"/> of the indexed area series.</param>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the indexed area series.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed areaseries.</param>
            <param name="marker"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Marker"/> of the indexed area series.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedAreaSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedAreaSeries"/> object. 
            </summary>
            <param name="name">Name of the indexed Area series.</param>
            <param name="xAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis"/> of the indexed area series.</param>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the indexed area series.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed area series.</param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the indexed area series.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedAreaSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Marker,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedAreaSeries"/> object. 
            </summary>
            <param name="name">Name of the indexed Area series.</param>
            <param name="xAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis"/> of the indexed area series.</param>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the indexed area series.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed area series.</param>
            <param name="marker"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Marker"/> of the indexed area series.</param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the indexed area series.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedAreaSeries.XAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis"/> object of the series.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedAreaSeries.YAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> object of the series.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedAreaSeries.Values">
             <summary>
             Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedAreaValueList"/> object contained in the IndexedAreaSeries.
             </summary>
            <returns>IndexedAreaValueList of the series.</returns>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedBarSeries">
             <summary>
             This class represents the IndexedBarSeries.
             </summary>
             <example>The following example creates an indexed bar series chart.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a indexed bar series and add values to it
                     Dim MyBarSeries1 As IndexedBarSeries = New IndexedBarSeries("Website A")
                     MyBarSeries1.Values.Add(New Single() {5, 7, 9, 6})
                     Dim MyBarSeries2 As IndexedBarSeries = New IndexedBarSeries("Website B")
                     MyBarSeries2.Values.Add(New Single() {4, 2, 5, 8})
                     Dim MyBarSeries3 As IndexedBarSeries = New IndexedBarSeries("Website C")
                     MyBarSeries3.Values.Add(New Single() {2, 4, 6, 9})
            
                     ' Add indexed bar series to the plot area
                     MyPlotArea.Series.Add(MyBarSeries1)
                     MyPlotArea.Series.Add(MyBarSeries2)
                     MyPlotArea.Series.Add(MyBarSeries3)
            
                     ' Create a title and add it to the Xaxis
                     Dim MyTitle3 As Title = New Title("Visitors (in millions)")
                     MyBarSeries1.XAxis.Titles.Add(MyTitle3)
            
                     ' Add indexed y AxisLabels to the YAxis
                     MyBarSeries1.YAxis.Labels.Add(New IndexedYAxisLabel("Q1", 0))
                     MyBarSeries1.YAxis.Labels.Add(New IndexedYAxisLabel("Q2", 1))
                     MyBarSeries1.YAxis.Labels.Add(New IndexedYAxisLabel("Q3", 2))
                     MyBarSeries1.YAxis.Labels.Add(New IndexedYAxisLabel("Q4", 3))
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a indexed bar series and add values to it
                     IndexedBarSeries barSeries1 = new IndexedBarSeries("Website A");
                     barSeries1.Values.Add(new float[] { 5, 7, 9, 6 });
                     IndexedBarSeries barSeries2 = new IndexedBarSeries("Website B");
                     barSeries2.Values.Add(new float[] { 4, 2, 5, 8 });
                     IndexedBarSeries barSeries3 = new IndexedBarSeries("Website C");
                     barSeries3.Values.Add(new float[] { 2, 4, 6, 9 });
            
                     // Add indexed bar series to the plot area
                     plotArea.Series.Add(barSeries1);
                     plotArea.Series.Add(barSeries2);
                     plotArea.Series.Add(barSeries3);
            
                     // Create a title and add it to the Xaxis
                     Title lTitle = new Title("Visitors (in millions)");
                     barSeries1.XAxis.Titles.Add(lTitle);
            
                     // Add indexed y  AxisLabels to the YAxis
                     barSeries1.YAxis.Labels.Add(new IndexedYAxisLabel("Q1", 0));
                     barSeries1.YAxis.Labels.Add(new IndexedYAxisLabel("Q2", 1));
                     barSeries1.YAxis.Labels.Add(new IndexedYAxisLabel("Q3", 2));
                     barSeries1.YAxis.Labels.Add(new IndexedYAxisLabel("Q4", 3));
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedBarSeries.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedBarSeries"/> class.
            </summary>
            <param name="name"> Name of the indexed bar series.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedBarSeries.#ctor(System.String,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedBarSeries"/> class.
            </summary>
            <param name="name"> Name of the indexed bar series.</param>
            <param name="color"> <see cref="T:ceTe.DynamicPDF.Color"/> of the indexed bar series.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedBarSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedBarSeries"/> class.
            </summary>
            <param name="name"> Name of the indexed bar series.</param>
            <param name="numericXAxis"> <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis"/> of the indexed bar series.</param>
            <param name="indexedYAxis"> <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxis"/> of the indexed bar series.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedBarSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedBarSeries"/> class.
            </summary>
            <param name="name">Name of the indexed bar series.</param>
            <param name="numericXAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis"/> of the indexed bar series.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedBarSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedBarSeries"/> class.
            </summary>
            <param name="name">Name of the indexed bar series.</param>
            <param name="indexedYAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxis"/> of the indexed bar series.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedBarSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxis,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedBarSeries"/> class.
            </summary>
            <param name="name"> Name of the indexed bar series.</param>
            <param name="numericXAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis"/> of the indexed bar series.</param>
            <param name="indexedYAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxis"/> of the indexed bar series.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed bar series.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedBarSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxis,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedBarSeries"/> class.
            </summary>
            <param name="name"> Name of the indexed bar series.</param>
            <param name="numericXAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis"/> of the indexed bar series.</param>
            <param name="indexedYAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxis"/> of the indexed bar series.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed bar series.</param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the indexed bar series.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedBarSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxis,ceTe.DynamicPDF.Color,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedBarSeries"/> class.
            </summary>
            <param name="name">Name of the indexed bar series.</param>
            <param name="numericXAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis"/> of the indexed bar series.</param>
            <param name="indexedYAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxis"/> of the indexed bar series.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed bar series.</param>
            <param name="borderWidth">Border width of the indexed bar series.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedBarSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxis,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedBarSeries"/> class.
            </summary>
            <param name="name">Name of the indexed bar series.</param>
            <param name="numericXAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis"/> of the indexed bar series.</param>
            <param name="indexedYAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxis"/> of the indexed bar series.</param>
            <param name="borderWidth">Border width of the indexed bar series.</param>
            <param name="borderColor">Border <see cref="T:ceTe.DynamicPDF.Color"/> for border of the indexed bar series.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedBarSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxis,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedBarSeries"/> class.
            </summary>
            <param name="name"> Name of the indexed bar series.</param>
            <param name="numericXAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis"/> of the indexed bar series.</param>
            <param name="indexedYAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxis"/> of the indexed bar series.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed bar series.</param>
            <param name="borderWidth">Border width of the indexed bar series.</param>
            <param name="borderColor">Border <see cref="T:ceTe.DynamicPDF.Color"/> for border of the indexed bar series.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedBarSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxis,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedBarSeries"/> class.
            </summary>
            <param name="name">Name of the indexed bar series.</param>
            <param name="numericXAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis"/> of the indexed bar series.</param>
            <param name="indexedYAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxis"/> of the indexed bar series.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed bar series.</param>
            <param name="borderWidth"> Border width of the indexed bar series.</param>
            <param name="borderColor"> Border <see cref="T:ceTe.DynamicPDF.Color"/> for border of the indexed bar series.</param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/>of the indexed bar series.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedBarSeries.Values">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedBarValueList"/> object contained in the IndexedBarSeries.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedBarSeries.XAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis"/> object of the series.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedBarSeries.YAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxis"/> object of the series.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedColumnSeries">
             <summary>
             Represents an IndexedColumnSeries. 
             </summary>
             <example>The following example creates indexed column series chart.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting   
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 230)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a indexed column series and add values to it
                     Dim MyColumnSeries1 As IndexedColumnSeries = New IndexedColumnSeries("Website A")
                     MyColumnSeries1.Values.Add(New Single() {5, 7, 9, 6})
                     Dim MyColumnSeries2 As IndexedColumnSeries = New IndexedColumnSeries("Website B")
                     MyColumnSeries2.Values.Add(New Single() {4, 2, 5, 8})
                     Dim MyColumnSeries3 As IndexedColumnSeries = New IndexedColumnSeries("Website C")
                     MyColumnSeries3.Values.Add(New Single() {2, 4, 6, 9})
            
                     ' Add indexed column series to the plot area
                     MyPlotArea.Series.Add(MyColumnSeries1)
                     MyPlotArea.Series.Add(MyColumnSeries2)
                     MyPlotArea.Series.Add(MyColumnSeries3)
            
                     ' Create a title and add it to the yaxis
                     Dim MyTitle3 As Title = New Title("Visitors (in millions)")
                     MyColumnSeries1.YAxis.Titles.Add(MyTitle3)
            
                     ' Add indexed X AxisLabels to the XAxis
                     MyColumnSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q1", 0))
                     MyColumnSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q2", 1))
                     MyColumnSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q3", 2))
                     MyColumnSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q4", 3))
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 230);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a indexed column series and add values to it
                     IndexedColumnSeries columnSeries1 = new IndexedColumnSeries("Website A");
                     columnSeries1.Values.Add(new float[] { 5, 7, 9, 6 });
                     IndexedColumnSeries columnSeries2 = new IndexedColumnSeries("Website B");
                     columnSeries2.Values.Add(new float[] { 4, 2, 5, 8 });
                     IndexedColumnSeries columnSeries3 = new IndexedColumnSeries("Website C");
                     columnSeries3.Values.Add(new float[] { 2, 4, 6, 9 });
            
                     // Add indexed column series to the plot area
                     plotArea.Series.Add(columnSeries1);
                     plotArea.Series.Add(columnSeries2);
                     plotArea.Series.Add(columnSeries3);
            
                     // Create a title and add it to the yaxis
                     Title lTitle = new Title("Visitors (in millions)");
                     columnSeries1.YAxis.Titles.Add(lTitle);
            
                     // Add indexed X  AxisLabels to the XAxis
                     columnSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q1", 0));
                     columnSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q2", 1));
                     columnSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q3", 2));
                     columnSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q4", 3));
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedColumnSeries.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedColumnSeries"/> class. 
            </summary>
            <param name="name">Name of the indexed column series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedColumnSeries.#ctor(System.String,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedColumnSeries"/> class. 
            </summary>
            <param name="name">Name of the indexed column series. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed column series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedColumnSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedColumnSeries"/> class.
            </summary>
            <param name="name">Name of the indexed column series. </param>
            <param name="indexedXAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis"/> of the indexed column series. </param>
            <param name="numericYAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the indexed column series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedColumnSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedColumnSeries"/> class. 
            </summary>
            <param name="name">Name of the indexed column series. </param>
            <param name="indexedXAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis"/> of the indexed column series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedColumnSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedColumnSeries"/> class. 
            </summary>
            <param name="name">Name of the indexed column series. </param>
            <param name="numericYAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the indexed column series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedColumnSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedColumnSeries"/> class. 
            </summary>
            <param name="name">Name of the indexed column series. </param>
            <param name="indexedXAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis"/> of the indexed column series. </param>
            <param name="numericYAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the indexed column series. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed column series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedColumnSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedColumnSeries"/> class. 
            </summary>
            <param name="name">Name of the indexed column series. </param>
            <param name="indexedXAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis"/> of the indexed column series. </param>
            <param name="numericYAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the indexed column series. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed column series. </param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the indexed column series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedColumnSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis,ceTe.DynamicPDF.Color,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedColumnSeries"/> class. 
            </summary>
            <param name="name">Name of the indexed column series. </param>
            <param name="indexedXAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis"/> of the indexed column series. </param>
            <param name="numericYAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the indexed column series. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed column series. </param>
            <param name="borderWidth">Border width of the indexed column series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedColumnSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedColumnSeries"/> class. 
            </summary>
            <param name="name">Name of the indexed column series. </param>
            <param name="indexedXAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis"/> of the indexed column series. </param>
            <param name="numericYAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the indexed column series. </param>
            <param name="borderWidth">Border width of the indexed column series. </param>
            <param name="borderColor">Border <see cref="T:ceTe.DynamicPDF.Color"/> for the border of the indexed column series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedColumnSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedColumnSeries"/> class. 
            </summary>
            <param name="name">Name of the indexed column series. </param>
            <param name="indexedXAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis"/> of the indexed column series. </param>
            <param name="numericYAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the indexed column series. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed column series. </param>
            <param name="borderWidth">Border width of the indexed column series. </param>
            <param name="borderColor">Border <see cref="T:ceTe.DynamicPDF.Color"/> for the border of the indexed column series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedColumnSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedColumnSeries"/> class. 
            </summary>
            <param name="name">Name of the indexed column series. </param>
            <param name="indexedXAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis"/> of the indexed column series. </param>
            <param name="numericYAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the indexed column series. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed column series. </param>
            <param name="borderWidth">Border width of the indexed column series. </param>
            <param name="borderColor">Border <see cref="T:ceTe.DynamicPDF.Color"/> for the border of the indexed column series. </param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the indexed column series. </param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedColumnSeries.Values">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedColumnValueList"/> object contained in the IndexedColumnSeries.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedColumnSeries.XAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis"/> object of the series. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedColumnSeries.YAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> object of the series. 
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedLineSeries">
             <summary>
             Represents an IndexedLineSeries.
             </summary>
             <example>The following example creates an indexed line series chart.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
             
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 230)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a indexed line series and add values to it
                     Dim MyLineSeries1 As IndexedLineSeries = New IndexedLineSeries("Website A")
                     MyLineSeries1.Values.Add(New Single() {5, 7, 9, 6})
                     Dim MyLineSeries2 As IndexedLineSeries = New IndexedLineSeries("Website B")
                     MyLineSeries2.Values.Add(New Single() {4, 2, 5, 8})
                     Dim MyLineSeries3 As IndexedLineSeries = New IndexedLineSeries("Website C")
                     MyLineSeries3.Values.Add(New Single() {2, 4, 6, 9})
            
                     ' Add indexed line series to the plotArea
                     MyPlotArea.Series.Add(MyLineSeries1)
                     MyPlotArea.Series.Add(MyLineSeries2)
                     MyPlotArea.Series.Add(MyLineSeries3)
            
                     ' Create a title and add it to the yaxis
                     Dim MyTitle3 As Title = New Title("Visitors (in millions)")
                     MyLineSeries1.YAxis.Titles.Add(MyTitle3)
             
                     ' Add indexed x AxisLabels to the XAxis
                     MyLineSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q1", 0))
                     MyLineSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q2", 1))
                     MyLineSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q3", 2))
                     MyLineSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q4", 3))
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 230);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a indexed line series and add values to it
                     IndexedLineSeries lineSeries1 = new IndexedLineSeries("Website A");
                     lineSeries1.Values.Add(new float[] { 5, 7, 9, 6 });
                     IndexedLineSeries lineSeries2 = new IndexedLineSeries("Website B");
                     lineSeries2.Values.Add(new float[] { 4, 2, 5, 8 });
                     IndexedLineSeries lineSeries3 = new IndexedLineSeries("Website C");
                     lineSeries3.Values.Add(new float[] { 2, 4, 6, 9 });
            
                     // Add indexed line series to the plotArea
                     plotArea.Series.Add(lineSeries1);
                     plotArea.Series.Add(lineSeries2);
                     plotArea.Series.Add(lineSeries3);
            
                     // Create a title and add it to the yaxis
                     Title lTitle = new Title("Visitors (in millions)");
                     lineSeries1.YAxis.Titles.Add(lTitle);
            
                     // Add indexed X AxisLabels to the XAxis
                     lineSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q1", 0));
                     lineSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q2", 1));
                     lineSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q3", 2));
                     lineSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q4", 3));
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf"); 
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedLineSeries.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedLineSeries"/> object.
            </summary>
            <param name="name"> Name of the indexed lineseries.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedLineSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedLineSeries"/> object.
            </summary>
            <param name="name"> Name of the indexed lineseries.</param>
            <param name="xAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis"/> of the indexed line series.</param>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the indexed line series.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedLineSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedLineSeries"/> object.
            </summary>
            <param name="name">  Name of the indexed lineseries.</param>
            <param name="xAxis"> <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis"/> of the indexed line series.</param>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the indexed line series.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed line series.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedLineSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis,ceTe.DynamicPDF.Color,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedLineSeries"/> object.
            </summary>
            <param name="name"> Name of the indexed lineseries.</param>
            <param name="xAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis"/> of the indexed line series.</param>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the indexed line series.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed line series.</param>
            <param name="lineWidth">Line width of the indexed line series.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedLineSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.LineStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedLineSeries"/> object.
            </summary>
            <param name="name">Name of the indexed lineseries.</param>
            <param name="xAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis"/> of the indexed line series.</param>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the indexed line series.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed line series.</param>
            <param name="lineWidth">Line width of the indexed line series.</param>
            <param name="style"><see cref="T:ceTe.DynamicPDF.LineStyle"/> of the indexed line series.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedLineSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.LineStyle,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedLineSeries"/> object.
            </summary>
            <param name="name"> Name of the indexed lineseries.</param>
            <param name="xAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis"/> of the indexed line series.</param>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the indexed line series.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed line series.</param>
            <param name="lineWidth">Line width of the indexed line series.</param>
            <param name="style"><see cref="T:ceTe.DynamicPDF.LineStyle"/> of the indexed line series.</param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the indexed line series.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedLineSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.LineStyle,ceTe.DynamicPDF.PageElements.Charting.Marker)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedLineSeries"/> object.
            </summary>
            <param name="name">Name of the indexed lineseries.</param>
            <param name="xAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis"/> of the indexed line series.</param>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the indexed line series.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed line series.</param>
            <param name="lineWidth">Line width of the indexed line series.</param>
            <param name="style"><see cref="T:ceTe.DynamicPDF.LineStyle"/> of the indexed line series.</param>
            <param name="marker"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Marker"/> of the indexed line series.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedLineSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis,System.Single,ceTe.DynamicPDF.LineStyle,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Marker,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedLineSeries"/> object.
            </summary>
            <param name="name">Name of the indexed line series.</param>
            <param name="xAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis"/> of the indexed line series.</param>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the indexed line series.</param>
            <param name="lineWidth">Line width of the indexed line series.</param>
            <param name="style"><see cref="T:ceTe.DynamicPDF.LineStyle"/> of the indexed line series.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed line series.</param>
            <param name="marker"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Marker"/> of the indexed line series.</param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the indexed line series.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedLineSeries.XAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis"/> object of the series.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedLineSeries.YAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> object of the series.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedLineSeries.Values">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedLineValueList"/> object contained in the IndexedLineSeries.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedAreaSeries">
             <summary>
             Represents an IndexedStackedAreaSeries.
             </summary>
             <example>The following example creates an indexed stacked area series chart.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 230)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a indexed x axis
                     Dim xAxis As IndexedXAxis = New IndexedXAxis()
            
                     ' Add indexed x AxisLabels to the XAxis
                     xAxis.Labels.Add(New IndexedXAxisLabel("Q1", 0))
                     xAxis.Labels.Add(New IndexedXAxisLabel("Q2", 1))
                     xAxis.Labels.Add(New IndexedXAxisLabel("Q3", 2))
                     xAxis.Labels.Add(New IndexedXAxisLabel("Q4", 3))
            
                     ' Create a numeric y axis
                     Dim yAxis As NumericYAxis = New NumericYAxis()
            
                     ' Create a indexed stacked area series element and add values to it
                     Dim MySeriesElement1 As IndexedStackedAreaSeriesElement = New IndexedStackedAreaSeriesElement("Website A")
                     MySeriesElement1.Values.Add(New Single() {5, 7, 9, 6})
                     Dim MySeriesElement2 As IndexedStackedAreaSeriesElement = New IndexedStackedAreaSeriesElement("Website B")
                     MySeriesElement2.Values.Add(New Single() {4, 2, 5, 8})
                     Dim MySeriesElement3 As IndexedStackedAreaSeriesElement = New IndexedStackedAreaSeriesElement("Website C")
                     MySeriesElement3.Values.Add(New Single() {2, 4, 6, 9})
            
                     ' Create a indexed stacked area series and add indexed stacked area series elements to it
                     Dim MyStackedAreaSeries1 As IndexedStackedAreaSeries = New IndexedStackedAreaSeries(xAxis, yAxis)
                     MyStackedAreaSeries1.Add(MySeriesElement1)
                     MyStackedAreaSeries1.Add(MySeriesElement2)
                     MyStackedAreaSeries1.Add(MySeriesElement3)
            
                     ' Add indexed stacked area series to the plot area
                     MyPlotArea.Series.Add(MyStackedAreaSeries1)
             
                     ' Create a title and add it to the yaxis
                     Dim MyTitle3 As Title = New Title("Visitors (in millions)")
                     MyStackedAreaSeries1.YAxis.Titles.Add(MyTitle3)
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 230);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a indexed x axis
                     IndexedXAxis xAxis = new IndexedXAxis();
            
                     // Add indexed x AxisLabels to the XAxis
                     xAxis.Labels.Add(new IndexedXAxisLabel("Q1", 0));
                     xAxis.Labels.Add(new IndexedXAxisLabel("Q2", 1));
                     xAxis.Labels.Add(new IndexedXAxisLabel("Q3", 2));
                     xAxis.Labels.Add(new IndexedXAxisLabel("Q4", 3));
            
                     // Create a numeric y axis
                     NumericYAxis yAxis = new NumericYAxis();
            
                     // Create a indexed stacked area series element and add values to it
                     IndexedStackedAreaSeriesElement seriesElement1 = new IndexedStackedAreaSeriesElement("Website A");
                     seriesElement1.Values.Add(new float[] { 5, 7, 9, 6 });
                     IndexedStackedAreaSeriesElement seriesElement2 = new IndexedStackedAreaSeriesElement("Website B");
                     seriesElement2.Values.Add(new float[] { 4, 2, 5, 8 });
                     IndexedStackedAreaSeriesElement seriesElement3 = new IndexedStackedAreaSeriesElement("Website C");
                     seriesElement3.Values.Add(new float[] { 2, 4, 6, 9 });
            
                     // Create a indexed stacked area series and add indexed stacked area series elements to it
                     IndexedStackedAreaSeries stackedAreaSeries1 = new IndexedStackedAreaSeries(xAxis, yAxis);
                     stackedAreaSeries1.Add(seriesElement1);
                     stackedAreaSeries1.Add(seriesElement2);
                     stackedAreaSeries1.Add(seriesElement3);
            
                     // Add indexed stacked area series to the plot area
                     plotArea.Series.Add(stackedAreaSeries1);
            
                     // Create a title and add it to the yaxis
                     Title lTitle = new Title("Visitors (in millions)");
                     stackedAreaSeries1.YAxis.Titles.Add(lTitle);
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf"); 
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedAreaSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedAreaSeries"/> object.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedAreaSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedAreaSeries"/> object.
            </summary>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the indexed stacked area series.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedAreaSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedAreaSeries"/> object.
            </summary>
            <param name="xAxis"> <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis"/> of the indexed stacked area series.</param>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the indexed stacked area series</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedAreaSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedAreaSeries"/> object.
            </summary>
            <param name="xAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis"/> of the indexed stacked area series.</param>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the Indexed stacked area series</param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the indexed stacked area series</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedAreaSeries.Add(ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedAreaSeriesElement)">
            <summary>
            Adds an <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedAreaSeriesElement"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedAreaSeries"/> element list.
            </summary>
            <param name="element"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedAreaSeriesElement"/> to be added.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedAreaSeries.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedAreaSeriesElement"/> object at the given index.
            </summary>
            <param name="index">Position of the required indexed stacked area series element.</param>
            <returns>The <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedAreaSeriesElement"/> object.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedAreaSeries.XAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis"/> of the series.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedAreaSeries.YAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the series.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedAreaSeriesElement">
             <summary>
             Represents an IndexedStackedAreaSeriesElement.
             </summary>
             <example>The following example creates indexed stacked area series elements and creates an indexed stacked
             area series chart to it.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 230)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a indexed x axis
                     Dim xAxis As IndexedXAxis = New IndexedXAxis()
            
                     ' Add indexed x AxisLabels to the XAxis
                     xAxis.Labels.Add(New IndexedXAxisLabel("Q1", 0))
                     xAxis.Labels.Add(New IndexedXAxisLabel("Q2", 1))
                     xAxis.Labels.Add(New IndexedXAxisLabel("Q3", 2))
                     xAxis.Labels.Add(New IndexedXAxisLabel("Q4", 3))
            
                     ' Create a numeric y axis
                     Dim yAxis As NumericYAxis = New NumericYAxis()
            
                     ' Create a indexed stacked area series element and add values to it
                     Dim MySeriesElement1 As IndexedStackedAreaSeriesElement = New IndexedStackedAreaSeriesElement("Website A")
                     MySeriesElement1.Values.Add(New Single() {5, 7, 9, 6})
                     Dim MySeriesElement2 As IndexedStackedAreaSeriesElement = New IndexedStackedAreaSeriesElement("Website B")
                     MySeriesElement2.Values.Add(New Single() {4, 2, 5, 8})
                     Dim MySeriesElement3 As IndexedStackedAreaSeriesElement = New IndexedStackedAreaSeriesElement("Website C")
                     MySeriesElement3.Values.Add(New Single() {2, 4, 6, 9})
            
                     ' Create a indexed stacked area series and add indexed stacked area series elements to it
                     Dim MyStackedAreaSeries1 As IndexedStackedAreaSeries = New IndexedStackedAreaSeries(xAxis, yAxis)
                     MyStackedAreaSeries1.Add(MySeriesElement1)
                     MyStackedAreaSeries1.Add(MySeriesElement2)
                     MyStackedAreaSeries1.Add(MySeriesElement3)
            
                     ' Add indexed stacked area series to the plot area
                     MyPlotArea.Series.Add(MyStackedAreaSeries1)
             
                     ' Create a title and add it to the yaxis
                     Dim MyTitle3 As Title = New Title("Visitors (in millions)")
                     MyStackedAreaSeries1.YAxis.Titles.Add(MyTitle3)
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 230);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a indexed x axis
                     IndexedXAxis xAxis = new IndexedXAxis();
            
                     // Add indexed x  AxisLabels to the XAxis
                     xAxis.Labels.Add(new IndexedXAxisLabel("Q1", 0));
                     xAxis.Labels.Add(new IndexedXAxisLabel("Q2", 1));
                     xAxis.Labels.Add(new IndexedXAxisLabel("Q3", 2));
                     xAxis.Labels.Add(new IndexedXAxisLabel("Q4", 3));
            
                     // Create a numeric y axis
                     NumericYAxis yAxis = new NumericYAxis();
            
                     // Create a indexed stacked area series element and add values to it
                     IndexedStackedAreaSeriesElement seriesElement1 = new IndexedStackedAreaSeriesElement("Website A");
                     seriesElement1.Values.Add(new float[] { 5, 7, 9, 6 });
                     IndexedStackedAreaSeriesElement seriesElement2 = new IndexedStackedAreaSeriesElement("Website B");
                     seriesElement2.Values.Add(new float[] { 4, 2, 5, 8 });
                     IndexedStackedAreaSeriesElement seriesElement3 = new IndexedStackedAreaSeriesElement("Website C");
                     seriesElement3.Values.Add(new float[] { 2, 4, 6, 9 });
            
                     // Create a indexed stacked area series and add indexed stacked area series elements to it
                     IndexedStackedAreaSeries stackedAreaSeries1 = new IndexedStackedAreaSeries(xAxis, yAxis);
                     stackedAreaSeries1.Add(seriesElement1);
                     stackedAreaSeries1.Add(seriesElement2);
                     stackedAreaSeries1.Add(seriesElement3);
            
                     // Add indexed stacked area series to the plot area
                     plotArea.Series.Add(stackedAreaSeries1);
            
                     // Create a title and add it to the yaxis
                     Title lTitle = new Title("Visitors (in millions)");
                     stackedAreaSeries1.YAxis.Titles.Add(lTitle);
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf"); 
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedAreaSeriesElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedAreaSeriesElement"/> object.
            </summary>
            <param name="name"> Name of the indexed stacked area series element.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedAreaSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedAreaSeriesElement"/> object.
            </summary>
            <param name="name">Name of the indexed stacked area series element.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed stacked area series element.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedAreaSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Marker)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedAreaSeriesElement"/> object.
            </summary>
            <param name="name">Name of the indexed stacked area series element.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed stacked area series element.</param>
            <param name="marker"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Marker"/> of the indexed stacked srea series element.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedAreaSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedAreaSeriesElement"/> object.
            </summary>
            <param name="name">Name of the indexed stacked area series element.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed stacked area series element.</param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the indexed stacked area series element.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedAreaSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Marker,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedAreaSeriesElement"/> object.
            </summary>
            <param name="name">Name of the indexed stacked area series element.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed stacked area series element.</param>
            <param name="marker"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Marker"/> of the indexed stacked area series element.</param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the indexed stacked area series element.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedAreaSeriesElement.Values">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedAreaValueList"/> object contained in the IndexedStackedAreaSeriesElement.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedBarSeries">
             <summary>
             This class represents the IndexedStackedBarSeries.
             </summary>
             <example>The following example creates indexed stacked bar series chart. 
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 230)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a indexed stacked bar series elements and add values to it
                     Dim MySeriesElement1 As IndexedStackedBarSeriesElement = New IndexedStackedBarSeriesElement("Website A")
                     MySeriesElement1.Values.Add(New Single() {5, 7, 9, 6})
                     Dim MySeriesElement2 As IndexedStackedBarSeriesElement = New IndexedStackedBarSeriesElement("Website B")
                     MySeriesElement2.Values.Add(New Single() {4, 2, 5, 8})
                     Dim MySeriesElement3 As IndexedStackedBarSeriesElement = New IndexedStackedBarSeriesElement("Website C")
                     MySeriesElement3.Values.Add(New Single() {2, 4, 6, 9})
            
                     ' Create a indexed stacked bar series and add indexed stacked bar series elements to it
                     Dim MyStackedBarSeries1 As IndexedStackedBarSeries = New IndexedStackedBarSeries()
                     MyStackedBarSeries1.Add(MySeriesElement1)
                     MyStackedBarSeries1.Add(MySeriesElement2)
                     MyStackedBarSeries1.Add(MySeriesElement3)
            
                     ' Add indexed stacked bar series to the plot area
                     MyPlotArea.Series.Add(MyStackedBarSeries1)
            
                     ' Create a footer title and add it to the chart
                     Dim MyTitle3 As Title = New Title("Visitors (in millions)")
                     MyChart.FooterTitles.Add(MyTitle3)
            
                     ' Add indexed y AxisLabels to the YAxis
                     MyStackedBarSeries1.YAxis.Labels.Add(New IndexedYAxisLabel("Q1", 0))
                     MyStackedBarSeries1.YAxis.Labels.Add(New IndexedYAxisLabel("Q2", 1))
                     MyStackedBarSeries1.YAxis.Labels.Add(New IndexedYAxisLabel("Q3", 2))
                     MyStackedBarSeries1.YAxis.Labels.Add(New IndexedYAxisLabel("Q4", 3))
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 230);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a indexed stacked bar series element and add values to it
                     IndexedStackedBarSeriesElement seriesElement1 = new IndexedStackedBarSeriesElement("Website A");
                     seriesElement1.Values.Add(new float[] { 5, 7, 9, 6 });
                     IndexedStackedBarSeriesElement seriesElement2 = new IndexedStackedBarSeriesElement("Website B");
                     seriesElement2.Values.Add(new float[] { 4, 2, 5, 8 });
                     IndexedStackedBarSeriesElement seriesElement3 = new IndexedStackedBarSeriesElement("Website C");
                     seriesElement3.Values.Add(new float[] { 2, 4, 6, 9 });
            
                     // Create a indexed stacked bar series and add indexed stacked bar series elements to it
                     IndexedStackedBarSeries stackedBarSeries1 = new IndexedStackedBarSeries();
                     stackedBarSeries1.Add(seriesElement1);
                     stackedBarSeries1.Add(seriesElement2);
                     stackedBarSeries1.Add(seriesElement3);
            
                     // Add indexed stacked bar series to the plot area
                     plotArea.Series.Add(stackedBarSeries1);
            
                     // Create a footer title and add it to the chart
                     Title title3 = new Title("Visitors (in millions)");
                     chart.FooterTitles.Add(title3);
            
                     // Add indexed y AxisLabels to the YAxis
                     stackedBarSeries1.YAxis.Labels.Add(new IndexedYAxisLabel("Q1", 0));
                     stackedBarSeries1.YAxis.Labels.Add(new IndexedYAxisLabel("Q2", 1));
                     stackedBarSeries1.YAxis.Labels.Add(new IndexedYAxisLabel("Q3", 2));
                     stackedBarSeries1.YAxis.Labels.Add(new IndexedYAxisLabel("Q4", 3));
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf"); 
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedBarSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedBarSeries"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedBarSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedBarSeries"/> class.
            </summary>
            <param name="numericXAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis"/> of the indexed stacked bar series.</param>
            <param name="indexedYAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxis"/> of the indexed stacked bar series.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedBarSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxis,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedBarSeries"/> class.
            </summary>
            <param name="numericXAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis"/> of the indexed stacked bar series.</param>
            <param name="indexedYAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxis"/> of the indexed stacked bar series.</param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the indexed stacked bar series.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedBarSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedBarSeries"/> class.
            </summary>
            <param name="numericXAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis"/> of the indexed stacked bar series.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedBarSeries.Add(ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedBarSeriesElement)">
            <summary>
            Adds an <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedBarSeriesElement"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedBarSeries"/> element list.
            </summary>
            <param name="indexedStackedBarSeriesElement"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedBarSeriesElement"/> to be added. </param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedBarSeries.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedBarSeriesElement"/> object at the given index.
            </summary>
            <param name="index">Position of the required Indexed Stacked Bar Series Element.</param>
            <returns>The <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedBarSeriesElement"/> object.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedBarSeries.XAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis"/> of the series.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedBarSeries.YAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedYAxis"/> of the series.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedBarSeriesElement">
             <summary>
             This class represents the IndexedStackedBarSeriesElement.
             </summary>
             <example>The following example creates indexed stacked bar series elements and creates indexed stacked bar 
             series chart to it.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 230)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a indexed stacked bar series element and add values to it
                     Dim MySeriesElement1 As IndexedStackedBarSeriesElement = New IndexedStackedBarSeriesElement("Website A")
                     MySeriesElement1.Values.Add(New Single() {5, 7, 9, 6})
                     Dim MySeriesElement2 As IndexedStackedBarSeriesElement = New IndexedStackedBarSeriesElement("Website B")
                     MySeriesElement2.Values.Add(New Single() {4, 2, 5, 8})
                     Dim MySeriesElement3 As IndexedStackedBarSeriesElement = New IndexedStackedBarSeriesElement("Website C")
                     MySeriesElement3.Values.Add(New Single() {2, 4, 6, 9})
            
                     ' Create a indexed stacked bar series and add indexed stacked bar series elements to it
                     Dim MyStackedBarSeries1 As IndexedStackedBarSeries = New IndexedStackedBarSeries()
                     MyStackedBarSeries1.Add(MySeriesElement1)
                     MyStackedBarSeries1.Add(MySeriesElement2)
                     MyStackedBarSeries1.Add(MySeriesElement3)
            
                     ' Add indexed stacked bar series to the plot area
                     MyPlotArea.Series.Add(MyStackedBarSeries1)
            
                     ' Create a footer title and add it to the chart
                     Dim MyTitle3 As Title = New Title("Visitors (in millions)")
                     MyChart.FooterTitles.Add(MyTitle3)
            
                     ' Add indexed y AxisLabels to the YAxis
                     MyStackedBarSeries1.YAxis.Labels.Add(New IndexedYAxisLabel("Q1", 0))
                     MyStackedBarSeries1.YAxis.Labels.Add(New IndexedYAxisLabel("Q2", 1))
                     MyStackedBarSeries1.YAxis.Labels.Add(New IndexedYAxisLabel("Q3", 2))
                     MyStackedBarSeries1.YAxis.Labels.Add(New IndexedYAxisLabel("Q4", 3))
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 230);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a indexed stacked bar series and add values to it
                     IndexedStackedBarSeriesElement seriesElement1 = new IndexedStackedBarSeriesElement("Website A");
                     seriesElement1.Values.Add(new float[] { 5, 7, 9, 6 });
                     IndexedStackedBarSeriesElement seriesElement2 = new IndexedStackedBarSeriesElement("Website B");
                     seriesElement2.Values.Add(new float[] { 4, 2, 5, 8 });
                     IndexedStackedBarSeriesElement seriesElement3 = new IndexedStackedBarSeriesElement("Website C");
                     seriesElement3.Values.Add(new float[] { 2, 4, 6, 9 });
            
                     // Create a indexed stacked bar series and add indexed stacked bar series elements to it
                     IndexedStackedBarSeries stackedBarSeries1 = new IndexedStackedBarSeries();
                     stackedBarSeries1.Add(seriesElement1);
                     stackedBarSeries1.Add(seriesElement2);
                     stackedBarSeries1.Add(seriesElement3);
            
                     // Add indexed stacked bar series to the plot area
                     plotArea.Series.Add(stackedBarSeries1);
            
                     // Create a footer title and add it to the chart
                     Title title3 = new Title("Visitors (in millions)");
                     chart.FooterTitles.Add(title3);
            
                     // Add indexed Y AxisLabels to the YAxis
                     stackedBarSeries1.YAxis.Labels.Add(new IndexedYAxisLabel("Q1", 0));
                     stackedBarSeries1.YAxis.Labels.Add(new IndexedYAxisLabel("Q2", 1));
                     stackedBarSeries1.YAxis.Labels.Add(new IndexedYAxisLabel("Q3", 2));
                     stackedBarSeries1.YAxis.Labels.Add(new IndexedYAxisLabel("Q4", 3));
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf"); 
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedBarSeriesElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedBarSeriesElement"/> class.
            </summary>
            <param name="name">Name of the indexed stacked bar series element.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedBarSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedBarSeriesElement"/> class.
            </summary>
            <param name="name">Name of the indexed stacked bar series element.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed stacked bar series element.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedBarSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedBarSeriesElement"/> class.
            </summary>
            <param name="name">Name of the indexed stacked bar series element.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed stacked bar series element.</param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the indexed stacked bar series element.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedBarSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedBarSeriesElement"/> class.
            </summary>
            <param name="name">Name of the indexed stacked bar series element.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed stacked bar series element.</param>
            <param name="borderWidth">Border width of the indexed stacked bar series element.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedBarSeriesElement.#ctor(System.String,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedBarSeriesElement"/> class.
            </summary>
            <param name="name"> Name of the indexed stacked bar series element.</param>
            <param name="borderWidth">Border width of the indexed stacked bar series element.</param>
            <param name="borderColor">Border <see cref="T:ceTe.DynamicPDF.Color"/> of the indexed stacked bar series element.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedBarSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedBarSeriesElement"/> class.
            </summary>
            <param name="name">Name of the indexed stacked bar series element.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed stacked bar series element.</param>
            <param name="borderWidth">Border width of the indexed stacked bar series element.</param>
            <param name="borderColor">Border <see cref="T:ceTe.DynamicPDF.Color"/> of the indexed stacked bar series element.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedBarSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedBarSeriesElement"/> class.
            </summary>
            <param name="name">Name of the indexed stacked bar series element.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed stacked bar series element.</param>
            <param name="borderWidth">Border width of the indexed stacked bar series element.</param>
            <param name="borderColor">Border <see cref="T:ceTe.DynamicPDF.Color"/> of indexed stacked bar series element.</param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the indexed stacked bar series element.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedBarSeriesElement.Values">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedBarValueList"/> object contained in the IndexedStackedBarseriesElement.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedColumnSeries">
             <summary>
             Represents the IndexedStackedColumnSeries. 
             </summary>
             <example>The following example creates indexed stacked column series chart.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 230)
             
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a indexed stacked column series element and add values to it
                     Dim MySeriesElement1 As IndexedStackedColumnSeriesElement = New IndexedStackedColumnSeriesElement("Website A")
                     MySeriesElement1.Values.Add(New Single() {5, 7, 9, 6})
                     Dim MySeriesElement2 As IndexedStackedColumnSeriesElement = New IndexedStackedColumnSeriesElement("Website B")
                     MySeriesElement2.Values.Add(New Single() {4, 2, 5, 8})
                     Dim MySeriesElement3 As IndexedStackedColumnSeriesElement = New IndexedStackedColumnSeriesElement("Website C")
                     MySeriesElement3.Values.Add(New Single() {2, 4, 6, 9})
            
                     ' Create a indexed stacked column series and add indexed stacked column series elements to it
                     Dim MyStackedColumnSeries1 As IndexedStackedColumnSeries = New IndexedStackedColumnSeries()
                     MyStackedColumnSeries1.Add(MySeriesElement1)
                     MyStackedColumnSeries1.Add(MySeriesElement2)
                     MyStackedColumnSeries1.Add(MySeriesElement3)
            
                     ' Add indexed stacked column series to the plot area
                     MyPlotArea.Series.Add(MyStackedColumnSeries1)
            
                     ' Add indexed X AxisLabels to the XAxis
                     MyStackedColumnSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q1", 0))
                     MyStackedColumnSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q2", 1))
                     MyStackedColumnSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q3", 2))
                     MyStackedColumnSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q4", 3))
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 230);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a indexed stacked column series element and add values to it
                     IndexedStackedColumnSeriesElement seriesElement1 = new IndexedStackedColumnSeriesElement("Website A");
                     seriesElement1.Values.Add(new float[] { 5, 7, 9, 6 });
                     IndexedStackedColumnSeriesElement seriesElement2 = new IndexedStackedColumnSeriesElement("Website B");
                     seriesElement2.Values.Add(new float[] { 4, 2, 5, 8 });
                     IndexedStackedColumnSeriesElement seriesElement3 = new IndexedStackedColumnSeriesElement("Website C");
                     seriesElement3.Values.Add(new float[] { 2, 4, 6, 9 });
            
                     // Create a indexed stacked column series and add indexed stacked column series elements to it
                     IndexedStackedColumnSeries stackedColumnSeries1 = new IndexedStackedColumnSeries();
                     stackedColumnSeries1.Add(seriesElement1);
                     stackedColumnSeries1.Add(seriesElement2);
                     stackedColumnSeries1.Add(seriesElement3);
            
                     // Add indexed stacked column series to the plot area
                     plotArea.Series.Add(stackedColumnSeries1);
            
                     // Add indexed X AxisLabels to the XAxis
                     stackedColumnSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q1", 0));
                     stackedColumnSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q2", 1));
                     stackedColumnSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q3", 2));
                     stackedColumnSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q4", 3));
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf"); 
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedColumnSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedColumnSeries"/> class. 
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedColumnSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedColumnSeries"/> class. 
            </summary>
            <param name="indexedXAxis"> <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis"/> of the indexed stacked column series. </param>
            <param name="numericYAxis"> <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the indexed stacked column series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedColumnSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedColumnSeries"/> class. 
            </summary>
            <param name="indexedXAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis"/> of the indexed stacked column series. </param>
            <param name="numericYAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the indexed stacked column series. </param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of indexed stacked column series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedColumnSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedColumnSeries"/> class. 
            </summary>
            <param name="numericYAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the indexed stacked column series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedColumnSeries.Add(ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedColumnSeriesElement)">
            <summary>
            Adds an <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedColumnSeriesElement"/> object to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedColumnSeries"/> element list.
            </summary>
            <param name="indexedStackedColumnSeriesElement"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedColumnSeriesElement"/> to be added. </param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedColumnSeries.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedColumnSeriesElement"/> object at the given index.
            </summary>
            <param name="index">Position of the required Indexed Stacked Column Series Element. </param>
            <returns> The <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedColumnSeriesElement"/> object. </returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedColumnSeries.XAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis"/> of the series. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedColumnSeries.YAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the series. 
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedColumnSeriesElement">
             <summary>
             Represents the IndexedStackedColumnSeriesElement. 
             </summary>
             <example>The following example creates indexed stacked column series elements and creates an indexed stacked
             column series chart to it.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 230)
             
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a indexed stacked column series element and add values to it
                     Dim MySeriesElement1 As IndexedStackedColumnSeriesElement = New IndexedStackedColumnSeriesElement("Website A")
                     MySeriesElement1.Values.Add(New Single() {5, 7, 9, 6})
                     Dim MySeriesElement2 As IndexedStackedColumnSeriesElement = New IndexedStackedColumnSeriesElement("Website B")
                     MySeriesElement2.Values.Add(New Single() {4, 2, 5, 8})
                     Dim MySeriesElement3 As IndexedStackedColumnSeriesElement = New IndexedStackedColumnSeriesElement("Website C")
                     MySeriesElement3.Values.Add(New Single() {2, 4, 6, 9})
            
                     ' Create a indexed stacked column series and add indexed stacked column series elements to it
                     Dim MyStackedColumnSeries1 As IndexedStackedColumnSeries = New IndexedStackedColumnSeries()
                     MyStackedColumnSeries1.Add(MySeriesElement1)
                     MyStackedColumnSeries1.Add(MySeriesElement2)
                     MyStackedColumnSeries1.Add(MySeriesElement3)
            
                     ' Add indexed stacked column series to the plot area
                     MyPlotArea.Series.Add(MyStackedColumnSeries1)
            
                     ' Add indexed X AxisLabels to the XAxis
                     MyStackedColumnSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q1", 0))
                     MyStackedColumnSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q2", 1))
                     MyStackedColumnSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q3", 2))
                     MyStackedColumnSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q4", 3))
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Axes
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 230);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a indexed stacked column series element and add values to it
                     IndexedStackedColumnSeriesElement seriesElement1 = new IndexedStackedColumnSeriesElement("Website A");
                     seriesElement1.Values.Add(new float[] { 5, 7, 9, 6 });
                     IndexedStackedColumnSeriesElement seriesElement2 = new IndexedStackedColumnSeriesElement("Website B");
                     seriesElement2.Values.Add(new float[] { 4, 2, 5, 8 });
                     IndexedStackedColumnSeriesElement seriesElement3 = new IndexedStackedColumnSeriesElement("Website C");
                     seriesElement3.Values.Add(new float[] { 2, 4, 6, 9 });
            
                     // Create a indexed stacked column series and add indexed stacked column series elements to it
                     IndexedStackedColumnSeries stackedColumnSeries1 = new IndexedStackedColumnSeries();
                     stackedColumnSeries1.Add(seriesElement1);
                     stackedColumnSeries1.Add(seriesElement2);
                     stackedColumnSeries1.Add(seriesElement3);
            
                     // Add indexed stacked column series to the plot area
                     plotArea.Series.Add(stackedColumnSeries1);
            
                     // Add indexed x AxisLabels to the XAxis
                     stackedColumnSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q1", 0));
                     stackedColumnSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q2", 1));
                     stackedColumnSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q3", 2));
                     stackedColumnSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q4", 3));
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf"); 
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedColumnSeriesElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedColumnSeriesElement"/> class. 
            </summary>
            <param name="name">Name of the indexed stacked column series element. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedColumnSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedColumnSeriesElement"/> class. 
            </summary>
            <param name="name">Name of the indexed stacked column series element. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed stacked column series element. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedColumnSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedColumnSeriesElement"/> class. 
            </summary>
            <param name="name">Name of the indexed stacked column series element. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of indexed stacked column series element. </param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the indexed stacked column series element. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedColumnSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedColumnSeriesElement"/> class. 
            </summary>
            <param name="name">Name of the indexed stacked column series element. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed stacked column series element. </param>
            <param name="borderWidth">Border width of the indexed stacked column series element. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedColumnSeriesElement.#ctor(System.String,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedColumnSeriesElement"/> class. 
            </summary>
            <param name="name">Name of the indexed stacked column series element. </param>
            <param name="borderWidth">Border width of the indexed stacked column series element. </param>
            <param name="borderColor">Border <see cref="T:ceTe.DynamicPDF.Color"/> of the indexed stacked column series element. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedColumnSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedColumnSeriesElement"/> class. 
            </summary>
            <param name="name"> Name of the indexed stacked column series element. </param>
            <param name="color"> <see cref="T:ceTe.DynamicPDF.Color"/> of the indexed stacked column series element. </param>
            <param name="borderWidth"> Border width of the indexed stacked column series element. </param>
            <param name="borderColor"> Border <see cref="T:ceTe.DynamicPDF.Color"/> of the indexed stacked column series element. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedColumnSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedColumnSeriesElement"/> class. 
            </summary>
            <param name="name">Name of the indexed stacked column series element. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed stacked column series element. </param>
            <param name="borderWidth">Border width of the indexed stacked column series element. </param>
            <param name="borderColor">Border <see cref="T:ceTe.DynamicPDF.Color"/> of the indexed stacked column series element. </param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the indexed stacked column series element. </param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedColumnSeriesElement.Values">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedColumnValueList"/> object contained in the IndexedStackedColumnSeriesElement.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedLineSeries">
             <summary>
             Represents an IndexedStackedLineSeries.
             </summary>
             <example>The following example creates an indexed stacked line series chart.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 230)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
             
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a indexed x axis
                     Dim xAxis As IndexedXAxis = New IndexedXAxis()
            
                     ' Create a numeric y axis
                     Dim yAxis As NumericYAxis = New NumericYAxis()
            
                     ' Create indexed x axis labels and add those to indexed xAxis
                     xAxis.Labels.Add(New IndexedXAxisLabel("Q1", 0))
                     xAxis.Labels.Add(New IndexedXAxisLabel("Q2", 1))
                     xAxis.Labels.Add(New IndexedXAxisLabel("Q3", 2))
                     xAxis.Labels.Add(New IndexedXAxisLabel("Q4", 3))
            
                     ' Create a indexed stacked line series element and add values to it
                     Dim MySeriesElement1 As IndexedStackedLineSeriesElement = New IndexedStackedLineSeriesElement("Website A")
                     MySeriesElement1.Values.Add(New Single() {5, 7, 9, 6})
                     Dim MySeriesElement2 As IndexedStackedLineSeriesElement = New IndexedStackedLineSeriesElement("Website B")
                     MySeriesElement2.Values.Add(New Single() {4, 2, 5, 8})
                     Dim MySeriesElement3 As IndexedStackedLineSeriesElement = New IndexedStackedLineSeriesElement("Website C")
                     MySeriesElement3.Values.Add(New Single() {2, 4, 6, 9})
            
                     ' Create a indexed stacked line series and add indexed stacked line series elements to it
                     Dim MyStackedLineSeries1 As IndexedStackedLineSeries = New IndexedStackedLineSeries(xAxis, yAxis)
                     MyStackedLineSeries1.Add(MySeriesElement1)
                     MyStackedLineSeries1.Add(MySeriesElement2)
                     MyStackedLineSeries1.Add(MySeriesElement3)
            
                     ' Add indexed stacked line series to the plot line
                     MyPlotArea.Series.Add(MyStackedLineSeries1)
                     
                     ' Create a  title and add it to the YAxis
                     Dim MyTitle3 As Title = New Title("Visitors (in millions)")
                     MyPlotArea.YAxes(0).Titles.Add(MyTitle3)
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 230);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a indexed x axis
                     IndexedXAxis xAxis = new IndexedXAxis();
            
                     // Create a numeric y axis
                     NumericYAxis yAxis = new NumericYAxis();
            
                     // Create indexed x axis labels and add those to indexed xAxis
                     xAxis.Labels.Add(new IndexedXAxisLabel("Q1", 0));
                     xAxis.Labels.Add(new IndexedXAxisLabel("Q2", 1));
                     xAxis.Labels.Add(new IndexedXAxisLabel("Q3", 2));
                     xAxis.Labels.Add(new IndexedXAxisLabel("Q4", 3));
            
                     // Create a indexed stacked line series element and add values to it
                     IndexedStackedLineSeriesElement seriesElement1 = new IndexedStackedLineSeriesElement("Website A");
                     seriesElement1.Values.Add(new float[] { 5, 7, 9, 6 });
                     IndexedStackedLineSeriesElement seriesElement2 = new IndexedStackedLineSeriesElement("Website B");
                     seriesElement2.Values.Add(new float[] { 4, 2, 5, 8 });
                     IndexedStackedLineSeriesElement seriesElement3 = new IndexedStackedLineSeriesElement("Website C");
                     seriesElement3.Values.Add(new float[] { 2, 4, 6, 9 });
            
                     // Create a indexed stacked line series and add indexed stacked line series elements to it
                     IndexedStackedLineSeries stackedLineSeries1 = new IndexedStackedLineSeries(xAxis, yAxis);
                     stackedLineSeries1.Add(seriesElement1);
                     stackedLineSeries1.Add(seriesElement2);
                     stackedLineSeries1.Add(seriesElement3);
            
                     // Add indexed stacked line series to the plot line
                     plotArea.Series.Add(stackedLineSeries1);
            
                     // Create a  title and add it to the YAxis
                     Title bTitle = new Title("Visitors (in millions)");
                     plotArea.YAxes[0].Titles.Add(bTitle);
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf"); 
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedLineSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedLineSeries"/> object.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedLineSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedLineSeries"/> object.
            </summary>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the indexed stacked line series.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedLineSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedLineSeries"/> object.
            </summary>
            <param name="xAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis"/> of the indexed stacked line series.</param>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the indexed stacked line series.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedLineSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedLineSeries"/> object.
            </summary>
            <param name="xAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis"/> of the indexed stacked line series.</param>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the indexed stacked line series</param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the indexed stacked line series</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedLineSeries.Add(ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedLineSeriesElement)">
            <summary>
            Adds an <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedLineSeriesElement"/> object to the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedLineSeries"/> elements list.
            </summary>
            <param name="element"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedLineSeriesElement"/> object to be added.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedLineSeries.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedLineSeriesElement"/> object at the given index.
            </summary>
            <param name="index">Position of the required indexed stacked line series element.</param>
            <returns>The <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedLineSeriesElement"/> object.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedLineSeries.XAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.IndexedXAxis"/> of the series.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedLineSeries.YAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the series.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedLineSeriesElement">
             <summary>
             Represents an IndexedStackedLineSeriesElement.
             </summary>
             <example>The following example creates indexed stacked line series elements and creates indexed stacked
             line series chart to it.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 230)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
             
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a indexed x axis
                     Dim xAxis As IndexedXAxis = New IndexedXAxis()
            
                     ' Create a numeric y axis
                     Dim yAxis As NumericYAxis = New NumericYAxis()
            
                     ' Create indexed x axis labels and add those to indexed xAxis
                     xAxis.Labels.Add(New IndexedXAxisLabel("Q1", 0))
                     xAxis.Labels.Add(New IndexedXAxisLabel("Q2", 1))
                     xAxis.Labels.Add(New IndexedXAxisLabel("Q3", 2))
                     xAxis.Labels.Add(New IndexedXAxisLabel("Q4", 3))
            
                     ' Create a indexed stacked line series element and add values to it
                     Dim MySeriesElement1 As IndexedStackedLineSeriesElement = New IndexedStackedLineSeriesElement("Website A")
                     MySeriesElement1.Values.Add(New Single() {5, 7, 9, 6})
                     Dim MySeriesElement2 As IndexedStackedLineSeriesElement = New IndexedStackedLineSeriesElement("Website B")
                     MySeriesElement2.Values.Add(New Single() {4, 2, 5, 8})
                     Dim MySeriesElement3 As IndexedStackedLineSeriesElement = New IndexedStackedLineSeriesElement("Website C")
                     MySeriesElement3.Values.Add(New Single() {2, 4, 6, 9})
            
                     ' Create a indexed stacked line series and add indexed stacked line series elements to it
                     Dim MyStackedLineSeries1 As IndexedStackedLineSeries = New IndexedStackedLineSeries(xAxis, yAxis)
                     MyStackedLineSeries1.Add(MySeriesElement1)
                     MyStackedLineSeries1.Add(MySeriesElement2)
                     MyStackedLineSeries1.Add(MySeriesElement3)
            
                     ' Add indexed stacked line series to the plot line
                     MyPlotArea.Series.Add(MyStackedLineSeries1)
                     
                     ' Create a  title and add it to the YAxis
                     Dim MyTitle3 As Title = New Title("Visitors (in millions)")
                     MyPlotArea.YAxes(0).Titles.Add(MyTitle3)
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 230);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a indexed x axis
                     IndexedXAxis xAxis = new IndexedXAxis();
            
                     // Create a numeric y axis
                     NumericYAxis yAxis = new NumericYAxis();
            
                     // Create indexed x axis labels and add those to indexed xAxis
                     xAxis.Labels.Add(new IndexedXAxisLabel("Q1", 0));
                     xAxis.Labels.Add(new IndexedXAxisLabel("Q2", 1));
                     xAxis.Labels.Add(new IndexedXAxisLabel("Q3", 2));
                     xAxis.Labels.Add(new IndexedXAxisLabel("Q4", 3));
            
                     // Create a indexed stacked line series element and add values to it
                     IndexedStackedLineSeriesElement seriesElement1 = new IndexedStackedLineSeriesElement("Website A");
                     seriesElement1.Values.Add(new float[] { 5, 7, 9, 6 });
                     IndexedStackedLineSeriesElement seriesElement2 = new IndexedStackedLineSeriesElement("Website B");
                     seriesElement2.Values.Add(new float[] { 4, 2, 5, 8 });
                     IndexedStackedLineSeriesElement seriesElement3 = new IndexedStackedLineSeriesElement("Website C");
                     seriesElement3.Values.Add(new float[] { 2, 4, 6, 9 });
            
                     // Create a indexed stacked line series and add indexed stacked line series elements to it
                     IndexedStackedLineSeries stackedLineSeries1 = new IndexedStackedLineSeries(xAxis, yAxis);
                     stackedLineSeries1.Add(seriesElement1);
                     stackedLineSeries1.Add(seriesElement2);
                     stackedLineSeries1.Add(seriesElement3);
            
                     // Add indexed stacked line series to the plot line
                     plotArea.Series.Add(stackedLineSeries1);
            
                     // Create a  title and add it to the YAxis
                     Title bTitle = new Title("Visitors (in millions)");
                     plotArea.YAxes[0].Titles.Add(bTitle);
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf"); 
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedLineSeriesElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedLineSeriesElement"/> object.
            </summary>
            <param name="name">Name of the indexed stacked line series element.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedLineSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedLineSeriesElement"/> object.
            </summary>
            <param name="name">Name of the indexed stacked line series element.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed stacked line series element.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedLineSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedLineSeriesElement"/> object.
            </summary>
            <param name="name"> Name of the indexed stacked line series element.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed stacked line series element.</param>
            <param name="lineWidth"> Line width of the indexed stacked line series element.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedLineSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.LineStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedLineSeriesElement"/> object.
            </summary>
            <param name="name">Name of the indexed stacked line series element.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed stacked line series element.</param>
            <param name="lineWidth">Line width of the indexed stacked line Series element.</param>
            <param name="style"><see cref="T:ceTe.DynamicPDF.LineStyle"/> of the indexed stacked line Series element.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedLineSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.LineStyle,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedLineSeriesElement"/> object.
            </summary>
            <param name="name">Name of the indexed stacked line series element.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed stacked line series element.</param>
            <param name="lineWidth">Line width of the indexed stacked line series element.</param>
            <param name="style"><see cref="T:ceTe.DynamicPDF.LineStyle"/> of the indexed stacked line series element.</param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the indexed stacked line series element.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedLineSeriesElement.#ctor(System.String,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.LineStyle,ceTe.DynamicPDF.PageElements.Charting.Marker)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedLineSeriesElement"/> object.
            </summary>
            <param name="name">Name of the indexed stacked line series element.</param>
            <param name="color"> <see cref="T:ceTe.DynamicPDF.Color"/> of the indexed stacked line series element.</param>
            <param name="lineWidth">Line width of the indexed stacked line series element.</param>
            <param name="style"><see cref="T:ceTe.DynamicPDF.LineStyle"/> of the indexed stacked line series element.</param>
            <param name="marker"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Marker"/> of the indexed indexed stacked line series element.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedLineSeriesElement.#ctor(System.String,System.Single,ceTe.DynamicPDF.LineStyle,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Marker,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedLineSeriesElement"/> object.
            </summary>
            <param name="name"> Name of the indexed stacked line series element.</param>
            <param name="lineWidth">Line width of the indexed stacked line series element.</param>
            <param name="style"><see cref="T:ceTe.DynamicPDF.LineStyle"/> of the indexed Stacked Line series element.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the indexed stacked line series element.</param>
            <param name="marker"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Marker"/> of the indexed indexed stacked line series element.</param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the indexed stacked line series element.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.IndexedStackedLineSeriesElement.Values">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedLineValueList"/> object contained in the IndexedStackedLineSeriesElement.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeries">
             <summary>
             Represents a PieSeries.
             </summary>
             <example>The following example creates a pie chart.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series    
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page(PageSize.A4, PageOrientation.Landscape)
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a datalabel
                     Dim da As ScalarDataLabel = New ScalarDataLabel(True, False, False)
            
                     ' Create a pieseries and set datalabel to the pieseries
                     Dim MyPieSeries As PieSeries = New PieSeries()
                     MyPieSeries.DataLabel = da
            
                     ' Add the elements to the plotarea
                     MyPlotArea.Series.Add(MyPieSeries)
                     MyPieSeries.Elements.Add(27, "Website A")
                     MyPieSeries.Elements.Add(19, "Website B")
                     MyPieSeries.Elements.Add(21, "Website C")
            
                     ' Add the chart to page and add the page to document
                     MyPage.Elements.Add(MyChart)
            
                     ' Draw the document
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page(PageSize.A4, PageOrientation.Landscape);
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea; 
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a datalabel
                     ScalarDataLabel da = new ScalarDataLabel(true, false, false);
            
                     // Create a pieseries and set datalabel to the pieseries
                     PieSeries pieSeries = new PieSeries();
                     pieSeries.DataLabel = da;
            
                     // Add the elements to the plotarea
                     plotArea.Series.Add(pieSeries);
                     pieSeries.Elements.Add(27, "Website A");
                     pieSeries.Elements.Add(19, "Website B");
                     pieSeries.Elements.Add(21, "Website C");
               
                     // Add the chart to page and add the page to document
                     page.Elements.Add(chart);
            
                     // Draw the document
                     document.Draw(@"C:\MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeries"/> class. 
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Series.SeriesLabel)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeries"/> class. 
            </summary>
            <param name="seriesLabel"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.SeriesLabel"/> of the pie series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeries"/> class. 
            </summary>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the pie series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeries.#ctor(System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeries"/> class. 
            </summary>
            <param name="borderWidth">Border width of the pie series. </param>
            <param name="borderColor">Border <see cref="T:ceTe.DynamicPDF.Color"/> of the pie series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeries.#ctor(System.Single,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeries"/> class. 
            </summary>
            <param name="borderWidth">Border width of the pie series. </param>
            <param name="borderColor">Border <see cref="T:ceTe.DynamicPDF.Color"/> of the pie series. </param>
            <param name="legend"> <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the pie series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeries.#ctor(ceTe.DynamicPDF.PageElements.Charting.Series.SeriesLabel,System.Single,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeries"/> class. 
            </summary>
            <param name="seriesLabel"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.SeriesLabel"/> of the pie series. </param>
            <param name="borderWidth">Border width of the pie series. </param>
            <param name="borderColor">Border <see cref="T:ceTe.DynamicPDF.Color"/> of the pie series. </param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the pie series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeries.SetArea(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Set the area of the PieSeries. 
            </summary>
            <param name="x">X coordinate of the pie series. </param>
            <param name="y">Y coordinate of the pie series. </param>
            <param name="width">Width of the pie series. </param>
            <param name="height">Height of the pie series. </param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeries.Elements">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeriesElementList"/> object contained in the PieSeries. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeries.BorderWidth">
            <summary>
            Gets or sets the BorderWidth of the PieSeries. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeries.BorderColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the borders of the PieSeries. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeries.Label">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.SeriesLabel"/> object to use for the name of the PieSeries. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeries.DataLabel">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.ScalarDataLabel"/> object to use for the data label of the Pie series. This is the
            default data label for the series.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeries.DataLabelPosition">
            <summary>
            Gets or sets <see cref="T:ceTe.DynamicPDF.PageElements.Charting.ScalarDataLabelPosition"/> enumeration that specifies the display position of the data label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeries.XOffset">
            <summary>
            Gets or sets the XOffset of the PieSeries. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeries.YOffset">
            <summary>
            Gets or sets the YOffset of the PieSeries. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeries.Radius">
            <summary>
            Gets or sets the radius of the PieSeries. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeries.StartAngle">
            <summary>
            Gets or sets the StartAngle of the PieSeries. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeries.X">
            <summary>
            Gets the X coordinate of the PieSeries. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeries.Y">
            <summary>
            Gets the Y coordinate of the PieSeries. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeries.Width">
            <summary>
            Gets the width of the PieSeries. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeries.Height">
            <summary>
            Gets the height of the PieSeries. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeries.ValueFormat">
            <summary>
            Gets or sets the format to use for the value of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.ScalarDataLabel"/> object.  
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeries.PercentageFormat">
            <summary>
            Gets or sets the format to use for the percentage of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.ScalarDataLabel"/> object. 
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeriesElement">
             <summary>
             Represents a PieSeriesElement.
             </summary>
             <example>The following example creates a pie series elements and adds it to pie chart.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page(PageSize.A4, PageOrientation.Landscape)
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a datalabel
                     Dim da As ScalarDataLabel = New ScalarDataLabel(True, False, False)
            
                     ' Create a pie series element and add values to it
                     Dim MySeriesElement1 As PieSeriesElement = New PieSeriesElement(27, "Website A")
                     Dim MySeriesElement2 As PieSeriesElement = New PieSeriesElement(19, "Website B")
                     Dim MySeriesElement3 As PieSeriesElement = New PieSeriesElement(21, "Website C")
            
                     ' Create a pie series and add pie series elements to it
                     Dim MyPieSeries As PieSeries = New PieSeries()
                     MyPieSeries.Elements.Add(MySeriesElement1)
                     MyPieSeries.Elements.Add(MySeriesElement2)
                     MyPieSeries.Elements.Add(MySeriesElement3)
            
                     ' Add the data label to the pie series
                     MyPieSeries.DataLabel = da
            
                     ' Add the pie series to the plot area
                     MyPlotArea.Series.Add(MyPieSeries)
            
                     ' Add the chart to page and add the page to document
                     MyPage.Elements.Add(MyChart)
            
                     ' Draw the document
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page(PageSize.A4, PageOrientation.Landscape);
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a datalabel
                     ScalarDataLabel da = new ScalarDataLabel(true, false, false);
            
                     // Create a pie series element and add values to it
                     PieSeriesElement seriesElement1 = new PieSeriesElement(27, "Website A");
                     PieSeriesElement seriesElement2 = new PieSeriesElement(19, "Website B");
                     PieSeriesElement seriesElement3 = new PieSeriesElement(21, "Website C");
                    
                     // Create a pie series and add pie series elements to it
                     PieSeries pieSeries = new PieSeries();
                     pieSeries.Elements.Add(seriesElement1);
                     pieSeries.Elements.Add(seriesElement2);
                     pieSeries.Elements.Add(seriesElement3);
            
                     // Add the data label to the pie series
                     pieSeries.DataLabel = da;
                    
                     // Add the pie series to the plot area
                     plotArea.Series.Add(pieSeries);
            
                     // Add the chart to page and add the page to document
                     page.Elements.Add(chart);
            
                     // Draw the document
                     document.Draw(@"C:\MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeriesElement.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeriesElement"/> class. 
            </summary>
            <param name="value1">Value of the pie series element.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeriesElement.#ctor(System.Single,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeriesElement"/> class. 
            </summary>
            <param name="value1">Value of the pie series element. </param>
            <param name="name">Name of the pie series element. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeriesElement.#ctor(System.Single,System.String,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeriesElement"/> class. 
            </summary>
            <param name="value1">Value of the pie series element. </param>
            <param name="name">Name of the pie series element. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the pie series element. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeriesElement.#ctor(System.Single,System.String,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeriesElement"/> class. 
            </summary>
            <param name="value1">Value of the pie series element. </param>
            <param name="name">Name of the pie series element. </param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the pie series element. </param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the pie series element. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeriesElement.#ctor(System.Single,ceTe.DynamicPDF.PageElements.Charting.ScalarDataLabel)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeriesElement"/> class. 
            </summary>
            <param name="value1">Value of the pie series element. </param>
            <param name="scalarDataLabel"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.ScalarDataLabel"/> of the pie series element. </param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeriesElement.Value">
            <summary>
            Gets or sets the value of the PieSeriesElement. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeriesElement.BorderWidth">
            <summary>
            Gets or sets the BorderWidth of the PieSeriesElement. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeriesElement.BorderColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the borders of the PieSeriesElement.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeriesElement.ExplodeLength">
            <summary>
            Gets or sets the ExplodeLength of the PieSeriesElement. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeriesElement.DataLabel">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.ScalarDataLabel"/> object to use for the data label of the PieSeriesElement.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeriesElementList">
            <summary>
            Represents a PieSeriesElementList.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeriesElementList.Add(ceTe.DynamicPDF.PageElements.Charting.Series.PieSeriesElement)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeriesElement"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeriesElementList"/> object.
            </summary>
            <param name="pieSeriesElement"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeriesElement"/> object to be added. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeriesElementList.Add(System.Single)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeriesElement"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeriesElementList"/> object.
            </summary>
            <param name="value1">Value of the pie series element. </param>
            <returns> A <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeriesElement"/> object. </returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeriesElementList.Add(System.Single,System.String)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeriesElement"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeriesElementList"/> object.
            </summary>
            <param name="value1">Value of the pie series element. </param>
            <param name="name">Name of the pie series element </param>
            <returns> A <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeriesElement"/> object. </returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeriesElementList.Add(System.Single[])">
            <summary>
            Adds an array of <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeriesElement"/> objects to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeriesElementList"/> object.
            </summary>
            <param name="value1">Value of the pie series elements. </param>
            <returns> Array of <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeriesElement"/> objects. </returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeriesElementList.Count">
            <summary>
            Gets the number of PieSeriesElements actually contained in the PieSeriesElementList.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeriesElementList.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeriesElement"/> object at the given index. 
            </summary>
            <param name="index">Position of the required pie series element. </param>
            <returns> The <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.PieSeriesElement"/> object. </returns>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.SeriesLabel">
            <summary>
            Represents a SeriesLabel of the PieSeries.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.SeriesLabel.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.SeriesLabel"/> class. 
            </summary>
            <param name="text">Text to display in the series label.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.SeriesLabel.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Series.SeriesNameDisplay)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.SeriesLabel"/> class. 
            </summary>
            <param name="text">Text to display in the series label.</param>
            <param name="seriesNameDisplay"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.SeriesNameDisplay"/> enumeration indicating display position of series label.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.SeriesLabel.#ctor(System.String,ceTe.DynamicPDF.Font,ceTe.DynamicPDF.PageElements.Charting.Series.SeriesNameDisplay)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.SeriesLabel"/> class. 
            </summary>
            <param name="text">Text to display in the series label.</param>
            <param name="font"><see cref="P:ceTe.DynamicPDF.PageElements.Charting.Series.SeriesLabel.Font"/> for the text of the series label.</param>
            <param name="seriesNameDisplay"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.SeriesNameDisplay"/> enumeration indicating display position of series label.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.SeriesLabel.#ctor(System.String,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.SeriesLabel"/> class. 
            </summary>
            <param name="text">Text to display in the series label.</param>
            <param name="textColor"><see cref="T:ceTe.DynamicPDF.Color"/> for the text of the series label.</param>
            <param name="font"><see cref="P:ceTe.DynamicPDF.PageElements.Charting.Series.SeriesLabel.Font"/> for the text of the series label.</param>
            <param name="fontSize">Size for the text of the series label.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.SeriesLabel.#ctor(System.String,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.PageElements.Charting.Series.SeriesNameDisplay)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.SeriesLabel"/> class. 
            </summary>
            <param name="text">Text to display in the series label.</param>
            <param name="textColor"><see cref="T:ceTe.DynamicPDF.Color"/> for the text of the series label.</param>
            <param name="font"><see cref="P:ceTe.DynamicPDF.PageElements.Charting.Series.SeriesLabel.Font"/> for the text of the series label.</param>
            <param name="fontSize">Size for the text of the series label.</param>
            <param name="seriesNameDisplay"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.SeriesNameDisplay"/> enumeration indicating display position of series label.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.SeriesLabel.Text">
            <summary>
            Gets or sets the text of the SeriesLabel.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.SeriesLabel.Font">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.Series.SeriesLabel.Font"/> object to use for the text of the SeriesLabel.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.SeriesLabel.FontSize">
            <summary>
            Gets or sets the FontSize for the text of the SeriesLabel.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.SeriesLabel.TextColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the text of the SeriesLabel.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.SeriesLabel.DisplayPosition">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.SeriesNameDisplay"/> enumeration that specifies the display position of the SeriesLabel.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.SeriesList">
            <summary>
            Represents the SeriesList of the plot area.
            </summary>
            <remarks>While adding series to SeriesList, Axis and Legend are created automatically, axis is created
            based on the series type and series color also set automatically if the series is not having the color.  </remarks>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.SeriesList.Add(ceTe.DynamicPDF.PageElements.Charting.SeriesBase)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.SeriesBase"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.SeriesList"/> object.
            </summary>
            <param name="series"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.SeriesBase"/> object to be added.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.SeriesList.Add(ceTe.DynamicPDF.PageElements.Charting.Series.StackedSeries)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.StackedSeries"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.SeriesList"/> object. 
            </summary>
            <param name="stackedSeries"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.StackedSeries"/> to be added.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.SeriesList.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.SeriesBase"/> at the given index.
            </summary>
            <returns>The <see cref="T:ceTe.DynamicPDF.PageElements.Charting.SeriesBase"/> object.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.SeriesList.Count">
            <summary>
            Gets the number of Series actually contained.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.SeriesNameDisplay">
            <summary>
            Represents the SeriesNameDisplay.
            </summary>
            <licensing>
            This enumeration is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Series.SeriesNameDisplay.Below">
            <summary>
            Below SeriesNameDisplay
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.Series.SeriesNameDisplay.Above">
            <summary>
            Above SeriesNameDisplay
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Series.XYScatterSeries">
             <summary>
             Represents an XYScattSeries.
             </summary>
             <example> The following example creates an xyscatter series chart.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 450, 230)
            
                     ' Get the default plot Area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create a Header title and add it to the chart
                     Dim MyTitle1 As Title = New Title("Player Height and Weight")
                     MyChart.HeaderTitles.Add(MyTitle1)
            
                     ' Create xyScatter series and add values to it
                     Dim MyXyScatterSeries1 As XYScatterSeries = New XYScatterSeries("Team A")
                     MyXyScatterSeries1.Values.Add(112, 55)
                     MyXyScatterSeries1.Values.Add(125, 60)
                     MyXyScatterSeries1.Values.Add(138, 68)
                     MyXyScatterSeries1.Values.Add(150, 73)
                     MyXyScatterSeries1.Values.Add(172, 82)
                     Dim MyXyScatterSeries2 As XYScatterSeries = New XYScatterSeries("Team B")
                     MyXyScatterSeries2.Values.Add(110, 54)
                     MyXyScatterSeries2.Values.Add(128, 62)
                     MyXyScatterSeries2.Values.Add(140, 70)
                     MyXyScatterSeries2.Values.Add(155, 75)
                     MyXyScatterSeries2.Values.Add(170, 80)
            
                     ' Create xyscatter data label
                     Dim MyDataLabel As XYScatterDataLabel = New XYScatterDataLabel(True)
                     MyXyScatterSeries1.DataLabel = MyDataLabel
                     MyDataLabel.Color = RgbColor.Red
            
                     ' Add xyScatter series to the plot Area
                     MyPlotArea.Series.Add(MyXyScatterSeries1)
                     MyPlotArea.Series.Add(MyXyScatterSeries2)
             
                     ' Create axis titles and add it to the axis
                     Dim MyTitle2 As Title = New Title("Height (Inches)")
                     Dim MyTitle3 As Title = New Title("Weight (Pounds)")
                     MyXyScatterSeries1.YAxis.Titles.Add(MyTitle2)
                     MyXyScatterSeries1.XAxis.Titles.Add(MyTitle3)
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 450, 230);
            
                     // Get the default plot Area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
             
                     // Create a Header title and add it to the chart
                     Title tTitle = new Title("Player Height and Weight");
                     chart.HeaderTitles.Add(tTitle);
            
                     // Create xyScatter series and add values to it
                     XYScatterSeries xyScatterSeries1 = new XYScatterSeries("Team A");
                     xyScatterSeries1.Values.Add(112, 55);
                     xyScatterSeries1.Values.Add(125, 60);
                     xyScatterSeries1.Values.Add(138, 68);
                     xyScatterSeries1.Values.Add(150, 73);
                     xyScatterSeries1.Values.Add(172, 82);
                     XYScatterSeries xyScatterSeries2 = new XYScatterSeries("Team B");
                     xyScatterSeries2.Values.Add(110, 54);
                     xyScatterSeries2.Values.Add(128, 62);
                     xyScatterSeries2.Values.Add(140, 70);
                     xyScatterSeries2.Values.Add(155, 75);
                     xyScatterSeries2.Values.Add(170, 80);
            
                     // Create xyscatter data label
                     XYScatterDataLabel dataLabel = new XYScatterDataLabel(true);
                     xyScatterSeries1.DataLabel = dataLabel;
                     dataLabel.Color = RgbColor.Red;
            
                     // Add xyScatter series to the plot Area
                     plotArea.Series.Add(xyScatterSeries1);
                     plotArea.Series.Add(xyScatterSeries2);
            
                     // Create axis titles and add it to the axis
                     Title title1 = new Title("Height (Inches)");
                     Title title2 = new Title("Weight (Pounds)");
                     xyScatterSeries1.YAxis.Titles.Add(title1);
                     xyScatterSeries1.XAxis.Titles.Add(title2);
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf"); 
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.XYScatterSeries.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.XYScatterSeries"/> object. 
            </summary>
            <param name="name">Name of the XYScatter series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.XYScatterSeries.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.XYScatterSeries"/> object. 
            </summary>
            <param name="name">Name of the XYScatter series. </param>
            <param name="lineDisplay"> lineDisplay of the XYScatter series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.XYScatterSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Marker)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.XYScatterSeries"/> object. 
            </summary>
            <param name="name">Name of the XYScatter series. </param>
            <param name="marker">Marker of the XYScatter series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.XYScatterSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.XYScatterSeries"/> object. 
            </summary>
            <param name="name">Name of the XYScatter series. </param>
            <param name="xAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis"/> of the XYScatter series. </param>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the XYScatter series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.XYScatterSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.XYScatterSeries"/> object. 
            </summary>
            <param name="name">Name of the XYScatter series. </param>
            <param name="xAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis"/> of the XYScatter series. </param>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the XYScatter series. </param>
            <param name="lineColor"><see cref="T:ceTe.DynamicPDF.Color"/> of the XYScatter series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.XYScatterSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis,ceTe.DynamicPDF.Color,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.XYScatterSeries"/> object. 
            </summary>
            <param name="name">Name of the XYScatter series. </param>
            <param name="xAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis"/> of the XYScatter series. </param>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the XYScatter series. </param>
            <param name="lineColor"><see cref="T:ceTe.DynamicPDF.Color"/> of the XYScatter series. </param>
            <param name="lineWidth">Line width of the XYScatter series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.XYScatterSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.LineStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.XYScatterSeries"/> object. 
            </summary>
            <param name="name">Name of the XYScatter series. </param>
            <param name="xAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis"/> of the XYScatter series. </param>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the XYScatter series. </param>
            <param name="lineColor"><see cref="T:ceTe.DynamicPDF.Color"/> of the XYScatter series. </param>
            <param name="lineWidth">Line width of the XYScatter series. </param>
            <param name="lineStyle"><see cref="P:ceTe.DynamicPDF.PageElements.Charting.Series.XYScatterSeries.LineStyle"/> of the XYScatter series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.XYScatterSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.LineStyle,ceTe.DynamicPDF.PageElements.Charting.Marker)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.XYScatterSeries"/> object. 
            </summary>
            <param name="name">Name of the XYScatter series. </param>
            <param name="xAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis"/> of the XYScatter series. </param>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the XYScatter series. </param>
            <param name="lineColor"><see cref="T:ceTe.DynamicPDF.Color"/> of the XYScatter series. </param>
            <param name="lineWidth">Line width of the XYScatter series. </param>
            <param name="lineStyle"><see cref="P:ceTe.DynamicPDF.PageElements.Charting.Series.XYScatterSeries.LineStyle"/> of the XYScatter series. </param>
            <param name="marker"><see cref="P:ceTe.DynamicPDF.PageElements.Charting.Series.XYScatterSeries.Marker"/> of the XYScatter series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.XYScatterSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.LineStyle,ceTe.DynamicPDF.PageElements.Charting.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.XYScatterSeries"/> object.
            </summary>
            <param name="name">Name of the XYScatter series. </param>
            <param name="xAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis"/> of the XYScatter series. </param>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the XYScatter series. </param>
            <param name="lineColor"><see cref="T:ceTe.DynamicPDF.Color"/> of the XYScatter series. </param>
            <param name="lineWidth">Line width of the XYScatter series. </param>
            <param name="lineStyle"><see cref="P:ceTe.DynamicPDF.PageElements.Charting.Series.XYScatterSeries.LineStyle"/> of the XYScatter series. </param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the XYScatter series. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Series.XYScatterSeries.#ctor(System.String,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis,ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.LineStyle,ceTe.DynamicPDF.PageElements.Charting.Legend,ceTe.DynamicPDF.PageElements.Charting.Marker,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.XYScatterSeries"/> object. 
            </summary>
            <param name="name">Name of the XYScatter series. </param>
            <param name="xAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis"/> of the XYScatter series. </param>
            <param name="yAxis"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the XYScatter series. </param>
            <param name="lineColor"><see cref="T:ceTe.DynamicPDF.Color"/> of the XYScatter series. </param>
            <param name="lineWidth">Line width of the XYScatter series. </param>
            <param name="lineStyle"><see cref="P:ceTe.DynamicPDF.PageElements.Charting.Series.XYScatterSeries.LineStyle"/> of the XYScatter series. </param>
            <param name="legend"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> of the XYScatter series. </param>
            <param name="marker"><see cref="P:ceTe.DynamicPDF.PageElements.Charting.Series.XYScatterSeries.Marker"/> of the XYScatter series. </param>
            <param name="lineDisplay">LineDisplay of the XYScatter series. </param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.XYScatterSeries.XValueFormat">
            <summary>
            Gets or sets the XValueFormatString of the XYScatterSeries. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.XYScatterSeries.YValueFormat">
            <summary>
            Gets or sets the YValueFormatString of the XYScatterSeries. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.XYScatterSeries.DataLabel">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.XYScatterDataLabel"/> of the XYScatter series. This is the
            default data label for the series. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.XYScatterSeries.Marker">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.Series.XYScatterSeries.Marker"/> of the XYScatter series. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.XYScatterSeries.LineJoin">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.Series.XYScatterSeries.LineJoin"/> of the XYScatterSeries. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.XYScatterSeries.LineCap">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.Series.XYScatterSeries.LineCap"/> of the XYScatterSeries. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.XYScatterSeries.LineDisplay">
            <summary>
            Gets or sets the LineDisplay status of the XYScatterSeries. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.XYScatterSeries.Width">
            <summary>
            Gets or sets the LineWidth of the XYScatterSeries. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.XYScatterSeries.Values">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.XYScatterValueList"/> of the XYScatterSeries. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.XYScatterSeries.LineStyle">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.Series.XYScatterSeries.LineStyle"/> of the XYScatterSeries. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.XYScatterSeries.XAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericXAxis"/> of the series. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Series.XYScatterSeries.YAxis">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.NumericYAxis"/> of the series.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.AreaValue">
            <summary>
            Represents an AreaValue
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.AreaValue.DataLabel">
            <summary>
             Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.ValuePositionDataLabel"/> of the area value.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.AreaValue.Value">
            <summary>
            Gets the value of the area value.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.AreaValueList">
            <summary>
            Represents a list of AreaValues.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.AreaValueList.Count">
            <summary>
            Gets the total number of area values in the area value list.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.AreaValueList.Item(System.Int32)">
            <summary>
            Gets the area value from the area value list based on the given index.
            </summary>
            <param name="index">area value Index</param>
            <returns>The given index areaValue</returns>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.BarValue">
            <summary>
            Base class from which date-time and indexed bar values are derived.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.BarValue.Value">
            <summary>
            Gets the value of the bar value.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.BarValue.Color">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.Values.BarValue.Color"/> to use for the color of the bar value.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.BarValue.DataLabel">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.BarColumnValuePositionDataLabel"/> to use for the data label of the bar value.
            </summary>
            <p/><b>NOTE:</b> Prior to Version 6.0 DataLabel was of type ValuePositionDataLabel.
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.BarValueList">
            <summary>
            Base class from which date-time and indexed bar value lists are derived.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.BarValueList.Count">
            <summary>
            Gets the number of bar values actually contained in the bar value list.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.BarValueList.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.BarValue"/> at the given index. 
            </summary>
            <returns>The <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.BarValue"/> object.</returns>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.ColumnValue">
            <summary>
            Base class from which DateTime and IndexedColumnValues are derived.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.ColumnValue.Value">
            <summary>
            Gets the value of the column value.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.ColumnValue.Color">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.Values.ColumnValue.Color"/> to use for the color of the column value.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.ColumnValue.DataLabel">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.BarColumnValuePositionDataLabel"/> to use for the data label of the column value.
            </summary>
            <p/><b>NOTE:</b> Prior to Version 6.0 DataLabel was of type ValuePositionDataLabel.
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.ColumnValueList">
            <summary>
            Base class from which DateTime and IndexedColumnValue lists are derived.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.ColumnValueList.Count">
            <summary>
            Gets the number of column values actually contained in the column value list. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.ColumnValueList.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.ColumnValue"/> object at the given index. 
            </summary>
            <param name="index">Position of the required column value. </param>
            <returns> the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.ColumnValue"/> object. </returns>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedAreaValue">
             <summary>
             Represents a DateTime100PercentStackedAreaValue.
             </summary>
             <example>The following example creates date time 100Percent stacked area series chart and adds values to it.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Values
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
             
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create date time 100Percent stacked area series element and add values to it
                     Dim MyAreaSeries1 As DateTime100PercentStackedAreaSeriesElement = New DateTime100PercentStackedAreaSeriesElement("Website A")
                     MyAreaSeries1.Values.Add(New DateTime100PercentStackedAreaValue(5, New DateTime(2007, 1, 1)))
                     MyAreaSeries1.Values.Add(New DateTime100PercentStackedAreaValue(7, New DateTime(2007, 2, 1)))
                     MyAreaSeries1.Values.Add(New DateTime100PercentStackedAreaValue(9, New DateTime(2007, 3, 1)))
                     MyAreaSeries1.Values.Add(New DateTime100PercentStackedAreaValue(6, New DateTime(2007, 4, 1)))
                     Dim MyAreaSeries2 As DateTime100PercentStackedAreaSeriesElement = New DateTime100PercentStackedAreaSeriesElement("Website B")
                     MyAreaSeries2.Values.Add(New DateTime100PercentStackedAreaValue(4, New DateTime(2007, 1, 1)))
                     MyAreaSeries2.Values.Add(New DateTime100PercentStackedAreaValue(2, New DateTime(2007, 2, 1)))
                     MyAreaSeries2.Values.Add(New DateTime100PercentStackedAreaValue(5, New DateTime(2007, 3, 1)))
                     MyAreaSeries2.Values.Add(New DateTime100PercentStackedAreaValue(8, New DateTime(2007, 4, 1)))
                     Dim MyAreaSeries3 As DateTime100PercentStackedAreaSeriesElement = New DateTime100PercentStackedAreaSeriesElement("Website C")
                     MyAreaSeries3.Values.Add(New DateTime100PercentStackedAreaValue(2, New DateTime(2007, 1, 1)))
                     MyAreaSeries3.Values.Add(New DateTime100PercentStackedAreaValue(4, New DateTime(2007, 2, 1)))
                     MyAreaSeries3.Values.Add(New DateTime100PercentStackedAreaValue(6, New DateTime(2007, 3, 1)))
                     MyAreaSeries3.Values.Add(New DateTime100PercentStackedAreaValue(9, New DateTime(2007, 4, 1)))
            
                     ' Create a date time 100Percent stacked area series and add date time 100Percent stacked area series elements to it
                     Dim MyStackedAreaSeries1 As DateTime100PercentStackedAreaSeries = New DateTime100PercentStackedAreaSeries()
                     MyStackedAreaSeries1.Add(MyAreaSeries1)
                     MyStackedAreaSeries1.Add(MyAreaSeries2)
                     MyStackedAreaSeries1.Add(MyAreaSeries3)
            
                     ' Add date time 100Percent stacked area series to the plot area
                     MyPlotArea.Series.Add(MyStackedAreaSeries1)
            
                     ' set label  format for the axislabels
                     MyStackedAreaSeries1.XAxis.LabelFormat = "MMM"
            
                     'Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Values;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create date time 100Percent stacked area series element and add values to it
                     DateTime100PercentStackedAreaSeriesElement areaSeries1 = new DateTime100PercentStackedAreaSeriesElement("Website A");
                     areaSeries1.Values.Add(new DateTime100PercentStackedAreaValue(5, new DateTime(2007, 1, 1)));
                     areaSeries1.Values.Add(new DateTime100PercentStackedAreaValue(7, new DateTime(2007, 2, 1)));
                     areaSeries1.Values.Add(new DateTime100PercentStackedAreaValue(9, new DateTime(2007, 3, 1)));
                     areaSeries1.Values.Add(new DateTime100PercentStackedAreaValue(6, new DateTime(2007, 4, 1)));
                     DateTime100PercentStackedAreaSeriesElement areaSeries2 = new DateTime100PercentStackedAreaSeriesElement("Website B");
                     areaSeries2.Values.Add(new DateTime100PercentStackedAreaValue(4, new DateTime(2007, 1, 1)));
                     areaSeries2.Values.Add(new DateTime100PercentStackedAreaValue(2, new DateTime(2007, 2, 1)));
                     areaSeries2.Values.Add(new DateTime100PercentStackedAreaValue(5, new DateTime(2007, 3, 1)));
                     areaSeries2.Values.Add(new DateTime100PercentStackedAreaValue(8, new DateTime(2007, 4, 1)));
                     DateTime100PercentStackedAreaSeriesElement areaSeries3 = new DateTime100PercentStackedAreaSeriesElement("Website C");
                     areaSeries3.Values.Add(new DateTime100PercentStackedAreaValue(2, new DateTime(2007, 1, 1)));
                     areaSeries3.Values.Add(new DateTime100PercentStackedAreaValue(4, new DateTime(2007, 2, 1)));
                     areaSeries3.Values.Add(new DateTime100PercentStackedAreaValue(6, new DateTime(2007, 3, 1)));
                     areaSeries3.Values.Add(new DateTime100PercentStackedAreaValue(9, new DateTime(2007, 4, 1)));
            
                     // Create a date time 100Percent stacked area series and add date time 100Percent stacked area series elements to it
                     DateTime100PercentStackedAreaSeries stackedAreaSeries1 = new DateTime100PercentStackedAreaSeries();
                     stackedAreaSeries1.Add(areaSeries1);
                     stackedAreaSeries1.Add(areaSeries2);
                     stackedAreaSeries1.Add(areaSeries3);
            
                     // Add date time 100Percent stacked area series to the plot area
                     plotArea.Series.Add(stackedAreaSeries1);
            
                     // set label  format for the axislabels
                     stackedAreaSeries1.XAxis.LabelFormat = "MMM";
            
                     //Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.Stacked100PercentAreaValue">
            <summary>
            Represents a Stacked100PercentAreaValue.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.Stacked100PercentAreaValue.DataLabel">
            <summary>
            Gets or sets the DataLabel of the Stacked100percentAreaValue.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.Stacked100PercentAreaValue.Value">
            <summary>
            Gets the value of the Stacked100percentAreaValue.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedAreaValue.#ctor(System.Single,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedAreaValue"/> object.
            </summary>
            <param name="value1">The value of dateTime 100Percent stacked area value. </param>
            <param name="position">The position of the dateTime 100Percent stacked area value. </param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedAreaValue.Position">
            <summary>
            Gets the position of the DateTime100PercentStackedAreaValue.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedAreaValueList">
            <summary>
            Represents a DateTime100PercentStackedAreaValueList.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.Stacked100PercentAreaValueList">
            <summary>
            Represents a list of the Stacked100PercentAreaValues.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.Stacked100PercentAreaValueList.Item(System.Int32)">
            <summary>
            Gets the Stacked100PercentAreaValue from the Stacked100PercentAreaValueList based on the given index.
            </summary>
            <returns>Stacked100PercentAreaValue in the sepecified index.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.Stacked100PercentAreaValueList.Count">
            <summary>
            Gets the total number of Stacked100PercentAreaValues in the Stacked100PercentAreaValueList.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedAreaValueList.Add(System.Single,System.DateTime)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedAreaValue"/> object to the
            <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedAreaValueList"/> object.
            </summary>
            <param name="value1">Value of the dateTime 100Percent stacked area value. </param>
            <param name="obj">Position of the dateTime 100Percent stacked area value. </param>
            <returns> <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedAreaValue"/> object. </returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedAreaValueList.Add(ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedAreaValue)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedAreaValue"/> object to the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedAreaValueList"/> object.
            </summary>
            <param name="areaValue"> the dateTime 100Percent stacked area value.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedBarValue">
             <summary>
             Represents a DateTime100PercentStackedBarValue.
             </summary>
             <example>The following example creates a date time 100 percent stacked bar chart and add value to it.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Values
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create percentage xaxis
                     Dim xAxis As PercentageXAxis = New PercentageXAxis()
            
                     ' Create date time yaxis
                     Dim yAxis As DateTimeYAxis = New DateTimeYAxis()
            
                     ' Create a date time 100Percent stacked bar series element and add values to it
                     Dim MySeriesElement1 As DateTime100PercentStackedBarSeriesElement = New DateTime100PercentStackedBarSeriesElement("Website A")
                     MySeriesElement1.Values.Add(New DateTime100PercentStackedBarValue(5, New DateTime(2006, 1, 1)))
                     MySeriesElement1.Values.Add(New DateTime100PercentStackedBarValue(7, New DateTime(2006, 2, 1)))
                     MySeriesElement1.Values.Add(New DateTime100PercentStackedBarValue(9, New DateTime(2006, 3, 1)))
                     MySeriesElement1.Values.Add(New DateTime100PercentStackedBarValue(6, New DateTime(2006, 4, 1)))
                     Dim MySeriesElement2 As DateTime100PercentStackedBarSeriesElement = New DateTime100PercentStackedBarSeriesElement("Website B")
                     MySeriesElement2.Values.Add(New DateTime100PercentStackedBarValue(4, New DateTime(2006, 1, 1)))
                     MySeriesElement2.Values.Add(New DateTime100PercentStackedBarValue(2, New DateTime(2006, 2, 1)))
                     MySeriesElement2.Values.Add(New DateTime100PercentStackedBarValue(5, New DateTime(2006, 3, 1)))
                     MySeriesElement2.Values.Add(New DateTime100PercentStackedBarValue(8, New DateTime(2006, 4, 1)))
                     Dim MySeriesElement3 As DateTime100PercentStackedBarSeriesElement = New DateTime100PercentStackedBarSeriesElement("Website C")
                     MySeriesElement3.Values.Add(New DateTime100PercentStackedBarValue(2, New DateTime(2006, 1, 1)))
                     MySeriesElement3.Values.Add(New DateTime100PercentStackedBarValue(4, New DateTime(2006, 2, 1)))
                     MySeriesElement3.Values.Add(New DateTime100PercentStackedBarValue(6, New DateTime(2006, 3, 1)))
                     MySeriesElement3.Values.Add(New DateTime100PercentStackedBarValue(9, New DateTime(2006, 4, 1)))
            
                     ' Create a date time 100Percent stacked bar series and add date time 100Percent stacked bar series elements to it
                     Dim MyStackedBarSeries1 As DateTime100PercentStackedBarSeries = New DateTime100PercentStackedBarSeries(xAxis, yAxis)
                     MyStackedBarSeries1.Add(MySeriesElement1)
                     MyStackedBarSeries1.Add(MySeriesElement2)
                     MyStackedBarSeries1.Add(MySeriesElement3)
            
                     ' Add date time 100Percent stacked bar series to the plot area
                     MyPlotArea.Series.Add(MyStackedBarSeries1)
            
                     ' set label  format for the axislabels
                     MyStackedBarSeries1.YAxis.LabelFormat = "MMM"
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Values;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     //Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create percentage xaxis
                     PercentageXAxis xAxis = new PercentageXAxis();
            
                     // Create date time yaxis
                     DateTimeYAxis yAxis = new DateTimeYAxis();
            
                     // Create a date time 100Percent stacked bar series element and add values to it
                     DateTime100PercentStackedBarSeriesElement seriesElement1 = new DateTime100PercentStackedBarSeriesElement("Website A");
                     seriesElement1.Values.Add(new DateTime100PercentStackedBarValue(5, new DateTime(2007, 1, 1)));
                     seriesElement1.Values.Add(new DateTime100PercentStackedBarValue(7, new DateTime(2007, 2, 1)));
                     seriesElement1.Values.Add(new DateTime100PercentStackedBarValue(9, new DateTime(2007, 3, 1)));
                     seriesElement1.Values.Add(new DateTime100PercentStackedBarValue(6, new DateTime(2007, 4, 1)));
                     DateTime100PercentStackedBarSeriesElement seriesElement2 = new DateTime100PercentStackedBarSeriesElement("Website B");
                     seriesElement2.Values.Add(new DateTime100PercentStackedBarValue(4, new DateTime(2007, 1, 1)));
                     seriesElement2.Values.Add(new DateTime100PercentStackedBarValue(2, new DateTime(2007, 2, 1)));
                     seriesElement2.Values.Add(new DateTime100PercentStackedBarValue(5, new DateTime(2007, 3, 1)));
                     seriesElement2.Values.Add(new DateTime100PercentStackedBarValue(8, new DateTime(2007, 4, 1)));
                     DateTime100PercentStackedBarSeriesElement seriesElement3 = new DateTime100PercentStackedBarSeriesElement("Website C");
                     seriesElement3.Values.Add(new DateTime100PercentStackedBarValue(2, new DateTime(2007, 1, 1)));
                     seriesElement3.Values.Add(new DateTime100PercentStackedBarValue(4, new DateTime(2007, 2, 1)));
                     seriesElement3.Values.Add(new DateTime100PercentStackedBarValue(6, new DateTime(2007, 3, 1)));
                     seriesElement3.Values.Add(new DateTime100PercentStackedBarValue(9, new DateTime(2007, 4, 1)));
            
                     // Create a date time 100Percent stacked bar series and add date time stacked bar series elements to it
                     DateTime100PercentStackedBarSeries stackedBarSeries1 = new DateTime100PercentStackedBarSeries(xAxis, yAxis);
                     stackedBarSeries1.Add(seriesElement1);
                     stackedBarSeries1.Add(seriesElement2);
                     stackedBarSeries1.Add(seriesElement3);
            
                     // Add date time 100Percent stacked bar series to the plot area
                     plotArea.Series.Add(stackedBarSeries1);
            
                     // set label  format for the axislabels
                     stackedBarSeries1.YAxis.LabelFormat = "MMM";
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf"); 
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.Stacked100PercentBarValue">
            <summary>
            Represents a Stacked100PercentBarValue.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.Stacked100PercentBarValue.Value">
            <summary>
            Gets the value of the Stacked100PercentBarValue.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.Stacked100PercentBarValue.Color">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.Values.Stacked100PercentBarValue.Color"/> object to use for the color of the Stacked100PercentBarValue.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.Stacked100PercentBarValue.DataLabel">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.BarColumnPercentageDataLabel"/> object to use for the DataLabel of the Stacked100PercentBarValue.
            </summary>
            <p/><b>NOTE:</b> Prior to Version 6.0 DataLabel was of type PercentageDataLabel.
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedBarValue.#ctor(System.Single,System.DateTime)">
            <summary>
            Initializes a new instance of <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedBarValue"/> class.
            </summary>
            <param name="value1"> Value of the datetime 100Percent stacked bar value. </param>
            <param name="position">Position of the datetime 100Percent stacked bar value</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedBarValue.Position">
            <summary>
            Gets the position of the DateTime100PercentStackedBarValue.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedBarValueList">
            <summary>
            Represents a DateTime100PercentStackedBarValueList.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.Stacked100PercentBarValueList">
            <summary>
            Represents a list of the Stacked100PercentBarValues.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.Stacked100PercentBarValueList.Count">
            <summary>
            Gets the number of Stacked100PercentBarValues actually contained in the Stacked100PercentBarValueList.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.Stacked100PercentBarValueList.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Stacked100PercentBarValue"/> object at the given index. 
            </summary>
            <returns>The <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Stacked100PercentBarValue"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedBarValueList.Add(System.Single,System.DateTime)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedBarValue"/> object to the end of the
            <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedBarValueList"/> object.
            </summary>
            <param name="value1">Value of date time 100Percent stacked bar value. </param>
            <param name="position">Position of the date time 100Percent stacked bar value. </param>
            <returns><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedBarValue"/> object </returns>       
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedBarValueList.Add(ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedBarValue)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedBarValue"/> to the end of the
             <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedBarValueList"/> .
            </summary>
            <param name="dateTimeStackedBarValue"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedBarValue"/> to be added. </param>      	
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedColumnValue">
             <summary>
             Represents a DateTime100PercentStackedColumnValue.
             </summary>
             <example>The following example creates a date time 100Percent stacked column value chart and adds
             value to it.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Values
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a date time 100Percent stacked column series element and add values to it          
                     Dim MySeriesElement1 As DateTime100PercentStackedColumnSeriesElement = New DateTime100PercentStackedColumnSeriesElement("Website A")
                     MySeriesElement1.Values.Add(New DateTime100PercentStackedColumnValue(5, New DateTime(2007, 1, 1)))
                     MySeriesElement1.Values.Add(New DateTime100PercentStackedColumnValue(7, New DateTime(2007, 2, 1)))
                     MySeriesElement1.Values.Add(New DateTime100PercentStackedColumnValue(4, New DateTime(2007, 3, 1)))
                     MySeriesElement1.Values.Add(New DateTime100PercentStackedColumnValue(3, New DateTime(2007, 4, 1)))
                     Dim MySeriesElement2 As DateTime100PercentStackedColumnSeriesElement = New DateTime100PercentStackedColumnSeriesElement("Website B")
                     MySeriesElement2.Values.Add(New DateTime100PercentStackedColumnValue(4, New DateTime(2007, 1, 1)))
                     MySeriesElement2.Values.Add(New DateTime100PercentStackedColumnValue(2, New DateTime(2007, 2, 1)))
                     MySeriesElement2.Values.Add(New DateTime100PercentStackedColumnValue(5, New DateTime(2007, 3, 1)))
                     MySeriesElement2.Values.Add(New DateTime100PercentStackedColumnValue(8, New DateTime(2007, 4, 1)))
                     Dim MySeriesElement3 As DateTime100PercentStackedColumnSeriesElement = New DateTime100PercentStackedColumnSeriesElement("Website C")
                     MySeriesElement3.Values.Add(New DateTime100PercentStackedColumnValue(2, New DateTime(2007, 1, 1)))
                     MySeriesElement3.Values.Add(New DateTime100PercentStackedColumnValue(4, New DateTime(2007, 2, 1)))
                     MySeriesElement3.Values.Add(New DateTime100PercentStackedColumnValue(6, New DateTime(2007, 3, 1)))
                     MySeriesElement3.Values.Add(New DateTime100PercentStackedColumnValue(9, New DateTime(2007, 4, 1)))
            
                     ' Create a date time 100Percent stacked column series and add date time 100Percent stacked column series elements to it
                     Dim MyColumnSeries1 As DateTime100PercentStackedColumnSeries = New DateTime100PercentStackedColumnSeries()
                     MyColumnSeries1.Add(MySeriesElement1)
                     MyColumnSeries1.Add(MySeriesElement2)
                     MyColumnSeries1.Add(MySeriesElement3)
            
                     ' Add date time 100Percent stacked column series to the plot area
                     MyPlotArea.Series.Add(MyColumnSeries1)
            
                     ' set label  format for the axislabels
                     MyColumnSeries1.XAxis.LabelFormat = "MMM"
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Values;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     //Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a date time 100Percent stacked column series element and add values to it          
                     DateTime100PercentStackedColumnSeriesElement seriesElement1 = new DateTime100PercentStackedColumnSeriesElement("Website A");
                     seriesElement1.Values.Add(new DateTime100PercentStackedColumnValue(5, new DateTime(2007, 1, 1)));
                     seriesElement1.Values.Add(new DateTime100PercentStackedColumnValue(7, new DateTime(2007, 2, 1)));
                     seriesElement1.Values.Add(new DateTime100PercentStackedColumnValue(4, new DateTime(2007, 3, 1)));
                     seriesElement1.Values.Add(new DateTime100PercentStackedColumnValue(3, new DateTime(2007, 4, 1)));
                     DateTime100PercentStackedColumnSeriesElement seriesElement2 = new DateTime100PercentStackedColumnSeriesElement("Website B");
                     seriesElement2.Values.Add(new DateTime100PercentStackedColumnValue(4, new DateTime(2007, 1, 1)));
                     seriesElement2.Values.Add(new DateTime100PercentStackedColumnValue(2, new DateTime(2007, 2, 1)));
                     seriesElement2.Values.Add(new DateTime100PercentStackedColumnValue(5, new DateTime(2007, 3, 1)));
                     seriesElement2.Values.Add(new DateTime100PercentStackedColumnValue(8, new DateTime(2007, 4, 1)));
                     DateTime100PercentStackedColumnSeriesElement seriesElement3 = new DateTime100PercentStackedColumnSeriesElement("Website C");
                     seriesElement3.Values.Add(new DateTime100PercentStackedColumnValue(2, new DateTime(2007, 1, 1)));
                     seriesElement3.Values.Add(new DateTime100PercentStackedColumnValue(4, new DateTime(2007, 2, 1)));
                     seriesElement3.Values.Add(new DateTime100PercentStackedColumnValue(6, new DateTime(2007, 3, 1)));
                     seriesElement3.Values.Add(new DateTime100PercentStackedColumnValue(9, new DateTime(2007, 4, 1)));
            
                     // Create a date time 100Percent stacked column series and add date time 100Percent stacked column series elements to it
                     DateTime100PercentStackedColumnSeries columnSeries1 = new DateTime100PercentStackedColumnSeries();
                     columnSeries1.Add(seriesElement1);
                     columnSeries1.Add(seriesElement2);
                     columnSeries1.Add(seriesElement3);
            
                     // Add date time 100Percent stacked column series to the plot area
                     plotArea.Series.Add(columnSeries1);
            
                     // set label  format for the axislabels
                     columnSeries1.XAxis.LabelFormat = "MMM";
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.Stacked100PercentColumnValue">
            <summary>
            Represents the Stacked100PercentColumnValue.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.Stacked100PercentColumnValue.Value">
            <summary>
            Gets the value of the Stacked100PercentColumnValue. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.Stacked100PercentColumnValue.Color">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.Values.Stacked100PercentColumnValue.Color"/> object to use for the color of the Stacked100PercentColumnValue.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.Stacked100PercentColumnValue.DataLabel">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.BarColumnPercentageDataLabel"/>to use for the DataLabel of the Stacked100PercentColumnValue.
            </summary>
            <p/><b>NOTE:</b> Prior to Version 6.0 DataLabel was of type PercentageDataLabel.
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedColumnValue.#ctor(System.Single,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedColumnValue"/> class.  
            </summary>
            <param name="value1">The value of datetime 100Percent stacked column value. </param>
            <param name="position">The position of the datetime 100Percent stacked column value. </param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedColumnValue.Position">
            <summary>
            Gets the position of the DateTime100PercentStackedColumnValue. 
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedColumnValueList">
            <summary>
            Represents a DateTime100PercentStackedColumnValueList.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.Stacked100PercentColumnValueList">
            <summary>
            Represents the Stacked100PercentColumnValueList. 
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.Stacked100PercentColumnValueList.Count">
            <summary>
            Gets the number of Stacked100PercentColumnValues actually contained in the Stacked100PercentColumnValueList.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.Stacked100PercentColumnValueList.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Stacked100PercentColumnValue"/> object at the given index. 
            </summary>
            <param name="index">index of the required stacked 100Percent column value. </param>
            <returns> The <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Stacked100PercentColumnValue"/> object. </returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedColumnValueList.Add(System.Single,System.DateTime)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedColumnValue"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedColumnValueList"/>.
            </summary>
            <param name="value1">Value of the datetime 100Percent stacked column value. </param>
            <param name="position">Position of the datetime 100Percent stacked column value. </param>
            <returns> <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedColumnValue"/> object. </returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedColumnValueList.Add(ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedColumnValue)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedColumnValue"/> object to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedColumnValueList"/> object.  
            </summary>
            <param name="dateTimeStackedColumnValue"> <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedColumnValue"/> to be added.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedLineValue">
             <summary>
             Represents a DateTime100PercentStackedLineValue.
             </summary>
             <example>The following example creates a date time 100Percent stacked line chart and 
             adds value to it.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Values
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a date time x axis
                     Dim xAxis As DateTimeXAxis = New DateTimeXAxis()
            
                     ' Create a percentage y axis
                     Dim yAxis As PercentageYAxis = New PercentageYAxis()
            
                     ' Create a date time 100Percent stacked line series element and add values to it
                     Dim MySeriesElement1 As DateTime100PercentStackedLineSeriesElement = New DateTime100PercentStackedLineSeriesElement("Website A")
                     MySeriesElement1.Values.Add(New DateTime100PercentStackedLineValue(5, New DateTime(2007, 1, 1)))
                     MySeriesElement1.Values.Add(New DateTime100PercentStackedLineValue(7, New DateTime(2007, 2, 1)))
                     MySeriesElement1.Values.Add(New DateTime100PercentStackedLineValue(9, New DateTime(2007, 3, 1)))
                     MySeriesElement1.Values.Add(New DateTime100PercentStackedLineValue(6, New DateTime(2007, 4, 1)))
                     Dim MySeriesElement2 As DateTime100PercentStackedLineSeriesElement = New DateTime100PercentStackedLineSeriesElement("Website B")
                     MySeriesElement2.Values.Add(New DateTime100PercentStackedLineValue(4, New DateTime(2007, 1, 1)))
                     MySeriesElement2.Values.Add(New DateTime100PercentStackedLineValue(2, New DateTime(2007, 2, 1)))
                     MySeriesElement2.Values.Add(New DateTime100PercentStackedLineValue(5, New DateTime(2007, 3, 1)))
                     MySeriesElement2.Values.Add(New DateTime100PercentStackedLineValue(8, New DateTime(2007, 4, 1)))
                     Dim MySeriesElement3 As DateTime100PercentStackedLineSeriesElement = New DateTime100PercentStackedLineSeriesElement("Website C")
                     MySeriesElement3.Values.Add(New DateTime100PercentStackedLineValue(2, New DateTime(2007, 1, 1)))
                     MySeriesElement3.Values.Add(New DateTime100PercentStackedLineValue(4, New DateTime(2007, 2, 1)))
                     MySeriesElement3.Values.Add(New DateTime100PercentStackedLineValue(6, New DateTime(2007, 3, 1)))
                     MySeriesElement3.Values.Add(New DateTime100PercentStackedLineValue(9, New DateTime(2007, 4, 1)))
            
                     ' Create a date time 100Percent stacked line series and add date time 100Percent stacked line series elements to it
                     Dim MyStackedLineSeries1 As DateTime100PercentStackedLineSeries = New DateTime100PercentStackedLineSeries(xAxis, yAxis)
                     MyStackedLineSeries1.Add(MySeriesElement1)
                     MyStackedLineSeries1.Add(MySeriesElement2)
                     MyStackedLineSeries1.Add(MySeriesElement3)
            
                     ' Add date time 100Percent line series to the plot area
                     MyPlotArea.Series.Add(MyStackedLineSeries1)
             
                     ' set label  format for the axislabels
                     MyStackedLineSeries1.XAxis.LabelFormat = "MMM"
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Values;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a date time x axis
                     DateTimeXAxis xAxis = new DateTimeXAxis();
            
                     // Create a percentage y axis
                     PercentageYAxis yAxis = new PercentageYAxis();
            
                     // Create a date time 100Percent stacked line series element and add values to it
                     DateTime100PercentStackedLineSeriesElement seriesElement1 = new DateTime100PercentStackedLineSeriesElement("Website A");
                     seriesElement1.Values.Add(new DateTime100PercentStackedLineValue(5, new DateTime(2007, 1, 1)));
                     seriesElement1.Values.Add(new DateTime100PercentStackedLineValue(7, new DateTime(2007, 2, 1)));
                     seriesElement1.Values.Add(new DateTime100PercentStackedLineValue(9, new DateTime(2007, 3, 1)));
                     seriesElement1.Values.Add(new DateTime100PercentStackedLineValue(6, new DateTime(2007, 4, 1)));
                     DateTime100PercentStackedLineSeriesElement seriesElement2 = new DateTime100PercentStackedLineSeriesElement("Website B");
                     seriesElement2.Values.Add(new DateTime100PercentStackedLineValue(4, new DateTime(2007, 1, 1)));
                     seriesElement2.Values.Add(new DateTime100PercentStackedLineValue(2, new DateTime(2007, 2, 1)));
                     seriesElement2.Values.Add(new DateTime100PercentStackedLineValue(5, new DateTime(2007, 3, 1)));
                     seriesElement2.Values.Add(new DateTime100PercentStackedLineValue(8, new DateTime(2007, 4, 1)));
                     DateTime100PercentStackedLineSeriesElement seriesElement3 = new DateTime100PercentStackedLineSeriesElement("Website C");
                     seriesElement3.Values.Add(new DateTime100PercentStackedLineValue(2, new DateTime(2007, 1, 1)));
                     seriesElement3.Values.Add(new DateTime100PercentStackedLineValue(4, new DateTime(2007, 2, 1)));
                     seriesElement3.Values.Add(new DateTime100PercentStackedLineValue(6, new DateTime(2007, 3, 1)));
                     seriesElement3.Values.Add(new DateTime100PercentStackedLineValue(9, new DateTime(2007, 4, 1)));
            
                     // Create a date time 100Percent stacked line series and add date time 100Percent stacked line series elements to it
                     DateTime100PercentStackedLineSeries stackedLineSeries1 = new DateTime100PercentStackedLineSeries(xAxis, yAxis);
                     stackedLineSeries1.Add(seriesElement1);
                     stackedLineSeries1.Add(seriesElement2);
                     stackedLineSeries1.Add(seriesElement3);
            
                     // Add date time 100Percent line series to the plot area
                     plotArea.Series.Add(stackedLineSeries1);
            
                     // set label  format for the axislabels
                     stackedLineSeries1.XAxis.LabelFormat = "MMM";
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.Stacked100PercentLineValue">
            <summary>
            Represents a Stacked100PercentLineValue.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.Stacked100PercentLineValue.DataLabel">
            <summary>
            Gets or sets the DataLabel of the Stacked100PercentLineValue.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.Stacked100PercentLineValue.Value">
            <summary>
            Gets the value of the Stacked100PercentLineValue.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedLineValue.#ctor(System.Single,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedLineValue"/> object.
            </summary>
            <param name="value1"> the value of dateTime 100Percent stacked line value.</param>
            <param name="position">the position of the dateTime 100Percent stacked line value. </param>        
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedLineValue.Position">
            <summary>
            Gets the position of the DateTime100PercentStackedLineValue.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedLineValueList">
            <summary>
            Represents a DateTime100PercentStackedLineValueList.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.Stacked100PercentLineValueList">
            <summary>
            Represents a list of the Stacked100PercentLineValues.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.Stacked100PercentLineValueList.Count">
            <summary>
            Gets the total number of Stacked100PercentLineValues in the Stacked100PercentLineValueList.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.Stacked100PercentLineValueList.Item(System.Int32)">
            <summary>
            Gets the Stacked100PercentLineValue from the Stacked100Percent LineValueList based on the given index. 
            </summary>
            <returns>Stacked100PercentLineValue in the sepecified index.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedLineValueList.Add(ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedLineValue)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedLineValue"/> object to the
            <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedLineValueList"/> object.
            </summary>
            <param name="lineValue"> Value of the dateTime 100Percent stacked line value.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedLineValueList.Add(System.Single,System.DateTime)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedLineValue"/> object to the
            <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedLineValueList"/> object.
            </summary>
            <param name="value1"> Value of the dateTime 100Percent stacked line value. </param>
            <param name="obj">Position of the dateTime 100Percent stacked line value. </param>
            <returns><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTime100PercentStackedLineValue"/>object</returns>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeAreaValue">
             <summary>
             Represents a DateTimeAreaValue.
             </summary>
             <example>The following example creates a date time area series and adds values to it.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Values
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim page As Page = New Page()
                     MyDocument.Pages.Add(page)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     ' Get the default plot area from the chart
                     Dim plotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a date time area series and  a list of values to it 
                     Dim areaSeries1 As DateTimeAreaSeries = New DateTimeAreaSeries("Website A")
                     areaSeries1.Values.Add(New DateTimeAreaValue(5, New DateTime(2007, 1, 1)))
                     areaSeries1.Values.Add(New DateTimeAreaValue(7, New DateTime(2007, 2, 1)))
                     areaSeries1.Values.Add(New DateTimeAreaValue(9, New DateTime(2007, 3, 1)))
                     areaSeries1.Values.Add(New DateTimeAreaValue(6, New DateTime(2007, 4, 1)))
                     Dim areaSeries2 As DateTimeAreaSeries = New DateTimeAreaSeries("Website B")
                     areaSeries2.Values.Add(New DateTimeAreaValue(4, New DateTime(2007, 1, 1)))
                     areaSeries2.Values.Add(New DateTimeAreaValue(2, New DateTime(2007, 2, 1)))
                     areaSeries2.Values.Add(New DateTimeAreaValue(5, New DateTime(2007, 3, 1)))
                     areaSeries2.Values.Add(New DateTimeAreaValue(8, New DateTime(2007, 4, 1)))
                     Dim areaSeries3 As DateTimeAreaSeries = New DateTimeAreaSeries("Website C")
                     areaSeries3.Values.Add(New DateTimeAreaValue(2, New DateTime(2007, 1, 1)))
                     areaSeries3.Values.Add(New DateTimeAreaValue(4, New DateTime(2007, 2, 1)))
                     areaSeries3.Values.Add(New DateTimeAreaValue(6, New DateTime(2007, 3, 1)))
                     areaSeries3.Values.Add(New DateTimeAreaValue(9, New DateTime(2007, 4, 1)))
            
                     ' Add date time area series to the plot area
                     plotArea.Series.Add(areaSeries1)
                     plotArea.Series.Add(areaSeries2)
                     plotArea.Series.Add(areaSeries3)
            
                     ' Create a title and add it to y axis
                     Dim title3 As Title = New Title("Viewers (in millions)")
                     areaSeries1.YAxis.Titles.Add(title3)
            
                     ' set label  format for the axislabels
                     areaSeries1.XAxis.LabelFormat = "MMM"
            
                     ' Add the chart to the page
                     page.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Values;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a date time area series and  a list of values to it            
                     DateTimeAreaSeries areaSeries1 = new DateTimeAreaSeries("Website A");
                     areaSeries1.Values.Add(new DateTimeAreaValue(5, new DateTime(2007, 1, 1)));
                     areaSeries1.Values.Add(new DateTimeAreaValue(7, new DateTime(2007, 2, 1)));
                     areaSeries1.Values.Add(new DateTimeAreaValue(6, new DateTime(2007, 3, 1)));
                     areaSeries1.Values.Add(new DateTimeAreaValue(9, new DateTime(2007, 4, 1)));
                     DateTimeAreaSeries areaSeries2 = new DateTimeAreaSeries("Website B");
                     areaSeries2.Values.Add(new DateTimeAreaValue(4, new DateTime(2007, 1, 1)));
                     areaSeries2.Values.Add(new DateTimeAreaValue(2, new DateTime(2007, 2, 1)));
                     areaSeries2.Values.Add(new DateTimeAreaValue(5, new DateTime(2007, 3, 1)));
                     areaSeries2.Values.Add(new DateTimeAreaValue(8, new DateTime(2007, 4, 1)));
                     DateTimeAreaSeries areaSeries3 = new DateTimeAreaSeries("Website C");
                     areaSeries3.Values.Add(new DateTimeAreaValue(2, new DateTime(2007, 1, 1)));
                     areaSeries3.Values.Add(new DateTimeAreaValue(4, new DateTime(2007, 2, 1)));
                     areaSeries3.Values.Add(new DateTimeAreaValue(6, new DateTime(2007, 3, 1)));
                     areaSeries3.Values.Add(new DateTimeAreaValue(9, new DateTime(2007, 4, 1)));
            
                     // Add date time area series to the plot area
                     plotArea.Series.Add(areaSeries1);
                     plotArea.Series.Add(areaSeries2);
                     plotArea.Series.Add(areaSeries3);
            
                     // Create a title and add it to the yaxis
                     Title title3 = new Title("Viewers (in millions)");
                     areaSeries1.YAxis.Titles.Add(title3);
            
                     // Set label  format for the axis labels
                     areaSeries1.XAxis.LabelFormat = "MMM";
            
                     //Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeAreaValue.#ctor(System.Single,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeAreaValue"/> object.
            </summary>
            <param name="value1">the value of dateTime area value </param>
            <param name="position">the position of the dateTime area value </param>       
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeAreaValue.Position">
            <summary>
            Gets the position of the DateTimeAreaValue.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeAreaValueList">
            <summary>
            Represents a list of the DateTimeAreaValues.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeAreaValueList.Add(System.Single,System.DateTime)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeAreaValue"/> object to the
            <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeAreaValueList"/> object.
            </summary>
            <param name="value1"> Value of the dateTime area Value</param>
            <param name="obj">Position of the dateTime area Value </param>
            <returns><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeAreaValue"/> object. </returns>       
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeAreaValueList.Add(ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeAreaValue)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeAreaValue"/> object to the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeAreaValueList"/> object.
            </summary>
            <param name="areaValue">Value of the dateTime area Value</param>        
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeBarValue">
             <summary>
             This class represents the DateTimeBarValue.
             </summary>
             <example>The following example creates a date time bar chart and adds value to it.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Values
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a date time bar series and add values to it
                     Dim MyBarSeries1 As DateTimeBarSeries = New DateTimeBarSeries("Website A")
                     MyBarSeries1.Values.Add(New DateTimeBarValue(5, New DateTime(2007, 1, 1)))
                     MyBarSeries1.Values.Add(New DateTimeBarValue(7, New DateTime(2007, 2, 1)))
                     MyBarSeries1.Values.Add(New DateTimeBarValue(9, New DateTime(2007, 3, 1)))
                     MyBarSeries1.Values.Add(New DateTimeBarValue(6, New DateTime(2007, 4, 1)))
                     Dim MyBarSeries2 As DateTimeBarSeries = New DateTimeBarSeries("Website B")
                     MyBarSeries2.Values.Add(New DateTimeBarValue(4, New DateTime(2007, 1, 1)))
                     MyBarSeries2.Values.Add(New DateTimeBarValue(2, New DateTime(2007, 2, 1)))
                     MyBarSeries2.Values.Add(New DateTimeBarValue(5, New DateTime(2007, 3, 1)))
                     MyBarSeries2.Values.Add(New DateTimeBarValue(8, New DateTime(2007, 4, 1)))
                     Dim MyBarSeries3 As DateTimeBarSeries = New DateTimeBarSeries("Website C")
                     MyBarSeries3.Values.Add(New DateTimeBarValue(2, New DateTime(2007, 1, 1)))
                     MyBarSeries3.Values.Add(New DateTimeBarValue(4, New DateTime(2007, 2, 1)))
                     MyBarSeries3.Values.Add(New DateTimeBarValue(6, New DateTime(2007, 3, 1)))
                     MyBarSeries3.Values.Add(New DateTimeBarValue(9, New DateTime(2007, 4, 1)))
            
                     ' Add date time bar series to the plot area
                     MyPlotArea.Series.Add(MyBarSeries1)
                     MyPlotArea.Series.Add(MyBarSeries2)
                     MyPlotArea.Series.Add(MyBarSeries3)
            
                     ' Create a title and add it to the xaxis
                     Dim MyTitle3 As Title = New Title("Viewers (in millions)")
                     MyBarSeries1.XAxis.Titles.Add(MyTitle3)
            
                     ' set label  format for the axislabels
                     MyBarSeries1.YAxis.LabelFormat = "MMM"
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Values;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a date time bar series and add values to it
                     DateTimeBarSeries barSeries1 = new DateTimeBarSeries("Website A");
                     barSeries1.Values.Add(new DateTimeBarValue(5, new DateTime(2007, 1, 1)));
                     barSeries1.Values.Add(new DateTimeBarValue(7, new DateTime(2007, 2, 1)));
                     barSeries1.Values.Add(new DateTimeBarValue(9, new DateTime(2007, 3, 1)));
                     barSeries1.Values.Add(new DateTimeBarValue(6, new DateTime(2007, 4, 1)));
                     DateTimeBarSeries barSeries2 = new DateTimeBarSeries("Website B");
                     barSeries2.Values.Add(new DateTimeBarValue(4, new DateTime(2007, 1, 1)));
                     barSeries2.Values.Add(new DateTimeBarValue(2, new DateTime(2007, 2, 1)));
                     barSeries2.Values.Add(new DateTimeBarValue(5, new DateTime(2007, 3, 1)));
                     barSeries2.Values.Add(new DateTimeBarValue(8, new DateTime(2007, 4, 1)));
                     DateTimeBarSeries barSeries3 = new DateTimeBarSeries("Website C");
                     barSeries3.Values.Add(new DateTimeBarValue(2, new DateTime(2007, 1, 1)));
                     barSeries3.Values.Add(new DateTimeBarValue(4, new DateTime(2007, 2, 1)));
                     barSeries3.Values.Add(new DateTimeBarValue(6, new DateTime(2007, 3, 1)));
                     barSeries3.Values.Add(new DateTimeBarValue(9, new DateTime(2007, 4, 1)));
            
                     // Add date time bar series to the plot area
                     plotArea.Series.Add(barSeries1);
                     plotArea.Series.Add(barSeries2);
                     plotArea.Series.Add(barSeries3);
            
                     // Create a title and add it to the xaxis
                     Title title3 = new Title("Viewers (in millions)");
                     barSeries1.XAxis.Titles.Add(title3);
            
                     // set label  format for the axislabels
                     barSeries1.YAxis.LabelFormat = "MMM";
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeBarValue.#ctor(System.Single,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeBarValue"/> class.
            </summary>
            <param name="value1">the float indicating value of date time bar value</param>
            <param name="position">position the position of the date time bar value </param>             
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeBarValue.Position">
            <summary>
            Gets the position of the DateTimeBarValue.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeBarValueList">
            <summary>
            This class represents the DateTimeBarValueList.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeBarValueList.Add(System.Single,System.DateTime)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeBarValue"/> object to the end of the
            <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeBarValueList"/> object.
            </summary>
            <param name="value1">Value of the date time bar value. </param>
            <param name="position">Position of the date time bar value. </param>
            <returns><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeBarValue"/> object </returns>             
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeBarValueList.Add(ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeBarValue)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeBarValue"/> object to the end of the
            <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeBarValueList"/> object.
            </summary>
            <param name="dateTimeBarValue"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeBarValue"/> object to be added</param>        
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeColumnValue">
             <summary>
             Represents a DateTimeColumnValue.
             </summary>
             <example>The following example creates a date time column chart and adds value to it.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Values
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
             
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
             
                     ' Create a date time column series and add values to it          
                     Dim MyColumnSeries1 As DateTimeColumnSeries = New DateTimeColumnSeries("Website A")
                     MyColumnSeries1.Values.Add(New DateTimeColumnValue(5, New DateTime(2007, 1, 1)))
                     MyColumnSeries1.Values.Add(New DateTimeColumnValue(7, New DateTime(2007, 2, 1)))
                     MyColumnSeries1.Values.Add(New DateTimeColumnValue(4, New DateTime(2007, 3, 1)))
                     MyColumnSeries1.Values.Add(New DateTimeColumnValue(3, New DateTime(2007, 4, 1)))
                     Dim MyColumnSeries2 As DateTimeColumnSeries = New DateTimeColumnSeries("Website B")
                     MyColumnSeries2.Values.Add(New DateTimeColumnValue(4, New DateTime(2007, 1, 1)))
                     MyColumnSeries2.Values.Add(New DateTimeColumnValue(2, New DateTime(2007, 2, 1)))
                     MyColumnSeries2.Values.Add(New DateTimeColumnValue(5, New DateTime(2007, 3, 1)))
                     MyColumnSeries2.Values.Add(New DateTimeColumnValue(8, New DateTime(2007, 4, 1)))
                     Dim MyColumnSeries3 As DateTimeColumnSeries = New DateTimeColumnSeries("Website C")
                     MyColumnSeries3.Values.Add(New DateTimeColumnValue(2, New DateTime(2007, 1, 1)))
                     MyColumnSeries3.Values.Add(New DateTimeColumnValue(4, New DateTime(2007, 2, 1)))
                     MyColumnSeries3.Values.Add(New DateTimeColumnValue(6, New DateTime(2007, 3, 1)))
                     MyColumnSeries3.Values.Add(New DateTimeColumnValue(9, New DateTime(2007, 4, 1)))
            
                     ' Add date time column series to the plot area
                     MyPlotArea.Series.Add(MyColumnSeries1)
                     MyPlotArea.Series.Add(MyColumnSeries2)
                     MyPlotArea.Series.Add(MyColumnSeries3)
            
                     ' Create a title and add it to the yaxis
                     Dim MyTitle3 As Title = New Title("Viewers (in millions)")
                     MyColumnSeries1.YAxis.Titles.Add(MyTitle3)
            
                     ' set label  format for the axislabels
                     MyColumnSeries1.XAxis.LabelFormat = "MMM"
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Values;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a date time column series and add values to it          
                     DateTimeColumnSeries columnSeries1 = new DateTimeColumnSeries("Website A");
                     columnSeries1.Values.Add(new DateTimeColumnValue(5, new DateTime(2007, 1, 1)));
                     columnSeries1.Values.Add(new DateTimeColumnValue(7, new DateTime(2007, 2, 1)));
                     columnSeries1.Values.Add(new DateTimeColumnValue(4, new DateTime(2007, 3, 1)));
                     columnSeries1.Values.Add(new DateTimeColumnValue(3, new DateTime(2007, 4, 1)));
                     DateTimeColumnSeries columnSeries2 = new DateTimeColumnSeries("Website B");
                     columnSeries2.Values.Add(new DateTimeColumnValue(4, new DateTime(2007, 1, 1)));
                     columnSeries2.Values.Add(new DateTimeColumnValue(2, new DateTime(2007, 2, 1)));
                     columnSeries2.Values.Add(new DateTimeColumnValue(5, new DateTime(2007, 3, 1)));
                     columnSeries2.Values.Add(new DateTimeColumnValue(8, new DateTime(2007, 4, 1)));
                     DateTimeColumnSeries columnSeries3 = new DateTimeColumnSeries("Website C");
                     columnSeries3.Values.Add(new DateTimeColumnValue(2, new DateTime(2007, 1, 1)));
                     columnSeries3.Values.Add(new DateTimeColumnValue(4, new DateTime(2007, 2, 1)));
                     columnSeries3.Values.Add(new DateTimeColumnValue(6, new DateTime(2007, 3, 1)));
                     columnSeries3.Values.Add(new DateTimeColumnValue(9, new DateTime(2007, 4, 1)));
            
                     // Add date time column series to the plot area
                     plotArea.Series.Add(columnSeries1);
                     plotArea.Series.Add(columnSeries2);
                     plotArea.Series.Add(columnSeries3);
            
                     // Create a title and add it to the yaxis
                     Title title3 = new Title("Viewers (in millions)");
                     columnSeries1.YAxis.Titles.Add(title3);
            
                     // set label  format for the axislabels
                     columnSeries1.XAxis.LabelFormat = "MMM";
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf"); 
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeColumnValue.#ctor(System.Single,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeColumnValue"/> class. 
            </summary>
            <param name="value1">The float indicating value of date time column value. </param>
            <param name="position">The position of the date time column value. </param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeColumnValue.Position">
            <summary>
            Gets the position of the DateTimeColumnValue. 
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeColumnValueList">
            <summary>
            Represents a DateTimeColumnValueList.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeColumnValueList.Add(System.Single,System.DateTime)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeColumnValue"/> object to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeColumnValueList"/> object.
            </summary>
            <param name="value1">Value of the date time column value. </param>
            <param name="position">Position of the date time column value. </param>
            <returns> A <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeColumnValue"/> object. </returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeColumnValueList.Add(ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeColumnValue)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeColumnValue"/> object to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeColumnValueList"/> object.
            </summary>
            <param name="dateTimeColumnValue"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeColumnValue"/> to be added. </param>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeLineValue">
             <summary>
             Represents a DateTimeLineValue.
             </summary>
             <example>The following example creates a date time line chart and adds
             value to it.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Values
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create positions
                     Dim p0 As DateTime = New DateTime(2007, 1, 1)
                     Dim p1 As DateTime = New DateTime(2007, 2, 1)
                     Dim p2 As DateTime = New DateTime(2007, 3, 1)
                     Dim p3 As DateTime = New DateTime(2007, 4, 1)
            
                     ' Create a date time line series and add values to it
                     Dim MyLineSeries1 As DateTimeLineSeries = New DateTimeLineSeries("Website A")
                     MyLineSeries1.Values.Add(New DateTimeLineValue(5, p0))
                     MyLineSeries1.Values.Add(New DateTimeLineValue(7, p1))
                     MyLineSeries1.Values.Add(New DateTimeLineValue(9, p2))
                     MyLineSeries1.Values.Add(New DateTimeLineValue(6, p3))
                     Dim MyLineSeries2 As DateTimeLineSeries = New DateTimeLineSeries("Website B")
                     MyLineSeries2.Values.Add(New DateTimeLineValue(4, p0))
                     MyLineSeries2.Values.Add(New DateTimeLineValue(2, p1))
                     MyLineSeries2.Values.Add(New DateTimeLineValue(5, p2))
                     MyLineSeries2.Values.Add(New DateTimeLineValue(8, p3))
                     Dim MyLineSeries3 As DateTimeLineSeries = New DateTimeLineSeries("Website C")
                     MyLineSeries3.Values.Add(New DateTimeLineValue(2, p0))
                     MyLineSeries3.Values.Add(New DateTimeLineValue(4, p1))
                     MyLineSeries3.Values.Add(New DateTimeLineValue(6, p2))
                     MyLineSeries3.Values.Add(New DateTimeLineValue(9, p3))
            
                     ' Add date time line series to the plot area
                     MyPlotArea.Series.Add(MyLineSeries1)
                     MyPlotArea.Series.Add(MyLineSeries2)
                     MyPlotArea.Series.Add(MyLineSeries3)
            
                     ' Create a title and add it to the yaxis
                     Dim MyTitle3 As Title = New Title("Viewers (in millions)")
                     MyLineSeries1.YAxis.Titles.Add(MyTitle3)
            
                     ' Set label  format for the axislabels
                     MyLineSeries1.XAxis.LabelFormat = "MMM"
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Values;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
             
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create positions
                     DateTime p0 = new DateTime(2007, 1, 1);
                     DateTime p1 = new DateTime(2007, 2, 1);
                     DateTime p2 = new DateTime(2007, 3, 1);
                     DateTime p3 = new DateTime(2007, 4, 1);
            
                     // Create a date time line series and add values to it
                     DateTimeLineSeries lineSeries1 = new DateTimeLineSeries("Website A");
                     lineSeries1.Values.Add(new DateTimeLineValue(5, p0));
                     lineSeries1.Values.Add(new DateTimeLineValue(7, p1));
                     lineSeries1.Values.Add(new DateTimeLineValue(9, p2));
                     lineSeries1.Values.Add(new DateTimeLineValue(6, p3));
                     DateTimeLineSeries lineSeries2 = new DateTimeLineSeries("Website B");
                     lineSeries2.Values.Add(new DateTimeLineValue(4, p0));
                     lineSeries2.Values.Add(new DateTimeLineValue(2, p1));
                     lineSeries2.Values.Add(new DateTimeLineValue(5, p2));
                     lineSeries2.Values.Add(new DateTimeLineValue(8, p3));
                     DateTimeLineSeries lineSeries3 = new DateTimeLineSeries("Website C");
                     lineSeries3.Values.Add(new DateTimeLineValue(2, p0));
                     lineSeries3.Values.Add(new DateTimeLineValue(4, p1));
                     lineSeries3.Values.Add(new DateTimeLineValue(6, p2));
                     lineSeries3.Values.Add(new DateTimeLineValue(9, p3));
            
                     // Add date time line series to the plot area
                     plotArea.Series.Add(lineSeries1);
                     plotArea.Series.Add(lineSeries2);
                     plotArea.Series.Add(lineSeries3);
            
                     // Create a title and add it to the yaxis
                     Title title3 = new Title("Viewers (in millions)");
                     lineSeries1.YAxis.Titles.Add(title3);
            
                     // Set label  format for the axislabels
                     lineSeries1.XAxis.LabelFormat = "MMM";
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.LineValue">
            <summary>
            Represents a LineValue.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.LineValue.Value">
            <summary>
            Gets the value of the LineValue.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.LineValue.DataLabel">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.ValuePositionDataLabel"/> of the LineValue.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeLineValue.#ctor(System.Single,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeLineValue"/> object.
            </summary>
            <param name="value1">The value of dateTime line value. </param>
            <param name="position">The position of the dateTime line value. </param>       
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeLineValue.Position">
            <summary>
            Gets the position of the DateTimeLineValue.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeLineValueList">
            <summary>
            Represents a list of the DateTimeLineValues.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.LineValueList">
            <summary>
            Represents a list of the LineValues.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.LineValueList.Item(System.Int32)">
            <summary>
            Gets the LineValue from the LineValueList based on the given index.
            </summary>
            <returns>LineValue in the sepecified index.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.LineValueList.Count">
            <summary>
            Gets the total number of LineValues in the LineValueList.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeLineValueList.Add(ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeLineValue)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeLineValue"/> object to the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeLineValueList"/> object.
            </summary>
            <param name="lineValue"> Value of the dateTime line value. </param>        
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeLineValueList.Add(System.Single,System.DateTime)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeLineValue"/> object to the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeLineValueList"/> object.
            </summary>
            <param name="value1">Value of the dateTime line Value. </param>
            <param name="obj">Position of the dateTime line Value. </param>
            <returns>The <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeLineValue"/> object. </returns>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedAreaValue">
             <summary>
             Represents a DateTimeStackedAreaValue.
             </summary>
             <example>The following example creates a date time stacked area value chart.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Values
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a date time stacked area series element and add values to it
                     Dim MySeriesElement1 As DateTimeStackedAreaSeriesElement = New DateTimeStackedAreaSeriesElement("Website A")
                     MySeriesElement1.Values.Add(New DateTimeStackedAreaValue(5, New DateTime(2007, 1, 1)))
                     MySeriesElement1.Values.Add(New DateTimeStackedAreaValue(7, New DateTime(2007, 2, 1)))
                     MySeriesElement1.Values.Add(New DateTimeStackedAreaValue(9, New DateTime(2007, 3, 1)))
                     MySeriesElement1.Values.Add(New DateTimeStackedAreaValue(6, New DateTime(2007, 4, 1)))
                     Dim MySeriesElement2 As DateTimeStackedAreaSeriesElement = New DateTimeStackedAreaSeriesElement("Website B")
                     MySeriesElement2.Values.Add(New DateTimeStackedAreaValue(4, New DateTime(2007, 1, 1)))
                     MySeriesElement2.Values.Add(New DateTimeStackedAreaValue(2, New DateTime(2007, 2, 1)))
                     MySeriesElement2.Values.Add(New DateTimeStackedAreaValue(5, New DateTime(2007, 3, 1)))
                     MySeriesElement2.Values.Add(New DateTimeStackedAreaValue(8, New DateTime(2007, 4, 1)))
                     Dim MySeriesElement3 As DateTimeStackedAreaSeriesElement = New DateTimeStackedAreaSeriesElement("Website C")
                     MySeriesElement3.Values.Add(New DateTimeStackedAreaValue(2, New DateTime(2007, 1, 1)))
                     MySeriesElement3.Values.Add(New DateTimeStackedAreaValue(4, New DateTime(2007, 2, 1)))
                     MySeriesElement3.Values.Add(New DateTimeStackedAreaValue(6, New DateTime(2007, 3, 1)))
                     MySeriesElement3.Values.Add(New DateTimeStackedAreaValue(9, New DateTime(2007, 4, 1)))
            
                     ' Create a date time stacked area series and add date time stacked area series elements to it
                     Dim MyStackedAreaSeries1 As DateTimeStackedAreaSeries = New DateTimeStackedAreaSeries()
                     MyStackedAreaSeries1.Add(MySeriesElement1)
                     MyStackedAreaSeries1.Add(MySeriesElement2)
                     MyStackedAreaSeries1.Add(MySeriesElement3)
            
                     ' Add date time stacked area series to the plot area
                     MyPlotArea.Series.Add(MyStackedAreaSeries1)
            
                     ' Create a title and add it to yaxis
                     Dim MyTitle3 As Title = New Title("Viewers (in millions)")
                     MyStackedAreaSeries1.YAxis.Titles.Add(MyTitle3)
            
                     ' set label  format for the axislabels
                     MyStackedAreaSeries1.XAxis.LabelFormat = "MMM"
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Values;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a date time stacked area series element and add values to it
                     DateTimeStackedAreaSeriesElement seriesElement1 = new DateTimeStackedAreaSeriesElement("Website A");
                     seriesElement1.Values.Add(new DateTimeStackedAreaValue(5, new DateTime(2007, 1, 1)));
                     seriesElement1.Values.Add(new DateTimeStackedAreaValue(7, new DateTime(2007, 2, 1)));
                     seriesElement1.Values.Add(new DateTimeStackedAreaValue(9, new DateTime(2007, 3, 1)));
                     seriesElement1.Values.Add(new DateTimeStackedAreaValue(6, new DateTime(2007, 4, 1)));
                     DateTimeStackedAreaSeriesElement seriesElement2 = new DateTimeStackedAreaSeriesElement("Website B");
                     seriesElement2.Values.Add(new DateTimeStackedAreaValue(4, new DateTime(2007, 1, 1)));
                     seriesElement2.Values.Add(new DateTimeStackedAreaValue(2, new DateTime(2007, 2, 1)));
                     seriesElement2.Values.Add(new DateTimeStackedAreaValue(5, new DateTime(2007, 3, 1)));
                     seriesElement2.Values.Add(new DateTimeStackedAreaValue(8, new DateTime(2007, 4, 1)));
                     DateTimeStackedAreaSeriesElement seriesElement3 = new DateTimeStackedAreaSeriesElement("Website C");
                     seriesElement3.Values.Add(new DateTimeStackedAreaValue(2, new DateTime(2007, 1, 1)));
                     seriesElement3.Values.Add(new DateTimeStackedAreaValue(4, new DateTime(2007, 2, 1)));
                     seriesElement3.Values.Add(new DateTimeStackedAreaValue(6, new DateTime(2007, 3, 1)));
                     seriesElement3.Values.Add(new DateTimeStackedAreaValue(9, new DateTime(2007, 4, 1)));
            
                     // Create a date time stacked area series and add date time stacked area series elements to it
                     DateTimeStackedAreaSeries stackedAreaSeries1 = new DateTimeStackedAreaSeries();
                     stackedAreaSeries1.Add(seriesElement1);
                     stackedAreaSeries1.Add(seriesElement2);
                     stackedAreaSeries1.Add(seriesElement3);
            
                     // Add date time stacked area series to the plot area
                     plotArea.Series.Add(stackedAreaSeries1);
            
                     // Create a title and add it to yaxis
                     Title title3 = new Title("Viewers (in millions)");
                     stackedAreaSeries1.YAxis.Titles.Add(title3);
            
                     // set label  format for the axislabels
                     stackedAreaSeries1.XAxis.LabelFormat = "MMM";
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf");
                 }
             }   
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.StackedAreaValue">
            <summary>
            Represents a StackedAreaValue.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.StackedAreaValue.DataLabel">
            <summary>
            Gets or sets the DataLabel of the StackedAreaValue.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.StackedAreaValue.Value">
            <summary>
            Gets the value of the StackedAreaValue.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedAreaValue.#ctor(System.Single,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedAreaValue"/> object.
            </summary>
            <param name="value1">The value of dateTime stacked area value.</param>
            <param name="position">The position of the dateTime stacked area value.</param>              
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedAreaValue.Position">
            <summary>
            Gets the position of the DateTimeStackedAreaValue.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedAreaValueList">
            <summary>
            Represents a list of the DateTimeStackedAreaValues.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.StackedAreaValueList">
            <summary>
            Represents a list of the StackedAreaValues.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.StackedAreaValueList.Item(System.Int32)">
            <summary>
            Gets the StackedAreaValue from the StackedAreaValueList based on the given index. 
            </summary>
            <returns>StackedAreaValue in the sepecified index.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.StackedAreaValueList.Count">
            <summary>
            Gets the total number of StackedAreaValues in the StackedAreaValueList.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedAreaValueList.#ctor(ceTe.DynamicPDF.PageElements.Charting.Series.DateTimeStackedAreaSeriesElement)">
            <summary> 
            Creates a new instance of the DateTimeStackedAreaValueList. 
            </summary>
            <param name="areaSeries">DateTime stacked area series element</param>       
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedAreaValueList.Add(System.Single,System.DateTime)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedAreaValue"/> object to the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedAreaValueList"/> object.
            </summary>
            <param name="value1">Value of the dateTime stacked area value. </param>
            <param name="obj">Position of the dateTime stacked area value. </param>
            <returns> <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedAreaValue"/> object. </returns>      	
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedAreaValueList.Add(ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedAreaValue)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedAreaValue"/> object to the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedAreaValueList"/> object.
            </summary>
            <param name="areaValue">Value of the dateTime stacked areaValue. </param>       
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedBarValue">
             <summary>
             This class represents the DateTimeStackedBarValue.
             </summary>
             <example>The following example creates a date time stacked bar chart and adds value to it.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Values
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create percentage xaxis
                     Dim xAxis As PercentageXAxis = New PercentageXAxis()
            
                     ' Create date time yaxis
                     Dim yAxis As DateTimeYAxis = New DateTimeYAxis()
            
                     ' Create a date time stacked bar series element and add values to it
                     Dim MySeriesElement1 As DateTimeStackedBarSeriesElement = New DateTimeStackedBarSeriesElement("Website A")
                     MySeriesElement1.Values.Add(New DateTimeStackedBarValue(5, New DateTime(2007, 1, 1)))
                     MySeriesElement1.Values.Add(New DateTimeStackedBarValue(7, New DateTime(2007, 2, 1)))
                     MySeriesElement1.Values.Add(New DateTimeStackedBarValue(9, New DateTime(2007, 3, 1)))
                     MySeriesElement1.Values.Add(New DateTimeStackedBarValue(6, New DateTime(2007, 4, 1)))
                     Dim MySeriesElement2 As DateTimeStackedBarSeriesElement = New DateTimeStackedBarSeriesElement("Website B")
                     MySeriesElement2.Values.Add(New DateTimeStackedBarValue(4, New DateTime(2007, 1, 1)))
                     MySeriesElement2.Values.Add(New DateTimeStackedBarValue(2, New DateTime(2007, 2, 1)))
                     MySeriesElement2.Values.Add(New DateTimeStackedBarValue(5, New DateTime(2007, 3, 1)))
                     MySeriesElement2.Values.Add(New DateTimeStackedBarValue(8, New DateTime(2007, 4, 1)))
                     Dim MySeriesElement3 As DateTimeStackedBarSeriesElement = New DateTimeStackedBarSeriesElement("Website C")
                     MySeriesElement3.Values.Add(New DateTimeStackedBarValue(2, New DateTime(2007, 1, 1)))
                     MySeriesElement3.Values.Add(New DateTimeStackedBarValue(4, New DateTime(2007, 2, 1)))
                     MySeriesElement3.Values.Add(New DateTimeStackedBarValue(6, New DateTime(2007, 3, 1)))
                     MySeriesElement3.Values.Add(New DateTimeStackedBarValue(9, New DateTime(2007, 4, 1)))
            
                     ' Create a date time stacked bar series and add date time stacked bar series elements to it
                     Dim MyStackedBarSeries1 As DateTimeStackedBarSeries = New DateTimeStackedBarSeries()
                     MyStackedBarSeries1.Add(MySeriesElement1)
                     MyStackedBarSeries1.Add(MySeriesElement2)
                     MyStackedBarSeries1.Add(MySeriesElement3)
            
                     ' Add date time stacked bar series to the plot area
                     MyPlotArea.Series.Add(MyStackedBarSeries1)
            
                     ' set label  format for the axislabels
                     MyStackedBarSeries1.YAxis.LabelFormat = "MMM"
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Values;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     //Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create percentage x axis
                     PercentageXAxis xAxis = new PercentageXAxis();
            
                     // Create date time y axis
                     DateTimeYAxis yAxis = new DateTimeYAxis();
            
                     // Create a date time stacked bar series element and add values to it
                     DateTimeStackedBarSeriesElement seriesElement1 = new DateTimeStackedBarSeriesElement("Website A");
                     seriesElement1.Values.Add(new DateTimeStackedBarValue(5, new DateTime(2007, 1, 1)));
                     seriesElement1.Values.Add(new DateTimeStackedBarValue(7, new DateTime(2007, 2, 1)));
                     seriesElement1.Values.Add(new DateTimeStackedBarValue(9, new DateTime(2007, 3, 1)));
                     seriesElement1.Values.Add(new DateTimeStackedBarValue(6, new DateTime(2007, 4, 1)));
                     DateTimeStackedBarSeriesElement seriesElement2 = new DateTimeStackedBarSeriesElement("Website B");
                     seriesElement2.Values.Add(new DateTimeStackedBarValue(4, new DateTime(2007, 1, 1)));
                     seriesElement2.Values.Add(new DateTimeStackedBarValue(2, new DateTime(2007, 2, 1)));
                     seriesElement2.Values.Add(new DateTimeStackedBarValue(5, new DateTime(2007, 3, 1)));
                     seriesElement2.Values.Add(new DateTimeStackedBarValue(8, new DateTime(2007, 4, 1)));
                     DateTimeStackedBarSeriesElement seriesElement3 = new DateTimeStackedBarSeriesElement("Website C");
                     seriesElement3.Values.Add(new DateTimeStackedBarValue(2, new DateTime(2007, 1, 1)));
                     seriesElement3.Values.Add(new DateTimeStackedBarValue(4, new DateTime(2007, 2, 1)));
                     seriesElement3.Values.Add(new DateTimeStackedBarValue(6, new DateTime(2007, 3, 1)));
                     seriesElement3.Values.Add(new DateTimeStackedBarValue(9, new DateTime(2007, 4, 1)));
            
                     // Create a date time stacked bar series and add date time stacked bar series elements to it
                     DateTimeStackedBarSeries stackedBarSeries1 = new DateTimeStackedBarSeries();
                     stackedBarSeries1.Add(seriesElement1);
                     stackedBarSeries1.Add(seriesElement2);
                     stackedBarSeries1.Add(seriesElement3);
            
                     // Add date time stacked bar series to the plot area
                     plotArea.Series.Add(stackedBarSeries1);
            
                     // set label  format for the axislabels
                     stackedBarSeries1.YAxis.LabelFormat = "MMM";
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
             
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.StackedBarValue">
            <summary>
            The base class from which the date-time and indexed StackedBarValues are derived.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.StackedBarValue.Value">
            <summary>
            Gets the value of the StackedBarValue.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.StackedBarValue.Color">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.Values.StackedBarValue.Color"/> object to use for the color of the StackedBarValue.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.StackedBarValue.DataLabel">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.BarColumnValuePositionDataLabel"/> object to use for the DataLabel of the StackedBarValue.
            </summary>
            <p/><b>NOTE:</b> Prior to Version 6.0 DataLabel was of type ValuePositionDataLabel.
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedBarValue.#ctor(System.Single,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedBarValue"/> class.
            </summary>
            <param name="value1">The float indicating value of date time stacked bar value.</param>
            <param name="position">The position of the date time stacked bar value. </param>        
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedBarValue.Position">
            <summary>
            Gets the position of the DateTimeStackedBarValue.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedBarValueList">
            <summary>
            This class represents the DateTimeStackedBarValueList.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.StackedBarValueList">
            <summary>
            The base class from which the date-time and indexed StackedBarValueLists are derived.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.StackedBarValueList.Count">
            <summary>
            Gets the number of StackedBarValues actually contained in the StackedBarValueList.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.StackedBarValueList.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.StackedBarValue"/> object at the given index. 
            </summary>
            <returns>The <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.StackedBarValue"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedBarValueList.Add(System.Single,System.DateTime)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedBarValue"/> object to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedBarValueList"/> object.
            </summary>
            <param name="value1"> Value of date time stacked bar value. </param>
            <param name="position">Position of the date time stacked bar value. </param>
            <returns>A <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedBarValue"/> object.</returns>       
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedBarValueList.Add(ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedBarValue)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedBarValue"/> object to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedBarValueList"/> object.
            </summary>
            <param name="dateTimeStackedBarValue"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedBarValue"/> to be added.</param>       
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedColumnValue">
             <summary>
             Represents a DateTimeStackedColumnValue.
             </summary>
             <example>The following example creates a date time stacked column series chart and adds values to it.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Values
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a date time stacked column series element and add values to it          
                     Dim MySeriesElement1 As DateTimeStackedColumnSeriesElement = New DateTimeStackedColumnSeriesElement("Website A")
                     MySeriesElement1.Values.Add(New DateTimeStackedColumnValue(5, New DateTime(2007, 1, 1)))
                     MySeriesElement1.Values.Add(New DateTimeStackedColumnValue(7, New DateTime(2007, 2, 1)))
                     MySeriesElement1.Values.Add(New DateTimeStackedColumnValue(4, New DateTime(2007, 3, 1)))
                     MySeriesElement1.Values.Add(New DateTimeStackedColumnValue(3, New DateTime(2007, 4, 1)))
                     Dim MySeriesElement2 As DateTimeStackedColumnSeriesElement = New DateTimeStackedColumnSeriesElement("Website B")
                     MySeriesElement2.Values.Add(New DateTimeStackedColumnValue(4, New DateTime(2007, 1, 1)))
                     MySeriesElement2.Values.Add(New DateTimeStackedColumnValue(2, New DateTime(2007, 2, 1)))
                     MySeriesElement2.Values.Add(New DateTimeStackedColumnValue(5, New DateTime(2007, 3, 1)))
                     MySeriesElement2.Values.Add(New DateTimeStackedColumnValue(8, New DateTime(2007, 4, 1)))
                     Dim MySeriesElement3 As DateTimeStackedColumnSeriesElement = New DateTimeStackedColumnSeriesElement("Website C")
                     MySeriesElement3.Values.Add(New DateTimeStackedColumnValue(2, New DateTime(2007, 1, 1)))
                     MySeriesElement3.Values.Add(New DateTimeStackedColumnValue(4, New DateTime(2007, 2, 1)))
                     MySeriesElement3.Values.Add(New DateTimeStackedColumnValue(6, New DateTime(2007, 3, 1)))
                     MySeriesElement3.Values.Add(New DateTimeStackedColumnValue(9, New DateTime(2007, 4, 1)))
            
                     ' Create a date time stacked column series and add date time stacked column series elements to it
                     Dim MyColumnSeries1 As DateTimeStackedColumnSeries = New DateTimeStackedColumnSeries()
                     MyColumnSeries1.Add(MySeriesElement1)
                     MyColumnSeries1.Add(MySeriesElement2)
                     MyColumnSeries1.Add(MySeriesElement3)
            
                     ' Add date time stacked column series to the plot area
                     MyPlotArea.Series.Add(MyColumnSeries1)
            
                     ' Create a title and add it to yaxis
                     Dim MyTitle3 As Title = New Title("Viewers (in millions)")
                     MyColumnSeries1.YAxis.Titles.Add(MyTitle3)
            
                     ' set label  format for the axislabels
                     MyColumnSeries1.XAxis.LabelFormat = "MMM"
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Values;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     //Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a date time stacked column series element and add values to it          
                     DateTimeStackedColumnSeriesElement seriesElement1 = new DateTimeStackedColumnSeriesElement("Website A");
                     seriesElement1.Values.Add(new DateTimeStackedColumnValue(5, new DateTime(2007, 1, 1)));
                     seriesElement1.Values.Add(new DateTimeStackedColumnValue(7, new DateTime(2007, 2, 1)));
                     seriesElement1.Values.Add(new DateTimeStackedColumnValue(4, new DateTime(2007, 3, 1)));
                     seriesElement1.Values.Add(new DateTimeStackedColumnValue(3, new DateTime(2007, 4, 1)));
                     DateTimeStackedColumnSeriesElement seriesElement2 = new DateTimeStackedColumnSeriesElement("Website B");
                     seriesElement2.Values.Add(new DateTimeStackedColumnValue(4, new DateTime(2007, 1, 1)));
                     seriesElement2.Values.Add(new DateTimeStackedColumnValue(2, new DateTime(2007, 2, 1)));
                     seriesElement2.Values.Add(new DateTimeStackedColumnValue(5, new DateTime(2007, 3, 1)));
                     seriesElement2.Values.Add(new DateTimeStackedColumnValue(8, new DateTime(2007, 4, 1)));
                     DateTimeStackedColumnSeriesElement seriesElement3 = new DateTimeStackedColumnSeriesElement("Website C");
                     seriesElement3.Values.Add(new DateTimeStackedColumnValue(2, new DateTime(2007, 1, 1)));
                     seriesElement3.Values.Add(new DateTimeStackedColumnValue(4, new DateTime(2007, 2, 1)));
                     seriesElement3.Values.Add(new DateTimeStackedColumnValue(6, new DateTime(2007, 3, 1)));
                     seriesElement3.Values.Add(new DateTimeStackedColumnValue(9, new DateTime(2007, 4, 1)));
            
                     // Create a date time stacked column series and add date time stacked column series elements to it
                     DateTimeStackedColumnSeries columnSeries1 = new DateTimeStackedColumnSeries();
                     columnSeries1.Add(seriesElement1);
                     columnSeries1.Add(seriesElement2);
                     columnSeries1.Add(seriesElement3);
            
                     // Add date time stacked column series to the plot area
                     plotArea.Series.Add(columnSeries1);
            
                     // Create a title and add it to yaxis
                     Title title3 = new Title("Viewers (in millions)");
                     columnSeries1.YAxis.Titles.Add(title3);
            
                     // set label  format for the axislabels
                     columnSeries1.XAxis.LabelFormat = "MMM";
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf"); 
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.StackedColumnValue">
            <summary>
            The base class from which the date-time and indexed StackedColumnValues are derived.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.StackedColumnValue.Value">
            <summary>
            Gets the value of the StackedColumnValue. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.StackedColumnValue.Color">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.Values.StackedColumnValue.Color"/> object to use for the color of the StackedColumnValue.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.StackedColumnValue.DataLabel">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.BarColumnValuePositionDataLabel"/> object to use for the DataLabel of the StackedColumnValue.
            </summary>
            <p/><b>NOTE:</b> Prior to Version 6.0 DataLabel was of type ValuePositionDataLabel.
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedColumnValue.#ctor(System.Single,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedColumnValue"/> class. 
            </summary>
            <param name="value1">The float indicating value of date time stacked column value. </param>
            <param name="position">The position of the date time stacked column value. </param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedColumnValue.Position">
            <summary>
            Gets the position of the DateTimeStackedColumnValue. 
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedColumnValueList">
            <summary>
            Represents a DateTimeStackedColumnValueList.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.StackedColumnValueList">
            <summary>
            The base class from which the date-time and indexed StackedColumnValueLists are derived.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.StackedColumnValueList.Count">
            <summary>
            Gets the number of StackedColumnValues actually contained in the StackedColumnValueList.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.StackedColumnValueList.Item(System.Int32)">
            <summary>
            Gets the <see cref="M:ceTe.DynamicPDF.PageElements.Charting.Values.StackedColumnValueList.StackedColumnValue(System.Single,System.Int32)"/> object at the given index. 
            </summary>
            <param name="index">Position of the required stacked column value. </param>
            <returns>The <see cref="M:ceTe.DynamicPDF.PageElements.Charting.Values.StackedColumnValueList.StackedColumnValue(System.Single,System.Int32)"/> object. </returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedColumnValueList.Add(System.Single,System.DateTime)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedColumnValue"/> object to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedColumnValueList"/> object.
            </summary>
            <param name="value1">Value of the date time stacked column value. </param>
            <param name="position">Position of the date time stacked column value. </param>
            <returns> A <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedColumnValue"/> object. </returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedColumnValueList.Add(ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedColumnValue)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedColumnValue"/> object to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedColumnValueList"/> object.
            </summary>
            <param name="dateTimeStackedColumnValue"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedColumnValue"/> to be added. </param>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedLineValue">
             <summary>
             Represents a DateTimeStackedLineValue.
             </summary>
             <example>The following example creates a date time stacked line chart and adds value to it.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Values
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule 
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a date time xaxis
                     Dim xAxis As DateTimeXAxis = New DateTimeXAxis()
            
                     ' Create a percentage yaxis
                     Dim yAxis As PercentageYAxis = New PercentageYAxis()
            
                     ' Create a date time stacked line series element and add values to it
                     Dim MySeriesElement1 As DateTimeStackedLineSeriesElement = New DateTimeStackedLineSeriesElement("Website A")
                     MySeriesElement1.Values.Add(New DateTimeStackedLineValue(5, New DateTime(2007, 1, 1)))
                     MySeriesElement1.Values.Add(New DateTimeStackedLineValue(7, New DateTime(2007, 2, 1)))
                     MySeriesElement1.Values.Add(New DateTimeStackedLineValue(9, New DateTime(2007, 3, 1)))
                     MySeriesElement1.Values.Add(New DateTimeStackedLineValue(6, New DateTime(2007, 4, 1)))
                     Dim MySeriesElement2 As DateTimeStackedLineSeriesElement = New DateTimeStackedLineSeriesElement("Website B")
                     MySeriesElement2.Values.Add(New DateTimeStackedLineValue(4, New DateTime(2007, 1, 1)))
                     MySeriesElement2.Values.Add(New DateTimeStackedLineValue(2, New DateTime(2007, 2, 1)))
                     MySeriesElement2.Values.Add(New DateTimeStackedLineValue(5, New DateTime(2007, 3, 1)))
                     MySeriesElement2.Values.Add(New DateTimeStackedLineValue(8, New DateTime(2007, 4, 1)))
                     Dim MySeriesElement3 As DateTimeStackedLineSeriesElement = New DateTimeStackedLineSeriesElement("Website C")
                     MySeriesElement3.Values.Add(New DateTimeStackedLineValue(2, New DateTime(2007, 1, 1)))
                     MySeriesElement3.Values.Add(New DateTimeStackedLineValue(4, New DateTime(2007, 2, 1)))
                     MySeriesElement3.Values.Add(New DateTimeStackedLineValue(6, New DateTime(2007, 3, 1)))
                     MySeriesElement3.Values.Add(New DateTimeStackedLineValue(9, New DateTime(2007, 4, 1)))
            
                     ' Create a date time stacked line series and add date time stacked line series elements to it
                     Dim MyStackedLineSeries1 As DateTimeStackedLineSeries = New DateTimeStackedLineSeries()
                     MyStackedLineSeries1.Add(MySeriesElement1)
                     MyStackedLineSeries1.Add(MySeriesElement2)
                     MyStackedLineSeries1.Add(MySeriesElement3)
            
                     ' Add date time stacked line series to the plot area
                     MyPlotArea.Series.Add(MyStackedLineSeries1)
            
                     ' set label  format for the axislabels
                     MyStackedLineSeries1.XAxis.LabelFormat = "MMM"
             
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Values;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a date time xaxis
                     DateTimeXAxis xAxis = new DateTimeXAxis();
            
                     //Create a percentage yaxis
                     PercentageYAxis yAxis = new PercentageYAxis();
            
                     // Create a date time stacked line series element and add values to it
                     DateTimeStackedLineSeriesElement seriesElement1 = new DateTimeStackedLineSeriesElement("Website A");
                     seriesElement1.Values.Add(new DateTimeStackedLineValue(5, new DateTime(2007, 1, 1)));
                     seriesElement1.Values.Add(new DateTimeStackedLineValue(7, new DateTime(2007, 2, 1)));
                     seriesElement1.Values.Add(new DateTimeStackedLineValue(9, new DateTime(2007, 3, 1)));
                     seriesElement1.Values.Add(new DateTimeStackedLineValue(6, new DateTime(2007, 4, 1)));
                     DateTimeStackedLineSeriesElement seriesElement2 = new DateTimeStackedLineSeriesElement("Website B");
                     seriesElement2.Values.Add(new DateTimeStackedLineValue(4, new DateTime(2007, 1, 1)));
                     seriesElement2.Values.Add(new DateTimeStackedLineValue(2, new DateTime(2007, 2, 1)));
                     seriesElement2.Values.Add(new DateTimeStackedLineValue(5, new DateTime(2007, 3, 1)));
                     seriesElement2.Values.Add(new DateTimeStackedLineValue(8, new DateTime(2007, 4, 1)));
                     DateTimeStackedLineSeriesElement seriesElement3 = new DateTimeStackedLineSeriesElement("Website C");
                     seriesElement3.Values.Add(new DateTimeStackedLineValue(2, new DateTime(2007, 1, 1)));
                     seriesElement3.Values.Add(new DateTimeStackedLineValue(4, new DateTime(2007, 2, 1)));
                     seriesElement3.Values.Add(new DateTimeStackedLineValue(6, new DateTime(2007, 3, 1)));
                     seriesElement3.Values.Add(new DateTimeStackedLineValue(9, new DateTime(2007, 4, 1)));
            
                     // Create a date time stacked line series and add date time stacked line series elements to it
                     DateTimeStackedLineSeries stackedLineSeries1 = new DateTimeStackedLineSeries();
                     stackedLineSeries1.Add(seriesElement1);
                     stackedLineSeries1.Add(seriesElement2);
                     stackedLineSeries1.Add(seriesElement3);
            
                     // Add date time stacked line series to the plot area
                     plotArea.Series.Add(stackedLineSeries1);
            
                     // set label  format for the axislabels
                     stackedLineSeries1.XAxis.LabelFormat = "MMM";
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing> 
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.StackedLineValue">
            <summary>
            Represents a StackedLineValue.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.StackedLineValue.DataLabel">
            <summary>
            Gets or sets the DataLabel of the StackedLineValue.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.StackedLineValue.Value">
            <summary>
            Gets the value of the StackedLineValue.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedLineValue.#ctor(System.Single,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedLineValue"/> object.
            </summary>
            <param name="value1">The value of dateTime stacked line value. </param>
            <param name="position">The position of the dateTime stacked line value.</param>        
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedLineValue.Position">
            <summary>
            Gets the position of the DateTimeStackedLineValue.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedLineValueList">
            <summary>
            Represents a list of the DateTimeStackedLineValues.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.StackedLineValueList">
            <summary>
            Represents a list of the StackedLineValues.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.StackedLineValueList.Count">
            <summary>
            Gets the total number of StackedLineValues in the StackedLineValueList.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.StackedLineValueList.Item(System.Int32)">
            <summary>
            Gets the StackedLineValue from the StackedLineValue list based on the given index. 
            </summary>
            <returns>StackedLineValue in the specified index.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedLineValueList.Add(ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedLineValue)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedLineValue"/> object to the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedLineValueList"/> object.
            </summary>
            <param name="lineValue">Value of the dateTime stacked line value. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedLineValueList.Add(System.Single,System.DateTime)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedLineValue"/> object to the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedLineValueList"/> object.
            </summary>
            <param name="value1">Value of the dateTime stacked line value. </param>
            <param name="obj">Position of the dateTime stacked line value. </param>
            <returns> <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.DateTimeStackedLineValue"/> object. </returns>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedAreaValue">
             <summary>
             Represents an Indexed100PercentStackedAreaValue.
             </summary>
             <example>The following example creates a indexed 100Percent stacked area series chart and adds values to it.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Values
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 230)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a indexed 100Percent stacked area series element and add values to it
                     Dim MySeriesElement1 As Indexed100PercentStackedAreaSeriesElement = New Indexed100PercentStackedAreaSeriesElement("Website A")
                     MySeriesElement1.Values.Add(New Indexed100PercentStackedAreaValue(5, 0))
                     MySeriesElement1.Values.Add(New Indexed100PercentStackedAreaValue(7, 1))
                     MySeriesElement1.Values.Add(New Indexed100PercentStackedAreaValue(9, 2))
                     MySeriesElement1.Values.Add(New Indexed100PercentStackedAreaValue(6, 3))
                     Dim MySeriesElement2 As Indexed100PercentStackedAreaSeriesElement = New Indexed100PercentStackedAreaSeriesElement("Website B")
                     MySeriesElement2.Values.Add(New Indexed100PercentStackedAreaValue(4, 0))
                     MySeriesElement2.Values.Add(New Indexed100PercentStackedAreaValue(2, 1))
                     MySeriesElement2.Values.Add(New Indexed100PercentStackedAreaValue(5, 2))
                     MySeriesElement2.Values.Add(New Indexed100PercentStackedAreaValue(8, 3))
                     Dim MySeriesElement3 As Indexed100PercentStackedAreaSeriesElement = New Indexed100PercentStackedAreaSeriesElement("Website C")
                     MySeriesElement3.Values.Add(New Indexed100PercentStackedAreaValue(2, 0))
                     MySeriesElement3.Values.Add(New Indexed100PercentStackedAreaValue(4, 1))
                     MySeriesElement3.Values.Add(New Indexed100PercentStackedAreaValue(6, 2))
                     MySeriesElement3.Values.Add(New Indexed100PercentStackedAreaValue(9, 3))
            
                     ' Create a indexed 100Percent stacked area series and add indexed 100Percent stacked area series elements to it
                     Dim MyStackedAreaSeries1 As Indexed100PercentStackedAreaSeries = New Indexed100PercentStackedAreaSeries()
                     MyStackedAreaSeries1.Add(MySeriesElement1)
                     MyStackedAreaSeries1.Add(MySeriesElement2)
                     MyStackedAreaSeries1.Add(MySeriesElement3)
            
                     ' Add indexed 100Percent stacked area series to the plot area
                     MyPlotArea.Series.Add(MyStackedAreaSeries1)
            
                     ' Add Indexed x AxisLabels to the XAxis
                     MyStackedAreaSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q1", 0))
                     MyStackedAreaSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q2", 1))
                     MyStackedAreaSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q3", 2))
                     MyStackedAreaSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q4", 3))
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Values;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 230);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a indexed 100Percent stacked area series element and add values to it
                     Indexed100PercentStackedAreaSeriesElement seriesElement1 = new Indexed100PercentStackedAreaSeriesElement("Website A");
                     seriesElement1.Values.Add(new Indexed100PercentStackedAreaValue(5, 0));
                     seriesElement1.Values.Add(new Indexed100PercentStackedAreaValue(7, 1));
                     seriesElement1.Values.Add(new Indexed100PercentStackedAreaValue(9, 2));
                     seriesElement1.Values.Add(new Indexed100PercentStackedAreaValue(6, 3));
                     Indexed100PercentStackedAreaSeriesElement seriesElement2 = new Indexed100PercentStackedAreaSeriesElement("Website B");
                     seriesElement2.Values.Add(new Indexed100PercentStackedAreaValue(4, 0));
                     seriesElement2.Values.Add(new Indexed100PercentStackedAreaValue(2, 1));
                     seriesElement2.Values.Add(new Indexed100PercentStackedAreaValue(5, 2));
                     seriesElement2.Values.Add(new Indexed100PercentStackedAreaValue(8, 3));
                     Indexed100PercentStackedAreaSeriesElement seriesElement3 = new Indexed100PercentStackedAreaSeriesElement("Website C");
                     seriesElement3.Values.Add(new Indexed100PercentStackedAreaValue(2, 0));
                     seriesElement3.Values.Add(new Indexed100PercentStackedAreaValue(4, 1));
                     seriesElement3.Values.Add(new Indexed100PercentStackedAreaValue(6, 2));
                     seriesElement3.Values.Add(new Indexed100PercentStackedAreaValue(9, 3));
            
                     // Create a indexed 100Percent stacked area series and add indexed 100Percent stacked area series elements to it
                     Indexed100PercentStackedAreaSeries stackedAreaSeries1 = new Indexed100PercentStackedAreaSeries();
                     stackedAreaSeries1.Add(seriesElement1);
                     stackedAreaSeries1.Add(seriesElement2);
                     stackedAreaSeries1.Add(seriesElement3);
            
                     // Add indexed 100Percent stacked area series to the plot area
                     plotArea.Series.Add(stackedAreaSeries1);
            
                     // Add Indexed x AxisLabels to the XAxis
                     stackedAreaSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q1", 0));
                     stackedAreaSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q2", 1));
                     stackedAreaSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q3", 2));
                     stackedAreaSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q4", 3));
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedAreaValue.#ctor(System.Single,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedAreaValue"/> object.
            </summary>
            <param name="value1">The Value of indexed 100Percent stacked area value.</param>
            <param name="position">The position of the indexed 100Percent stacked area value.</param>        
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedAreaValue.Position">
            <summary>
            Gets the position of the Indexed100PercentStackedAreaValue.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedAreaValueList">
            <summary>
            Represents an Indexed100PercentStackedAreaValueList.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedAreaValueList.Add(ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedAreaValue)">
            <summary>
            Adds an <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedAreaValue"/> object to the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedAreaValueList"/> object.
            </summary>
            <param name="areaValue">The indexed 100Percent stacked area value object. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedAreaValueList.Add(System.Single)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Stacked100PercentAreaValue"/> object to the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedAreaValueList"/> object.
            </summary>
            <param name="val">Value of the indexed 100Percent stacked area value. </param>
            <returns>A <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Stacked100PercentAreaValue"/> object. </returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedAreaValueList.Add(System.Single[])">
            <summary>
            Adds an <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedAreaValue"/> object to the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedAreaValueList"/> object.
            </summary>
            <param name="value1"> values of the indexed 100Percent stacked area values. </param>
            <returns> A <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Stacked100PercentAreaValue"/> object array. </returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedAreaValueList.Add(System.Single,System.Int32)">
            <summary>
            Adds an <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedAreaValue"/> object to the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedAreaValueList"/> object.
            </summary>
            <param name="value1">Value of the indexed 100Percent stacked area value. </param>
            <param name="position"> Position of the indexed 100Percent stacked area value. </param>
            <returns>A <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedAreaValue"/> object.</returns>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedBarValue">
             <summary>
             Represents an Indexed100PercentStackedBarValue.
             </summary>
             <example>The following example creates a indexed 100Percent stacked bar series chart and
             adds value to it.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series    
             Imports ceTe.DynamicPDF.PageElements.Charting.Values
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes  
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 230)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
             
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
             
                     ' Create percentage xAxis
                     Dim xAxis As PercentageXAxis = New PercentageXAxis()
            
                     ' Create indexed  yAxis
                     Dim yAxis As IndexedYAxis = New IndexedYAxis()
            
                     ' Create a indexed 100Percent stacked bar series element and add values to it
                     Dim MySeriesElement1 As Indexed100PercentStackedBarSeriesElement = New Indexed100PercentStackedBarSeriesElement("Website A")
                     MySeriesElement1.Values.Add(New Indexed100PercentStackedBarValue(5, 0))
                     MySeriesElement1.Values.Add(New Indexed100PercentStackedBarValue(7, 1))
                     MySeriesElement1.Values.Add(New Indexed100PercentStackedBarValue(9, 2))
                     MySeriesElement1.Values.Add(New Indexed100PercentStackedBarValue(6, 3))
                     Dim MySeriesElement2 As Indexed100PercentStackedBarSeriesElement = New Indexed100PercentStackedBarSeriesElement("Website B")
                     MySeriesElement2.Values.Add(New Indexed100PercentStackedBarValue(4, 0))
                     MySeriesElement2.Values.Add(New Indexed100PercentStackedBarValue(2, 1))
                     MySeriesElement2.Values.Add(New Indexed100PercentStackedBarValue(5, 2))
                     MySeriesElement2.Values.Add(New Indexed100PercentStackedBarValue(8, 3))
                     Dim MySeriesElement3 As Indexed100PercentStackedBarSeriesElement = New Indexed100PercentStackedBarSeriesElement("Website C")
                     MySeriesElement3.Values.Add(New Indexed100PercentStackedBarValue(2, 0))
                     MySeriesElement3.Values.Add(New Indexed100PercentStackedBarValue(4, 1))
                     MySeriesElement3.Values.Add(New Indexed100PercentStackedBarValue(6, 2))
                     MySeriesElement3.Values.Add(New Indexed100PercentStackedBarValue(9, 3))
            
                     ' Create a indexed 100Percent stacked bar series and add indexed 100 percent stacked bar series elements to it
                     Dim MyStackedBarSeries1 As Indexed100PercentStackedBarSeries = New Indexed100PercentStackedBarSeries(xAxis, yAxis)
                     MyStackedBarSeries1.Add(MySeriesElement1)
                     MyStackedBarSeries1.Add(MySeriesElement2)
                     MyStackedBarSeries1.Add(MySeriesElement3)
            
                     ' Add indexed 100Percent stacked bar series to the plot area
                     MyPlotArea.Series.Add(MyStackedBarSeries1)
            
                     ' Add Indexed y AxisLabels to the YAxis
                     MyStackedBarSeries1.YAxis.Labels.Add(New IndexedYAxisLabel("Q1", 0))
                     MyStackedBarSeries1.YAxis.Labels.Add(New IndexedYAxisLabel("Q2", 1))
                     MyStackedBarSeries1.YAxis.Labels.Add(New IndexedYAxisLabel("Q3", 2))
                     MyStackedBarSeries1.YAxis.Labels.Add(New IndexedYAxisLabel("Q4", 3))
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Values;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 230);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create percentage xAxis
                     PercentageXAxis xAxis = new PercentageXAxis();
            
                     // Create indexed yAxis
                     IndexedYAxis yAxis = new IndexedYAxis();
            
                     // Create a indexed 100Percent stacked bar series element and add values to it
                     Indexed100PercentStackedBarSeriesElement seriesElement1 = new Indexed100PercentStackedBarSeriesElement("Website A");
                     seriesElement1.Values.Add(new Indexed100PercentStackedBarValue(5, 0));
                     seriesElement1.Values.Add(new Indexed100PercentStackedBarValue(7, 1));
                     seriesElement1.Values.Add(new Indexed100PercentStackedBarValue(9, 2));
                     seriesElement1.Values.Add(new Indexed100PercentStackedBarValue(6, 3));
                     Indexed100PercentStackedBarSeriesElement seriesElement2 = new Indexed100PercentStackedBarSeriesElement("Website B");
                     seriesElement2.Values.Add(new Indexed100PercentStackedBarValue(4, 0));
                     seriesElement2.Values.Add(new Indexed100PercentStackedBarValue(2, 1));
                     seriesElement2.Values.Add(new Indexed100PercentStackedBarValue(5, 2));
                     seriesElement2.Values.Add(new Indexed100PercentStackedBarValue(8, 3));
                     Indexed100PercentStackedBarSeriesElement seriesElement3 = new Indexed100PercentStackedBarSeriesElement("Website C");
                     seriesElement3.Values.Add(new Indexed100PercentStackedBarValue(2, 0));
                     seriesElement3.Values.Add(new Indexed100PercentStackedBarValue(4, 1));
                     seriesElement3.Values.Add(new Indexed100PercentStackedBarValue(6, 2));
                     seriesElement3.Values.Add(new Indexed100PercentStackedBarValue(9, 3));
            
                     // Create a indexed 100Percent stacked bar series and add indexed 100 percent stacked bar series elements to it
                     Indexed100PercentStackedBarSeries stackedBarSeries1 = new Indexed100PercentStackedBarSeries(xAxis, yAxis);
                     stackedBarSeries1.Add(seriesElement1);
                     stackedBarSeries1.Add(seriesElement2);
                     stackedBarSeries1.Add(seriesElement3);
            
                     // Add indexed 100Percent stacked bar series to the plot area
                     plotArea.Series.Add(stackedBarSeries1);
            
                     // Add Indexed y AxisLabels to the YAxis
                     stackedBarSeries1.YAxis.Labels.Add(new IndexedYAxisLabel("Q1", 0));
                     stackedBarSeries1.YAxis.Labels.Add(new IndexedYAxisLabel("Q2", 1));
                     stackedBarSeries1.YAxis.Labels.Add(new IndexedYAxisLabel("Q3", 2));
                     stackedBarSeries1.YAxis.Labels.Add(new IndexedYAxisLabel("Q4", 3));
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedBarValue.#ctor(System.Single,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedBarValue"/> class.
            </summary>
            <param name="value1"> Value of indexed 100Percent stacked bar value.</param>
            <param name="position">Position of the indexed 100Percent stacked bar value.</param>        
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedBarValue.Position">
            <summary>
            Gets the position of the Indexed100PercentStackedBarValue.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedBarValueList">
            <summary>
            Represents an Indexed100PercentStackedBarValueList.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedBarValueList.Add(System.Single)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Stacked100PercentBarValue"/> object to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedBarValueList"/> object.
            </summary>
            <param name="value1"> Value of stacked 100Percent barvalue.</param>
            <returns>A<see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Stacked100PercentBarValue"/> object. </returns>        
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedBarValueList.Add(System.Single[])">
            <summary>
            Adds an array of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Stacked100PercentBarValue"/> object to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedBarValueList"/> object.
            </summary>
            <param name="value1">Values of the stacked 100Percent barvalues.</param>
            <returns> Array of <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Stacked100PercentBarValue"/> objects.</returns>        
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedBarValueList.Add(System.Single,System.Int32)">
            <summary>
            Adds an <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedBarValue"/> object to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedBarValueList"/> object.
            </summary>
            <param name="value1">Value of the indexed 100Percent stacked bar value. </param>
            <param name="position">Position of the indexed 100Percent stacked bar value. </param>
            <returns> A <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedBarValue"/> object.</returns>       
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedBarValueList.Add(ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedBarValue)">
            <summary>
            Adds an <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedBarValue"/> object to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedBarValueList"/> object.
            </summary>
            <param name="indexedStackedBarValue"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedBarValue"/> to be added.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedColumnValue">
             <summary>
             Represents an Indexed100PercentStackedColumnValue.
             </summary>
             <example>The following example creates a indexed 100Percent stacked column series chart and adds values to it.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Values
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 230)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a indexed 100Percent stacked column series element and add values to it
                     Dim MySeriesElement1 As Indexed100PercentStackedColumnSeriesElement = New Indexed100PercentStackedColumnSeriesElement("Website A")
                     MySeriesElement1.Values.Add(New Indexed100PercentStackedColumnValue(5, 0))
                     MySeriesElement1.Values.Add(New Indexed100PercentStackedColumnValue(7, 1))
                     MySeriesElement1.Values.Add(New Indexed100PercentStackedColumnValue(9, 2))
                     MySeriesElement1.Values.Add(New Indexed100PercentStackedColumnValue(6, 3))
                     Dim MySeriesElement2 As Indexed100PercentStackedColumnSeriesElement = New Indexed100PercentStackedColumnSeriesElement("Website B")
                     MySeriesElement2.Values.Add(New Indexed100PercentStackedColumnValue(4, 0))
                     MySeriesElement2.Values.Add(New Indexed100PercentStackedColumnValue(2, 1))
                     MySeriesElement2.Values.Add(New Indexed100PercentStackedColumnValue(5, 2))
                     MySeriesElement2.Values.Add(New Indexed100PercentStackedColumnValue(8, 3))
                     Dim MySeriesElement3 As Indexed100PercentStackedColumnSeriesElement = New Indexed100PercentStackedColumnSeriesElement("Website C")
                     MySeriesElement3.Values.Add(New Indexed100PercentStackedColumnValue(2, 0))
                     MySeriesElement3.Values.Add(New Indexed100PercentStackedColumnValue(4, 1))
                     MySeriesElement3.Values.Add(New Indexed100PercentStackedColumnValue(6, 2))
                     MySeriesElement3.Values.Add(New Indexed100PercentStackedColumnValue(9, 3))
            
                     ' Create a indexed 100Percent stacked column series and add indexed 100Percent stacked column series elements to it
                     Dim MyStackedColumnSeries1 As Indexed100PercentStackedColumnSeries = New Indexed100PercentStackedColumnSeries()
                     MyStackedColumnSeries1.Add(MySeriesElement1)
                     MyStackedColumnSeries1.Add(MySeriesElement2)
                     MyStackedColumnSeries1.Add(MySeriesElement3)
            
                     ' Add indexed 100Percent stacked column series to the plot area
                     MyPlotArea.Series.Add(MyStackedColumnSeries1)
            
                     ' Add indexed x AxisLabels to the XAxis
                     MyStackedColumnSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q1", 0))
                     MyStackedColumnSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q2", 1))
                     MyStackedColumnSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q3", 2))
                     MyStackedColumnSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q4", 3))
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Values;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 230);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a indexed 100Percent stacked column series element and add values to it
                     Indexed100PercentStackedColumnSeriesElement seriesElement1 = new Indexed100PercentStackedColumnSeriesElement("Website A");
                     seriesElement1.Values.Add(new Indexed100PercentStackedColumnValue(5, 0));
                     seriesElement1.Values.Add(new Indexed100PercentStackedColumnValue(7, 1));
                     seriesElement1.Values.Add(new Indexed100PercentStackedColumnValue(9, 2));
                     seriesElement1.Values.Add(new Indexed100PercentStackedColumnValue(6, 3));
                     Indexed100PercentStackedColumnSeriesElement seriesElement2 = new Indexed100PercentStackedColumnSeriesElement("Website B");
                     seriesElement2.Values.Add(new Indexed100PercentStackedColumnValue(4, 0));
                     seriesElement2.Values.Add(new Indexed100PercentStackedColumnValue(2, 1));
                     seriesElement2.Values.Add(new Indexed100PercentStackedColumnValue(5, 2));
                     seriesElement2.Values.Add(new Indexed100PercentStackedColumnValue(8, 3));
                     Indexed100PercentStackedColumnSeriesElement seriesElement3 = new Indexed100PercentStackedColumnSeriesElement("Website C");
                     seriesElement3.Values.Add(new Indexed100PercentStackedColumnValue(2, 0));
                     seriesElement3.Values.Add(new Indexed100PercentStackedColumnValue(4, 1));
                     seriesElement3.Values.Add(new Indexed100PercentStackedColumnValue(6, 2));
                     seriesElement3.Values.Add(new Indexed100PercentStackedColumnValue(9, 3));
             
                     // Create a indexed 100Percent stacked column series and add indexed 100Percent stacked column series elements to it
                     Indexed100PercentStackedColumnSeries stackedColumnSeries1 = new Indexed100PercentStackedColumnSeries();
                     stackedColumnSeries1.Add(seriesElement1);
                     stackedColumnSeries1.Add(seriesElement2);
                     stackedColumnSeries1.Add(seriesElement3);
            
                     // Add indexed 100Percent stacked column series to the plot area
                     plotArea.Series.Add(stackedColumnSeries1);
             
                     // Add indexed x  AxisLabels to the XAxis
                     stackedColumnSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q1", 0));
                     stackedColumnSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q2", 1));
                     stackedColumnSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q3", 2));
                     stackedColumnSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q4", 3));
             
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf"); 
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedColumnValue.#ctor(System.Single,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedColumnValue"/> class. 
            </summary>
            <param name="value1">Value of indexed 100Percent stacked column value. </param>
            <param name="position">Position of the indexed 100Percent stacked column value. </param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedColumnValue.Position">
            <summary>
            Gets the position of the Indexed100PercentStackedColumnValue. 
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedColumnValueList">
            <summary>
            Represents an Indexed100PercentStackedColumnValueList.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedColumnValueList.Add(System.Single)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Stacked100PercentColumnValue"/> object to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedColumnValueList"/> object.
            </summary>
            <param name="value1">Value of the stacked 100Percent column value. </param>
            <returns> A <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Stacked100PercentColumnValue"/> object. </returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedColumnValueList.Add(System.Single[])">
            <summary>
            Adds an array of <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Stacked100PercentColumnValue"/> objects to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedColumnValueList"/> object.
            </summary>
            <param name="value1">Values of stacked 100Percent column values. </param>
            <returns> Array of <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Stacked100PercentColumnValue"/> objects. </returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedColumnValueList.Add(System.Single,System.Int32)">
            <summary>
            Adds an <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedColumnValue"/> object to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedColumnValueList"/> object.
            </summary>
            <param name="value1">Value of the indexed 100Percent stacked column value. </param>
            <param name="position">Position of the indexed 100Percent stacked column value. </param>
            <returns> A <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedColumnValue"/> object. </returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedColumnValueList.Add(ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedColumnValue)">
            <summary>
            Adds an <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedColumnValue"/> object to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedColumnValueList"/> object.
            </summary>
            <param name="indexedStackedColumnValue"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedColumnValue"/> object to be added. </param>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedLineValue">
             <summary>
             Represents an Indexed100PercentStackedLineValue.
             </summary>
             <example>The following example creates a indexed 100Percent stacked line chart and adds values to it.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Values
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 230)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a indexed 100Percent stacked line series element and add values to it
                     Dim MySeriesElement1 As Indexed100PercentStackedLineSeriesElement = New Indexed100PercentStackedLineSeriesElement("Website A")
                     MySeriesElement1.Values.Add(New Indexed100PercentStackedLineValue(5, 0))
                     MySeriesElement1.Values.Add(New Indexed100PercentStackedLineValue(7, 1))
                     MySeriesElement1.Values.Add(New Indexed100PercentStackedLineValue(9, 2))
                     MySeriesElement1.Values.Add(New Indexed100PercentStackedLineValue(6, 3))
                     Dim MySeriesElement2 As Indexed100PercentStackedLineSeriesElement = New Indexed100PercentStackedLineSeriesElement("Website B")
                     MySeriesElement2.Values.Add(New Indexed100PercentStackedLineValue(4, 0))
                     MySeriesElement2.Values.Add(New Indexed100PercentStackedLineValue(2, 1))
                     MySeriesElement2.Values.Add(New Indexed100PercentStackedLineValue(5, 2))
                     MySeriesElement2.Values.Add(New Indexed100PercentStackedLineValue(8, 3))
                     Dim MySeriesElement3 As Indexed100PercentStackedLineSeriesElement = New Indexed100PercentStackedLineSeriesElement("Website C")
                     MySeriesElement3.Values.Add(New Indexed100PercentStackedLineValue(2, 0))
                     MySeriesElement3.Values.Add(New Indexed100PercentStackedLineValue(4, 1))
                     MySeriesElement3.Values.Add(New Indexed100PercentStackedLineValue(6, 2))
                     MySeriesElement3.Values.Add(New Indexed100PercentStackedLineValue(9, 3))
            
                     ' Create a indexed 100Percent stacked line series and add indexed 100 percent stacked line series elements to it
                     Dim MyStackedLineSeries1 As Indexed100PercentStackedLineSeries = New Indexed100PercentStackedLineSeries()
                     MyStackedLineSeries1.Add(MySeriesElement1)
                     MyStackedLineSeries1.Add(MySeriesElement2)
                     MyStackedLineSeries1.Add(MySeriesElement3)
            
                     ' Add indexed 100 percent stacked line series to the plot area
                     MyPlotArea.Series.Add(MyStackedLineSeries1)
            
                     ' Add indexed x AxisLabels to the XAxis
                     MyStackedLineSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q1", 0))
                     MyStackedLineSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q2", 1))
                     MyStackedLineSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q3", 2))
                     MyStackedLineSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q4", 3))
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Values;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 230);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a indexed 100Percent stacked line series element and add values to it
                     Indexed100PercentStackedLineSeriesElement seriesElement1 = new Indexed100PercentStackedLineSeriesElement("Website A");
                     seriesElement1.Values.Add(new Indexed100PercentStackedLineValue(5, 0));
                     seriesElement1.Values.Add(new Indexed100PercentStackedLineValue(7, 1));
                     seriesElement1.Values.Add(new Indexed100PercentStackedLineValue(9, 2));
                     seriesElement1.Values.Add(new Indexed100PercentStackedLineValue(6, 3));
                     Indexed100PercentStackedLineSeriesElement seriesElement2 = new Indexed100PercentStackedLineSeriesElement("Website B");
                     seriesElement2.Values.Add(new Indexed100PercentStackedLineValue(4, 0));
                     seriesElement2.Values.Add(new Indexed100PercentStackedLineValue(2, 1));
                     seriesElement2.Values.Add(new Indexed100PercentStackedLineValue(5, 2));
                     seriesElement2.Values.Add(new Indexed100PercentStackedLineValue(8, 3));
                     Indexed100PercentStackedLineSeriesElement seriesElement3 = new Indexed100PercentStackedLineSeriesElement("Website C");
                     seriesElement3.Values.Add(new Indexed100PercentStackedLineValue(2, 0));
                     seriesElement3.Values.Add(new Indexed100PercentStackedLineValue(4, 1));
                     seriesElement3.Values.Add(new Indexed100PercentStackedLineValue(6, 2));
                     seriesElement3.Values.Add(new Indexed100PercentStackedLineValue(9, 3));
            
                     // Create a indexed 100Percent stacked line series and add indexed 100 percent stacked line series elements to it
                     Indexed100PercentStackedLineSeries stackedLineSeries1 = new Indexed100PercentStackedLineSeries();
                     stackedLineSeries1.Add(seriesElement1);
                     stackedLineSeries1.Add(seriesElement2);
                     stackedLineSeries1.Add(seriesElement3);
            
                     // Add indexed 100 percent stacked line series to the plot area
                     plotArea.Series.Add(stackedLineSeries1);
            
                     // Add indexed x AxisLabels to the XAxis
                     stackedLineSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q1", 0));
                     stackedLineSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q2", 1));
                     stackedLineSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q3", 2));
                     stackedLineSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q4", 3));
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf"); 
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>   
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedLineValue.#ctor(System.Single,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedLineValue"/> object.
            </summary>
            <param name="value1">The Value of indexed 100Percent stacked line value.</param>
            <param name="position">The position of the indexed 100Percent stacked line value.</param>        
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedLineValue.Position">
            <summary>
            Gets the position of the Indexed100PercentStackedLineValue.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedLineValueList">
            <summary>
            Represents an Indexed100PercentStackedLineValueList.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedLineValueList.Add(ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedLineValue)">
            <summary>
            Adds an <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedLineValue"/> object to the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedLineValueList"/> object.
            </summary>
            <param name="lineValue">Value of the indexed 100Percent Stacked line value.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedLineValueList.Add(System.Single)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Stacked100PercentLineValue"/> object to the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedLineValueList"/> object.
            </summary>
            <param name="value1">Value of the indexed 100Percent stacked line value.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Stacked100PercentLineValue"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedLineValueList.Add(System.Single[])">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Stacked100PercentLineValue"/> object to the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedLineValueList"/> object.
            </summary>
            <param name="value1">values of the indexed 100Percent stacked line values.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Stacked100PercentLineValue"/> object array.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedLineValueList.Add(System.Single,System.Int32)">
            <summary>
            Adds an <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedLineValue"/> object to the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedLineValueList"/> object.
            </summary>
            <param name="value1">Value of the indexed 100Percent stacked line value.</param>
            <param name="position">Position of the indexed 100Percent stacked line value.</param>
            <returns>A<see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.Indexed100PercentStackedLineValue"/> object.</returns>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedAreaValue">
             <summary>
             Represents an IndexedAreaValue.
             </summary>
             <example>The following example creates a indexed area value series chart and adds values to it.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Values
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 230)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a indexed xAxis
                     Dim xAxis As IndexedXAxis = New IndexedXAxis()
            
                     ' Create a numeric yAxis
                     Dim yAxis As NumericYAxis = New NumericYAxis()
            
                     ' Create a indexed area series and add values to it
                     Dim MyAreaSeries1 As IndexedAreaSeries = New IndexedAreaSeries("Website A", xAxis, yAxis)
                     MyAreaSeries1.Values.Add(New IndexedAreaValue(5, 0))
                     MyAreaSeries1.Values.Add(New IndexedAreaValue(7, 1))
                     MyAreaSeries1.Values.Add(New IndexedAreaValue(9, 2))
                     MyAreaSeries1.Values.Add(New IndexedAreaValue(6, 3))
                     Dim MyAreaSeries2 As IndexedAreaSeries = New IndexedAreaSeries("Website B", xAxis, yAxis)
                     MyAreaSeries2.Values.Add(New IndexedAreaValue(4, 0))
                     MyAreaSeries2.Values.Add(New IndexedAreaValue(2, 1))
                     MyAreaSeries2.Values.Add(New IndexedAreaValue(5, 2))
                     MyAreaSeries2.Values.Add(New IndexedAreaValue(8, 3))
                     Dim MyAreaSeries3 As IndexedAreaSeries = New IndexedAreaSeries("Website C", xAxis, yAxis)
                     MyAreaSeries3.Values.Add(New IndexedAreaValue(2, 0))
                     MyAreaSeries3.Values.Add(New IndexedAreaValue(4, 1))
                     MyAreaSeries3.Values.Add(New IndexedAreaValue(6, 2))
                     MyAreaSeries3.Values.Add(New IndexedAreaValue(9, 3))
            
                     ' Add indexed area series to the plot area
                     MyPlotArea.Series.Add(MyAreaSeries1)
                     MyPlotArea.Series.Add(MyAreaSeries2)
                     MyPlotArea.Series.Add(MyAreaSeries3)
            
                     ' Create a  title and add it to the YAxis
                     Dim MyTitle3 As Title = New Title("Visitors (in millions)")
                     yAxis.Titles.Add(MyTitle3)
            
                     ' Add Indexed x AxisLabels to the XAxis
                     MyAreaSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q1", 0))
                     MyAreaSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q2", 1))
                     MyAreaSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q3", 2))
                     MyAreaSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q4", 3))
            
                     ' Add the chart to the page  
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Values;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
             
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 230);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
             
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a indexed xAxis
                     IndexedXAxis xAxis = new IndexedXAxis();
            
                     // Create a numeric yAxis
                     NumericYAxis yAxis = new NumericYAxis();
            
                     // Create a indexed area series and add values to it
                     IndexedAreaSeries areaSeries1 = new IndexedAreaSeries("Website A", xAxis, yAxis);
                     areaSeries1.Values.Add(new IndexedAreaValue(5, 0));
                     areaSeries1.Values.Add(new IndexedAreaValue(7, 1));
                     areaSeries1.Values.Add(new IndexedAreaValue(9, 2));
                     areaSeries1.Values.Add(new IndexedAreaValue(6, 3));
                     IndexedAreaSeries areaSeries2 = new IndexedAreaSeries("Website B", xAxis, yAxis);
                     areaSeries2.Values.Add(new IndexedAreaValue(4, 0));
                     areaSeries2.Values.Add(new IndexedAreaValue(2, 1));
                     areaSeries2.Values.Add(new IndexedAreaValue(5, 2));
                     areaSeries2.Values.Add(new IndexedAreaValue(8, 3));
                     IndexedAreaSeries areaSeries3 = new IndexedAreaSeries("Website C", xAxis, yAxis);
                     areaSeries3.Values.Add(new IndexedAreaValue(2, 0));
                     areaSeries3.Values.Add(new IndexedAreaValue(4, 1));
                     areaSeries3.Values.Add(new IndexedAreaValue(6, 2));
                     areaSeries3.Values.Add(new IndexedAreaValue(9, 3));
            
                     // Add indexed area series to the plot area
                     plotArea.Series.Add(areaSeries1);
                     plotArea.Series.Add(areaSeries2);
                     plotArea.Series.Add(areaSeries3);
            
                     // Create a  title and add it to the YAxis
                     Title lTitle = new Title("Visitors (in millions)");
                     yAxis.Titles.Add(lTitle);
            
                     // Add indexed x AxisLabels to the XAxis
                     areaSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q1", 0));
                     areaSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q2", 1));
                     areaSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q3", 2));
                     areaSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q4", 3));
            
                     // Add the chart to the page  
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedAreaValue.#ctor(System.Single,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedAreaValue"/> object.
            </summary>
            <param name="value1">The Value of indexed area value.</param>
            <param name="position">The position of the indexed area value.</param>        
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedAreaValue.Position">
            <summary>
            Gets the position of IndexedAreaValue.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedAreaValueList">
            <summary>
            Represents a list of the IndexedAreaValues.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedAreaValueList.Add(System.Single,System.Int32)">
            <summary>
            Adds an <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedAreaValue"/> object to the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedAreaValueList"/> object.
            </summary>
            <param name="value1">Value of the indexed area value.</param>
            <param name="position">Position of the indexed area value.</param>
            <returns>  A <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.AreaValue"/> object.</returns>       
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedAreaValueList.Add(ceTe.DynamicPDF.PageElements.Charting.Values.IndexedAreaValue)">
            <summary>
            Adds an <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedAreaValue"/> object to the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedAreaValueList"/> object.
            </summary>
            <param name="areaValue">Value of the indexed area value. </param>        
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedAreaValueList.Add(System.Single)">
            <summary>
            Adds an <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.AreaValue"/> object to the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedAreaValueList"/> object.
            </summary>
            <param name="value1">Value of the area value.</param>
            <returns> A <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.AreaValue"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedAreaValueList.Add(System.Single[])">
            <summary>
            Adds an <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.AreaValue"/> object to the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedAreaValueList"/> object.
            </summary>
            <param name="value1">Array of values of the area values.</param>
            <returns>a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.AreaValue"/> object array.</returns>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedBarValue">
             <summary>
             This class represents the IndexedBarValue.
             </summary>
             <example>The following example creates a indexed bar series chart and adds values to it.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Values
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a numeric x axis
                     Dim xAxis As NumericXAxis = New NumericXAxis()
            
                     ' Create a indexed y axis
                     Dim yAxis As IndexedYAxis = New IndexedYAxis()
            
                     ' Create a indexed bar series and add values to it
                     Dim MyBarSeries1 As IndexedBarSeries = New IndexedBarSeries("Website A", xAxis, yAxis)
                     MyBarSeries1.Values.Add(New IndexedBarValue(5, 0))
                     MyBarSeries1.Values.Add(New IndexedBarValue(7, 1))
                     MyBarSeries1.Values.Add(New IndexedBarValue(9, 2))
                     MyBarSeries1.Values.Add(New IndexedBarValue(6, 3))
                     Dim MyBarSeries2 As IndexedBarSeries = New IndexedBarSeries("Website B", xAxis, yAxis)
                     MyBarSeries2.Values.Add(New IndexedBarValue(4, 0))
                     MyBarSeries2.Values.Add(New IndexedBarValue(2, 1))
                     MyBarSeries2.Values.Add(New IndexedBarValue(5, 2))
                     MyBarSeries2.Values.Add(New IndexedBarValue(8, 3))
                     Dim MyBarSeries3 As IndexedBarSeries = New IndexedBarSeries("Website C", xAxis, yAxis)
                     MyBarSeries3.Values.Add(New IndexedBarValue(2, 0))
                     MyBarSeries3.Values.Add(New IndexedBarValue(4, 1))
                     MyBarSeries3.Values.Add(New IndexedBarValue(6, 2))
                     MyBarSeries3.Values.Add(New IndexedBarValue(8, 3))
            
                     ' Add indexed bar series to the plot area
                     MyPlotArea.Series.Add(MyBarSeries1)
                     MyPlotArea.Series.Add(MyBarSeries2)
                     MyPlotArea.Series.Add(MyBarSeries3)
            
                     ' Create a title and add it to the xaxis
                     Dim MyTitle As Title = New Title("Visitors (in millions)")
                     MyBarSeries1.XAxis.Titles.Add(MyTitle)
            
                     ' Add Indexed y AxisLabels to the yAxis
                     MyBarSeries1.YAxis.Labels.Add(New IndexedYAxisLabel("Q1", 0))
                     MyBarSeries1.YAxis.Labels.Add(New IndexedYAxisLabel("Q2", 1))
                     MyBarSeries1.YAxis.Labels.Add(New IndexedYAxisLabel("Q3", 2))
                     MyBarSeries1.YAxis.Labels.Add(New IndexedYAxisLabel("Q4", 3))
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
                     MyDocument.Pages.Add(MyPage)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Values;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a numeric x axis
                     NumericXAxis xAxis = new NumericXAxis();
            
                     // Create a indexed y axis
                     IndexedYAxis yAxis = new IndexedYAxis();
            
                     // Create a indexed bar series and add values to it
                     IndexedBarSeries barSeries1 = new IndexedBarSeries("Website A", xAxis, yAxis);
                     barSeries1.Values.Add(new IndexedBarValue(5, 0));
                     barSeries1.Values.Add(new IndexedBarValue(7, 1));
                     barSeries1.Values.Add(new IndexedBarValue(9, 2));
                     barSeries1.Values.Add(new IndexedBarValue(6, 3));
                     IndexedBarSeries barSeries2 = new IndexedBarSeries("Website B", xAxis, yAxis);
                     barSeries2.Values.Add(new IndexedBarValue(4, 0));
                     barSeries2.Values.Add(new IndexedBarValue(2, 1));
                     barSeries2.Values.Add(new IndexedBarValue(5, 2));
                     barSeries2.Values.Add(new IndexedBarValue(8, 3));
                     IndexedBarSeries barSeries3 = new IndexedBarSeries("Website C", xAxis, yAxis);
                     barSeries3.Values.Add(new IndexedBarValue(2, 0));
                     barSeries3.Values.Add(new IndexedBarValue(4, 1));
                     barSeries3.Values.Add(new IndexedBarValue(6, 2));
                     barSeries3.Values.Add(new IndexedBarValue(8, 3));
            
                     // Add indexed bar series to the plot area
                     plotArea.Series.Add(barSeries1);
                     plotArea.Series.Add(barSeries2);
                     plotArea.Series.Add(barSeries3);
            
                     // Create a title and add it to the xaxis
                     Title lTitle = new Title("Visitors (in millions)");
                     barSeries1.XAxis.Titles.Add(lTitle);
            
                     // Add Indexed y AxisLabels to the YAxis
                     barSeries1.YAxis.Labels.Add(new IndexedYAxisLabel("Q1", 0));
                     barSeries1.YAxis.Labels.Add(new IndexedYAxisLabel("Q2", 1));
                     barSeries1.YAxis.Labels.Add(new IndexedYAxisLabel("Q3", 2));
                     barSeries1.YAxis.Labels.Add(new IndexedYAxisLabel("Q4", 3));
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
                     document.Pages.Add(page);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf"); 
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedBarValue.#ctor(System.Single,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedBarValue"/> class.
            </summary>
            <param name="value1"> The float indicating value of indexed bar value.</param>
            <param name="position">The integer indicating position of the indexed bar value.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedBarValue.Position">
            <summary>
            Gets the position of the IndexedBarValue.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedBarValueList">
            <summary>
            This class represents the IndexedBarValueList.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedBarValueList.Add(System.Single)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.BarValue"/> object to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedBarValueList"/> object.
            </summary>
            <param name="value1"> Value of the bar value.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.BarValue"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedBarValueList.Add(System.Single[])">
            <summary>
            Adds an array of <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.BarValue"/> objects to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedBarValueList"/> object.
            </summary>
            <param name="value1">  Value of the bar values.</param>
            <returns> Array of <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.BarValue"/> objects.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedBarValueList.Add(System.Single,System.Int32)">
            <summary>
            Adds an <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedBarValue"/> object to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedBarValueList"/> object.
            </summary>
            <param name="value1"> Value of the indexed bar value.</param>
            <param name="position">Position of the indexed bar value.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedBarValue"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedBarValueList.Add(ceTe.DynamicPDF.PageElements.Charting.Values.IndexedBarValue)">
            <summary>
            Adds an <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedBarValue"/> object to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedBarValueList"/> object.
            </summary>
            <param name="indexedBarValue"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedBarValue"/> object to be added.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedColumnValue">
             <summary>
             This class represents the IndexedColumnValue. 
             </summary>
             <example>The following example creates a indexed column chart and adds value to it.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
             Imports ceTe.DynamicPDF.PageElements.Charting.Values
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 230)
             
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a indexed column series and add values to it
                     Dim MyColumnSeries1 As IndexedColumnSeries = New IndexedColumnSeries("Website A")
                     MyColumnSeries1.Values.Add(New IndexedColumnValue(5, 0))
                     MyColumnSeries1.Values.Add(New IndexedColumnValue(7, 1))
                     MyColumnSeries1.Values.Add(New IndexedColumnValue(9, 2))
                     MyColumnSeries1.Values.Add(New IndexedColumnValue(6, 3))
                     Dim MyColumnSeries2 As IndexedColumnSeries = New IndexedColumnSeries("Website B")
                     MyColumnSeries2.Values.Add(New IndexedColumnValue(4, 0))
                     MyColumnSeries2.Values.Add(New IndexedColumnValue(2, 1))
                     MyColumnSeries2.Values.Add(New IndexedColumnValue(5, 2))
                     MyColumnSeries2.Values.Add(New IndexedColumnValue(8, 3))
                     Dim MyColumnSeries3 As IndexedColumnSeries = New IndexedColumnSeries("Website C")
                     MyColumnSeries3.Values.Add(New IndexedColumnValue(2, 0))
                     MyColumnSeries3.Values.Add(New IndexedColumnValue(4, 1))
                     MyColumnSeries3.Values.Add(New IndexedColumnValue(6, 2))
                     MyColumnSeries3.Values.Add(New IndexedColumnValue(8, 3))
            
                     ' Add indexed column series to the plot area
                     MyPlotArea.Series.Add(MyColumnSeries1)
                     MyPlotArea.Series.Add(MyColumnSeries2)
                     MyPlotArea.Series.Add(MyColumnSeries3)
            
                     ' Create a title and add it to the yaxis
                     Dim MyTitle3 As Title = New Title("Visitors (in millions)")
                     MyColumnSeries1.YAxis.Titles.Add(MyTitle3)
            
                     ' Add Indexed X AxisLabels to the XAxis
                     MyColumnSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q1", 0))
                     MyColumnSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q2", 1))
                     MyColumnSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q3", 2))
                     MyColumnSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q4", 3))
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             using ceTe.DynamicPDF.PageElements.Charting.Values;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 230);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a indexed column series and add values to it
                     IndexedColumnSeries columnSeries1 = new IndexedColumnSeries("Website A");
                     columnSeries1.Values.Add(new IndexedColumnValue(5, 0));
                     columnSeries1.Values.Add(new IndexedColumnValue(7, 1));
                     columnSeries1.Values.Add(new IndexedColumnValue(9, 2));
                     columnSeries1.Values.Add(new IndexedColumnValue(6, 3));
                     IndexedColumnSeries columnSeries2 = new IndexedColumnSeries("Website B");
                     columnSeries2.Values.Add(new IndexedColumnValue(4, 0));
                     columnSeries2.Values.Add(new IndexedColumnValue(2, 1));
                     columnSeries2.Values.Add(new IndexedColumnValue(5, 2));
                     columnSeries2.Values.Add(new IndexedColumnValue(8, 3));
                     IndexedColumnSeries columnSeries3 = new IndexedColumnSeries("Website C");
                     columnSeries3.Values.Add(new IndexedColumnValue(2, 0));
                     columnSeries3.Values.Add(new IndexedColumnValue(4, 1));
                     columnSeries3.Values.Add(new IndexedColumnValue(6, 2));
                     columnSeries3.Values.Add(new IndexedColumnValue(8, 3));
            
                     // Add indexed column series to the plot area
                     plotArea.Series.Add(columnSeries1);
                     plotArea.Series.Add(columnSeries2);
                     plotArea.Series.Add(columnSeries3);
            
                     // Create a title and add it to the yaxis
                     Title title3 = new Title("Visitors (in millions)");
                     columnSeries1.YAxis.Titles.Add(title3);
            
                     // Add Indexed x AxisLabels to the XAxis
                     columnSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q1", 0));
                     columnSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q2", 1));
                     columnSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q3", 2));
                     columnSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q4", 3));
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedColumnValue.#ctor(System.Single,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedColumnValue"/> class. 
            </summary>
            <param name="value1">The float indicating value of indexed column value. </param>
            <param name="position">The integer indicating position of the indexed column value. </param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedColumnValue.Position">
            <summary>
            Gets the position of the IndexedColumnValue. 
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedColumnValueList">
            <summary>
            This class represents the IndexedColumnValueList. 
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedColumnValueList.Add(System.Single)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.ColumnValue"/> object to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedColumnValueList"/> object.
            </summary>
            <param name="value1">Value of the column value. </param>
            <returns> A <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.ColumnValue"/> object. </returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedColumnValueList.Add(System.Single[])">
            <summary>
            Adds an array of <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.ColumnValue"/> objects to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedColumnValueList"/> object.
            </summary>
            <param name="value1">Value of column values to be added. </param>
            <returns> Array of <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.ColumnValue"/> objects. </returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedColumnValueList.Add(System.Single,System.Int32)">
            <summary>
            Adds an <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedColumnValue"/> object to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedColumnValueList"/> object. 
            </summary>
            <param name="value1">Value of the indexed column value. </param>
            <param name="position">Position of the indexed column value. </param>
            <returns> A <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedColumnValue"/> object. </returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedColumnValueList.Add(ceTe.DynamicPDF.PageElements.Charting.Values.IndexedColumnValue)">
            <summary>
            Adds an <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedColumnValue"/> object to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedColumnValueList"/> object.  
            </summary>
            <param name="indexedColumnValue"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedColumnValue"/> to be added. </param>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedLineValue">
             <summary>
             Represents an IndexedLineValue.
             </summary>
             <example>The following example creates a indexed line value series chart and adds values to it.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Values
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 230)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
             
                     ' Create a indexed x Axis 
                     Dim xAxis As IndexedXAxis = New IndexedXAxis()
            
                     ' Create a numeric y Axis
                     Dim yAxis As NumericYAxis = New NumericYAxis()
            
                     ' Create a indexed line series and add values to it
                     Dim MyLineSeries1 As IndexedLineSeries = New IndexedLineSeries("Website A", xAxis, yAxis)
                     MyLineSeries1.Values.Add(New IndexedLineValue(5, 0))
                     MyLineSeries1.Values.Add(New IndexedLineValue(7, 1))
                     MyLineSeries1.Values.Add(New IndexedLineValue(9, 2))
                     MyLineSeries1.Values.Add(New IndexedLineValue(6, 3))
                     Dim MyLineSeries2 As IndexedLineSeries = New IndexedLineSeries("Website B", xAxis, yAxis)
                     MyLineSeries2.Values.Add(New IndexedLineValue(4, 0))
                     MyLineSeries2.Values.Add(New IndexedLineValue(2, 1))
                     MyLineSeries2.Values.Add(New IndexedLineValue(5, 2))
                     MyLineSeries2.Values.Add(New IndexedLineValue(8, 3))
                     Dim MyLineSeries3 As IndexedLineSeries = New IndexedLineSeries("Website C", xAxis, yAxis)
                     MyLineSeries3.Values.Add(New IndexedLineValue(2, 0))
                     MyLineSeries3.Values.Add(New IndexedLineValue(4, 1))
                     MyLineSeries3.Values.Add(New IndexedLineValue(6, 2))
                     MyLineSeries3.Values.Add(New IndexedLineValue(9, 3))
            
                     ' Add indexed line series to the plot Area
                     MyPlotArea.Series.Add(MyLineSeries1)
                     MyPlotArea.Series.Add(MyLineSeries2)
                     MyPlotArea.Series.Add(MyLineSeries3)
            
                     ' Create a title and add it to the yaxis
                     Dim MyTitle3 As Title = New Title("Visitors (in millions)")
                     MyLineSeries1.YAxis.Titles.Add(MyTitle3)
            
                     ' Add indexed x AxisLabels to the XAxis
                     MyLineSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q1", 0))
                     MyLineSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q2", 1))
                     MyLineSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q3", 2))
                     MyLineSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q4", 3))
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Values;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 230);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a indexed x Axis 
                     IndexedXAxis xAxis = new IndexedXAxis();
            
                     // Create a numeric y Axis
                     NumericYAxis yAxis = new NumericYAxis();
            
                     // Create a indexed line series and add values to it
                     IndexedLineSeries lineSeries1 = new IndexedLineSeries("Website A", xAxis, yAxis);
                     lineSeries1.Values.Add(new IndexedLineValue(5, 0));
                     lineSeries1.Values.Add(new IndexedLineValue(7, 1));
                     lineSeries1.Values.Add(new IndexedLineValue(9, 2));
                     lineSeries1.Values.Add(new IndexedLineValue(6, 3));
                     IndexedLineSeries lineSeries2 = new IndexedLineSeries("Website B", xAxis, yAxis);
                     lineSeries2.Values.Add(new IndexedLineValue(4, 0));
                     lineSeries2.Values.Add(new IndexedLineValue(2, 1));
                     lineSeries2.Values.Add(new IndexedLineValue(5, 2));
                     lineSeries2.Values.Add(new IndexedLineValue(8, 3));
                     IndexedLineSeries lineSeries3 = new IndexedLineSeries("Website C", xAxis, yAxis);
                     lineSeries3.Values.Add(new IndexedLineValue(2, 0));
                     lineSeries3.Values.Add(new IndexedLineValue(4, 1));
                     lineSeries3.Values.Add(new IndexedLineValue(6, 2));
                     lineSeries3.Values.Add(new IndexedLineValue(9, 3));
            
                     // Add indexed line series to the plot Area
                     plotArea.Series.Add(lineSeries1);
                     plotArea.Series.Add(lineSeries2);
                     plotArea.Series.Add(lineSeries3);
            
                     // Create a title and add it to the yaxis
                     Title lTitle = new Title("Visitors (in millions)");
                     lineSeries1.YAxis.Titles.Add(lTitle);
            
                     // Add indexed x AxisLabels to the XAxis
                     lineSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q1", 0));
                     lineSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q2", 1));
                     lineSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q3", 2));
                     lineSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q4", 3));
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedLineValue.#ctor(System.Single,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedLineValue"/> object.
            </summary>
            <param name="value1">The Value of indexed line value.</param>
            <param name="position"> The position of the indexed line value.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedLineValue.Position">
            <summary>
            Gets the position of the IndexedLineValue.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedLineValueList">
            <summary>
            Represents a list of the IndexedLineValues.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedLineValueList.Add(ceTe.DynamicPDF.PageElements.Charting.Values.IndexedLineValue)">
            <summary>
            Adds an <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedLineValue"/> object to the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedLineValueList"/> object.
            </summary>
            <param name="lineValue">Value of the indexed line value.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedLineValueList.Add(System.Single)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.LineValue"/> object to the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedLineValueList"/> object.
            </summary>
            <param name="value1">Value of the line value.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.LineValue"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedLineValueList.Add(System.Single[])">
            <summary>
             Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.LineValue"/> object to the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedLineValueList"/> object.
            </summary>
            <param name="value1">Array of values of the line values.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.LineValue"/> object array.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedLineValueList.Add(System.Single,System.Int32)">
            <summary>
            Adds an <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedLineValue"/> object to the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedLineValueList"/> object.
            </summary>
            <param name="value1">Value of the indexed line value.</param>
            <param name="position">Position of the indexed line value.</param>
            <returns> A <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.LineValue"/> object.</returns>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedAreaValue">
             <summary>
             Represents an IndexedStackedAreaValue.
             </summary>
             <example>The following example creates indexed stacked area series chart and adds values to it.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Values
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 230)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a indexed x axis
                     Dim xAxis As IndexedXAxis = New IndexedXAxis()
            
                     ' Add indexed x AxisLabels to the XAxis
                     xAxis.Labels.Add(New IndexedXAxisLabel("Q1", 0))
                     xAxis.Labels.Add(New IndexedXAxisLabel("Q2", 1))
                     xAxis.Labels.Add(New IndexedXAxisLabel("Q3", 2))
                     xAxis.Labels.Add(New IndexedXAxisLabel("Q4", 3))
            
                     ' Create a numeric y axis
                     Dim yAxis As NumericYAxis = New NumericYAxis()
            
                     ' Create a indexed stacked area series element and add values to it
                     Dim MySeriesElement1 As IndexedStackedAreaSeriesElement = New IndexedStackedAreaSeriesElement("Website A")
                     MySeriesElement1.Values.Add(New IndexedStackedAreaValue(5, 0))
                     MySeriesElement1.Values.Add(New IndexedStackedAreaValue(7, 1))
                     MySeriesElement1.Values.Add(New IndexedStackedAreaValue(9, 2))
                     MySeriesElement1.Values.Add(New IndexedStackedAreaValue(6, 3))
                     Dim MySeriesElement2 As IndexedStackedAreaSeriesElement = New IndexedStackedAreaSeriesElement("Website B")
                     MySeriesElement2.Values.Add(New IndexedStackedAreaValue(4, 0))
                     MySeriesElement2.Values.Add(New IndexedStackedAreaValue(2, 1))
                     MySeriesElement2.Values.Add(New IndexedStackedAreaValue(5, 2))
                     MySeriesElement2.Values.Add(New IndexedStackedAreaValue(8, 3))
                     Dim MySeriesElement3 As IndexedStackedAreaSeriesElement = New IndexedStackedAreaSeriesElement("Website C")
                     MySeriesElement3.Values.Add(New IndexedStackedAreaValue(2, 0))
                     MySeriesElement3.Values.Add(New IndexedStackedAreaValue(4, 1))
                     MySeriesElement3.Values.Add(New IndexedStackedAreaValue(6, 2))
                     MySeriesElement3.Values.Add(New IndexedStackedAreaValue(9, 3))
            
                     ' Create a indexed stacked area series and add indexed stacked area series elements to it
                     Dim MyStackedAreaSeries1 As IndexedStackedAreaSeries = New IndexedStackedAreaSeries(xAxis, yAxis)
                     MyStackedAreaSeries1.Add(MySeriesElement1)
                     MyStackedAreaSeries1.Add(MySeriesElement2)
                     MyStackedAreaSeries1.Add(MySeriesElement3)
            
                     ' Add indexed stacked area series to the plot area
                     MyPlotArea.Series.Add(MyStackedAreaSeries1)
            
                     ' Create a title and add it to the yaxis
                     Dim MyTitle3 As Title = New Title("Visitors (in millions)")
                     MyStackedAreaSeries1.YAxis.Titles.Add(MyTitle3)
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Values;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 230);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a indexed x axis
                     IndexedXAxis xAxis = new IndexedXAxis();
            
                     // Add indexed x AxisLabels to the XAxis
                     xAxis.Labels.Add(new IndexedXAxisLabel("Q1", 0));
                     xAxis.Labels.Add(new IndexedXAxisLabel("Q2", 1));
                     xAxis.Labels.Add(new IndexedXAxisLabel("Q3", 2));
                     xAxis.Labels.Add(new IndexedXAxisLabel("Q4", 3));
            
                     // Create a numeric y axis
                     NumericYAxis yAxis = new NumericYAxis();
            
                     // Create a indexed stacked area series element and add values to it
                     IndexedStackedAreaSeriesElement seriesElement1 = new IndexedStackedAreaSeriesElement("Website A");
                     seriesElement1.Values.Add(new IndexedStackedAreaValue(5, 0));
                     seriesElement1.Values.Add(new IndexedStackedAreaValue(7, 1));
                     seriesElement1.Values.Add(new IndexedStackedAreaValue(9, 2));
                     seriesElement1.Values.Add(new IndexedStackedAreaValue(6, 3));
                     IndexedStackedAreaSeriesElement seriesElement2 = new IndexedStackedAreaSeriesElement("Website B");
                     seriesElement2.Values.Add(new IndexedStackedAreaValue(4, 0));
                     seriesElement2.Values.Add(new IndexedStackedAreaValue(2, 1));
                     seriesElement2.Values.Add(new IndexedStackedAreaValue(5, 2));
                     seriesElement2.Values.Add(new IndexedStackedAreaValue(8, 3));
                     IndexedStackedAreaSeriesElement seriesElement3 = new IndexedStackedAreaSeriesElement("Website C");
                     seriesElement3.Values.Add(new IndexedStackedAreaValue(2, 0));
                     seriesElement3.Values.Add(new IndexedStackedAreaValue(4, 1));
                     seriesElement3.Values.Add(new IndexedStackedAreaValue(6, 2));
                     seriesElement3.Values.Add(new IndexedStackedAreaValue(9, 3));
            
                     // Create a indexed stacked area series and add indexed stacked area series elements to it
                     IndexedStackedAreaSeries stackedAreaSeries1 = new IndexedStackedAreaSeries(xAxis, yAxis);
                     stackedAreaSeries1.Add(seriesElement1);
                     stackedAreaSeries1.Add(seriesElement2);
                     stackedAreaSeries1.Add(seriesElement3);
            
                     // Add indexed stacked area series to the plot area
                     plotArea.Series.Add(stackedAreaSeries1);
            
                     // Create a title and add it to the yaxis
                     Title lTitle = new Title("Visitors (in millions)");
                     stackedAreaSeries1.YAxis.Titles.Add(lTitle);
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf");
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedAreaValue.#ctor(System.Single,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedAreaValue"/> object.
            </summary>
            <param name="value1">The Value of indexed stacked area value.</param>
            <param name="position">The position of the indexed stacked area value.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedAreaValue.Position">
            <summary>
            Gets the position of the IndexedStackedAreaValue.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedAreaValueList">
            <summary>
            Represents a list of the IndexedStackedAreaValues.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedAreaValueList.Add(ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedAreaValue)">
            <summary>
            Adds an <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedAreaValue"/> object to the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedAreaValueList"/> object.
            </summary>
            <param name="areaValue">indexed stacked area value.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedAreaValueList.Add(System.Single)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.StackedAreaValue"/> object to the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedAreaValueList"/> object.
            </summary>
            <param name="value1">Value of the stacked area value.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.StackedAreaValue"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedAreaValueList.Add(System.Single[])">
            <summary>
            Adds an <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.AreaValue"/> object to the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedAreaValueList"/> object.
            </summary>
            <param name="value1">Array of values of the stacked area values.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.StackedAreaValue"/> object array.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedAreaValueList.Add(System.Single,System.Int32)">
            <summary>
            Adds an <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedAreaValue"/> object to the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedAreaValueList"/> object.
            </summary>
            <param name="value1">Value of the indexed stacked area value.</param>
            <param name="position">Position of the indexed stacked area value.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.StackedAreaValue"/> object.</returns>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedBarValue">
             <summary>
             This class represents the IndexedStackedBarValue.
             </summary>
             <example>The following example creates indexed stacked bar series chart and adds values to it.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements    
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Values
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
             
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a numeric x axis
                     Dim xAxis As NumericXAxis = New NumericXAxis()
            
                     ' Create a indexed y axis
                     Dim yAxis As IndexedYAxis = New IndexedYAxis()
            
                     ' Create a indexed stacked bar series element and add values to it
                     Dim MySeriesElement1 As IndexedStackedBarSeriesElement = New IndexedStackedBarSeriesElement("Website A")
                     MySeriesElement1.Values.Add(New IndexedStackedBarValue(5, 0))
                     MySeriesElement1.Values.Add(New IndexedStackedBarValue(7, 1))
                     MySeriesElement1.Values.Add(New IndexedStackedBarValue(9, 2))
                     MySeriesElement1.Values.Add(New IndexedStackedBarValue(6, 3))
                     Dim MySeriesElement2 As IndexedStackedBarSeriesElement = New IndexedStackedBarSeriesElement("Website B")
                     MySeriesElement2.Values.Add(New IndexedStackedBarValue(4, 0))
                     MySeriesElement2.Values.Add(New IndexedStackedBarValue(2, 1))
                     MySeriesElement2.Values.Add(New IndexedStackedBarValue(5, 2))
                     MySeriesElement2.Values.Add(New IndexedStackedBarValue(8, 3))
                     Dim MySeriesElement3 As IndexedStackedBarSeriesElement = New IndexedStackedBarSeriesElement("Website C")
                     MySeriesElement3.Values.Add(New IndexedStackedBarValue(2, 0))
                     MySeriesElement3.Values.Add(New IndexedStackedBarValue(4, 1))
                     MySeriesElement3.Values.Add(New IndexedStackedBarValue(6, 2))
                     MySeriesElement3.Values.Add(New IndexedStackedBarValue(8, 3))
            
                     ' Create a indexed stacked bar series and add indexed stacked bar series elements to it
                     Dim MyStackedBarSeries1 As IndexedStackedBarSeries = New IndexedStackedBarSeries(xAxis, yAxis)
                     MyStackedBarSeries1.Add(MySeriesElement1)
                     MyStackedBarSeries1.Add(MySeriesElement2)
                     MyStackedBarSeries1.Add(MySeriesElement3)
            
                     ' Add indexed stacked bar series to the plot area
                     MyPlotArea.Series.Add(MyStackedBarSeries1)
            
                     ' Create a title and add it to the Xaxis
                     Dim MyTitle As Title = New Title("Visitors (in millions)")
                     MyStackedBarSeries1.XAxis.Titles.Add(MyTitle)
            
                     ' Add Indexed y AxisLabels to the YAxis
                     MyStackedBarSeries1.YAxis.Labels.Add(New IndexedYAxisLabel("Q1", 0))
                     MyStackedBarSeries1.YAxis.Labels.Add(New IndexedYAxisLabel("Q2", 1))
                     MyStackedBarSeries1.YAxis.Labels.Add(New IndexedYAxisLabel("Q3", 2))
                     MyStackedBarSeries1.YAxis.Labels.Add(New IndexedYAxisLabel("Q4", 3))
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
                     MyDocument.Pages.Add(MyPage)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Values;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a numeric x axis
                     NumericXAxis xAxis = new NumericXAxis();
            
                     // Create a indexed y axis
                     IndexedYAxis yAxis = new IndexedYAxis();
            
                     // Create a indexed stacked bar series elements and add values to it
                     IndexedStackedBarSeriesElement seriesElement1 = new IndexedStackedBarSeriesElement("Website A");
                     seriesElement1.Values.Add(new IndexedStackedBarValue(5, 0));
                     seriesElement1.Values.Add(new IndexedStackedBarValue(7, 1));
                     seriesElement1.Values.Add(new IndexedStackedBarValue(9, 2));
                     seriesElement1.Values.Add(new IndexedStackedBarValue(6, 3));
                     IndexedStackedBarSeriesElement seriesElement2 = new IndexedStackedBarSeriesElement("Website B");
                     seriesElement2.Values.Add(new IndexedStackedBarValue(4, 0));
                     seriesElement2.Values.Add(new IndexedStackedBarValue(2, 1));
                     seriesElement2.Values.Add(new IndexedStackedBarValue(5, 2));
                     seriesElement2.Values.Add(new IndexedStackedBarValue(8, 3));
                     IndexedStackedBarSeriesElement seriesElement3 = new IndexedStackedBarSeriesElement("Website C");
                     seriesElement3.Values.Add(new IndexedStackedBarValue(2, 0));
                     seriesElement3.Values.Add(new IndexedStackedBarValue(4, 1));
                     seriesElement3.Values.Add(new IndexedStackedBarValue(6, 2));
                     seriesElement3.Values.Add(new IndexedStackedBarValue(8, 3));
            
                     // Create a indexed stacked bar series  and add indexed stacked bar series elements to it
                     IndexedStackedBarSeries stackedBarSeries1 = new IndexedStackedBarSeries(xAxis, yAxis);
                     stackedBarSeries1.Add(seriesElement1);
                     stackedBarSeries1.Add(seriesElement2);
                     stackedBarSeries1.Add(seriesElement3);
            
                     // Add indexed stacked bar series to the plot area
                     plotArea.Series.Add(stackedBarSeries1);
                    
                     // Create a title and add it to the Xaxis
                     Title lTitle = new Title("Visitors (in millions)");
                     stackedBarSeries1.XAxis.Titles.Add(lTitle);
            
                     // Add indexed y AxisLabels to the YAxis
                     stackedBarSeries1.YAxis.Labels.Add(new IndexedYAxisLabel("Q1", 0));
                     stackedBarSeries1.YAxis.Labels.Add(new IndexedYAxisLabel("Q2", 1));
                     stackedBarSeries1.YAxis.Labels.Add(new IndexedYAxisLabel("Q3", 2));
                     stackedBarSeries1.YAxis.Labels.Add(new IndexedYAxisLabel("Q4", 3));
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
                     document.Pages.Add(page);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf"); 
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedBarValue.#ctor(System.Single,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedBarValue"/> class.
            </summary>
            <param name="value1">The float indicating value of indexed stacked bar value.</param>
            <param name="position">The integer indicating position of the indexed stacked bar value.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedBarValue.Position">
            <summary>
            Gets the position of the IndexedStackedBarValue.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedBarValueList">
            <summary>
            This class represents the IndexedStackedBarValueList.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedBarValueList.Add(System.Single)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.StackedBarValue"/> object to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedBarValueList"/> object.
            </summary>
            <param name="value1">Value of stacked bar value.</param>
            <returns> A <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.StackedBarValue"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedBarValueList.Add(System.Single[])">
            <summary>
            Adds an array of <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.StackedBarValue"/> objects to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedBarValueList"/> object.
            </summary>
            <param name="value1">Value of the stacked bar values.</param>
            <returns>Array of <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.StackedBarValue"/> objects.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedBarValueList.Add(System.Single,System.Int32)">
            <summary>
            Adds an <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedBarValue"/> object to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedBarValueList"/> object.
            </summary>
            <param name="value1">Value of the indexed stacked bar value.</param>
            <param name="position">Position of the indexed stacked bar value.</param>
            <returns> A <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedBarValue"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedBarValueList.Add(ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedBarValue)">
            <summary>
            Adds an <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedBarValue"/> object to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedBarValueList"/> object.
            </summary>
            <param name="indexedStackedBarValue"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedBarValue"/> to be added.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedColumnValue">
             <summary>
             Represents the IndexedStackedColumnValue. 
             </summary>
             <example>The following example creates indexed stacked column series and adds values to it.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Values
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 230)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a indexed stacked column series element and add values to it
                     Dim MySeriesElement1 As IndexedStackedColumnSeriesElement = New IndexedStackedColumnSeriesElement("Website A")
                     MySeriesElement1.Values.Add(New IndexedStackedColumnValue(5, 0))
                     MySeriesElement1.Values.Add(New IndexedStackedColumnValue(7, 1))
                     MySeriesElement1.Values.Add(New IndexedStackedColumnValue(9, 2))
                     MySeriesElement1.Values.Add(New IndexedStackedColumnValue(6, 3))
                     Dim MySeriesElement2 As IndexedStackedColumnSeriesElement = New IndexedStackedColumnSeriesElement("Website B")
                     MySeriesElement2.Values.Add(New IndexedStackedColumnValue(4, 0))
                     MySeriesElement2.Values.Add(New IndexedStackedColumnValue(2, 1))
                     MySeriesElement2.Values.Add(New IndexedStackedColumnValue(5, 2))
                     MySeriesElement2.Values.Add(New IndexedStackedColumnValue(8, 3))
                     Dim MySeriesElement3 As IndexedStackedColumnSeriesElement = New IndexedStackedColumnSeriesElement("Website C")
                     MySeriesElement3.Values.Add(New IndexedStackedColumnValue(2, 0))
                     MySeriesElement3.Values.Add(New IndexedStackedColumnValue(4, 1))
                     MySeriesElement3.Values.Add(New IndexedStackedColumnValue(6, 2))
                     MySeriesElement3.Values.Add(New IndexedStackedColumnValue(8, 3))
            
                     ' Create a indexed stacked column series and add indexed stacked column series elements to it
                     Dim MyStackedColumnSeries1 As IndexedStackedColumnSeries = New IndexedStackedColumnSeries()
                     MyStackedColumnSeries1.Add(MySeriesElement1)
                     MyStackedColumnSeries1.Add(MySeriesElement2)
                     MyStackedColumnSeries1.Add(MySeriesElement3)
            
                     ' Add indexed stacked column series to the plot area
                     MyPlotArea.Series.Add(MyStackedColumnSeries1)
            
                     ' Create a title and add it to the yaxis
                     Dim lTitle As Title = New Title("Visitors (in millions)")
                     MyStackedColumnSeries1.YAxis.Titles.Add(lTitle)
            
                     ' Add Indexed x AxisLabels to the XAxis
                     MyStackedColumnSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q1", 0))
                     MyStackedColumnSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q2", 1))
                     MyStackedColumnSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q3", 2))
                     MyStackedColumnSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q4", 3))
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Values;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 230);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a indexed stacked column series element and add values to it
                     IndexedStackedColumnSeriesElement seriesElement1 = new IndexedStackedColumnSeriesElement("Website A");
                     seriesElement1.Values.Add(new IndexedStackedColumnValue(5, 0));
                     seriesElement1.Values.Add(new IndexedStackedColumnValue(7, 1));
                     seriesElement1.Values.Add(new IndexedStackedColumnValue(9, 2));
                     seriesElement1.Values.Add(new IndexedStackedColumnValue(6, 3));
                     IndexedStackedColumnSeriesElement seriesElement2 = new IndexedStackedColumnSeriesElement("Website B");
                     seriesElement2.Values.Add(new IndexedStackedColumnValue(4, 0));
                     seriesElement2.Values.Add(new IndexedStackedColumnValue(2, 1));
                     seriesElement2.Values.Add(new IndexedStackedColumnValue(5, 2));
                     seriesElement2.Values.Add(new IndexedStackedColumnValue(8, 3));
                     IndexedStackedColumnSeriesElement seriesElement3 = new IndexedStackedColumnSeriesElement("Website C");
                     seriesElement3.Values.Add(new IndexedStackedColumnValue(2, 0));
                     seriesElement3.Values.Add(new IndexedStackedColumnValue(4, 1));
                     seriesElement3.Values.Add(new IndexedStackedColumnValue(6, 2));
                     seriesElement3.Values.Add(new IndexedStackedColumnValue(8, 3));
            
                     // Create a indexed stacked column series and add indexed stacked column series elements to it
                     IndexedStackedColumnSeries stackedColumnSeries1 = new IndexedStackedColumnSeries();
                     stackedColumnSeries1.Add(seriesElement1);
                     stackedColumnSeries1.Add(seriesElement2);
                     stackedColumnSeries1.Add(seriesElement3);
            
                     // Add indexed stacked column series to the plot area
                     plotArea.Series.Add(stackedColumnSeries1);
                    
                     // Create a title and add it to the yaxis
                     Title lTitle = new Title("Visitors (in millions)");
                     stackedColumnSeries1.YAxis.Titles.Add(lTitle);
            
                     // Add indexed x AxisLabels to the XAxis
                     stackedColumnSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q1", 0));
                     stackedColumnSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q2", 1));
                     stackedColumnSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q3", 2));
                     stackedColumnSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q4", 3));
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
             
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedColumnValue.#ctor(System.Single,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedColumnValue"/> class. 
            </summary>
            <param name="value1">The float indicating value of indexed stacked column value. </param>
            <param name="position">The integer indicating position of the indexed stacked column value. </param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedColumnValue.Position">
            <summary>
            Gets the position of the IndexedStackedColumnValue. 
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedColumnValueList">
            <summary>
            Represents the IndexedStackedColumnValueList. 
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedColumnValueList.Add(System.Single)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.StackedColumnValue"/> object to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedColumnValueList"/> object.
            </summary>
            <param name="value1">Value of the stacked column value. </param>
            <returns> A <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.StackedColumnValue"/> object. </returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedColumnValueList.Add(System.Single[])">
            <summary>
            Adds an array of <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.StackedColumnValue"/> objects to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedColumnValueList"/> object.
            </summary>
            <param name="value1">Value of stacked column values. </param>
            <returns> Array of <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.StackedColumnValue"/> objects. </returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedColumnValueList.Add(System.Single,System.Int32)">
            <summary>
            Adds an <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedColumnValue"/> object to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedColumnValueList"/> object.
            </summary>
            <param name="value1">Value of the indexed stacked column value. </param>
            <param name="position">Position of the indexed stacked column value. </param>
            <returns> A <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedColumnValue"/> object. </returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedColumnValueList.Add(ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedColumnValue)">
            <summary>
            Adds an <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedColumnValue"/> object to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedColumnValueList"/> object.
            </summary>
            <param name="indexedStackedColumnValue"><see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedColumnValue"/> object to be added. </param>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedLineValue">
             <summary>
             Represents an IndexedStackedLineValue.
             </summary>
             <example>The following example creates a inedexed stacked line chart and adds value to it.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
             Imports ceTe.DynamicPDF.PageElements.Charting.Values
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 230)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a indexed stacked line series element and add values to it
                     Dim MySeriesElement1 As IndexedStackedLineSeriesElement = New IndexedStackedLineSeriesElement("Website A")
                     MySeriesElement1.Values.Add(New IndexedStackedLineValue(5, 0))
                     MySeriesElement1.Values.Add(New IndexedStackedLineValue(7, 1))
                     MySeriesElement1.Values.Add(New IndexedStackedLineValue(9, 2))
                     MySeriesElement1.Values.Add(New IndexedStackedLineValue(6, 3))
                     Dim MySeriesElement2 As IndexedStackedLineSeriesElement = New IndexedStackedLineSeriesElement("Website B")
                     MySeriesElement2.Values.Add(New IndexedStackedLineValue(4, 0))
                     MySeriesElement2.Values.Add(New IndexedStackedLineValue(2, 1))
                     MySeriesElement2.Values.Add(New IndexedStackedLineValue(5, 2))
                     MySeriesElement2.Values.Add(New IndexedStackedLineValue(8, 3))
                     Dim MySeriesElement3 As IndexedStackedLineSeriesElement = New IndexedStackedLineSeriesElement("Website C")
                     MySeriesElement3.Values.Add(New IndexedStackedLineValue(2, 0))
                     MySeriesElement3.Values.Add(New IndexedStackedLineValue(4, 1))
                     MySeriesElement3.Values.Add(New IndexedStackedLineValue(6, 2))
                     MySeriesElement3.Values.Add(New IndexedStackedLineValue(9, 3))
            
                     ' Create a indexed stacked line series and add indexed stacked line series elements to it
                     Dim MyStackedLineSeries1 As IndexedStackedLineSeries = New IndexedStackedLineSeries()
                     MyStackedLineSeries1.Add(MySeriesElement1)
                     MyStackedLineSeries1.Add(MySeriesElement2)
                     MyStackedLineSeries1.Add(MySeriesElement3)
            
                     ' Add indexed stacked line series to the plot area
                     MyPlotArea.Series.Add(MyStackedLineSeries1)
            
                     ' Create a title and add it to the yaxis
                     Dim MyTitle3 As Title = New Title("Visitors (in millions)")
                     MyStackedLineSeries1.YAxis.Titles.Add(MyTitle3)
            
                     ' Add Indexed x AxisLabels to the XAxis
                     MyStackedLineSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q1", 0))
                     MyStackedLineSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q2", 1))
                     MyStackedLineSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q3", 2))
                     MyStackedLineSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q4", 3))
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             using ceTe.DynamicPDF.PageElements.Charting.Values;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 230);
             
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a indexed stacked line series element and add values to it
                     IndexedStackedLineSeriesElement seriesElement1 = new IndexedStackedLineSeriesElement("Website A");
                     seriesElement1.Values.Add(new IndexedStackedLineValue(5, 0));
                     seriesElement1.Values.Add(new IndexedStackedLineValue(7, 1));
                     seriesElement1.Values.Add(new IndexedStackedLineValue(9, 2));
                     seriesElement1.Values.Add(new IndexedStackedLineValue(6, 3));
                     IndexedStackedLineSeriesElement seriesElement2 = new IndexedStackedLineSeriesElement("Website B");
                     seriesElement2.Values.Add(new IndexedStackedLineValue(4, 0));
                     seriesElement2.Values.Add(new IndexedStackedLineValue(2, 1));
                     seriesElement2.Values.Add(new IndexedStackedLineValue(5, 2));
                     seriesElement2.Values.Add(new IndexedStackedLineValue(8, 3));
                     IndexedStackedLineSeriesElement seriesElement3 = new IndexedStackedLineSeriesElement("Website C");
                     seriesElement3.Values.Add(new IndexedStackedLineValue(2, 0));
                     seriesElement3.Values.Add(new IndexedStackedLineValue(4, 1));
                     seriesElement3.Values.Add(new IndexedStackedLineValue(6, 2));
                     seriesElement3.Values.Add(new IndexedStackedLineValue(9, 3));
            
                     // Create a indexed stacked line series and add indexed stacked line series elements to it
                     IndexedStackedLineSeries stackedLineSeries1 = new IndexedStackedLineSeries();
                     stackedLineSeries1.Add(seriesElement1);
                     stackedLineSeries1.Add(seriesElement2);
                     stackedLineSeries1.Add(seriesElement3);
            
                     // Add indexed stacked line series to the plot area
                     plotArea.Series.Add(stackedLineSeries1);
            
                     // Create a title and add it to the yaxis
                     Title title3 = new Title("Visitors (in millions)");
                     stackedLineSeries1.YAxis.Titles.Add(title3);
            
                     // Add Indexed x AxisLabels to the XAxis
                     stackedLineSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q1", 0));
                     stackedLineSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q2", 1));
                     stackedLineSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q3", 2));
                     stackedLineSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q4", 3));
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedLineValue.#ctor(System.Single,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedLineValue"/> object.
            </summary>
            <param name="value1">The Value of indexed stacked line value.</param>
            <param name="position">The position of the indexed stacked line value.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedLineValue.Position">
            <summary>
            Gets the position of the IndexedStackedLineValue.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedLineValueList">
            <summary>
            Represents a list of the IndexedStackedLineValues.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedLineValueList.Add(ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedLineValue)">
            <summary>
            Adds an <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedLineValue"/> object to the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedLineValueList"/> object.
            </summary>
            <param name="lineValue">Value of the indexed Stacked Line Value.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedLineValueList.Add(System.Single)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.StackedLineValue"/> object to the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedLineValueList"/> object.
            </summary>
            <param name="value1">Value of the stacked Line Value.</param>
            <returns> A <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.StackedLineValue"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedLineValueList.Add(System.Single[])">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.StackedLineValue"/> object to the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedLineValueList"/> object.
            </summary>
            <param name="value1">values of the stacked line values.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.StackedLineValue"/> object array. </returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedLineValueList.Add(System.Single,System.Int32)">
            <summary>
            Adds an <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedLineValue"/> object to the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.IndexedStackedLineValueList"/> object.
            </summary>
            <param name="value1">Value of the indexed Stacked Line Value.</param>
            <param name="position">Position of the indexed Stacked Line Value.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.StackedLineValue"/> object.</returns>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.XYScatterValue">
             <summary>
             Represents an XYScatterValue.
             </summary>
             <example>The following example creates a XYScatterSeries chart and adds XYSCatterValues to it.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Values
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
             
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 450, 230)
            
                     ' Get the default plot Area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create a Header title and add it to the chart
                     Dim MyTitle1 As Title = New Title("Player Height and Weight")
                     MyChart.HeaderTitles.Add(MyTitle1)
            
                     ' Create xyScatter series and add values to it
                     Dim MyXyScatterSeries1 As XYScatterSeries = New XYScatterSeries("Team A")
                     MyXyScatterSeries1.Values.Add(New XYScatterValue(112, 55))
                     MyXyScatterSeries1.Values.Add(New XYScatterValue(125, 60))
                     MyXyScatterSeries1.Values.Add(New XYScatterValue(138, 68))
                     MyXyScatterSeries1.Values.Add(New XYScatterValue(150, 73))
                     MyXyScatterSeries1.Values.Add(New XYScatterValue(172, 82))
                     Dim MyXyScatterSeries2 As XYScatterSeries = New XYScatterSeries("Team B")
                     MyXyScatterSeries2.Values.Add(New XYScatterValue(110, 54))
                     MyXyScatterSeries2.Values.Add(New XYScatterValue(128, 62))
                     MyXyScatterSeries2.Values.Add(New XYScatterValue(140, 70))
                     MyXyScatterSeries2.Values.Add(New XYScatterValue(155, 75))
                     MyXyScatterSeries2.Values.Add(New XYScatterValue(170, 80))
            
                     ' Add xyScatter series to the plot Area
                     MyPlotArea.Series.Add(MyXyScatterSeries1)
                     MyPlotArea.Series.Add(MyXyScatterSeries2)
            
                     ' Create axis titles and add it to the axis
                     Dim MyTitle2 As Title = New Title("Height (Inches)")
                     Dim MyTitle3 As Title = New Title("Weight (Pounds)")
                     MyXyScatterSeries1.YAxis.Titles.Add(MyTitle2)
                     MyXyScatterSeries1.XAxis.Titles.Add(MyTitle3)
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Values;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 450, 230);
            
                     // Get the default plot Area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
             
                     // Create a Header title and add it to the chart
                     Title tTitle = new Title("Player Height and Weight");
                     chart.HeaderTitles.Add(tTitle);
             
                     // Create xyScatter series and add values to it
                     XYScatterSeries xyScatterSeries1 = new XYScatterSeries("Team A");
                     xyScatterSeries1.Values.Add(new XYScatterValue(112, 55));
                     xyScatterSeries1.Values.Add(new XYScatterValue(125, 60));
                     xyScatterSeries1.Values.Add(new XYScatterValue(138, 68));
                     xyScatterSeries1.Values.Add(new XYScatterValue(150, 73));
                     xyScatterSeries1.Values.Add(new XYScatterValue(172, 82));
                     XYScatterSeries xyScatterSeries2 = new XYScatterSeries("Team B");
                     xyScatterSeries2.Values.Add(new XYScatterValue(110, 54));
                     xyScatterSeries2.Values.Add(new XYScatterValue(128, 62));
                     xyScatterSeries2.Values.Add(new XYScatterValue(140, 70));
                     xyScatterSeries2.Values.Add(new XYScatterValue(155, 75));
                     xyScatterSeries2.Values.Add(new XYScatterValue(170, 80));
            
                     // Add xyScatter series to the plot Area
                     plotArea.Series.Add(xyScatterSeries1);
                     plotArea.Series.Add(xyScatterSeries2);
            
                     // Create axis titles and add it to the axis
                     Title title1 = new Title("Height (Inches)");
                     Title title2 = new Title("Weight (Pounds)");
                     xyScatterSeries1.YAxis.Titles.Add(title1);
                     xyScatterSeries1.XAxis.Titles.Add(title2);
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf"); 
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.XYScatterValue.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.XYScatterValue"/> object. 
            </summary>
            <param name="yValue">The xAxis value of XYScatter value. </param>
            <param name="xValue">The yAxis value of the XYScatter value. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.XYScatterValue.#ctor(System.Single,System.Single,ceTe.DynamicPDF.PageElements.Charting.XYScatterDataLabel)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.XYScatterValue"/> object. 
            </summary>
            <param name="yValue">The yAxis value of XYScatter value. </param>
            <param name="xValue">The yAxis value of the XYScatter value. </param>
            <param name="dataLabel">The dataLabel of the XYScatter value.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.XYScatterValue.DataLabel">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.XYScatterDataLabel"/>.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.XYScatterValue.ScatterYValue">
            <summary>
            Gets the YValue of the XYScatterValue. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.XYScatterValue.ScatterXValue">
            <summary>
            Gets the XValue of the XYScatterValue. 
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Values.XYScatterValueList">
            <summary>
            Represents a list of the XYScatterValues.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.XYScatterValueList.Add(System.Single,System.Single)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.XYScatterValue"/> object to the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.XYScatterValueList"/> object.
            </summary>
            <param name="val">Value of the XYScatter value. </param>
            <param name="position">Position of the XYScatter value. </param>
            <returns> A <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.XYScatterValue"/> object. </returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Values.XYScatterValueList.Add(ceTe.DynamicPDF.PageElements.Charting.Values.XYScatterValue)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.XYScatterValue"/> object to the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Values.XYScatterValueList"/> object.
            </summary>
            <param name="val">The XYScatter value to be added to the XYScatter value list. </param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.XYScatterValueList.Count">
            <summary>
            Gets the total number of XYScatterValues in the XYScatterValueList. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Values.XYScatterValueList.Item(System.Int32)">
            <summary>
            Gets the XYScatterValue from the XYScatterValueList based on the given index. 
            </summary>
            <param name="index">Index of the XYScatter value. </param>
            <returns>XYScatterValue in the sepecified index. </returns>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.BarColumnPercentageDataLabel">
            <summary>
            Represents the Data label position.
            </summary>
            <licensing>
            This enumeration is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.PercentageDataLabel">
             <summary>
             This class represents the PercentageDataLabel.
             </summary>
             <example>The following example creates a date time 100percent stacked bar series chart and creates a percentage 
             data label.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create percentageXAxis and add labels to it
                     Dim xAxis As PercentageXAxis = New PercentageXAxis()
                     xAxis.Labels.Add(New PercentageXAxisLabel("0%", 0))
                     xAxis.Labels.Add(New PercentageXAxisLabel("20%", 20))
                     xAxis.Labels.Add(New PercentageXAxisLabel("40%", 40))
                     xAxis.Labels.Add(New PercentageXAxisLabel("60%", 60))
                     xAxis.Labels.Add(New PercentageXAxisLabel("80%", 80))
                     xAxis.Labels.Add(New PercentageXAxisLabel("100%", 100))
            
                     ' Create a date time yAxis
                     Dim yAxis As DateTimeYAxis = New DateTimeYAxis()
            
                     ' Create  date time 100percent stacked bar series elements and add values to it
                     Dim MyBarSeriesElement1 As DateTime100PercentStackedBarSeriesElement = New DateTime100PercentStackedBarSeriesElement("Website A")
                     MyBarSeriesElement1.Values.Add(5, New DateTime(2007, 1, 1))
                     MyBarSeriesElement1.Values.Add(7, New DateTime(2007, 2, 1))
                     MyBarSeriesElement1.Values.Add(9, New DateTime(2007, 3, 1))
                     MyBarSeriesElement1.Values.Add(6, New DateTime(2007, 4, 1))
                     Dim MyBarSeriesElement2 As DateTime100PercentStackedBarSeriesElement = New DateTime100PercentStackedBarSeriesElement("Website B")
                     MyBarSeriesElement2.Values.Add(4, New DateTime(2007, 1, 1))
                     MyBarSeriesElement2.Values.Add(2, New DateTime(2007, 2, 1))
                     MyBarSeriesElement2.Values.Add(5, New DateTime(2007, 3, 1))
                     MyBarSeriesElement2.Values.Add(8, New DateTime(2007, 4, 1))
                     Dim MyBarSeriesElement3 As DateTime100PercentStackedBarSeriesElement = New DateTime100PercentStackedBarSeriesElement("Website C")
                     MyBarSeriesElement3.Values.Add(2, New DateTime(2007, 1, 1))
                     MyBarSeriesElement3.Values.Add(4, New DateTime(2007, 2, 1))
                     MyBarSeriesElement3.Values.Add(6, New DateTime(2007, 3, 1))
                     MyBarSeriesElement3.Values.Add(9, New DateTime(2007, 4, 1))
            
                     ' Create a date time 100percent stacked bar series and add date time 100percent stacked bar series elements to it
                     Dim MyStackedBarSeries1 As DateTime100PercentStackedBarSeries = New DateTime100PercentStackedBarSeries(xAxis, yAxis)
                     MyStackedBarSeries1.Add(MyBarSeriesElement1)
                     MyStackedBarSeries1.Add(MyBarSeriesElement2)
                     MyStackedBarSeries1.Add(MyBarSeriesElement3)
            
                     ' Create a percentage data label
                     Dim MyPercentageDataLabel As PercentageDataLabel = New PercentageDataLabel(True)
                     MyBarSeriesElement1.DataLabel = MyPercentageDataLabel
                     MyBarSeriesElement2.DataLabel = MyPercentageDataLabel
                     MyBarSeriesElement3.DataLabel = MyPercentageDataLabel
            
                     ' Add stacked bar series to the plot area
                     MyPlotArea.Series.Add(MyStackedBarSeries1)
            
                     ' Set label  format for the Yaxislabel
                     MyStackedBarSeries1.YAxis.LabelFormat = "MMM"
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     //Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a percentageXAxis and add labels to it
                     PercentageXAxis xAxis = new PercentageXAxis();
                     xAxis.Labels.Add(new PercentageXAxisLabel("0%", 0));
                     xAxis.Labels.Add(new PercentageXAxisLabel("20%", 20));
                     xAxis.Labels.Add(new PercentageXAxisLabel("40%", 40));
                     xAxis.Labels.Add(new PercentageXAxisLabel("60%", 60));
                     xAxis.Labels.Add(new PercentageXAxisLabel("80%", 80));
                     xAxis.Labels.Add(new PercentageXAxisLabel("100%", 100));
            
                     // Create a date time yAxis
                     DateTimeYAxis yAxis = new DateTimeYAxis();
            
                     // Create  date time 100percent stacked bar series elements and add values to it
                     DateTime100PercentStackedBarSeriesElement barSeriesElement1 = new DateTime100PercentStackedBarSeriesElement("Website A");
                     barSeriesElement1.Values.Add(5, new DateTime(2007, 1, 1));
                     barSeriesElement1.Values.Add(7, new DateTime(2007, 2, 1));
                     barSeriesElement1.Values.Add(9, new DateTime(2007, 3, 1));
                     barSeriesElement1.Values.Add(6, new DateTime(2007, 4, 1));
                     DateTime100PercentStackedBarSeriesElement barSeriesElement2 = new DateTime100PercentStackedBarSeriesElement("Website B");
                     barSeriesElement2.Values.Add(4, new DateTime(2007, 1, 1));
                     barSeriesElement2.Values.Add(2, new DateTime(2007, 2, 1));
                     barSeriesElement2.Values.Add(5, new DateTime(2007, 3, 1));
                     barSeriesElement2.Values.Add(8, new DateTime(2007, 4, 1));
                     DateTime100PercentStackedBarSeriesElement barSeriesElement3 = new DateTime100PercentStackedBarSeriesElement("Website C");
                     barSeriesElement3.Values.Add(2, new DateTime(2007, 1, 1));
                     barSeriesElement3.Values.Add(4, new DateTime(2007, 2, 1));
                     barSeriesElement3.Values.Add(6, new DateTime(2007, 3, 1));
                     barSeriesElement3.Values.Add(9, new DateTime(2007, 4, 1));
            
                     // Create a date time 100percent stacked bar series and add date time 100percent stacked bar series elements to it
                     DateTime100PercentStackedBarSeries stackedBarSeries1 = new DateTime100PercentStackedBarSeries(xAxis, yAxis);
                     stackedBarSeries1.Add(barSeriesElement1);
                     stackedBarSeries1.Add(barSeriesElement2);
                     stackedBarSeries1.Add(barSeriesElement3);
            
                     // Create a percentage data label
                     PercentageDataLabel percentageDataLabel = new PercentageDataLabel(true);
                     barSeriesElement1.DataLabel = percentageDataLabel;
                     barSeriesElement2.DataLabel = percentageDataLabel;
                     barSeriesElement3.DataLabel = percentageDataLabel;
            
                     // Add stacked bar series to the plot area
                     plotArea.Series.Add(stackedBarSeries1);
            
                     // Set label  format for the Yaxislabel
                     stackedBarSeries1.YAxis.LabelFormat = "MMM";
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:/MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>	
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.XYDataLabel">
            <summary>
            The base class from which data labels are derived.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.XYDataLabel.Font">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.XYDataLabel.Font"/> object to use for the font of the XYDataLabel.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.XYDataLabel.FontSize">
            <summary>
            Gets or sets the FontSize of the XYDataLabel. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.XYDataLabel.Width">
            <summary>
            Gets or sets the width of the data label. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.XYDataLabel.Align">
            <summary>
            Gets or sets the alignment of the data label. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.XYDataLabel.Position">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.DataLabelPosition"/> object to use for the positoin of the data label. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.XYDataLabel.Padding">
            <summary>
            Gets or sets the space between the x and y intersection point and data label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.XYDataLabel.Angle">
            <summary>
            Gets or sets the angle of the data label. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.XYDataLabel.WrapText">
            <summary>
            Gets or sets the text wrapping of the data label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.XYDataLabel.Color">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.XYDataLabel.Color"/> object to use for the color of the XYDataLabel. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.XYDataLabel.Suffix">
            <summary>
            Gets or sets the suffix of the XYDataLabel. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.XYDataLabel.Prefix">
            <summary>
            Gets or sets the prefix of the XYDataLabel. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.XYDataLabel.Seperator">
            <summary>
            Gets or sets the separator of the XYDataLabel.  
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.PercentageDataLabel.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.PercentageDataLabel"/> class. 
            </summary>
            <param name="showValue">Visible status of the series value</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.PercentageDataLabel.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.PercentageDataLabel"/> class. 
            </summary>
            <param name="showValue">Visible status of the series value.</param>
            <param name="showSeries">Visible status of the series name.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.PercentageDataLabel.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.PercentageDataLabel"/> class. 
            </summary>
            <param name="showValue">Visible status of the series value.</param>
            <param name="showPosition">Visible status for the position of the series value.</param>
            <param name="showSeries">Visible status of the series name.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.PercentageDataLabel.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.PercentageDataLabel"/> class. 
            </summary>
            <param name="showValue">Visible status of the series value.</param>
            <param name="showPercentage">Visible status of the series value in percentage.</param>
            <param name="showPosition">Visible status for the position of the series value.</param>
            <param name="showSeries">Visible status of the series name.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.PercentageDataLabel.#ctor(ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.Color,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.PercentageDataLabel"/> class. 
            </summary>
            <param name="font"><see cref="T:ceTe.DynamicPDF.Font"/>of the percentage data label.</param>
            <param name="fontSize">Size of the percentage data label.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the percentage data label.</param>
            <param name="showValue">Visible status of the series value.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.PercentageDataLabel.ShowValue">
            <summary>
            Gets or sets visible status of the series value. By default it is false. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.PercentageDataLabel.ShowPercentage">
            <summary>
            Gets or sets visible status of the series value as a percentage. By default it is false.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.PercentageDataLabel.ShowPosition">
            <summary>
            Gets or sets visible status for the position of the series value. By default it is false.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.PercentageDataLabel.ShowSeries">
            <summary>
            Gets or sets visible status of the series name. By default it is false.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.BarColumnPercentageDataLabel.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.BarColumnPercentageDataLabel"/> class. 
            </summary>
            <param name="showValue">Visible status of the series value</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.BarColumnPercentageDataLabel.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.BarColumnPercentageDataLabel"/> class. 
            </summary>
            <param name="showValue">Visible status of the series value.</param>
            <param name="showSeries">Visible status of the series name.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.BarColumnPercentageDataLabel.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.BarColumnPercentageDataLabel"/> class. 
            </summary>
            <param name="showValue">Visible status of the series value.</param>
            <param name="showPosition">Visible status for the position of the series value.</param>
            <param name="showSeries">Visible status of the series name.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.BarColumnPercentageDataLabel.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.BarColumnPercentageDataLabel"/> class. 
            </summary>
            <param name="showValue">Visible status of the series value.</param>
            <param name="showPercentage">Visible status of the series value in percentage.</param>
            <param name="showPosition">Visible status for the position of the series value.</param>
            <param name="showSeries">Visible status of the series name.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.BarColumnPercentageDataLabel.#ctor(ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.Color,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.BarColumnPercentageDataLabel"/> class. 
            </summary>
            <param name="font"><see cref="T:ceTe.DynamicPDF.Font"/>of the percentage data label.</param>
            <param name="fontSize">Size of the percentage data label.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/> of the percentage data label.</param>
            <param name="showValue">Visible status of the series value.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.BarColumnPercentageDataLabel.Location">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.DataLabelLocation"/> object to use for the location of the data label. 
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.BarColumnValuePositionDataLabel">
            <summary>
            Represents the Data label position.
            </summary>
            <licensing>
            This enumeration is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.ValuePositionDataLabel">
             <summary>
             This class represents the ValuePositionDataLabel.
             </summary>
             <example>The following example creates a indexed column series chart and creates a value position data label
             to it.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 230)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a indexed column series and add values to it
                     Dim MyColumnSeries1 As IndexedColumnSeries = New IndexedColumnSeries("Website A")
                     MyColumnSeries1.Values.Add(New Single() {5, 7, 9, 6})
                     Dim MyColumnSeries2 As IndexedColumnSeries = New IndexedColumnSeries("Website B")
                     MyColumnSeries2.Values.Add(New Single() {4, 2, 5, 8})
                     Dim MyColumnSeries3 As IndexedColumnSeries = New IndexedColumnSeries("Website C")
                     MyColumnSeries3.Values.Add(New Single() {2, 4, 6, 9})
            
                     ' Create a value position data label
                     Dim MyValuePositionDataLabel As ValuePositionDataLabel = New ValuePositionDataLabel(True)
                     MyColumnSeries1.DataLabel = MyValuePositionDataLabel
                     MyColumnSeries2.DataLabel = MyValuePositionDataLabel
                     MyColumnSeries3.DataLabel = MyValuePositionDataLabel
            
                     ' Add indexed column series to the plot area
                     MyPlotArea.Series.Add(MyColumnSeries1)
                     MyPlotArea.Series.Add(MyColumnSeries2)
                     MyPlotArea.Series.Add(MyColumnSeries3)
            
                     ' Create a title and add it to the yaxis
                     Dim MyTitle3 As Title = New Title("Visitors (in millions)")
                     MyColumnSeries1.YAxis.Titles.Add(MyTitle3)
            
                     ' Add AxisLabels to the XAxis
                     MyColumnSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q1", 0))
                     MyColumnSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q2", 1))
                     MyColumnSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q3", 2))
                     MyColumnSeries1.XAxis.Labels.Add(New IndexedXAxisLabel("Q4", 3))
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 230);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a indexed column series and add values to it
                     IndexedColumnSeries columnSeries1 = new IndexedColumnSeries("Website A");
                     columnSeries1.Values.Add(new float[] { 5, 7, 9, 6 });
                     IndexedColumnSeries columnSeries2 = new IndexedColumnSeries("Website B");
                     columnSeries2.Values.Add(new float[] { 4, 2, 5, 8 });
                     IndexedColumnSeries columnSeries3 = new IndexedColumnSeries("Website C");
                     columnSeries3.Values.Add(new float[] { 2, 4, 6, 9 });
            
                     // Create a value position data label
                     ValuePositionDataLabel val = new ValuePositionDataLabel(true);
                     columnSeries1.DataLabel = val;
                     columnSeries2.DataLabel = val;
                     columnSeries3.DataLabel = val;
                   
                     // Add indexed column series to the plot area
                     plotArea.Series.Add(columnSeries1);
                     plotArea.Series.Add(columnSeries2);
                     plotArea.Series.Add(columnSeries3);
            
                     // Create a title and add it to the yaxis
                     Title lTitle = new Title("Visitors (in millions)");
                     columnSeries1.YAxis.Titles.Add(lTitle);
            
                     // Add AxisLabels to the XAxis
                     columnSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q1", 0));
                     columnSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q2", 1));
                     columnSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q3", 2));
                     columnSeries1.XAxis.Labels.Add(new IndexedXAxisLabel("Q4", 3));
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>	
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.ValuePositionDataLabel.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.ValuePositionDataLabel"/> class. 
            </summary>
            <param name="showValue">Visible status of the series value.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.ValuePositionDataLabel.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.ValuePositionDataLabel"/> class. 
            </summary>
            <param name="showValue">Visible status of the series value.</param>
            <param name="showSeries">Visible status of the series name.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.ValuePositionDataLabel.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.ValuePositionDataLabel"/> class. 
            </summary>
            <param name="showValue">Visible status of the series value</param>
            <param name="showPosition">Visible status for the position of the series value.</param>
            <param name="showSeries">Visible status of the series name.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.ValuePositionDataLabel.#ctor(ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.Color,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.ValuePositionDataLabel"/> class. 
            </summary>
            <param name="font"><see cref="T:ceTe.DynamicPDF.Font"/>of the value position data label.</param>
            <param name="fontSize">Size of the value position data label.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/>of the value position data label.</param>
            <param name="showValue">Visible status of the series value.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.ValuePositionDataLabel.ShowValue">
            <summary>
            Gets or sets visible status of the SeriesValue. By default it is false.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.ValuePositionDataLabel.ShowPosition">
            <summary>
            Gets or sets visible status for the position of the SeriesValue. By default it is false. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.ValuePositionDataLabel.ShowSeries">
            <summary>
            Gets or sets visible status of the SeriesName. By default it is false. 
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.BarColumnValuePositionDataLabel.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.BarColumnValuePositionDataLabel"/> class. 
            </summary>
            <param name="showValue">Visible status of the series value.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.BarColumnValuePositionDataLabel.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.BarColumnValuePositionDataLabel"/> class. 
            </summary>
            <param name="showValue">Visible status of the series value.</param>
            <param name="showSeries">Visible status of the series name.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.BarColumnValuePositionDataLabel.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.BarColumnValuePositionDataLabel"/> class. 
            </summary>
            <param name="showValue">Visible status of the series value</param>
            <param name="showPosition">Visible status for the position of the series value.</param>
            <param name="showSeries">Visible status of the series name.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.BarColumnValuePositionDataLabel.#ctor(ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.Color,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.BarColumnValuePositionDataLabel"/> class. 
            </summary>
            <param name="font"><see cref="T:ceTe.DynamicPDF.Font"/>of the value position data label.</param>
            <param name="fontSize">Size of the value position data label.</param>
            <param name="color"><see cref="T:ceTe.DynamicPDF.Color"/>of the value position data label.</param>
            <param name="showValue">Visible status of the series value.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.BarColumnValuePositionDataLabel.Location">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.DataLabelLocation"/> object to use for the location of the data label. 
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Chart">
             <summary>
             Represents a chart page element. 
             </summary>
             <remarks> By default, the AutoLayout property of the chart is set to true.  
             Being set to true indicates that the X, Y, Width and Height properties for all 
             the chart elements are calculated automatically. </remarks>
             <example>The following example creates a chart page element and creates a date time area series chart.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create date time area series and add values to it
                     Dim MyAreaSeries1 As DateTimeAreaSeries = New DateTimeAreaSeries("Website A")
                     MyAreaSeries1.Values.Add(5, New DateTime(2007, 1, 1))
                     MyAreaSeries1.Values.Add(7, New DateTime(2007, 2, 1))
                     MyAreaSeries1.Values.Add(9, New DateTime(2007, 3, 1))
                     MyAreaSeries1.Values.Add(6, New DateTime(2007, 4, 1))
                     Dim MyAreaSeries2 As DateTimeAreaSeries = New DateTimeAreaSeries("Website B")
                     MyAreaSeries2.Values.Add(4, New DateTime(2007, 1, 1))
                     MyAreaSeries2.Values.Add(2, New DateTime(2007, 2, 1))
                     MyAreaSeries2.Values.Add(5, New DateTime(2007, 3, 1))
                     MyAreaSeries2.Values.Add(8, New DateTime(2007, 4, 1))
                     Dim MyAreaSeries3 As DateTimeAreaSeries = New DateTimeAreaSeries("Website C")
                     MyAreaSeries3.Values.Add(2, New DateTime(2007, 1, 1))
                     MyAreaSeries3.Values.Add(4, New DateTime(2007, 2, 1))
                     MyAreaSeries3.Values.Add(6, New DateTime(2007, 3, 1))
                     MyAreaSeries3.Values.Add(9, New DateTime(2007, 4, 1))
            
                     ' Add date time area series to the plot area
                     MyPlotArea.Series.Add(MyAreaSeries1)
                     MyPlotArea.Series.Add(MyAreaSeries2)
                     MyPlotArea.Series.Add(MyAreaSeries3)
            
                     ' Create a title and add it to yaxis
                     Dim MyTitle3 As Title = New Title("Viewers (in millions)")
                     MyAreaSeries1.YAxis.Titles.Add(MyTitle3)
            
                     ' Set label  format for the axislabels
                     MyAreaSeries1.XAxis.LabelFormat = "MMM"
            
                     MyChart.AutoLayout = True
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create date time area series and add values to it
                     DateTimeAreaSeries areaSeries1 = new DateTimeAreaSeries("Website A");
                     areaSeries1.Values.Add(5, new DateTime(2007, 1, 1));
                     areaSeries1.Values.Add(7, new DateTime(2007, 2, 1));
                     areaSeries1.Values.Add(9, new DateTime(2007, 3, 1));
                     areaSeries1.Values.Add(6, new DateTime(2007, 4, 1));
                     DateTimeAreaSeries areaSeries2 = new DateTimeAreaSeries("Website B");
                     areaSeries2.Values.Add(4, new DateTime(2007, 1, 1));
                     areaSeries2.Values.Add(2, new DateTime(2007, 2, 1));
                     areaSeries2.Values.Add(5, new DateTime(2007, 3, 1));
                     areaSeries2.Values.Add(8, new DateTime(2007, 4, 1));
                     DateTimeAreaSeries areaSeries3 = new DateTimeAreaSeries("Website C");
                     areaSeries3.Values.Add(2, new DateTime(2007, 1, 1));
                     areaSeries3.Values.Add(4, new DateTime(2007, 2, 1));
                     areaSeries3.Values.Add(6, new DateTime(2007, 3, 1));
                     areaSeries3.Values.Add(9, new DateTime(2007, 4, 1));
            
                     // Add date time area series to the plot area
                     plotArea.Series.Add(areaSeries1);
                     plotArea.Series.Add(areaSeries2);
                     plotArea.Series.Add(areaSeries3);
            
                     // Create a title and add it to yaxis
                     Title title3 = new Title("Viewers (in millions)");
                     areaSeries1.YAxis.Titles.Add(title3);
             
                     // Set label  format for the axislabels
                     areaSeries1.XAxis.LabelFormat = "MMM";
             
                     chart.AutoLayout = true;
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:/MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>	
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Chart.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Chart"/> class. 
            </summary>
            <param name="x">X coordinate of the chart.</param>
            <param name="y">Y coordinate of the chart.</param>
            <param name="width">Width of the chart.</param>
            <param name="height">Height of the chart.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Chart.#ctor(System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Chart"/> class. 
            </summary>
            <param name="x">X coordinate of the chart.</param>
            <param name="y">Y coordinate of the chart.</param>
            <param name="width">Width of the chart.</param>
            <param name="height">Height of the chart.</param>
            <param name="font"><see cref="P:ceTe.DynamicPDF.PageElements.Charting.Chart.Font"/> for the text in the chart.</param>
            <param name="fontSize">Size for the text in the chart.</param>
            <param name="textColor"><see cref="T:ceTe.DynamicPDF.Color"/> for the text in the chart.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Chart.DrawRotated(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the chart to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object. 
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the chart's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Chart.Layout">
            <summary>
            Arranges all of the elements of the chart automatically.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Chart.X">
            <summary>
            Gets or sets the x coordinate of the chart.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Chart.Y">
            <summary>
            Gets or sets the y coordinate of the chart.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Chart.Width">
            <summary>
            Gets or sets the width of the chart.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Chart.Height">
            <summary>
            Gets or sets the height of the chart. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Chart.PrimaryPlotArea">
            <summary>
            Gets the Default PlotArea of the chart. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Chart.LeftPadding">
            <summary>
            Gets or sets the leftPadding of the chart.	
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Chart.RightPadding">
            <summary>
            Gets or sets the rightPadding of the chart.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Chart.TopPadding">
            <summary>
            Gets or sets the topPadding of the chart.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Chart.BottomPadding">
            <summary>
            Gets or sets the bottomPadding of the chart.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Chart.ChartLegendSpacing">
             <summary>
            Gets or sets the chartLegendSpacing of the chart.
             </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Chart.FooterTitles">
            <summary>
            Gets the footer <see cref="T:ceTe.DynamicPDF.PageElements.Charting.TitleList"/> in the chart.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Chart.HeaderTitles">
            <summary>
            Gets the header <see cref="T:ceTe.DynamicPDF.PageElements.Charting.TitleList"/> in the chart.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Chart.PlotAreas">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.PlotAreaList"/> in the chart.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Chart.Legends">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.LegendList"/> in the chart.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Chart.Font">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.Chart.Font"/> to use for the text in the chart.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Chart.FontSize">
            <summary>
            Gets or sets the font size of the text in the chart.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Chart.TextColor">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.Color"/> to use for the text in the chart.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Chart.BackgroundColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> to use for the background of the chart.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Chart.BorderColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> to use for the border of the chart.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Chart.BorderWidth">
            <summary>
            Gets or sets the border width of the chart.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Chart.AutoLayout">
            <summary>
            Gets or sets whether elements should be arranged automatically on the chart or not.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Chart.BorderStyle">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.LineStyle"/> to use for the border style of the chart.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.DataLabelAlign">
            <summary>
            Specifies alignment of the data label text.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.DataLabelAlign.Left">
            <summary>
            Align left.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.DataLabelAlign.Center">
            <summary>
            Align center.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.DataLabelAlign.Right">
            <summary>
            Align right.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.DataLabelAlign.Justify">
            <summary>
            Align justify.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.DataLabelAlign.Auto">
            <summary>
            Align Auto.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.DataLabelLocation">
            <summary>
            Represents the Bar column charts data label location.
            </summary>
            <licensing>
            This enumeration is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.DataLabelLocation.End">
            <summary>
            Location End of the value.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.DataLabelLocation.Middle">
            <summary>
            Location Middle of the value.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.DataLabelLocation.Base">
            <summary>
            Location Base of the value.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.DataLabelLocation.Default">
            <summary>
            Location Base of the value.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.DataLabelPosition">
            <summary>
            Represents the data label position.
            </summary>
            <licensing>
            This enumeration is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.DataLabelPosition.Left">
            <summary>
            Left Places the data lable in the left side of the x and y intersection point.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.DataLabelPosition.Right">
            <summary>
            Right Places the data lable in the right side of the x and y intersection point.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.DataLabelPosition.Above">
            <summary>
            Above Places the data lable in the top of the x and y intersection point.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.DataLabelPosition.Below">
            <summary>
            Below Places the data lable in the bottom of the x and y intersection point.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.DataLabelPosition.Center">
            <summary>
            Center Places the data lable in the center of the x and y intersection point.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.DataLabelPosition.Auto">
            <summary>
            Center Places the data lable in the center of the x and y intersection point.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.DateTimeType">
            <summary>
            Represents the DateTimeType enumeration.
            </summary>
            <licensing>
            This enumeration is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.DateTimeType.Year">
            <summary>
            Year date-time type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.DateTimeType.Month">
            <summary>
            Month date-time type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.DateTimeType.Day">
            <summary>
            Day date-time type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.DateTimeType.Hour">
            <summary>
            Hour date-time type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.DateTimeType.Minute">
            <summary>
            Minute date-time type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.DateTimeType.Second">
            <summary>
            Second date-time type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.DateTimeType.Undefined">
            <summary>
            Undefined date-time type.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.LayOut">
            <summary>
            Represents the layout.
            </summary>
            <licensing>
            This enumeration is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.LayOut.Horizontal">
            <summary>
            Horizontal layout.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.LayOut.Vertical">
            <summary>
            Vertical layout.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Legend">
             <summary>
             Represents a Legend.
             </summary>
             <remarks> A Chart can have multiple Legends. Each Chart has one default Legend called DefaultLegend.
             If the Chart's Auto Layout property is true, the Legends will occupy 35% of the Chart width</remarks>
             <example>The following example creates a date time area series chart and creates a legend with color property.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a legend to the chart
                     Dim MyLegend1 As Legend = MyChart.Legends.Add(2, 3, 10, 10)
                     MyLegend1.BackgroundColor = RgbColor.Pink
            
                     ' Create date time area series and add values to it
                     Dim MyAreaSeries1 As DateTimeAreaSeries = New DateTimeAreaSeries("Website A")
                     MyAreaSeries1.Values.Add(5, New DateTime(2007, 1, 1))
                     MyAreaSeries1.Values.Add(7, New DateTime(2007, 2, 1))
                     MyAreaSeries1.Values.Add(9, New DateTime(2007, 3, 1))
                     MyAreaSeries1.Values.Add(6, New DateTime(2007, 4, 1))
                     Dim MyAreaSeries2 As DateTimeAreaSeries = New DateTimeAreaSeries("Website B")
                     MyAreaSeries2.Values.Add(4, New DateTime(2007, 1, 1))
                     MyAreaSeries2.Values.Add(2, New DateTime(2007, 2, 1))
                     MyAreaSeries2.Values.Add(5, New DateTime(2007, 3, 1))
                     MyAreaSeries2.Values.Add(8, New DateTime(2007, 4, 1))
                     Dim MyAreaSeries3 As DateTimeAreaSeries = New DateTimeAreaSeries("Website C")
                     MyAreaSeries3.Values.Add(2, New DateTime(2007, 1, 1))
                     MyAreaSeries3.Values.Add(4, New DateTime(2007, 2, 1))
                     MyAreaSeries3.Values.Add(6, New DateTime(2007, 3, 1))
                     MyAreaSeries3.Values.Add(9, New DateTime(2007, 4, 1))
            
                     'Add date time area series to the plot area
                     MyPlotArea.Series.Add(MyAreaSeries1)
                     MyPlotArea.Series.Add(MyAreaSeries2)
                     MyPlotArea.Series.Add(MyAreaSeries3)
            
                     ' Create a title and add it to yaxis
                     Dim MyTitle3 As Title = New Title("Viewers (in millions)")
                     MyAreaSeries1.YAxis.Titles.Add(MyTitle3)
            
                     ' Set label  format for the axislabels
                     MyAreaSeries1.XAxis.LabelFormat = "MMM"
            
                     'Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
             
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a legend to the chart
                     Legend legend1 = chart.Legends.Add(2, 3, 10, 10);
                     legend1.BackgroundColor = RgbColor.Pink;
            
                     // Create date time area series and add values to it
                     DateTimeAreaSeries areaSeries1 = new DateTimeAreaSeries("Website A");
                     areaSeries1.Values.Add(5, new DateTime(2007, 1, 1));
                     areaSeries1.Values.Add(7, new DateTime(2007, 2, 1));
                     areaSeries1.Values.Add(9, new DateTime(2007, 3, 1));
                     areaSeries1.Values.Add(6, new DateTime(2007, 4, 1));
                     DateTimeAreaSeries areaSeries2 = new DateTimeAreaSeries("Website B");
                     areaSeries2.Values.Add(4, new DateTime(2007, 1, 1));
                     areaSeries2.Values.Add(2, new DateTime(2007, 2, 1));
                     areaSeries2.Values.Add(5, new DateTime(2007, 3, 1));
                     areaSeries2.Values.Add(8, new DateTime(2007, 4, 1));
                     DateTimeAreaSeries areaSeries3 = new DateTimeAreaSeries("Website C");
                     areaSeries3.Values.Add(2, new DateTime(2007, 1, 1));
                     areaSeries3.Values.Add(4, new DateTime(2007, 2, 1));
                     areaSeries3.Values.Add(6, new DateTime(2007, 3, 1));
                     areaSeries3.Values.Add(9, new DateTime(2007, 4, 1));
            
                     //Add date time area series to the plot area
                     plotArea.Series.Add(areaSeries1);
                     plotArea.Series.Add(areaSeries2);
                     plotArea.Series.Add(areaSeries3);
            
                     // Create a title and add it to yaxis
                     Title title3 = new Title("Viewers (in millions)");
                     areaSeries1.YAxis.Titles.Add(title3);
            
                     // Set label  format for the axislabels
                     areaSeries1.XAxis.LabelFormat = "MMM";
            
                     //Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:/MyDocument.pdf"); 
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>	
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Legend.Font">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.Legend.Font"/> of the Legend.		
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Legend.Align">
            <summary>
            Gets or sets the legend labels text alignment.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Legend.FontSize">
            <summary>
            Gets or sets the FontSize of the Legend.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Legend.TextColor">
            <summary>
            Gets or sets the TextColor of the Legend.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Legend.BorderColor">
            <summary>
            Gets or sets the BorderColor of the Legend.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Legend.BackgroundColor">
            <summary>
            Gets or sets the BackgroundColor of the Legend.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Legend.LegendLabelList">
            <summary>
            Gets or sets the LegendLabelList from the Legend.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Legend.RequiredWidth">
            <summary>
             Gets the RequiredWidth to draw the Legend.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Legend.TopPadding">
            <summary>
            Gets or sets the TopPadding of the Legend.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Legend.BottomPadding">
            <summary>
             Gets or sets the BottomPadding of the Legend.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Legend.LeftPadding">
            <summary>
            Gets or sets the LeftPadding of the Legend.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Legend.RightPadding">
            <summary>
            Gets or sets the RightPadding of the Legend.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Legend.LabelSpacing">
            <summary>
            Gets or sets the LabelSpacing of the Legend.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Legend.SymbolSpacing">
            <summary>
            Gets or sets the SymbolSpacing of the Legend.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Legend.Visible">
            <summary>
            Gets or sets the visible property of the Legend.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Legend.X">
            <summary>
            Gets or sets the x position of the Legend.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Legend.Y">
            <summary>
            Gets or sets the y position of the Legend.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Legend.BorderWidth">
            <summary>
            Gets or sets the LineWidth of the Legend.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Legend.BorderStyle">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.LineStyle"/> of the Legend.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Legend.Width">
            <summary>
            Gets or sets the width of the Legend.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Legend.Height">
            <summary>
            Gets or sets the height of the Legend.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Legend.RequiredHeight">
            <summary>
            Gets the RequiredHeight to draw the Legend.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.LegendLabel">
            <summary>
            Represents a LegendLabel.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.LegendLabel.Align">
            <summary>
            Gets or sets the legend label alignment.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.LegendLabel.Text">
            <summary>
            Gets or sets the text of the LegendLabel.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.LegendLabel.SymbolWidth">
            <summary>
            Gets or sets the SymbolWidth of the LegendLabel.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.LegendLabel.RequiredWidth">
            <summary>
            Gets the RequiredWidth of the LegendLabel.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.LegendLabel.Visible">
            <summary>
            Gets or sets the visible property of the Legendlabel.
            </summary>         
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.LegendLabel.Font">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.LegendLabel.Font"/> of the LegendLabel.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.LegendLabel.FontSize">
            <summary>
            Gets or sets the FontSize of the Legendlabel.
            </summary>  
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.LegendLabel.TextColor">
            <summary>
            Gets or sets the TextColor of the LegendLabel.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.LegendLabelList">
            <summary>
            Represents a LegendLabelList class.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.LegendLabelList.Count">
             <summary>
            Gets the total number of labels in the LabelList.
             </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.LegendLabelList.Item(System.Int32)">
             <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.LegendLabel"/> from the LabelList based on the given index.
             </summary>
             <returns>The legend label of the given index.</returns>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.LegendList">
            <summary>
            Represents a list of Legends.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.LegendList.Add(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates the and adds that <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> to the LegendList. 
            </summary>
            <param name="x">X co-ordinate of the Legend.</param>
            <param name="y">Y co-ordinate of the Legend.</param>
            <param name="width">Width of the Legend.</param>
            <param name="height">Height of the Legend.</param>
            <returns>The created Legend</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.LegendList.Add">
            <summary>
            Creates and adds that <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> to the LegendList. 
            </summary>
            <returns>The created Legend</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.LegendList.Placement">
            <summary>
            Gets or sets the placement of the legends.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.LegendList.Layout">
            <summary>
            Gets or sets the layout of the legends.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.LegendList.LabelsLayout">
            <summary>
            Gets or sets the labels layout of the legends.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.LegendList.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Legend"/> based on the given index.
            </summary>
            <returns>The Legend of the given index.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.LegendList.Count">
            <summary>
            Returns the number of legends in the LegendList.
            </summary>
            <returns>The number of legends in the legendList.</returns>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.LegendPlacement">
            <summary>
            Represents the placement of the legend.
            </summary>
            <licensing>
            This enumeration is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.LegendPlacement.TopCenter">
            <summary>
            Legend placement top center.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.LegendPlacement.TopRight">
            <summary>
            Legend placement top right.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.LegendPlacement.TopLeft">
            <summary>
            Legend placement top left.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.LegendPlacement.LeftCenter">
            <summary>
            Legend placement left center.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.LegendPlacement.RightCenter">
            <summary>
            Legend placement right center.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.LegendPlacement.BottomCenter">
            <summary>
            Legend placement bottom center.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.LegendPlacement.BottomLeft">
            <summary>
            Legend placement bottom left.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.LegendPlacement.BottomRight">
            <summary>
            Legend placement bottom right.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Marker">
            <summary>
            Represents a Marker class.
            </summary>
            <remarks>Markers can only be used with Area, Line and XYScatter charts.</remarks>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Marker.GetCircle(System.Single)">
            <summary>
            Gets the instance of the Marker type as a Circle. 
            </summary>
            <param name="size">The size of the marker.</param>
            <returns>Returns Marker Object</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Marker.GetSquare(System.Single)">
            <summary>
            Gets the instance of the Marker type as a Square. 
            </summary>
            <param name="size">The size of the marker.</param>
            <returns>Returns Marker Object</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Marker.GetTriangle(System.Single)">
            <summary>
            Gets the instance of the Marker type as a Triangle. 
            </summary>
            <param name="size">The size of the marker.</param>
            <returns>Returns Marker Object</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Marker.GetDiamond(System.Single)">
            <summary>
            Gets the instance of the Marker type as a Diamond. 
            </summary>
            <param name="size">The size of the marker.</param>
            <returns>Returns Marker Object</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Marker.GetCross(System.Single)">
            <summary>
            Gets the instance of the Marker type as a Cross. 
            </summary>
            <param name="size">The size of the marker.</param>
            <returns>Returns Marker Object</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Marker.GetPlus(System.Single)">
            <summary>
            Gets the instance of the Marker type as a Plus. 
            </summary>
            <param name="size">The size of the marker.</param>
            <returns>Returns Marker Object</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Marker.GetDash(System.Single)">
            <summary>
            Gets the instance of the Marker type as a Dash. 
            </summary>
            <param name="size">The size of the marker.</param>
            <returns>Returns Marker Object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Marker.GetAsterisk(System.Single)">
            <summary>
            Gets the instance of the Marker type as an Asterisk. 
            </summary>
            <param name="size">The size of the marker.</param>
            <returns>Returns Marker Object</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Marker.Color">
            <summary>
            Gets or sets the color of the Marker.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Marker.Size">
            <summary>
            Gets or sets the size of the Marker.
            </summary>        
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.PlotArea">
            <summary>
            This can be used to place the PlotArea on the chart. 
            </summary>
            <remarks>A Chart can have multiple plotArea's. Each Chart has one default plotArea called DefaultPlotarea.
            If the Chart's Auto Layout property is true, the plot area's will occupy 65% of the Chart width.</remarks>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.PlotArea.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the PlotArea to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object. 
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the plot area's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.PlotArea.X">
            <summary>
            Gets or sets the X coordinate of the PlotArea.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.PlotArea.Y">
            <summary>
            Gets or sets the Y coordinate of the PlotArea.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.PlotArea.Width">
            <summary>
            Gets or sets the width of the PlotArea.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.PlotArea.Height">
            <summary>
            Gets or sets the height of the PlotArea.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.PlotArea.Series">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Series.SeriesList"/> object contained in the PlotArea.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.PlotArea.XAxes">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.XAxisList"/> object contained in the PlotArea.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.PlotArea.YAxes">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Axes.YAxisList"/> object contained in the PlotArea.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.PlotArea.Chart">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.PlotArea.Chart"/> object of the PlotArea.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.PlotArea.BackgroundColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the background of the PlotArea.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.PlotArea.TopTitles">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Title"/> object to use for the top title of the PlotArea.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.PlotArea.BottomTitles">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Title"/> object to use for the bottom title of the PlotArea.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.PlotArea.ClipToPlotArea">
            <summary>
            Gets or sets the boolean value specifying whether to clip data or not. By default it is true.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.PlotAreaList">
            <summary>
            Represents a list of PlotAreas in the chart.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.PlotAreaList.Add(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.PlotArea"/> object. 
            </summary>
            <param name="x">X coordinate of the plot area.</param>
            <param name="y">Y coordinate of the plot area.</param>
            <param name="width">Width of the plot area.</param>
            <param name="height">Height of the plot area.</param>
            <returns>The<see cref="T:ceTe.DynamicPDF.PageElements.Charting.PlotArea"/> object.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.PlotAreaList.Item(System.Int32)">
             <summary>
             Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.PlotArea"/> at the given index. 
             </summary>
            <returns>The <see cref="T:ceTe.DynamicPDF.PageElements.Charting.PlotArea"/> based on the index.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.PlotAreaList.Count">
            <summary>
            Gets the number of PlotAreas actually contained in the PlotAreaList.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.ScalarDataLabel">
             <summary>
             This class represents the ScalarDataLabel.
             </summary>
             <example>The following example creates a pie chart with the scalar data label.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series    
             Imports ceTe.DynamicPDF.PageElements.Charting.Values
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page 
                     Dim MyPage As Page = New Page(PageSize.A4, PageOrientation.Landscape)
                     
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create a scalar datalabel
                     Dim da As ScalarDataLabel = New ScalarDataLabel(True, False, False)
            
                     ' Create a pieseries and add datalabel to the pieseries
                     Dim MyPieSeries As PieSeries = New PieSeries()
                     MyPieSeries.DataLabel = da
            
                     ' Add the series and elements to the plotarea
                     MyPlotArea.Series.Add(MyPieSeries)
                     MyPieSeries.Elements.Add(27, "Website A")
                     MyPieSeries.Elements.Add(19, "Website B")
                     MyPieSeries.Elements.Add(21, "Website C")
            
                     ' Add the chart to page and add the page to document
                     MyPage.Elements.Add(MyChart)
                     MyDocument.Pages.Add(MyPage)
            
                     ' Draw the document
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Values;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page 
                     Page page = new Page(PageSize.A4, PageOrientation.Landscape);
                   
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea; 
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create a scalar datalabel
                     ScalarDataLabel da = new ScalarDataLabel(true, false, false);
            
                     // Create a pieseries and add datalabel to the pieseries
                     PieSeries pieSeries = new PieSeries();
                     pieSeries.DataLabel = da;
            
                     // Add the series and  elements to the plotarea
                     plotArea.Series.Add(pieSeries);
                     pieSeries.Elements.Add(27, "Website A");
                     pieSeries.Elements.Add(19, "Website B");
                     pieSeries.Elements.Add(21, "Website C");
               
                     // Add the chart to page and add the page to  document
                     page.Elements.Add(chart);
                     document.Pages.Add(page);
            
                     // Draw the document
                     document.Draw(@"C:\MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>	
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.ScalarDataLabel.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.ScalarDataLabel"/> class. 
            </summary>
            <param name="showValue">Visible status of the pie series element value.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.ScalarDataLabel.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.ScalarDataLabel"/> class. 
            </summary>
            <param name="showValue">Visible status of the pie series element value.</param>
            <param name="showElement">Visible status of the pie series element name.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.ScalarDataLabel.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.ScalarDataLabel"/> class. 
            </summary>
            <param name="showValue">Visible status of the pie series element value.</param>
            <param name="showPercentage">Visible status of the pie series element value in percentage.</param>
            <param name="showElement">Visible status of the pie series element name.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.ScalarDataLabel.#ctor(ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.Color,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.ScalarDataLabel"/> class. 
            </summary>
            <param name="font"><see cref="P:ceTe.DynamicPDF.PageElements.Charting.ScalarDataLabel.Font"/> of the scalar data label.</param>
            <param name="fontSize">Size of the scalar data label.</param>
            <param name="color"><see cref="P:ceTe.DynamicPDF.PageElements.Charting.ScalarDataLabel.Color"/> of the scalar data label.</param>
            <param name="showValue">Visible status of the pie series element value.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.ScalarDataLabel.Font">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.ScalarDataLabel.Font"/> object to use for the font of the ScalarDataLabel.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.ScalarDataLabel.FontSize">
            <summary>
            Gets or sets the FontSize of the ScalarDataLabel.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.ScalarDataLabel.Color">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.ScalarDataLabel.Color"/> object to use for the color of the ScalarDataLabel.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.ScalarDataLabel.Suffix">
            <summary>
            Gets or sets the suffix of the ScalarDataLabel.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.ScalarDataLabel.Prefix">
            <summary>
            Gets or sets the prefix of the ScalarDataLabel.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.ScalarDataLabel.Seperator">
            <summary>
            Gets or sets the separator of the ScalarDataLabel.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.ScalarDataLabel.ShowValue">
            <summary>
            Gets or sets the visible status of the PieSeriesElementValue. By default it is false.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.ScalarDataLabel.ShowPercentage">
             <summary>
            Gets or sets the visible status of the PieSeriesElementValue as a percentage. By default it is false.
             </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.ScalarDataLabel.ShowElement">
            <summary>
            Gets or sets the visible status of the PieSeriesElement name. By default it is false. 
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.ScalarDataLabelPosition">
            <summary>
            Represents the position of the ScalarDataLabel.
            </summary>
            <licensing>
            This enumeration is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.ScalarDataLabelPosition.Inside">
            <summary>
            Inside of ScalarDataLabel Position.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.ScalarDataLabelPosition.Outside">
            <summary>
            Outside of ScalarDataLabel Position.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Charting.ScalarDataLabelPosition.OutsideWithConnectors">
            <summary>
            Outside of ScalarDataLabel OutsideWithConnectors.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.Title">
             <summary>
             Represents the Title.
             </summary>
             <example>The following example creates a date time area series chart and creates a header title, yaxis title
             to it.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 400, 200)
            
                     ' Get the default plot area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create header titles and add it to the chart
                     Dim MyTitle1 As Title = New Title("Website Visitors")
                     Dim MyTitle2 As Title = New Title("Year - 2007")
                     MyChart.HeaderTitles.Add(MyTitle1)
                     MyChart.HeaderTitles.Add(MyTitle2)
            
                     ' Create positions
                     Dim p0 As DateTime = New DateTime(2007, 1, 1)
                     Dim p1 As DateTime = New DateTime(2007, 2, 1)
                     Dim p2 As DateTime = New DateTime(2007, 3, 1)
                     Dim p3 As DateTime = New DateTime(2007, 4, 1)
            
                     ' Create date time area series and add values to it
                     Dim MyAreaSeries1 As DateTimeAreaSeries = New DateTimeAreaSeries("Website A")
                     MyAreaSeries1.Values.Add(5, p0)
                     MyAreaSeries1.Values.Add(7, p1)
                     MyAreaSeries1.Values.Add(9, p2)
                     MyAreaSeries1.Values.Add(6, p3)
                     Dim MyAreaSeries2 As DateTimeAreaSeries = New DateTimeAreaSeries("Website B")
                     MyAreaSeries2.Values.Add(4, p0)
                     MyAreaSeries2.Values.Add(2, p1)
                     MyAreaSeries2.Values.Add(5, p2)
                     MyAreaSeries2.Values.Add(8, p3)
                     Dim MyAreaSeries3 As DateTimeAreaSeries = New DateTimeAreaSeries("Website C")
                     MyAreaSeries3.Values.Add(2, p0)
                     MyAreaSeries3.Values.Add(4, p1)
                     MyAreaSeries3.Values.Add(6, p2)
                     MyAreaSeries3.Values.Add(9, p3)
            
                     ' Add date time area series to the plot area
                     MyPlotArea.Series.Add(MyAreaSeries1)
                     MyPlotArea.Series.Add(MyAreaSeries2)
                     MyPlotArea.Series.Add(MyAreaSeries3)
            
                     ' Create a title and add it to yaxis
                     Dim MyTitle3 As Title = New Title("Viewers (in millions)")
                     MyAreaSeries1.YAxis.Titles.Add(MyTitle3)
            
                     ' Set label  format for the axislabels
                     MyAreaSeries1.XAxis.LabelFormat = "MMM"
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 400, 200);
            
                     // Get the default plot area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create header titles and add it to the chart
                     Title title1 = new Title("Website Visitors");
                     Title title2 = new Title("Year - 2007");
                     chart.HeaderTitles.Add(title1);
                     chart.HeaderTitles.Add(title2);
            
                     // Create date time area series and add values to it
                     DateTimeAreaSeries areaSeries1 = new DateTimeAreaSeries("Website A");
                     areaSeries1.Values.Add(5, new DateTime(2007, 1, 1));
                     areaSeries1.Values.Add(7, new DateTime(2007, 2, 1));
                     areaSeries1.Values.Add(9, new DateTime(2007, 3, 1));
                     areaSeries1.Values.Add(6, new DateTime(2007, 4, 1));
                     DateTimeAreaSeries areaSeries2 = new DateTimeAreaSeries("Website B");
                     areaSeries2.Values.Add(4, new DateTime(2007, 1, 1));
                     areaSeries2.Values.Add(2, new DateTime(2007, 2, 1));
                     areaSeries2.Values.Add(5, new DateTime(2007, 3, 1));
                     areaSeries2.Values.Add(8, new DateTime(2007, 4, 1));
                     DateTimeAreaSeries areaSeries3 = new DateTimeAreaSeries("Website C");
                     areaSeries3.Values.Add(2, new DateTime(2007, 1, 1));
                     areaSeries3.Values.Add(4, new DateTime(2007, 2, 1));
                     areaSeries3.Values.Add(6, new DateTime(2007, 3, 1));
                     areaSeries3.Values.Add(9, new DateTime(2007, 4, 1));
            
                     //Add date time area series to the plot area
                     plotArea.Series.Add(areaSeries1);
                     plotArea.Series.Add(areaSeries2);
                     plotArea.Series.Add(areaSeries3);
            
                     // Create a title and add it to yaxis
                     Title title3 = new Title("Viewers (in millions)");
                     areaSeries1.YAxis.Titles.Add(title3);
            
                     // Set label  format for the axislabels
                     areaSeries1.XAxis.LabelFormat = "MMM";
            
                     //Add the chart to the page
                     page.Elements.Add(chart);
             
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>	
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Title.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Title"/> class.
            </summary>
            <param name="title">Indicating the title.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Title.#ctor(System.String,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Title"/> class.
            </summary>
            <param name="title">Indicating the title.</param>
            <param name="textColor"><see cref="T:ceTe.DynamicPDF.Color"/> of the title.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Title.#ctor(System.String,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Title"/> class.
            </summary>
            <param name="title">Indicating the title.</param>
            <param name="font"><see cref="P:ceTe.DynamicPDF.PageElements.Charting.Title.Font"/> of the title.</param>
            <param name="fontSize">Size of the the title.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.Title.#ctor(System.String,ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Title"/> class.
            </summary>
            <param name="title">Indicating the title.</param>
            <param name="font"><see cref="P:ceTe.DynamicPDF.PageElements.Charting.Title.Font"/> of the title.</param>
            <param name="fontSize">Size of the title.</param>
            <param name="textColor"><see cref="T:ceTe.DynamicPDF.Color"/> of the title.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Title.Titles">
            <summary>
            Gets or sets the text of the Title.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Title.Align">
            <summary>
            Gets or sets the alignment of the Title.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Title.Font">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Charting.Title.Font"/> object to use for the font of the Title.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Title.FontSize">
            <summary>
            Gets or sets the FontSize of the Title.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Title.TextColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the TextColor of the Title.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Title.Width">
            <summary>
            Gets or sets the width of the Title.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.Title.Height">
            <summary>
            Gets or sets the height of the Title.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.TitleList">
            <summary>
            Represents the TitleList of the chart.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.TitleList.Add(ceTe.DynamicPDF.PageElements.Charting.Title)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Title"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.TitleList"/> object. 
            </summary>
            <param name="title">Title to be displayed in the chart.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.TitleList.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.Title"/> at the given index. 
            </summary>
            <returns>The<see cref="T:ceTe.DynamicPDF.PageElements.Charting.Title"/> object.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.TitleList.Count">
            <summary>
            Gets the number of Titles actually contained in the TitleList.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Charting.XYScatterDataLabel">
             <summary>
             Represents an XYScatterDataLabel.
             </summary>
             <example>The following example will add a data label to the xy scatter series. The data label added displays the 
             y co-ordinate values for first series.
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.PageElements.Charting
             Imports ceTe.DynamicPDF.PageElements.Charting.Series
             Imports ceTe.DynamicPDF.PageElements.Charting.Axes
            
             Module MyModule
            
                 Sub Main()
            
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document()
            
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a chart
                     Dim MyChart As Chart = New Chart(0, 0, 450, 230)
            
                     ' Get the default plot Area from the chart
                     Dim MyPlotArea As PlotArea = MyChart.PrimaryPlotArea
            
                     ' Create a Header title and add it to the chart
                     Dim MyTitle1 As Title = New Title("Player Height and Weight")
                     MyChart.HeaderTitles.Add(MyTitle1)
            
                     ' Create xyScatter series and add values to it
                     Dim MyXyScatterSeries1 As XYScatterSeries = New XYScatterSeries("Team A")
                     MyXyScatterSeries1.Values.Add(112, 55)
                     MyXyScatterSeries1.Values.Add(125, 60)
                     MyXyScatterSeries1.Values.Add(138, 68)
                     MyXyScatterSeries1.Values.Add(150, 73)
                     MyXyScatterSeries1.Values.Add(172, 82)
                     Dim MyXyScatterSeries2 As XYScatterSeries = New XYScatterSeries("Team B")
                     MyXyScatterSeries2.Values.Add(110, 54)
                     MyXyScatterSeries2.Values.Add(128, 62)
                     MyXyScatterSeries2.Values.Add(140, 70)
                     MyXyScatterSeries2.Values.Add(155, 75)
                     MyXyScatterSeries2.Values.Add(170, 80)
            
                     ' Create xyscatter data label
                     Dim MyXyScatterDataLabel As XYScatterDataLabel = New XYScatterDataLabel(True)
                     MyXyScatterSeries1.DataLabel = MyXyScatterDataLabel
                     MyXyScatterDataLabel.Color = RgbColor.Red
            
                     ' Add xyScatter series to the plot Area
                     MyPlotArea.Series.Add(MyXyScatterSeries1)
                     MyPlotArea.Series.Add(MyXyScatterSeries2)
            
                     ' Create axis titles and add it to the axis
                     Dim MyTitle2 As Title = New Title("Height (Inches)")
                     Dim MyTitle3 As Title = New Title("Weight (Pounds)")
                     MyXyScatterSeries1.YAxis.Titles.Add(MyTitle2)
                     MyXyScatterSeries1.XAxis.Titles.Add(MyTitle3)
            
                     ' Add the chart to the page
                     MyPage.Elements.Add(MyChart)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
            
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.PageElements.Charting;
             using ceTe.DynamicPDF.PageElements.Charting.Series;
             using ceTe.DynamicPDF.PageElements.Charting.Axes;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a chart
                     Chart chart = new Chart(0, 0, 450, 230);
            
                     // Get the default plot Area from the chart
                     PlotArea plotArea = chart.PrimaryPlotArea;
            
                     // Create a Header title and add it to the chart
                     Title tTitle = new Title("Player Height and Weight");
                     chart.HeaderTitles.Add(tTitle);
            
                     // Create xyScatter series and add values to it
                     XYScatterSeries xyScatterSeries1 = new XYScatterSeries("Team A");
                     xyScatterSeries1.Values.Add(112, 55);
                     xyScatterSeries1.Values.Add(125, 60);
                     xyScatterSeries1.Values.Add(138, 68);
                     xyScatterSeries1.Values.Add(150, 73);
                     xyScatterSeries1.Values.Add(172, 82);
                     XYScatterSeries xyScatterSeries2 = new XYScatterSeries("Team B");
                     xyScatterSeries2.Values.Add(110, 54);
                     xyScatterSeries2.Values.Add(128, 62);
                     xyScatterSeries2.Values.Add(140, 70);
                     xyScatterSeries2.Values.Add(155, 75);
                     xyScatterSeries2.Values.Add(170, 80);
            
                     // Create xyscatter data label
                     XYScatterDataLabel xyScatterDataLabel = new XYScatterDataLabel(true);
                     xyScatterSeries1.DataLabel = xyScatterDataLabel;
                     xyScatterDataLabel.Color = RgbColor.Red;
            
                     // Add xyScatter series to the plot Area
                     plotArea.Series.Add(xyScatterSeries1);
                     plotArea.Series.Add(xyScatterSeries2);
            
                     // Create axis titles and add it to the axis
                     Title title1 = new Title("Height (Inches)");
                     Title title2 = new Title("Weight (Pounds)");
                     xyScatterSeries1.YAxis.Titles.Add(title1);
                     xyScatterSeries1.XAxis.Titles.Add(title2);
            
                     // Add the chart to the page
                     page.Elements.Add(chart);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf"); 
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.XYScatterDataLabel.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.XYScatterDataLabel"/> object. 
            </summary>
            <param name="yValue">Series value visible status. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.XYScatterDataLabel.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.XYScatterDataLabel"/> object. 
            </summary>
            <param name="yValue">Series value visible status. </param>
            <param name="series">Series name visible status. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Charting.XYScatterDataLabel.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Charting.XYScatterDataLabel"/> object. 
            </summary>
            <param name="xValue">Series value visible status. </param>
            <param name="yValue">Position visible status. </param>
            <param name="series">Series name visible status. </param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.XYScatterDataLabel.ShowXValue">
            <summary>
            Gets or sets the visible status of the XValue. By default it is false. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.XYScatterDataLabel.ShowYValue">
            <summary>
            Gets or sets the visible status of the YValue. By default it is false. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Charting.XYScatterDataLabel.Series">
            <summary>
            Gets or sets the visible status of the SeriesName. By default it is false. 
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Forms.Behavior">
            <summary>
            To specify the field's highlighting mode.
            The visual effect to be used when the mouse button
            is pressed or held down inside its active area.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Forms.Behavior.None">
            <summary>
            No highlighting.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Forms.Behavior.Invert">
            <summary>
            Invert the contents of a field's rectangle.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Forms.Behavior.Outline">
            <summary>
            Invert the field’s border.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Forms.Behavior.Push">
            <summary>
            The field's rectangle to appear as if it were 
            being “pushed” below the surface of the page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Forms.Behavior.CreatePush(System.String)">
            <summary>
            Creates a push behavior with down label.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Forms.Behavior.CreatePush(System.String,System.String)">
            <summary>
            Creates a push behavior with down label and rollover label.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Forms.BorderStyle">
            <summary>
            A border style class specifying the characteristics
            of a field’s border. An field may optionally
            be surrounded by a border when displayed or printed.
            If present, the border is drawn completely inside a 
            field rectangle.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Forms.BorderStyle.SetThin">
            <summary>
            Sets the border line width as thin.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Forms.BorderStyle.SetMedium">
            <summary>
            Sets the border line width as medium.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Forms.BorderStyle.SetThick">
            <summary>
            Sets the border line width as Thick.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Forms.BorderStyle.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the BorderStyle's dictionary entries to the given
            <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"> <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the output. </param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.BorderStyle.Solid">
            <summary>
            A solid rectangle surrounding a field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.BorderStyle.Dashed">
            <summary>
            A dashed rectangle surrounding a field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.BorderStyle.Beveled">
            <summary>
            A simulated embossed rectangle that appears to
            be raised above the surface of the page.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.BorderStyle.Inset">
            <summary>
            A simulated engraved rectangle that appears to
            be recessed below the surface of the page.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.BorderStyle.Underline">
            <summary>
            A single line along the bottom of a field's rectangle.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.BorderStyle.Thickness">
            <summary>
            Gets and Sets the <see cref="T:ceTe.DynamicPDF.PageElements.Forms.BorderThickness"/>for the field.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Forms.BorderThickness">
            <summary>
            Specifies the thickness of the border for FormFields. 
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Forms.BorderThickness.Thin">
            <summary>
            BorderThickness as thin.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Forms.BorderThickness.Medium">
            <summary>
            BorderThickness as medium.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Forms.BorderThickness.Thick">
            <summary>
            BorderThickness as Thick.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Forms.Button">
            <summary>
            Represents the button field of a interactive forms.
            A button is a purely interactive control that responds
            immediately to user input without retaining a permanent value.
            </summary>
            <remarks>For more details on button fields take a look at the <a href="Interactive Forms.html">Interactive Forms</a> topic.
            <p/><b>NOTE:</b> This page element cannot be used within a table cell, or tranformation group.</remarks>
            <example>This example shows how to create an Button and Add it to the page.<p/>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements.Forms
            Imports ceTe.DynamicPDF.Text
            
            Module MyModule
            		
                Sub Main()
            		
                    ' Create a PDF Document
                    Dim MyDocument As Document = New Document
            		
                    ' Create a PDF Page
                    Dim MyPage As Page = New Page(PageSize.Letter)
            		
                    ' Create an Button
                    Dim MyButton As Button = New Button("btn", 50, 50, 100, 50)
                    MyButton.Action = New JavaScriptAction("app.alert('Hello');")
                    MyButton.BackgroundColor = RgbColor.AliceBlue
                    MyButton.Behavior = Behavior.CreatePush("downLabel", "rolloverLabel")
                    MyButton.BorderColor = RgbColor.BlueViolet
                    MyButton.BorderStyle = BorderStyle.Beveled
                    Dim MyFont As OpenTypeFont = new OpenTypeFont("fontname")
                    MyButton.Font = MyFont
                    MyButton.Label = "Push"
                    MyButton.TextColor = RgbColor.DarkGreen
                    MyButton.ToolTip = "Click"
            		
                    ' Add the Button to the page
                    MyPage.Elements.Add(MyButton)
            		
                    ' Add pages to the document
                    MyDocument.Pages.Add(MyPage)
            
                    ' Save the PDF document
                    MyDocument.Draw("C:\MyDocument.pdf")
            		
                End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements.Forms;
            using ceTe.DynamicPDF.Text;
            
            class MyClass
            {
                static void Main()
                {
                    // Create a PDF Document
                    Document document = new Document();
            		
                    // Create a PDF Page
                    Page page = new Page( PageSize.Letter );
            		
                    // Create an Button
                    Button button = new Button( "btn", 50, 50, 100, 50 );
                    button.Action = new JavaScriptAction( "app.alert('Hello');" );
                    button.BackgroundColor = RgbColor.AliceBlue;
                    button.Behavior = Behavior.CreatePush( "downLabel", "rolloverLabel" );
                    button.BorderColor = RgbColor.BlueViolet;
                    button.BorderStyle = BorderStyle.Beveled;
                    OpenTypeFont myFont = new OpenTypeFont("fontname");
                    button.Font = myFont;
                    button.Label = "Push";
                    button.TextColor = RgbColor.DarkGreen;
                    button.ToolTip = "Click";
            		
                    // Add the Button to the page
                    page.Elements.Add( button );
            		
                    // Add pages to the document
                    document.Pages.Add( page );
            		
                    // Save the PDF document
                    document.Draw( @"C:\MyDocument.pdf" );
                }
            }
            </code>
            </example>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Forms.FormElement">
            <summary>
            Class represents the base class for all the form field page elements.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Forms.FormElement.#ctor(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new instance of <see cref="T:ceTe.DynamicPDF.PageElements.Forms.FormElement"/>.
            </summary>
            <param name="name"> Name of a form field. </param>
            <param name="x"> X coordinate of a form field. </param>
            <param name="y"> Y coordinate of a form field. </param>
            <param name="width"> Width of a form field. </param>
            <param name="height"> Height of a form field. </param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.FormElement.X">
            <summary>
            Gets or Sets the X coordinate of a form field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.FormElement.Y">
            <summary>
            Gets or Sets the Y coordinate of a form field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.FormElement.Width">
            <summary>
            Gets or Sets the width of a form field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.FormElement.Height">
            <summary>
            Gets or Sets the height of a form field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.FormElement.Rotate">
            <summary>
            Gets or Sets the angle of a form field.
            Rotation angle should be multiple of 90, default is 0.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.FormElement.Name">
            <summary>
            Gets or Sets the name of a form field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.FormElement.ToolTip">
            <summary>
            Gets or Sets an alternate field name, of a form field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.FormElement.MappingName">
            <summary>
            Gets or Sets an mapping name, of a form field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.FormElement.TextColor">
            <summary>
            Gets or Sets the color of the text for the field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.FormElement.ReadOnly">
            <summary>
            Gets or Sets the read only property status of the form field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.FormElement.BorderStyle">
            <summary>
            Gets or Sets the <see cref="P:ceTe.DynamicPDF.PageElements.Forms.FormElement.BorderStyle"/>.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.FormElement.BorderColor">
            <summary>
            Gets or Sets the border color of a form field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.FormElement.BackgroundColor">
            <summary>
            Gets or Sets the fill/background color of a form field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.FormElement.Visible">
            <summary>
            Gets or Sets the form field visible on pdf. By default its true.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.FormElement.Printable">
            <summary>
            Gets or Sets the form field printable on pdf. By default its true.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.FormElement.Tag">
            <summary>
            Gets or sets the structure element of the form element.
            </summary>
            <licensing>
            This property is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>        
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Forms.Button.#ctor(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new instance of <see cref="T:ceTe.DynamicPDF.PageElements.Forms.Button"/> class.
            </summary>
            <param name="name"> Name of a button. </param>
            <param name="x"> X coordinate of a button. </param>
            <param name="y"> Y coordinate of a button. </param>
            <param name="width"> Width of a button. </param>
            <param name="height"> Height of a button. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Forms.Button.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the button to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"> <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the button's output. </param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.Button.Font">
            <summary>
            Gets or Sets the font for the field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.Button.FontSize">
            <summary>
            Gets or Sets the font size for the field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.Button.Label">
            <summary>
            Gets or Sets the label/caption of a field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.Button.Behavior">
            <summary>
            Gets or Sets the field’s highlighting mode, the visual effect to be used
            when the mouse button is pressed or held down inside its active area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.Button.Action">
            <summary>
            Gets or Sets the action associated with this button.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Forms.CheckBox">
            <summary>
            Represents the check box field of a interactive forms.
            A check box toggles between two states, on and off.
            </summary>
            <remarks>For more details on check box fields take a look at the <a href="Interactive Forms.html">Interactive Forms</a> topic.
            <p/><b>NOTE:</b> This page element cannot be used within a table cell, or tranformation group.</remarks>
            <example>This example shows how to create an Check Box and Add it to the page.<p/>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements.Forms
            
            Module MyModule
            		
                Sub Main()
            		
                    ' Create a PDF Document
                    Dim MyDocument As Document = New Document
            		
                    ' Create a PDF Page
                    Dim MyPage As Page = New Page(PageSize.Letter)
            		
                    ' Create an Check Box
                    Dim MyCheckBox As CheckBox = New CheckBox("chk", 5, 7, 50, 50)
                    MyCheckBox.DefaultChecked = true
                    MyCheckBox.ToolTip = "Check it"
            		
                    ' Add the Check Box to the page
                    MyPage.Elements.Add(MyCheckBox)
            		
                    ' Add pages to the document
                    MyDocument.Pages.Add(MyPage)
            
                    ' Save the PDF document
                    MyDocument.Draw("C:\MyDocument.pdf")
            		
                End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements.Forms;
            
            class MyClass
            {
                static void Main()
                {
                    // Create a PDF Document
                    Document document = new Document();
            		
                    // Create a PDF Page
                    Page page = new Page( PageSize.Letter );
            		
                    // Create an Check Box
                    CheckBox checkBox = new CheckBox( "chk", 5, 7, 50, 50 );
                    checkBox.DefaultChecked = true;
                    checkBox.ToolTip = "Check it";
            		
                    // Add the Check Box to the page
                    page.Elements.Add( checkBox );
            		
                    // Add pages to the document
                    document.Pages.Add( page );
            		
                    // Save the PDF document
                    document.Draw( @"C:\MyDocument.pdf" );
                }
            }
            </code>
            </example>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Forms.CheckBox.#ctor(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new instance of <see cref="T:ceTe.DynamicPDF.PageElements.Forms.CheckBox"/> class.
            </summary>
            <param name="name"> Name of a check box. </param>
            <param name="x"> X coordinate of a check box. </param>
            <param name="y"> Y coordinate of a check box. </param>
            <param name="width"> Width of a check box. </param>
            <param name="height"> Height of a check box. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Forms.CheckBox.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the checkbox to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"> <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the checkbox's output. </param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.CheckBox.FontSize">
            <summary>
            Gets or Sets the font size for the field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.CheckBox.DefaultChecked">
            <summary>
            Gets or Sets the checkbox's default checked state.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.CheckBox.ExportValue">
            <summary>
            Gets or Sets the export value.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.CheckBox.Symbol">
            <summary>
            Gets or Sets the type of ‘check’ to appear in the checkbox.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.CheckBox.NoExport">
            <summary>
            Gets or Sets the export state for the field.
            If set, the field will not be exported by a submit-form action.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Forms.ChoiceField">
            <summary>
            Represents the choice field of a interactive forms.
            A base class for all form field of type choice form field.
            A choice field contains several text items,
            one or more of which may be selected as the field value.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Forms.ChoiceField.#ctor(System.String,System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Creates a new instance of <code>ListBoxField</code> class.
             </summary>
             <param name="name"> Name of a choice field.</param>
             <param name="x"> X coordinate of a choice field.</param>
             <param name="y">Y coordinate of a choice field.</param>
             <param name="width"> Width of a choice field.</param>
             <param name="height"> Height of a choice field.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Forms.ChoiceField.AddItem(System.String)">
             <summary>
             <font color="red">Obsolete.</font> Adds the item to the list. No duplicate items are allowed.
             </summary>
             <param name="item">Item to be added to the list.</param>
            <remarks><font color="red">NOTE: This method is obsolete.</font> Use the ListBox.Items.Add method instead.</remarks>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Forms.ChoiceField.GetItem(System.Int32)">
            <summary>
            <font color="red">Obsolete.</font> Gets the item from the items list with a given index.
            </summary>
            <param name="index">Index of the item.</param>  
            <remarks><font color="red">NOTE: This method is obsolete.</font> Use ListBox.Items[index] method instead.</remarks>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Forms.ChoiceField.IndexOf(System.String)">
            <summary>
            <font color="red">Obsolete.</font> Gets the index of a item.
            </summary>
            <param name="item">An item.</param>
            <remarks><font color="red">NOTE: This method is obsolete.</font></remarks>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Forms.ChoiceField.Remove(System.Int32)">
            <summary>
            <font color="red">Obsolete.</font> Removes the item from the list.
            </summary>
            <param name="index">Item index to be removed from the list.</param>
            <remarks><font color="red">NOTE: This method is obsolete.</font>  Use the ListBox.Items.Remove method instead.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.ChoiceField.Font">
            <summary>
            Gets or Sets the font for the field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.ChoiceField.FontSize">
            <summary>
            Gets or Sets the font size for the field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.ChoiceField.NoExport">
            <summary>
            Gets or Sets the export state of a choice field.
            If set, the field will not be exported by a submit-form action.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.ChoiceField.Count">
            <summary>
             <font color="red">Obsolete.</font> Gets the number of items available in the item list.
             </summary>
             <remarks><font color="red">NOTE: This property is obsolete.</font>  Use ListBox.Items.Count property instead.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.ChoiceField.DefaultChoice">
            <summary>
            <font color="red">Obsolete.</font> Gets or Sets the default choice of a choice field.
            The choice set, should be one of the item in the item list.
            If not the last item will be the default choice.
            </summary>
            <remarks><font color="red">NOTE: This property is obsolete.</font> Use ListBox.Items[index].Selected property instead.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.ChoiceField.ExportValue">
             <summary>
             <font color="red">Obsolete.</font> Gets or Sets the value entry identifies the item currently selected in the choice field.
             </summary>
            <remarks><font color="red">NOTE: This property is obsolete.</font> Use ListBox.Items[index].ExportValue property instead.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.ChoiceField.Items">
            <summary>
            Gets the list of items for the <see cref="T:ceTe.DynamicPDF.PageElements.Forms.ChoiceField"/>.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Forms.ChoiceItem">
            <summary>
            Represents the Item details for choice field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.ChoiceItem.ItemName">
            <summary>
            Gets the ItemName of the item in the list.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.ChoiceItem.ExportValue">
            <summary>
            Gets or Sets the ExportValue of the item in the list.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.ChoiceItem.Selected">
            <summary>
            Gets or Sets the item is selected.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.ChoiceItem.Default">
            <summary>
            Gets the item is default selected.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Forms.ChoiceItemList">
            <summary>
            Represents the ChoiceItemList which holds the item of choice field of interactive forms.
            </summary>
            <licensing>
            /// This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Forms.ChoiceItemList.Add(System.String)">
            <summary>
            Adds the item to the list. No duplicate items are allowed.
            </summary>
            <param name="itemName">ItemName to be added to the list.</param>
            <returns></returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Forms.ChoiceItemList.Add(System.String,System.String)">
            <summary>
            Adds the item to the list. No duplicate items are allowed.
            </summary>
            <param name="itemName">ItemName to be added to the list.</param>
            <param name="exportValue">ExportValue for the item.</param>
            <returns></returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Forms.ChoiceItemList.Add(System.String,System.Boolean)">
            <summary>
            Adds the item to the list. No duplicate items are allowed.
            </summary>
            <param name="itemName">ItemName to be added to the list.</param>
            <param name="selected">The item to be selected.</param>
            <returns></returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Forms.ChoiceItemList.Add(System.String,System.String,System.Boolean)">
            <summary>
            Adds the item to the list. No duplicate items are allowed.
            </summary>
            <param name="itemName">ItemName to be added to the list.</param>
            <param name="exportValue">ExportValue for the item.</param>
            <param name="selected">The item to be selected.</param>
            <returns></returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Forms.ChoiceItemList.Remove(System.Int32)">
            <summary>
            Removes the item from the list.
            </summary>
            <param name="index">Item index to be removed from the list.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.ChoiceItemList.Count">
            <summary>
            Gets the number of items available in the item list.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.ChoiceItemList.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Forms.ChoiceItem"/> from the list with a given index.
            </summary>
            /// <param name="index">Item index in the list.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.ChoiceItemList.Item(System.String)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Forms.ChoiceItem"/> from the list with the given item name.
            </summary>
            <param name="itemName">Item name in the list.</param>
            <returns></returns>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Forms.ComboBox">
            <summary>
            Represents the combo box field of a interactive forms.
            A combo box consisting of a drop list.
            </summary>
            <remarks>For more details on combo box fields take a look at the <a href="Interactive Forms.html">Interactive Forms</a> topic.
            <p/><b>NOTE:</b> This page element cannot be used within a table cell, or tranformation group.</remarks>
            <example>This example shows how to create an Combo Box and Add it to the page.<p/>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements.Forms
            Imports ceTe.DynamicPDF.Text
            
            Module MyModule
            		
                Sub Main()
            		
                    ' Create a PDF Document
                    Dim MyDocument As Document = New Document
            		
                    ' Create a PDF Page
                    Dim MyPage As Page = New Page(PageSize.Letter)
            		
                    ' Create an Combo Box
                    Dim MyComboBox As ComboBox = New ComboBox("combo", 50, 75, 150, 25)
                    Dim MyFont As OpenTypeFont = new OpenTypeFont("fontname")
                    MyComboBox.Font = MyFont
                    MyComboBox.Items.Add("One", true)
                    MyComboBox.Items.Add("Two")
                    MyComboBox.Items.Add("Three")
                    MyComboBox.Items.Add("Four")
                    MyComboBox.Items.Add("Five")
                    MyComboBox.BackgroundColor = RgbColor.AliceBlue
                    MyComboBox.BorderColor = RgbColor.DarkMagenta
                    MyComboBox.Editable = true
                    MyComboBox.ToolTip = "Select"
            		
                    ' Add the Combo Box to the page
                    MyPage.Elements.Add(MyComboBox)
            		
                    ' Add pages to the document
                    MyDocument.Pages.Add(MyPage)
            
                    ' Save the PDF document
                    MyDocument.Draw("C:\MyDocument.pdf")
            		
                End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements.Forms;
            using ceTe.DynamicPDF.Text;
            
            class MyClass
            {
                static void Main()
                {
                    // Create a PDF Document
                    Document document = new Document();
            		
                    // Create a PDF Page
                    Page page = new Page( PageSize.Letter );
            		
                    // Create an Combo Box
                    ComboBox comboBox = new ComboBox( "combo", 50, 75, 150, 25 );
                    OpenTypeFont myFont = new OpenTypeFont("fontname");
                    comboBox.Font = myFont;
                    comboBox.Items.Add( "One", true );
                    comboBox.Items.Add( "Two" );
                    comboBox.Items.Add( "Three" );
                    comboBox.Items.Add( "Four" );
                    comboBox.Items.Add( "Five" );
                    comboBox.BackgroundColor = RgbColor.AliceBlue;
                    comboBox.BorderColor = RgbColor.DarkMagenta;
                    comboBox.Editable = true;
                    comboBox.ToolTip = "Select";
            		
                    // Add the Combo Box to the page
                    page.Elements.Add( comboBox );
            		
                    // Add pages to the document
                    document.Pages.Add( page );
            		
                    // Save the PDF document
                    document.Draw( @"C:\MyDocument.pdf" );
                }
            }
            </code>
            </example>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Forms.ComboBox.#ctor(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new instance of <see cref="T:ceTe.DynamicPDF.PageElements.Forms.ComboBox"/> class.
            </summary>
            <param name="name"> Name of a combo box. </param>
            <param name="x"> X coordinate of a combo box. </param>
            <param name="y"> Y coordinate of a combo box. </param>
            <param name="width"> Width of a combo box. </param>
            <param name="height"> Height of a combo box. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Forms.ComboBox.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the combo box to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"> <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the combo box's output. </param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.ComboBox.Editable">
            <summary>
            Gets or Sets the editable state of a combo box.
            If set, the combo box includes an editable text box as well as
            a drop list; if clear, it includes only a drop list.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.ComboBox.Required">
            <summary>
            Gets or Sets the value specifying the required state of a field.
            If set, the field must have a value at the time
            it is exported by a submit-form action.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Forms.FormExportFormat">
            <summary>
            Represents the forms export formats.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Forms.FormExportFormat.HtmlPost">
            <summary>
            If set, field names and values are submitted in HTML Form format.
            Using a POST request. By default, it is set.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Forms.FormExportFormat.HtmlGet">
            <summary>
             If set, field names and values are submitted in HTML Form format.
             Using a GET request.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Forms.FormExportFormat.FDF">
            <summary>
             If set, they are submitted in Forms Data Format (FDF).
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Forms.FormExportFormat.XML">
            <summary>
             If set, field names and values are submitted in XML format.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Forms.FormExportFormat.PDF">
            <summary>
             If set, the document is submitted in PDF format, using 
             the MIME content type application/pdf.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Forms.ListBox">
            <summary>
            Represents the list box field of a interactive forms.
            </summary>
            <remarks>For more details on list box fields take a look at the <a href="Interactive Forms.html">Interactive Forms</a> topic.
            <p/><b>NOTE:</b> This page element cannot be used within a table cell, or tranformation group.</remarks>
            <example>This example shows how to create an List Box and Add it to the page.<p/>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements.Forms
            Imports ceTe.DynamicPDF.Text
            
            Module MyModule
            		
                Sub Main()
            		
                    ' Create a PDF Document
                    Dim MyDocument As Document = New Document
            		
                    ' Create a PDF Page
                    Dim MyPage As Page = New Page(PageSize.Letter)
            		
                    ' Create an List Box
                    Dim MyListBox As ListBox = New ListBox("list", 5, 2, 100, 150)
                    Dim MyFont As OpenTypeFont = new OpenTypeFont("fontname")
                    MyListBox.Font = MyFont
                    MyListBox.Items.Add("One",true)
                    MyListBox.Items.Add("Two","ExportTwo",true)
                    MyListBox.Items.Add("Three")
                    MyListBox.Items.Add("Four")
                    MyListBox.Items.Add("Five")
                    MyListBox.BackgroundColor = RgbColor.AliceBlue
                    MyListBox.BorderColor = RgbColor.DarkMagenta
                    MyListBox.BorderStyle = BorderStyle.Dashed
                    MyListBox.Multiselect = true
                    MyListBox.ToolTip = "Select"
            		
                    ' Add the List Box to the page
                    MyPage.Elements.Add(MyListBox)
            		
                    ' Add pages to the document
                    MyDocument.Pages.Add(MyPage)
            
                    ' Save the PDF document
                    MyDocument.Draw("C:\MyDocument.pdf")
            		
                End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements.Forms;
            using ceTe.DynamicPDF.Text;
            
            class MyClass
            {
                static void Main()
                {
                    // Create a PDF Document
                    Document document = new Document();
            		
                    // Create a PDF Page
                    Page page = new Page( PageSize.Letter );
            		
                    // Create an List Box
                    ListBox listBox = new ListBox( "list", 5, 2, 100, 150 );
                    OpenTypeFont myFont = new OpenTypeFont("fontname");
                    listBox.Font = myFont;
                    listBox.Items.Add( "One", true );
                    listBox.Items.Add( "Two", "ExportTwo", true );
                    listBox.Items.Add( "Three" );
                    listBox.Items.Add( "Four" );
                    listBox.Items.Add( "Five" );
                    listBox.BackgroundColor = RgbColor.AliceBlue;
                    listBox.BorderColor = RgbColor.DarkMagenta;
                    listBox.BorderStyle = BorderStyle.Dashed;
                    listBox.Multiselect = true;
                    listBox.ToolTip = "Select";
            		
                    // Add the List Box to the page
                    page.Elements.Add( listBox );
            		
                    // Add pages to the document
                    document.Pages.Add( page );
            		
                    // Save the PDF document
                    document.Draw( @"C:\MyDocument.pdf" );
                }
            }
            </code>
            </example>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Forms.ListBox.#ctor(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new instance of <see cref="T:ceTe.DynamicPDF.PageElements.Forms.ListBox"/> class.
            </summary>
            <param name="name"> Name of a list box.</param>
            <param name="x"> X coordinate of a list box.</param>
            <param name="y"> Y coordinate of a list box.</param>
            <param name="width"> Width of a list box.</param>
            <param name="height"> Height of a list box.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Forms.ListBox.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the list box to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"> <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the listbox's output. </param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.ListBox.Multiselect">
            <summary>
            Gets or Sets the multiselect flag status of list box.
            If set, more than one of the field’s option items may be selected
            simultaneously; if clear, no more than one item at a time may be selected.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Forms.PushBehavior">
            <summary>
            A type of <see cref="T:ceTe.DynamicPDF.PageElements.Forms.Behavior"/>.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Forms.PushBehavior.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Forms.PushBehavior"/> class.
            </summary>
            <param name="downLabel"> A Label/caption on push button. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Forms.PushBehavior.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Forms.PushBehavior"/> class.
            </summary>
            <param name="downLabel"> A down label on push button. </param>
            <param name="rolloverLabel"> A rollover label on push button. </param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.PushBehavior.DownLabel">
            <summary>
            Gets or Sets the alternate caption on push button.
            Displayed when the mouse button is pressed within its active area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.PushBehavior.RolloverLabel">
            <summary>
            Gets or Sets the rollover caption on push button.
            Displayed when the user rolls the cursor into its
            active area without pressing the mouse button.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Forms.RadioButton">
             <summary>
             Represents the radio button field of a interactive forms.
             Radio buttons are a set of related toggles, at most one of
             which may be on at any given time; selecting any one of the
             buttons automatically deselects all the others.
             </summary>
             <remarks>For more details on radio button fields take a look at the <a href="Interactive Forms.html">Interactive Forms</a> topic.
             <p/><b>NOTE:</b> This page element cannot be used within a table cell, or tranformation group.</remarks>
             <example>This example shows how to create an Radio Button and Add it to the page.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements.Forms
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document
             		
                     ' Create a PDF Page
                     Dim MyPage As Page = New Page(PageSize.Letter)
             		
                     ' Create an Radio Buttons
                     Dim MyRadio As RadioButton = New RadioButton("rdbtn", 50, 25, 100, 75)
                     MyRadio.DefaultChecked = true
                     MyRadio.ToolTip = "first"
            
                     Dim MyRadio1 As RadioButton = New RadioButton("rdbtn", 50, 140, 100, 75)
                     MyRadio1.DefaultChecked = true
                     MyRadio1.ExportValue = "abc"
                     MyRadio1.ToolTip = "second"
            
                     Dim MyRadio2 As RadioButton = New RadioButton("rdbtn", 50, 250, 100, 75)
                     MyRadio2.DefaultChecked = true
                     MyRadio2.ExportValue = "xyz"
                     MyRadio2.ToolTip = "third"
             		
                     ' Add the Radio Buttons to the page
                     MyPage.Elements.Add(MyRadio)
                     MyPage.Elements.Add(MyRadio1)
                     MyPage.Elements.Add(MyRadio2)
             		
                     ' Add pages to the document
                     MyDocument.Pages.Add(MyPage)
             
                     ' Save the PDF document
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements.Forms;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
             		
                     // Create a PDF Page
                     Page page = new Page( PageSize.Letter );
             		
                     // Create an Radio Buttons
                     RadioButton radio = new RadioButton( "rdbtn", 50, 25, 100, 75 );
                     radio.DefaultChecked = true;
                     radio.ToolTip = "first";
            
                     RadioButton radio1 = new RadioButton( "rdbtn", 50, 140, 100, 75 );
                     radio1.DefaultChecked = true;
                     radio1.ExportValue = "abc";
                     radio1.ToolTip = "second";
            
                     RadioButton radio2 = new RadioButton( "rdbtn", 50, 250, 100, 75 );
                     radio2.DefaultChecked = true;
                     radio2.ExportValue = "xyz";
                     radio2.ToolTip = "third";
             		
                     // Add the Radio Buttons to the page
                     page.Elements.Add( radio );
                     page.Elements.Add( radio1 );
                     page.Elements.Add( radio2 );
             		
                     // Add pages to the document
                     document.Pages.Add( page );
             		
                     // Save the PDF document
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Forms.RadioButton.#ctor(System.String,System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Creates a new instance of <see cref="T:ceTe.DynamicPDF.PageElements.Forms.RadioButton"/> class.
             </summary>
             <param name="name"> Name of a radio button. </param>
             <param name="x"> X coordinate of a radio button. </param>
             <param name="y"> Y coordinate of a radio button. </param>
             <param name="width"> Width of a radio button. </param>
             <param name="height"> Height of a radio button. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Forms.RadioButton.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the radio button to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"> <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the radio button's output. </param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.RadioButton.DefaultChecked">
            <summary>
             Gets or Sets the radio button default checked state.
             </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.RadioButton.ExportValue">
            <summary>
            Gets or Sets the export value.
            To create a set of mutually exclusive radio buttons
            (i.e., where only one can be selected at a time),
            give the fields the same name but different export values.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.RadioButton.Required">
            <summary>
            Gets or Sets the required state for the field.
            If set, the field must have a value at the time
            it is exported by a submit-form action.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.RadioButton.NoExport">
            <summary>
            Gets or Sets the export state for the field.
            If set, the field will not be exported by a submit-form action.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.RadioButton.RadiosInUnison">
            <summary>
            Gets or Sets the radio button's unsion state.
            Buttons with the same name and value are selected in unison.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.RadioButton.Symbol">
            <summary>
            Gets or Sets the type of ‘check’ to appear in the checkbox.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Forms.ResetAction">
            <summary>
            Class represents the reset-form action.
            A reset-form action resets selected interactive form fields to their
            default values.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Forms.ResetAction.#ctor">
            <summary>
            Creates a new instance of <see cref="T:ceTe.DynamicPDF.PageElements.Forms.ResetAction"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Forms.ResetAction.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the reset-form action to the specified <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"> <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the
            reset-form's action output. </param>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Forms.Signature">
            <summary>
            Represents a Signature form field.
            </summary>
            <remarks>
            <font color="red"><b>NOTE:</b> This class required the .NET Framework 2.0 or greater.</font><p/>
            The signature can be of visible or invisible. Use this constructor to create a visible signature field. For creating a invisible field refer
            <see cref="M:ceTe.DynamicPDF.Document.Sign(System.String,ceTe.DynamicPDF.Certificate)"/>. A signature field that does not have corresponding entry at <see cref="M:ceTe.DynamicPDF.Document.Sign(System.String,ceTe.DynamicPDF.Certificate)"/> will behave as empty 
            signature field and can be signed later. <br/> The visible signature field is divided into three panels.     
            <list type="bullet">
            		<item>
            			<term>Left or Top Panel</term>
            			<description>By default this panel holds the subject name of the given certificate.</description>
            		</item>
            		<item>
            			<term>Right or Bottom Panel</term>
            			<description>This panel is set to hold information related with certificate and the signer.</description>
            		</item>
            		<item>
            			<term>Full Panel</term>
            			<description>This panel constitues complete area of the signature. It does not hold any default values, but can be used to show 
            up full area text or image.</description>
            		</item>
            	</list>
            </remarks>
            <example>
                This example shows how to create a signature and sign it with a certificate.
                <code lang="VB">
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements.Forms
            Imports ceTe.DynamicPDF.Text
             
            Module Module1
             
                Sub Main()
             
                    ' Create a PDF Document
                    Dim MyDocument As Document = New Document
             
                    ' Create a PDF Page
                    Dim MyPage As Page = New Page
             
                    ' Create a signature form field
                    Dim MySignature As Signature = New Signature("MySigField", 10, 10, 300, 100)
            
                    Dim MyFont As OpenTypeFont = new OpenTypeFont("fontname")
                    MySignature.Font = MyFont
             
                    ' Set a full background image
                    MySignature.FullPanel.SetImage("C:\MyImage.gif")
             
                    ' Set new color property for the left panel text
                    MySignature.LeftPanel.TextColor = RgbColor.Red
             
                    ' Add signature field to the page
                    MyPage.Elements.Add(MySignature)
             
                    ' Add the page to the document
                    MyDocument.Pages.Add(MyPage)
             
                    ' Create a Certificate
                    Dim MyCertificate As Certificate = New Certificate("C:\PersonalCertificate.pfx", "MyPassword")
             
                    ' Add an Invisible Signature (Signing the document)
                    MyDocument.Sign("MySigField", MyCertificate)
             
                    ' Save the document
                    MyDocument.Draw("C:\MySignedDocument.pdf")
             
             
                End Sub
             
            End Module
                </code>
            	<code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements.Forms;
            using ceTe.DynamicPDF.Text;
             
            class MyClass
            {
                static void Main(string[] args)
                {
                    // Create a PDF Document
                    Document document = new Document();
             
                    // Create a PDF Page
                    Page page = new Page();
             
                    // Create a signature form field
                    Signature signature = new Signature("MySigField", 10, 10, 300, 100); 
            
                    OpenTypeFont myFont = new OpenTypeFont("fontname");
                    signature.Font = myFont;
                    
                    // Set a full background image
                    signature.FullPanel.SetImage(@"C:\MyImage.gif");
                    
                    // Set new color property for the left panel text
                    signature.LeftPanel.TextColor = RgbColor.Red;       
             
                    // Add signature field to the page
                    page.Elements.Add(signature);
             
                    // Add the page to the document
                    document.Pages.Add(page);
             
                    // Create a Certificate from the file
                    Certificate certificate = new Certificate(@"c:\MyPersonalCertificate.pfx", "MyPassword");
                    
                    // Sign the document refering the sign field
                    document.Sign("MySigField", certificate);
             
                    // Save the document
                    document.Draw(@"C:\MySignedDocument.pdf");        
                }
            }
                </code>
            </example>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Forms.Signature.#ctor(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Intializes a new instance of the signature.
            </summary>
            <remarks>
            <font color="red"><b>NOTE:</b> This class required the .NET Framework 2.0 or greater.</font><p/>
            Assigning zero to x,y,height and width will make the signature as invisible althougth required resources will be added. This method 
            is not recommended and advised to call <see cref="M:ceTe.DynamicPDF.Document.Sign(System.String,ceTe.DynamicPDF.Certificate)"/> directly without adding any signature field with corresponding name.
            </remarks>
            <param name="name">Name of a signature field.</param>
            <param name="x">X coordinate of a signature.</param>
            <param name="y">Y coordinate of a signature.</param>
            <param name="width">Widht of a signature.</param>
            <param name="height">Height of a signature.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Forms.Signature.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the signature to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"> <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the signature's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Forms.Signature.HideAllText">
            <summary>
            Hides all text visibility in all the panels.
            </summary>
            <remarks>
            Sets the custom text in all panels to null if any set.
            </remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.Signature.PanelLayout">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.Forms.SignaturePanelLayout"/> specifying how the panels should be laidout.
            </summary>        
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.Signature.LeftPanel">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Forms.SignaturePanel"/> for the left panel.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.Signature.RightPanel">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Forms.SignaturePanel"/> for the right panel.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.Signature.FullPanel">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Forms.SignaturePanel"/> for the full panel.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.Signature.Reason">
            <summary>
            Gets or sets a value indicating the reason of signing the document.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.Signature.Location">
            <summary>
            Gets or sets a value indicating the location of signing.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.Signature.Font">
            <summary>
            Gets or sets <see cref="P:ceTe.DynamicPDF.PageElements.Forms.Signature.Font"/>.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Forms.SignaturePanel">
            <summary>
            Represents a panel in the visible signature.
            </summary>
            <remarks>
            <font color="red"><b>NOTE:</b> This class required the .NET Framework 2.0 or greater.</font>
            Visible signature area will be divides in to three panels. Left or Top panel, Right or Bottom Panel and Full panel.
            </remarks>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Forms.SignaturePanel.HideAllText">
            <summary>
            Hides all text visibility for the panel. <see cref="M:ceTe.DynamicPDF.PageElements.Forms.Signature.HideAllText"/> for hiding all the text in all the panels.
            </summary>
            <remarks>
            Custom message string will also set to null.
            </remarks>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Forms.SignaturePanel.SetImage(System.String)">
            <summary>
            Sets the image to the panel.
            </summary>
            <param name="filePath">Full path of the image file.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Forms.SignaturePanel.SetImage(System.Byte[])">
            <summary>
            Sets the image to the panel.
            </summary>
            <param name="data">Byte array containing a valid image data.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Forms.SignaturePanel.SetImage(System.IO.Stream)">
            <summary>
            Sets the image to the panel.
            </summary>
            <param name="stream">Stream containing the image data.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Forms.SignaturePanel.SetImage(ceTe.DynamicPDF.Imaging.ImageData)">
            <summary>
            Sets the image to the panel.
            </summary>
            <param name="imageData">Instance of ImageData.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.SignaturePanel.ShowLabels">
            <summary>
            Gets or sets a value indicating if the signature information should include a label.
            </summary>
            <remarks>
            Default is true. Disabling this option will cause a new line for each information item.
            </remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.SignaturePanel.TextRightToLeft">
            <summary>
            Gets or sets a value indicating if text should be displayed right to left.
            </summary>
            <remarks>
            Default is false.
            </remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.SignaturePanel.ShowDistinguishedName">
            <summary>
            Gets or sets a value indicating if the distinguished name (Certificate Subject) should be displayed.
            </summary>
            <remarks>
            Default - true[only for Right or Bottom]. Label for this information is DN.
            </remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.SignaturePanel.ShowSubjectName">
            <summary>
            Gets or sets a value indicating if the Subject Name from the certificate should be displayed.
            </summary>
            <remarks>
            Default - true[only for Left or Top]. There is no label for this.
            </remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.SignaturePanel.ShowDate">
            <summary>
            Gets or sets a value indicating if the full date of signing should be displayed.
            </summary>
            <remarks>
            Default - true[only for the right or bottom panel].
            </remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.SignaturePanel.ShowDigitallySignedBy">
            <summary>
            Gets or sets a value indicating if 'Digitally Signed By {Subject name}' should be displayed.
            </summary>
            <remarks>
            Default - true[only for the right or bottom panel].
            </remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.SignaturePanel.ShowReason">
            <summary>
            Gets or sets a value indicating if the reason.
            </summary>
            <remarks>
            Default - true[only for the right or bottom panel]. It also requires <see cref="P:ceTe.DynamicPDF.PageElements.Forms.Signature.Reason"/> should be set.
            </remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.SignaturePanel.ShowLocation">
            <summary>
            Gets or sets a value indicating display of location.
            </summary>
            <remarks>
            Default - true[only for the right or bottom panel]. It also requires <see cref="P:ceTe.DynamicPDF.PageElements.Forms.Signature.Location"/> should be set.
            </remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.SignaturePanel.KeepImagePropotional">
            <summary>
            Gets or sets a value for maintaining image propotion when <see cref="P:ceTe.DynamicPDF.PageElements.Forms.SignaturePanel.FitImage"/> is set to true.
            </summary>
            <remarks>
            Default is true.
            </remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.SignaturePanel.FitImage">
            <summary>
            Gets or sets a value for resizing the given image to get fit with the panel area.
            </summary>
            <remarks>
            Default is true.
            </remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.SignaturePanel.FontSize">
            <summary>
            Gets or sets a int indicating the font size.
            </summary>
            <remarks>
            By assiging a value more than zero, will override automatic font size adjustment to make the best fit of text in the panel.
            </remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.SignaturePanel.CustomMessage">
            <summary>
            Gets or sets a string for the custom message.
            </summary>
            <remarks>
            Will be get append at the end of the message relavent to the panel.
            </remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.SignaturePanel.TextAlign">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Forms.SignaturePanel.TextAlign"/> enum that specifies the text align inside the panel.
            </summary>
            <remarks>
            Default will be left align.
            </remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.SignaturePanel.ImageData">
            <summary>
            Gets or sets <see cref="T:ceTe.DynamicPDF.Imaging.ImageData"/>.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.SignaturePanel.TextColor">
            <summary>
            Gets or sets text color.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Forms.SignaturePanelLayout">
            <summary>
            Specifies the panel layout in the signature field.
            </summary>
            <remarks>
            <font color="red"><b>NOTE:</b> This enumeration required the .NET Framework 2.0 or greater.</font>
            </remarks>
            <licensing>
            This enumeration is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Forms.SignaturePanelLayout.Auto">
            <summary>
            Automatically decided based on the signature field height and width.
            </summary>
            <remarks>
            This will makes the panel as LeftAndRight if the signature fields widht is heigher than or euqal to the height else TopAndBottom.
            </remarks>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Forms.SignaturePanelLayout.LeftAndRight">
            <summary>
            Sets the panels at Left and Right.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Forms.SignaturePanelLayout.TopAndBottom">
            <summary>
            Sets the panels at Top and Bottom.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Forms.SubmitAction">
            <summary>
            Class represents the submit-form actions.
            A submit-form action transmits the names and values of selected
            interactive form fields to a specified uniform resource locator(URL).
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Forms.SubmitAction.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:ceTe.DynamicPDF.PageElements.Forms.SubmitAction"/> class.
            </summary>
            <param name="url"> URL to which the submit-form action transmits the
            names and values. By default, field names and values
            are submitted in HTML Form format. Using a POST request. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Forms.SubmitAction.#ctor(System.String,ceTe.DynamicPDF.PageElements.Forms.FormExportFormat)">
            <summary>
            Creates a new instance of <see cref="T:ceTe.DynamicPDF.PageElements.Forms.SubmitAction"/> class.
            </summary>
            <param name="url"> URL to which the submit-form action transmits the names and values. </param>
            <param name="exportFormat"> Specifies the submit export format type. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Forms.SubmitAction.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the submit-form action to the specified <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"> <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the
            submit-form's action output. </param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.SubmitAction.Url">
            <summary>
            Gets or Sets the url.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.SubmitAction.ExportFormat">
            <summary>
            Gets or Sets the export format of a submit action.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Forms.Symbol">
            <summary>
             To specify the key-values used to designate
             the type of ‘check’ to appear in the checkbox.
            </summary>
            <licensing>
            This enumeration is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Forms.Symbol.Check">
            <summary>
            Check mark.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Forms.Symbol.Circle">
            <summary>
            Circle mark.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Forms.Symbol.Cross">
            <summary>
            Cross mark.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Forms.Symbol.Diamond">
            <summary>
            Diamond mark.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Forms.Symbol.Square">
            <summary>
            Square mark.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.Forms.Symbol.Star">
            <summary>
            Star mark.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Forms.TextField">
            <summary>
            Represents the text field of a interactive forms.
            Text fields are boxes or spaces in which the user
            can enter text from the keyboard.
            </summary>
            <remarks>For more details on text fields take a look at the <a href="Interactive Forms.html">Interactive Forms</a> topic.
            <p/><b>NOTE:</b> This page element cannot be used within a table cell, or tranformation group.</remarks>
            <example>This example shows how to create an Text Field and Add it to the page.<p/>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements.Forms
            Imports ceTe.DynamicPDF.Text
            
            Module MyModule
            		
                Sub Main()
            		
                    ' Create a PDF Document
                    Dim MyDocument As Document = New Document
            		
                    ' Create a PDF Page
                    Dim MyPage As Page = New Page(PageSize.Letter)
            		
                    ' Create an Text Field
                    Dim MyTextField As TextField = New TextField("txt", 50, 75, 150, 100)
                    MyTextField.TextAlign = Align.Center
                    MyTextField.BackgroundColor = RgbColor.AliceBlue
                    MyTextField.BorderColor = RgbColor.DeepPink
                    Dim MyFont As OpenTypeFont = new OpenTypeFont("fontname")
                    MyTextField.Font = MyFont
                    MyTextField.FontSize = 16.0f
                    MyTextField.TextColor = RgbColor.Brown
                    MyTextField.DefaultValue = "Hello World."
                    MyTextField.MultiLine = true
                    MyTextField.ToolTip = "Text"
            		
                    ' Add the Text Field to the page
                    MyPage.Elements.Add(MyTextField)
            		
                    ' Add pages to the document
                    MyDocument.Pages.Add(MyPage)
            
                    ' Save the PDF document
                    MyDocument.Draw("C:\MyDocument.pdf")
            		
                End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements.Forms;
            using ceTe.DynamicPDF.Text;
            
            class MyClass
            {
                static void Main()
                {
                    // Create a PDF Document
                    Document document = new Document();
            		
                    // Create a PDF Page
                    Page page = new Page( PageSize.Letter );
            		
                    // Create an Text Field
                    TextField textField = new TextField( "txt", 50, 75, 150, 100 );
                    textField.TextAlign = Align.Center;
                    textField.BackgroundColor = RgbColor.AliceBlue;
                    textField.BorderColor = RgbColor.DeepPink;
                    OpenTypeFont myFont = new OpenTypeFont("fontname");
                    textField.Font = myFont;
                    textField.FontSize = 16.0f;
                    textField.TextColor = RgbColor.Brown;
                    textField.DefaultValue = "Hello World.";
                    textField.MultiLine = true;
                    textField.ToolTip = "Text";
            		
                    // Add the Text Field to the page
                    page.Elements.Add( textField );
            		
                    // Add pages to the document
                    document.Pages.Add( page );
            		
                    // Save the PDF document
                    document.Draw( @"C:\MyDocument.pdf" );
                }
            }
            </code>
            </example>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Forms.TextField.#ctor(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new instance of <see cref="T:ceTe.DynamicPDF.PageElements.Forms.TextField"/> class.
            </summary>
            <param name="name"> Name of a text field. </param>
            <param name="x"> X coordinate of a text field. </param>
            <param name="y"> Y coordinate of a text field. </param>
            <param name="width"> Width of a text field. </param>
            <param name="height"> Height of a text field. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Forms.TextField.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the text field to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"> <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the text field's output. </param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.TextField.Font">
            <summary>
            Gets or Sets the font for the field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.TextField.FontSize">
            <summary>
            Gets or Sets the font size for the field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.TextField.DefaultValue">
            <summary>
            Gets or Sets the text field's default value.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.TextField.MaxLength">
            <summary>
            Gets or Sets the maximum length of characters in a text field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.TextField.TextAlign">
            <summary>
            Sets the text align.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.TextField.Password">
            <summary>
            Gets or Sets the text field intended for entering a secure password
            that should not be echoed visibly to the screen.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.TextField.MultiLine">
            <summary>
            Gets or Sets the text field to contain multiple lines.
            If set, the field may contain multiple lines of text;
            if clear, the field’s text is restricted to a single line.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.TextField.Comb">
            <summary>
            Gets or Sets the text field to be comb.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.TextField.Required">
            <summary>
            Gets or Sets the required state for the field.
            If set, the field must have a value at the time
            it is exported by a submit-form action.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Forms.TextField.NoExport">
            <summary>
            Gets or Sets the export state for the field.
            If set, the field will not be exported by a submit-form action.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.AnchorGroup">
            <summary>
            Represents a group of elements that will be anchored. 
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Group">
             <summary>
             Represents a group of page elements.
             </summary>
             <remarks>This class can be used to collect many page elements together and add them to the page all at once.  
             Every page element that you add to the group will be added to the page when the group is added to the page.</remarks>
             <example>The following example will place a rectangle and several lines into a group object and then add that group to the page.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a group
                     Dim MyGroup As Group = New Group
             
                     ' Add page elements to the group 
                     MyGroup.Add(New Rectangle(0, 0, 200, 200, 3))
                     MyGroup.Add(New Line(0, 100, 100, 0, 3))
                     MyGroup.Add(New Line(100, 0, 200, 100, 3))
                     MyGroup.Add(New Line(200, 100, 100, 200, 3))
                     MyGroup.Add(New Line(100, 200, 0, 100, 3))
             
                     ' Add the group to the page
                     MyPage.Elements.Add(MyGroup)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create a group
                     Group group = new Group();
             
                     // Add page elements to the group
                     group.Add( new Rectangle( 0, 0, 200, 200, 3 ) );
                     group.Add( new Line( 0, 100, 100, 0, 3 ) );
                     group.Add( new Line( 100, 0, 200, 100, 3 ) );
                     group.Add( new Line( 200, 100, 100, 200, 3 ) );
                     group.Add( new Line( 100, 200, 0, 100, 3 ) );
             	
                     // Add the group to the page
                     page.Elements.Add( group );	
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Community Edition feature.
             </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.IPageElementContainer">
            <summary>
            Defines a container of page elements.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.IPageElementContainer.GetPageElementByID(System.String)">
            <summary>
            Returns a <see cref="T:ceTe.DynamicPDF.PageElement"/> with the given ID.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Group.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Group"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Group.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the group to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the group's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Group.Insert(System.Int32,ceTe.DynamicPDF.PageElement)">
            <summary>
            Inserts a page element to the group.
            </summary>
            <param name="index">The Zero-based index it which the page element should be inserted.</param>
            <param name="pageElement"><see cref="T:ceTe.DynamicPDF.PageElement"/> object to insert in the group.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Group.Add(ceTe.DynamicPDF.PageElement)">
            <summary>
            Adds a page element to the group.
            </summary>
            <param name="pageElement"><see cref="T:ceTe.DynamicPDF.PageElement"/> object to add to the group.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Group.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <b>Group</b>.
            </summary>
            <returns>An <b>IEnumerator</b> for the entire <b>Group</b></returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Group.GetPageElementByID(System.String)">
            <summary>
            Returns a page element with the given ID.
            </summary>
            <param name="id">ID of the page element to find.</param>
            <returns><b>PageElement</b> with the given ID.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Group.HasPageElements">
            <summary>
            Returns a value indicating if there are any <see cref="P:ceTe.DynamicPDF.PageElements.Group.PageElements"/> in the group.
            </summary>
            <returns>Value indication whether or not there are <see cref="P:ceTe.DynamicPDF.PageElements.Group.PageElements"/> in the group.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Group.Item(System.String)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElement"/> object with the given ID.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Group.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElement"/> object at the given index.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Group.Count">
            <summary>
            Gets the number of page elements in the group.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Group.HasElements">
            <summary>
            Gets a value indicating whether the group has any elements.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.AnchorGroup.#ctor(System.Single,System.Single,ceTe.DynamicPDF.Align,ceTe.DynamicPDF.VAlign)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.AnchorGroup"/> class.
            </summary>
            <param name="width">Width of the anchor group.</param>
            <param name="height">Height of the anchor group.</param>
            <param name="align">Alignment of the anchor group.</param>
            <param name="vAlign">Vertical Alignment of the anchor group.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.AnchorGroup.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the anchor group to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the anchor group's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.AnchorGroup.Width">
            <summary>
            Gets or sets the width of the anchor group.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.AnchorGroup.Height">
            <summary>
            Gets or sets the height of the anchor group.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.AnchorGroup.Align">
            <summary>
            Gets or sets the alignment of the anchor group.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.AnchorGroup.VAlign">
            <summary>
            Gets or sets the vertical alignment of the anchor group.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.AnchorGroup.AnchorTo">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.AnchorGroup.AnchorTo"/> object to use for the anchor group.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.AnchorTo">
            <summary>
            Specifies the types of anchors.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.AnchorTo.Margins">
            <summary>
            Anchors to the margins of the page.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.AnchorTo.Edges">
            <summary>
            Anchors to the edges of the page.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.AreaGroup">
             <summary>
             Represents a group of page elements with an area.
             </summary>
             <remarks>This class can be used to collect many page elements together and add them to the page all at once. 
             Every page element that you add to the group will be added to the page when the group is added to the page.</remarks>
             <example>The following example will place a rectangle and several lines into a group object and then add that group to the page.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create an area group
                     Dim MyGroup As AreaGroup = New AreaGroup(200, 200)
             
                     ' Add page elements to the group 
                     MyGroup.Add(New Rectangle(0, 0, 200, 200, 3))
                     MyGroup.Add(New Line(0, 100, 100, 0, 3))
                     MyGroup.Add(New Line(100, 0, 200, 100, 3))
                     MyGroup.Add(New Line(200, 100, 100, 200, 3))
                     MyGroup.Add(New Line(100, 200, 0, 100, 3))
             		
                     ' Add the group to the page
                     MyPage.Elements.Add(MyGroup)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create an area group
                     AreaGroup group = new AreaGroup( 200, 200 );
             
                     // Add page elements to the group
             		group.Add( new Rectangle( 0, 0, 200, 200, 3 ) );
             		group.Add( new Line( 0, 100, 100, 0, 3 ) );
             		group.Add( new Line( 100, 0, 200, 100, 3 ) );
             		group.Add( new Line( 200, 100, 100, 200, 3 ) );
             		group.Add( new Line( 100, 200, 0, 100, 3 ) );
             	
                     // Add the group to the page
                     page.Elements.Add( group );	
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Professional Edition</item>
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Professional Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Professional Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.AreaGroup.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.AreaGroup"/> class.
            </summary>
            <param name="width">Width of the area group.</param>
            <param name="height">Height of the area group.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.AreaGroup.X">
            <summary>
            Gets the X coordinate of the area group.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.AreaGroup.Y">
            <summary>
            Gets the Y coordinate of the area group.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.AreaGroup.Width">
            <summary>
            Gets or sets the width of the area group.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.AreaGroup.Height">
            <summary>
            Gets or sets the height of the area group.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BackgroundImage">
             <summary>
             Represents a background image.
             </summary>
             <remarks>This class can be used to place an image on the page that will be stretched to the dimensions of the page.
             If an image will be used more than once, please see the <a href="Image ReUse.html">Image Reuse</a> topic.</remarks>
             <example>The following example will place an image on the page making it the background for that page.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a background image
                     Dim MyBackgroundImage As BackgroundImage = New BackgroundImage("C:\MyImage.jpg")
             
                     ' Place the image with in the page margins 
                     MyBackgroundImage.UseMargins = True
             
                     ' Add the background image to the page
                     MyPage.Elements.Add(MyBackgroundImage)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
             
                     // Create a page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create a background image
                     BackgroundImage backgroundImage = new BackgroundImage( @"C:\MyImage.jpg" );
             
                     // Place the image with in the page margins
                     backgroundImage.UseMargins = true;
             	
                     // Add the background image to the page
                     page.Elements.Add( backgroundImage );	
             
                     //Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Professional Edition feature, except for the use of 64 bit PNG images (in this case see below). One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
             <item>DynamicPDF Generator for .NET Professional Edition</item>
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Professional Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Professional Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             Use of 64 bit PNG images with this class is an Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BackgroundImage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BackgroundImage"/> class.
            </summary>
            <param name="filePath">The physical file path to the background image.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BackgroundImage.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BackgroundImage"/> class.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> object containing the image data.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BackgroundImage.#ctor(ceTe.DynamicPDF.Imaging.ImageData)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BackgroundImage"/> class.
            </summary>
            <param name="imageData"><see cref="P:ceTe.DynamicPDF.PageElements.BackgroundImage.ImageData"/> object containing the image data.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BackgroundImage.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the background image to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the background image's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BackgroundImage.ImageData">
            <summary>
            Get the background image's <see cref="P:ceTe.DynamicPDF.PageElements.BackgroundImage.ImageData"/> object.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BackgroundImage.LeftPadding">
            <summary>
            Get or set the left padding of the background image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BackgroundImage.RightPadding">
            <summary>
            Get or set the right padding of the background image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BackgroundImage.TopPadding">
            <summary>
            Get or set the top padding of the background image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BackgroundImage.BottomPadding">
            <summary>
            Get or set the bottom padding of the background image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BackgroundImage.UseMargins">
            <summary>
            Get or set a value indicating if the pages margins should be used when calculating the placement of the background image.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Bookmark">
            <summary>
            Represents a bookmark.
            </summary>
            <remarks>This class can be used to place bookmarks on the PDF document.  These bookmarks will be displayed to the right of 
            the PDF document.  See the <a href="Outlines and BookMarks.html">Outlines and Bookmarks</a> topic for more details on bookmarks.
            <p/><b>NOTE:</b> This page element cannot be used within a table cell, or tranformation group.</remarks>
            <example>The following example will place three bookmarks on the PDF document.  Each bookmark has a different action.  
            The first bookmark links to a URL and when clicked on will open up that URL in the current window.  The second bookmark when 
            clicked will zoom the page to fit the width of that page.  The third bookmark when clicked will bring the specified X, Y 
            destination into focus.  If that destination location is already visible no action is taken.<p/>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
                Sub Main()
            		
                    ' Create a PDF Document
                    Dim MyDocument As Document = New Document
            		
                    ' Create three page objects
                    Dim MyPage1 As Page = New Page(PageSize.Letter)
                    Dim MyPage2 As Page = New Page(PageSize.Letter)
                    Dim MyPage3 As Page = New Page(PageSize.Letter)
            		
                    ' Add a top level Outline
                    Dim MyParentOutline As Outline = MyDocument.Outlines.Add("Parent Outline")
            		
                    ' Add a top level bookmark
                    MyPage1.Elements.Add(New Bookmark("Top level bookmark to page 1", 0, 0))
            		
                    ' Add child bookmarks
                    MyPage1.Elements.Add(New Bookmark("Bookmark to page 1", 0, 0, MyParentOutline))
                    MyPage2.Elements.Add(New Bookmark("Bookmark to page 2", 0, 0, MyParentOutline))
                    MyPage3.Elements.Add(New Bookmark("Bookmark to page 3", 0, 0, MyParentOutline))
            		
                    ' Add the three pages to the document
                    MyDocument.Pages.Add(MyPage1)
                    MyDocument.Pages.Add(MyPage2)
                    MyDocument.Pages.Add(MyPage3)
            		
                    ' Save the PDF document
                    MyDocument.Draw("C:\MyDocument.pdf")
            		
                End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
                static void Main()
                {
                    // Create a PDF Document
                    Document document = new Document();
            		
                    // Create three page objects
                    Page page1 = new Page( PageSize.Letter );
                    Page page2 = new Page( PageSize.Letter );
                    Page page3 = new Page( PageSize.Letter );
            		
                    // Add a top level Outline
                    Outline parentOutline = document.Outlines.Add( "Parent Outline" );
            		
                    // Add a top level bookmark
                    page1.Elements.Add( new Bookmark( "Top level bookmark to page 1", 0, 0 ) );
            		
                    // Add child bookmarks
                    page1.Elements.Add( new Bookmark( "Bookmark to page 1", 0, 0, parentOutline ) );
                    page2.Elements.Add( new Bookmark( "Bookmark to page 2", 0, 0, parentOutline ) );
                    page3.Elements.Add( new Bookmark( "Bookmark to page 3", 0, 0, parentOutline ) );
            		
                    // Add the three pages to the document
                    document.Pages.Add( page1 );
                    document.Pages.Add( page2 );
                    document.Pages.Add( page3 );
            		
                    // Save the PDF document
                    document.Draw( @"C:\MyDocument.pdf" );
                }
            }
            </code>
            </example>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Bookmark.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Bookmark"/> class.
            </summary>
            <param name="text">Text of the bookmark.</param>
            <param name="x">X coordinate of the bookmark.</param>
            <param name="y">Y coordinate of the bookmark.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Bookmark.#ctor(System.String,System.Single,System.Single,ceTe.DynamicPDF.Outline)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Bookmark"/> class.
            </summary>
            <param name="text">Text of the bookmark.</param>
            <param name="x">X coordinate of the bookmark.</param>
            <param name="y">Y coordinate of the bookmark.</param>
            <param name="parentOutline"><see cref="T:ceTe.DynamicPDF.Outline"/> object that the bookmark will appear under.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Bookmark.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the bookmark to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the bookmark's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Bookmark.Text">
            <summary>
            Gets or sets the text of the bookmark.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Bookmark.X">
            <summary>
            Gets of sets the X coordinate of the bookmark.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Bookmark.Y">
            <summary>
            Gets or sets the Y coordinate of the bookmark.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Bookmark.Style">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.TextStyle"/> enumeration that represents the text style of the bookmark.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Bookmark.ParentOutline">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Outline"/> object the bookmark will appear under.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Bookmark.Color">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Bookmark.Color"/> object to use for the text of the bookmark.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Border">
            <summary>
            Represents a border with color, width and linestyle.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Border.Width">
            <summary>
            Gets or sets the width of the border.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Border.Color">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Border.Color"/> of the border.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Border.LineStyle">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Border.LineStyle"/> of the border.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Border.Top">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.CellBorderStyle"/> object for the top border.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Border.Bottom">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.CellBorderStyle"/> object for the bottom border.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Border.Left">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.CellBorderStyle"/> object for the left border.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Border.Right">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.CellBorderStyle"/> object for the right border.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Cell">
            <summary>
            <font color="red">Obsolete.</font> Represents a cell in the Table.
            </summary>
            <remarks><font color="red">NOTE: This class is obsolete.</font> Use <see cref="T:ceTe.DynamicPDF.PageElements.Cell2"/> class instead.</remarks>
            <example>The following example will display a simple table on the page.<p/>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
                Sub Main()
            		
                    ' Create a PDF Document
                    Dim MyDocument As Document = New Document
            		
                    ' Create a Page and add it to the document
                    Dim MyPage As Page = New Page
                    MyDocument.Pages.Add(MyPage)
            		
                    ' Create a table 
                    Dim MyTable As Table = New Table(0, 0, 600, 600)
            		
                    ' Add columns to the table
                    MyTable.Columns.Add(150)
                    MyTable.Columns.Add(90)
                    MyTable.Columns.Add(90)
                    MyTable.Columns.Add(90)
            		
                    ' Add rows to the table and add cells to the rows
                    Dim row1 As Row = MyTable.Rows.Add(40, ceTe.DynamicPDF.Font.HelveticaBold, _
            			16, Grayscale.Black, Grayscale.Gray)
                    row1.Align = TextAlign.Center
                    row1.VAlign = VAlign.Center
                    row1.Cells.Add("Header 1")
                    row1.Cells.Add("Header 2")
                    row1.Cells.Add("Header 3")
                    row1.Cells.Add("Header 4")
            		
                    Dim row2 As Row = MyTable.Rows.Add(30)
                    Dim cell1 As Cell = row2.Cells.Add("Rowheader 1", Font.HelveticaBold, 16, _
            			Grayscale.Black, Grayscale.Gray, 1)
                    cell1.Align = CellAlign.Center
                    cell1.VAlign = CellVAlign.Center
                    row2.Cells.Add("Item 1")
                    row2.Cells.Add("Item 2")
                    row2.Cells.Add("Item 3")
            		
                    Dim row3 As Row = MyTable.Rows.Add(30)
                    Dim cell2 As Cell = row3.Cells.Add("Rowheader 2", Font.HelveticaBold, 16, _
            			Grayscale.Black, Grayscale.Gray, 1)
                    cell2.Align = CellAlign.Center
                    cell2.VAlign = CellVAlign.Center
                    row3.Cells.Add("Item 4")
                    row3.Cells.Add("Item 5")
                    row3.Cells.Add("Item 6")
            		
                    ' Add the table to the page
                    MyPage.Elements.Add(MyTable)
            		
                    ' Save the PDF
                    MyDocument.Draw("C:\MyDocument.pdf")
            		
                End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
                static void Main()
                {
                    // Create a PDF Document
                    Document document = new Document();
            				
                    // Create a Page and add it to the document
                    Page page = new Page();
                    document.Pages.Add( page );
            					 	
                    // Create a table 
                    Table table = new Table(0, 0, 600, 600);
            					 	
                    //Add columns to the table
                    table.Columns.Add( 150 );
                    table.Columns.Add( 90 );
                    table.Columns.Add( 90 );
                    table.Columns.Add( 90 );
            					 	
                    // Add rows to the table and add cells to the rows
                    Row row1 = table.Rows.Add( 40, Font.HelveticaBold, 16, Grayscale.Black, 
            			Grayscale.Gray );
                    row1.Align = CellAlign.Center;
                    row1.VAlign = CellVAlign.Center;
                    row1.Cells.Add( "Header 1" );
                    row1.Cells.Add( "Header 2" );
                    row1.Cells.Add( "Header 3" );
                    row1.Cells.Add( "Header 4" );
            					 	
                    Row row2 = table.Rows.Add( 30 );
                    Cell cell1 = row2.Cells.Add( "Rowheader 1", Font.HelveticaBold, 16, 
            			Grayscale.Black, Grayscale.Gray, 1 );
                    cell1.Align = CellAlign.Center;
                    cell1.VAlign = CellVAlign.Center;
                    row2.Cells.Add( "Item 1" );
                    row2.Cells.Add( "Item 2" );
                    row2.Cells.Add( "Item 3" );
            					 			
                    Row row3 = table.Rows.Add( 30 );
                    Cell cell2 = row3.Cells.Add( "Rowheader 2", Font.HelveticaBold, 16, 
            			Grayscale.Black, Grayscale.Gray, 1 );
                    cell2.Align = CellAlign.Center;
                    cell2.VAlign = CellVAlign.Center;
                    row3.Cells.Add( "Item 4" );
                    row3.Cells.Add( "Item 5" );
                    row3.Cells.Add( "Item 6" );
            					 	
                    // Add the table to the page
                    page.Elements.Add( table );	
            					 	
                    // Save the PDF
                    document.Draw( @"C:\MyDocument.pdf" );
                }
            } 
            </code>
            </example>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell.Text">
            <summary>
            Gets or sets the text to be displayed.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell.Element">
            <summary>
            Gets or sets the page element contained in the cell.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell.Padding">
            <summary>
            Gets or sets the padding of the cell.  By default this value is set to float.MinValue.  Being set to 'Not a Number' implies that the cell's padding will be pulled from the padding for the row containing that cell. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell.FontSize">
            <summary>
            Gets or sets the font size to use for the text in the cell.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell.Font">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Cell.Font"/> object to use for the cell.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell.Row">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.PageElements.Cell.Row"/> that the cell is contained in.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell.ColumnIndex">
            <summary>
            Gets the index of the <see cref="T:ceTe.DynamicPDF.PageElements.Column"/> in which the cell begins.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell.ColumnSpan">
            <summary>
            Gets or sets the number of columns that the cell spans.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell.RowSpan">
            <summary>
            Gets or sets the number of rows that the cell spans.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell.Width">
            <summary>
            Gets the width of the cell.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell.Height">
            <summary>
            Gets the height of the cell.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell.BackgroundColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the background of the cell.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell.TextColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the text of the cell.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell.Align">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.CellAlign"/> enumeration to use for the horizontal alignment of the text in the cell.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell.VAlign">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.CellVAlign"/> enumeration to use for the vertical alignment of the text in the cell.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell.AutoLeading">
            <summary>
            Gets or sets whether the leading of the cell should be calculated automatically.
            </summary>
            <remarks>This property is automatically set to false any time the <see cref="P:ceTe.DynamicPDF.PageElements.Cell.Leading"/> property is set.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell.Leading">
            <summary>
            Gets or sets the leading for the text of the cell.
            </summary>
            <remarks>Setting this property will automatically set the <see cref="P:ceTe.DynamicPDF.PageElements.Cell.AutoLeading"/> property to false.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell.ParagraphIndent">
            <summary>
            Gets or sets the paragraph indent for the paragraphs of the cell.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell.ParagraphSpacing">
            <summary>
            Gets or sets the paragraph spacing for the paragraphs of the cell.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell.RightToLeft">
            <summary>
            Gets or sets a value specifying whether the text in the cell will be displayed right to left.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell.Underline">
            <summary>
            Gets or sets a value specifying whether the text in the cell will be underlined. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell.Tag">
            <summary>
            Gets or sets the structure element of the angle element.
            </summary>
            <licensing>
            This property is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>        
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell.TagOrder">
            <summary>
            Gets or sets the structure element order of the angle element.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Cell2">
             <summary>
             Represents a cell in the Table
             </summary>
             <example>The following example will display a simple table on the page.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             		
                     ' Create a table 
                     Dim MyTable As Table2 = New Table2(0, 0, 600, 600)
             		
                     ' Add columns to the table
                     MyTable.Columns.Add(150)
                     MyTable.Columns.Add(90)
                     MyTable.Columns.Add(90)
                     MyTable.Columns.Add(90)
             		
                     ' Add rows to the table and add cells to the rows
                     Dim row1 As Row2 = MyTable.Rows.Add(40, ceTe.DynamicPDF.Font.HelveticaBold, _
             			16, Grayscale.Black, Grayscale.Gray)
                     row1.CellDefault.Align = TextAlign.Center
                     row1.CellDefault.VAlign = VAlign.Center
                     row1.CellDefault.Border.Color = RgbColor.Blue
                     row1.CellDefault.Border.Width = 2.0f
                     row1.CellDefault.Border.LineStyle = LineStyle.Dots
                     row1.Cells.Add("Header 1")
                     row1.Cells.Add("Header 2")
                     row1.Cells.Add("Header 3")
                     row1.Cells.Add("Header 4")
             		
                     Dim row2 As Row2 = MyTable.Rows.Add(30)
                     Dim cell1 As Cell2 = row2.Cells.Add("Rowheader 1", Font.HelveticaBold, 16, _
             			Grayscale.Black, Grayscale.Gray, 1)
                     cell1.Align = TextAlign.Center
                     cell1.VAlign = VAlign.Center
                     cell1.Border.Color = RgbColor.Green
                     cell1.Border.Width = 2.0f
                     cell1.Border.Right.LineStyle = LineStyle.Solid
                     row2.Cells.Add("Item 1")
                     row2.Cells.Add("Item 2")
                     row2.Cells.Add("Item 3")    
                     row2.CellDefault.Border.Top.Width = 3.0f
            
             		
                     Dim row3 As Row2 = MyTable.Rows.Add(30)
                     Dim cell2 As Cell2 = row3.Cells.Add("Rowheader 2", Font.HelveticaBold, 16, _
             			Grayscale.Black, Grayscale.Gray, 1)
                     cell2.Align = TextAlign.Center
                     cell2.VAlign = VAlign.Center
                     cell2.Border.Color = RgbColor.Blue
                     cell2.Border.Width = 2.0f
                     cell2.Border.LineStyle = LineStyle.None
                     row3.Cells.Add("Item 4")
                     row3.Cells.Add("Item 5")
                     row3.Cells.Add("Item 6")
                     row3.CellDefault.Padding.Left = 4.0f
                     row3.CellDefault.Padding.Top = 4.0f
                     row3.CellDefault.Padding.Right = 2.0f
                     row3.CellDefault.Padding.Bottom = 2.0f
             		
                     MyTable.CellDefault.Padding.Value = 3.0f
                     MyTable.CellSpacing = 5.0f
             		
                     ' Add the table to the page
                     MyPage.Elements.Add(MyTable)
             		
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
             				
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             					 	
                     // Create a table 
                     Table2 table = new Table2(0, 0, 600, 600);
             					 	
                     //Add columns to the table
                     table.Columns.Add( 150 );
                     table.Columns.Add( 90 );
                     table.Columns.Add( 90 );
                     table.Columns.Add( 90 );
             					 	
                     // Add rows to the table and add cells to the rows
                     Row2 row1 = table.Rows.Add( 40, Font.HelveticaBold, 16, Grayscale.Black, 
             			Grayscale.Gray );
                     row1.CellDefault.Align = TextAlign.Center;
                     row1.CellDefault.VAlign = VAlign.Center;
                     row1.CellDefault.Border.Color = RgbColor.Blue;
                     row1.CellDefault.Border.Width = 2.0f;
                     row1.CellDefault.Border.LineStyle = LineStyle.Dots;
                     row1.Cells.Add( "Header 1" );
                     row1.Cells.Add( "Header 2" );
                     row1.Cells.Add( "Header 3" );
                     row1.Cells.Add( "Header 4" );
             					 	
                     Row2 row2 = table.Rows.Add( 30 );
                     Cell2 cell1 = row2.Cells.Add( "Rowheader 1", Font.HelveticaBold, 16, 
             			Grayscale.Black, Grayscale.Gray, 1 );
                     cell1.Align = TextAlign.Center;
                     cell1.VAlign = VAlign.Center;
                     cell1.Border.Color = RgbColor.Green;
                     cell1.Border.Width = 2.0f;
                     cell1.Border.Right.LineStyle = LineStyle.Solid;
                     row2.Cells.Add( "Item 1" );
                     row2.Cells.Add( "Item 2" );
                     row2.Cells.Add( "Item 3" );    
                     row2.CellDefault.Border.Top.Width = 3.0f;    
             					 			
                     Row2 row3 = table.Rows.Add( 30 );
                     Cell2 cell2 = row3.Cells.Add( "Rowheader 2", Font.HelveticaBold, 16, 
             			Grayscale.Black, Grayscale.Gray, 1 );
                     cell2.Align = TextAlign.Center;
                     cell2.VAlign = VAlign.Center;
                     cell2.Border.Color = RgbColor.Blue;
                     cell2.Border.Width = 2.0f;
                     cell2.Border.LineStyle = LineStyle.None;
                     row3.Cells.Add( "Item 4" );
                     row3.Cells.Add( "Item 5" );
                     row3.Cells.Add( "Item 6" );
                     row3.CellDefault.Padding.Left = 4.0f;
                     row3.CellDefault.Padding.Top = 4.0f;
                     row3.CellDefault.Padding.Right = 2.0f;
                     row3.CellDefault.Padding.Bottom = 2.0f;
             		
                     table.CellDefault.Padding.Value = 3.0f;
                     table.CellSpacing = 5.0f;
             
                     // Add the table to the page
                     page.Elements.Add( table );	
             					 	
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             } 
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Professional Edition</item>
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Professional Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Professional Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell2.Splittable">
            <summary>
            Gets or sets a value specifying whether the cell can be splittable.
            </summary>        
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell2.Text">
            <summary>
            Gets or sets the text to be displayed.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell2.Element">
            <summary>
            Gets or sets the page element contained in the cell.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell2.Padding">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.CellPadding"/> object to use for the cell. 
            </summary>        
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell2.Border">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.PageElements.Cell2.Border"/> object to use for the cell. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell2.FontSize">
            <summary>
            Gets or sets the font size to use for the text in the cell.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell2.Font">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Cell2.Font"/> object to use for the cell.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell2.Row">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Row2"/> that the cell is contained in.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell2.ColumnIndex">
            <summary>
            Gets the index of the <see cref="T:ceTe.DynamicPDF.PageElements.Column2"/> in which the cell begins.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell2.ColumnSpan">
            <summary>
            Gets or sets the number of columns that the cell spans.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell2.RowSpan">
            <summary>
            Gets or sets the number of rows that the cell spans.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell2.Width">
            <summary>
            Gets the width of the cell.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell2.Height">
            <summary>
            Gets the height of the cell.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell2.BackgroundColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the background of the cell.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell2.TextColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the text of the cell.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell2.Align">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.TextAlign"/> enumeration to use for the horizontal alignment of the text in the cell.
            Justify and FullJustify are applicable only for text.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell2.VAlign">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Cell2.VAlign"/> enumeration to use for the vertical alignment of the text in the cell.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell2.AutoLeading">
            <summary>
            Gets or sets whether the leading of the cell should be calculated automatically.
            </summary>
            <remarks>This property is automatically set to false any time the <see cref="P:ceTe.DynamicPDF.PageElements.Cell2.Leading"/> property is set.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell2.Leading">
            <summary>
            Gets or sets the leading for the text of the cell.
            </summary>
            <remarks>Setting this property will automatically set the <see cref="P:ceTe.DynamicPDF.PageElements.Cell2.AutoLeading"/> property to false.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell2.ParagraphIndent">
            <summary>
            Gets or sets the paragraph indent for the paragraphs of the cell.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell2.ParagraphSpacing">
            <summary>
            Gets or sets the paragraph spacing for the paragraphs of the cell.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell2.RightToLeft">
            <summary>
            Gets or sets a value specifying whether the text in the cell will be displayed right to left.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell2.Underline">
            <summary>
            Gets or sets a value specifying whether the text in the cell will be underlined. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell2.Tag">
            <summary>
            Gets or sets the structure element of the cell.
            </summary>
            <licensing>
            This property is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>        
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell2.TagOrder">
            <summary>
            Gets or sets the structure element order of the cell.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Cell2List">
            <summary>
            Represents a list of cells.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Cell2List.Add(System.String)">
             <summary>
             Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Cell2"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Cell2List"/>.
             </summary>
             <param name="text">Text to be displayed in the cell.</param>
             <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Cell2"/> object.</returns>
             <remarks>This method is used to add any text to a cell in a table.</remarks>
             <example>The following example shows you how to build a simple table.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
             	Sub Main()
            			
            			' Create a PDF Document
            			Dim MyDocument As Document = New Document
            			Dim MyPage As Page = New Page
            			MyDocument.Pages.Add(MyPage)
            
            			Dim MyTable As Table2 = New Table2(0, 0, 600, 600)
            
            			MyTable.CellDefault.Align = TextAlign.Center
            			MyTable.CellDefault.VAlign = VAlign.Center
                     MyTable.Border.LineStyle = LineStyle.Solid
                     MyTable.CellSpacing = 5.0f
            
            			' Add columns to the table
            			MyTable.Columns.Add(150)
            			MyTable.Columns.Add(150)
            			MyTable.Columns.Add(150)
            
            			' Add rows to the table and add cells to the rows
            			Dim MyRow1 As Row2 = MyTable.Rows.Add(0, Font.HelveticaBold, 16, Grayscale.Black, _
            				Grayscale.LightGrey)
            			MyRow1.Cells.Add("Header 1")
            			MyRow1.Cells.Add("Header 2")
            			MyRow1.Cells.Add("Header 3")
            
            			Dim MyRow2 As Row2 = MyTable.Rows.Add()
            			MyRow2.Cells.Add("Rowheader 1", Font.HelveticaBold, 16, Grayscale.Black, _
            				Grayscale.LightGrey, 1)
            			MyRow2.Cells.Add("Item 1")
            			MyRow2.Cells.Add("Item 2")
            
            			Dim MyRow3 As Row2 = MyTable.Rows.Add()
            			MyRow3.Cells.Add("Rowheader 2", Font.HelveticaBold, 16, Grayscale.Black, _
            				Grayscale.LightGrey, 1)
            			MyRow3.Cells.Add("Item 3")
            			MyRow3.Cells.Add("Item 4")
            
            			Dim MyRow4 As Row2 = MyTable.Rows.Add()
            			MyRow4.Cells.Add("Rowheader 3", Font.HelveticaBold, 16, Grayscale.Black, _
            				Grayscale.LightGrey, 1)
            			MyRow4.Cells.Add("Item 5")
            			MyRow4.Cells.Add("Item 6")
            
            			' Add the table to the page
            			MyPage.Elements.Add(MyTable)
            
            			' Save the PDF
            			MyDocument.Draw("C:\MyDocument.pdf")
             		
             	End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
             	static void Main()
             	{
            			// Create a PDF Document
            			Document document = new Document();
            			Page page = new Page();
            			document.Pages.Add( page );
            				 			 		
            			Table2 table = new Table2(0, 0, 600, 800);
            
            			table.CellDefault.Align = TextAlign.Center;
            			table.CellDefault.VAlign = VAlign.Center;
                     table.Border.LineStyle = LineStyle.Solid; 
                     table.CellSpacing = 5.0f;
            			         
            			// Add columns to the table
            			table.Columns.Add( 150 );
            			table.Columns.Add( 150 );
            			table.Columns.Add( 150 );
            			         
            			// Add rows to the table and add cells to the rows
            			Row2 row1 = table.Rows.Add( 0, Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey );
            			row1.Cells.Add( "Header 1" );
            			row1.Cells.Add( "Header 2" );
            			row1.Cells.Add( "Header 3" );
            				         
            			Row2 row2 = table.Rows.Add();
            			row2.Cells.Add( "Rowheader 1", Font.HelveticaBold, 16, Grayscale.Black, 
            			Grayscale.LightGrey, 1 );
            			row2.Cells.Add( "Item 1" );
            			row2.Cells.Add( "Item 2" );
            				                 
            			Row2 row3 = table.Rows.Add();
            			row3.Cells.Add( "Rowheader 2", Font.HelveticaBold, 16, Grayscale.Black, 
            			Grayscale.LightGrey, 1 );
            			row3.Cells.Add( "Item 3" );
            			row3.Cells.Add( "Item 4" );
            				                 
            			Row2 row4 = table.Rows.Add();
            			row4.Cells.Add( "Rowheader 3", Font.HelveticaBold, 16, Grayscale.Black, 
            			Grayscale.LightGrey, 1 );
            			row4.Cells.Add( "Item 5" );
            			row4.Cells.Add( "Item 6" );
            
             		// Add the table to the page
             		page.Elements.Add( table );  
            
            			// Save the PDF
            			document.Draw( @"C:\MyDocument.pdf" );
             	}
             }
             </code>
             </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Cell2List.Add(System.String,System.Int32)">
             <summary>
             Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Cell2"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Cell2List"/>.
             </summary>
             <param name="text">Text to be displayed in the cell.</param>
             <param name="colSpan">Number of columns that the cell will span.</param>
             <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Cell2"/> object.</returns>
             <remarks>This method is used to add any text to a cell in a table.</remarks>
             <example>The following example shows you how to build a simple table.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
             	Sub Main()
             	
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
                     
                     Dim MyTable As Table2 = New Table2(0, 0, 600, 600)
                     
                     MyTable.CellDefault.Align = TextAlign.Center
                     MyTable.CellDefault.VAlign = VAlign.Center
                     MyTable.Border.LineStyle = LineStyle.Solid
                     MyTable.CellSpacing = 5.0f
                     
                     ' Add columns to the table
                     MyTable.Columns.Add(150)
                     MyTable.Columns.Add(150)
                     MyTable.Columns.Add(150)
                     
                     ' Add rows to the table and add cells to the rows
                     Dim MyRow1 As Row2 = MyTable.Rows.Add(0, Font.HelveticaBold, 16, Grayscale.Black, _
                         Grayscale.LightGrey)
                     MyRow1.Cells.Add("Header 1")
                     MyRow1.Cells.Add("Header 2")
                     MyRow1.Cells.Add("Header 3")
                     
                     Dim MyRow2 As Row2 = MyTable.Rows.Add()
                     MyRow2.Cells.Add("Rowheader 1", Font.HelveticaBold, 16, Grayscale.Black, _
                         Grayscale.LightGrey, 1)
                     MyRow2.Cells.Add("Item 1")
                     MyRow2.Cells.Add("Item 2")
                     
                     Dim MyRow3 As Row2 = MyTable.Rows.Add()
                     MyRow3.Cells.Add("Rowheader 2", Font.HelveticaBold, 16, Grayscale.Black, _
                         Grayscale.LightGrey, 1)
                     MyRow3.Cells.Add("Item 3")
                     MyRow3.Cells.Add("Item 4")
                     
                     Dim MyRow4 As Row2 = MyTable.Rows.Add()
                     MyRow4.Cells.Add("Rowheader 3", Font.HelveticaBold, 16, Grayscale.Black, _
                         Grayscale.LightGrey, 1)
                     MyRow4.Cells.Add("Item 5", 2)
                     
                     ' Add the table to the page
                     MyPage.Elements.Add(MyTable)
                     
                     ' Save the PDF
            			MyDocument.Draw("C:\MyDocument.pdf")
             		
             	End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
             	static void Main()
             	{
            			// Create a PDF Document
            			Document document = new Document();
            			Page page = new Page();
            			document.Pages.Add( page );
            				 			 		
            			Table2 table = new Table2(0, 0, 600, 600);
            		
            			table.CellDefault.Align = TextAlign.Center;
            			table.CellDefault.VAlign = VAlign.Center;
                     table.Border.LineStyle = LineStyle.Solid; 
                     table.CellSpacing = 5.0f;
            			         
            			// Add columns to the table
            			table.Columns.Add( 150 );
            			table.Columns.Add( 150 );
            			table.Columns.Add( 150 );
            			         
            			// Add rows to the table and add cells to the rows
            			Row2 row1 = table.Rows.Add( 0, Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey );
            			row1.Cells.Add( "Header 1" );
            			row1.Cells.Add( "Header 2" );
            			row1.Cells.Add( "Header 3" );
            			         
            			Row2 row2 = table.Rows.Add();
            			row2.Cells.Add( "Rowheader 1", Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey, 1 );
            			row2.Cells.Add( "Item 1" );
            			row2.Cells.Add( "Item 2" );
            			                 
            			Row2 row3 = table.Rows.Add();
            			row3.Cells.Add( "Rowheader 2", Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey, 1 );
            			row3.Cells.Add( "Item 3" );
            			row3.Cells.Add( "Item 4" );
            			                 
            			Row2 row4 = table.Rows.Add();
            			row4.Cells.Add( "Rowheader 3", Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey, 1 );
            			row4.Cells.Add( "Item 5", 2 );
            		
            			// Add the table to the page
            			page.Elements.Add( table );  
            
            			// Save the PDF
            			document.Draw( @"C:\MyDocument.pdf" );
             	}
             }
             </code>
             </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Cell2List.Add(System.String,ceTe.DynamicPDF.Font,System.Nullable{System.Single})">
             <summary>
             Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Cell2"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Cell2List"/>.
             </summary>
             <param name="text">Text to be displayed in the cell.</param>
             <param name="font">Font for the text in the cell.</param>
             <param name="fontSize">Font size for the text in the cell.</param>
             <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Cell2"/> object.</returns>
             <remarks>This method is used to add any text to a cell in a table.</remarks>
             <example>The following example shows you how to build a simple table.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
             	Sub Main()
             	
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
                     
                     Dim MyTable As Table2 = New Table2(0, 0, 600, 600)
                     
                     MyTable.CellDefault.Align = TextAlign.Center
                     MyTable.CellDefault.VAlign = VAlign.Center
                     MyTable.Border.LineStyle = LineStyle.Solid 
                     MyTable.CellSpacing = 5.0f
                     
                     ' Add columns to the table
                     MyTable.Columns.Add(150)
                     MyTable.Columns.Add(150)
                     MyTable.Columns.Add(150)
                     
                     ' Add rows to the table and add cells to the rows
                     Dim MyRow1 As Row2 = MyTable.Rows.Add(0, Font.HelveticaBold, 16, Grayscale.Black, _
                         Grayscale.LightGrey)
                     MyRow1.Cells.Add("Header 1")
                     MyRow1.Cells.Add("Header 2")
                     MyRow1.Cells.Add("Header 3")
                     
                     Dim MyRow2 As Row2 = MyTable.Rows.Add()
                     MyRow2.Cells.Add("Rowheader 1", Font.HelveticaBold, 16, Grayscale.Black, _
                         Grayscale.LightGrey, 1)
                     MyRow2.Cells.Add("Item 1")
                     MyRow2.Cells.Add("Item 2")
                     
                     Dim MyRow3 As Row2 = MyTable.Rows.Add()
                     MyRow3.Cells.Add("Rowheader 2", Font.HelveticaBold, 16, Grayscale.Black, _
                         Grayscale.LightGrey, 1)
                     MyRow3.Cells.Add("Item 3")
                     MyRow3.Cells.Add("Item 4")
                     
                     Dim MyRow4 As Row2 = MyTable.Rows.Add()
                     MyRow4.Cells.Add("Rowheader 3", Font.HelveticaBold, 16, Grayscale.Black, _
                         Grayscale.LightGrey, 1)
                     MyRow4.Cells.Add("Item 5", Font.Courier, 10)
                     MyRow4.Cells.Add("Item 6", Font.Courier, 10)
                     
                     ' Add the table to the page
                     MyPage.Elements.Add(MyTable)
            
            			' Save the PDF
            			MyDocument.Draw("C:\MyDocument.pdf")
             		
             	End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
             	static void Main()
             	{
            			// Create a PDF Document
            			Document document = new Document();
            			Page page = new Page();
            			document.Pages.Add( page );
            			 			 		
            			Table2 table = new Table2(0, 0, 600, 600);
            		
            			table.CellDefault.Align = TextAlign.Center;
            			table.CellDefault.VAlign = VAlign.Center;
                     table.Border.LineStyle = LineStyle.Solid; 
                     table.CellSpacing = 5.0f;
            			         
            			// Add columns to the table
            			table.Columns.Add( 150 );
            			table.Columns.Add( 150 );
            			table.Columns.Add( 150 );
            			         
            			// Add rows to the table and add cells to the rows
            			Row2 row1 = table.Rows.Add( 0, Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey );
            			row1.Cells.Add( "Header 1" );
            			row1.Cells.Add( "Header 2" );
            			row1.Cells.Add( "Header 3" );
            			         
            			Row2 row2 = table.Rows.Add();
            			row2.Cells.Add( "Rowheader 1", Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey, 1 );
            			row2.Cells.Add( "Item 1" );
            			row2.Cells.Add( "Item 2" );
            			                 
            			Row2 row3 = table.Rows.Add();
            			row3.Cells.Add( "Rowheader 2", Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey, 1 );
            			row3.Cells.Add( "Item 3" );
            			row3.Cells.Add( "Item 4" );
            			                 
            			Row2 row4 = table.Rows.Add();
            			row4.Cells.Add( "Rowheader 3", Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey, 1 );
            			row4.Cells.Add( "Item 5", Font.Courier, 10 );
            			row4.Cells.Add( "Item 6", Font.Courier, 10 );
            	
            			// Add the table to the page
            			page.Elements.Add( table );  
            			
            			// Save the PDF
            			document.Draw( @"C:\MyDocument.pdf" );
             	}
             }
             </code>
             </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Cell2List.Add(System.String,ceTe.DynamicPDF.Font,System.Nullable{System.Single},System.Int32)">
             <summary>
             Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Cell2"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Cell2List"/>.
             </summary>
             <param name="text">Text to be displayed in the cell.</param>
             <param name="font">Font for the text in the cell.</param>
             <param name="fontSize">Font size for the text in the cell.</param>
             <param name="colSpan">Number of columns that the cell will span.</param>
             <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Cell2"/> object.</returns>
             <remarks>This method is used to add any text to a cell in a table.</remarks>
             <example>The following example shows you how to build a simple table.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
             	Sub Main()
             	
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
                     
                     Dim MyTable As Table2 = New Table2(0, 0, 600, 600)
                     
                     MyTable.CellDefault.Align = TextAlign.Center
                     MyTable.CellDefault.VAlign = VAlign.Center
                     MyTable.Border.LineStyle = LineStyle.Solid 
                     MyTable.CellSpacing = 5.0f
                     
                     ' Add columns to the table
                     MyTable.Columns.Add(150)
                     MyTable.Columns.Add(150)
                     MyTable.Columns.Add(150)
                     
                     ' Add rows to the table and add cells to the rows
                     Dim MyRow1 As Row2 = MyTable.Rows.Add(0, Font.HelveticaBold, 16, _
                         Grayscale.Black, Grayscale.LightGrey)
                     MyRow1.Cells.Add("Header 1")
                     MyRow1.Cells.Add("Header 2")
                     MyRow1.Cells.Add("Header 3")
                     
                     Dim MyRow2 As Row2 = MyTable.Rows.Add()
                     MyRow2.Cells.Add("Rowheader 1", Font.HelveticaBold, 16, Grayscale.Black, _
                         Grayscale.LightGrey, 1)
                     MyRow2.Cells.Add("Item 1", Font.HelveticaOblique, 14, 2)
                     
                     Dim MyRow3 As Row2 = MyTable.Rows.Add()
                     MyRow3.Cells.Add("Rowheader 2", Font.HelveticaBold, 16, Grayscale.Black, _
                         Grayscale.LightGrey, 1)
                     MyRow3.Cells.Add("Item 2")
                     MyRow3.Cells.Add("Item 3")
                     
                     Dim MyRow4 As Row2 = MyTable.Rows.Add()
                     MyRow4.Cells.Add("Rowheader 3", Font.HelveticaBold, 16, Grayscale.Black, _
                         Grayscale.LightGrey, 1)
                     MyRow4.Cells.Add("Item 4")
                     MyRow4.Cells.Add("Item 5")
                     
                     ' Add the table to the page
                     MyPage.Elements.Add(MyTable)
            
            			' Save the PDF
            			MyDocument.Draw("C:\MyDocument.pdf")
             		
             	End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
             	static void Main()
             	{
            			// Create a PDF Document
            			Document document = new Document();
            			Page page = new Page();
            			document.Pages.Add( page );
            			 			 		
            			Table2 table = new Table2(0, 0, 600, 600);
            		
            			table.CellDefault.Align = TextAlign.Center;
            			table.CellDefault.VAlign = VAlign.Center;
                     table.Border.LineStyle = LineStyle.Solid; 
                     table.CellSpacing = 5.0f;
            			         
            			// Add columns to the table
            			table.Columns.Add( 150 );
            			table.Columns.Add( 150 );
            			table.Columns.Add( 150 );
            			         
            			// Add rows to the table and add cells to the rows
            			Row2 row1 = table.Rows.Add( 0, Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey );
            			row1.Cells.Add( "Header 1" );
            			row1.Cells.Add( "Header 2" );
            			row1.Cells.Add( "Header 3" );
            			         
            			Row2 row2 = table.Rows.Add();
            			row2.Cells.Add( "Rowheader 1", Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey, 1 );
            			row2.Cells.Add( "Item 1", Font.HelveticaOblique, 14, 2 );
            		
            			Row2 row3 = table.Rows.Add();
            			row3.Cells.Add( "Rowheader 2", Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey, 1 );
            			row3.Cells.Add( "Item 2" );
            			row3.Cells.Add( "Item 3" );
            			                 
            			Row2 row4 = table.Rows.Add();
            			row4.Cells.Add( "Rowheader 3", Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey, 1 );
            			row4.Cells.Add( "Item 4" );
            			row4.Cells.Add( "Item 5" );		
            			
            			// Add the table to the page
            			page.Elements.Add( table );  
            			
            			// Save the PDF
            			document.Draw( @"C:\MyDocument.pdf" );
             	}
             }
             </code>
             </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Cell2List.Add(System.String,ceTe.DynamicPDF.Font,System.Nullable{System.Single},System.Int32,System.Int32)">
             <summary>
             Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Cell2"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Cell2List"/>.
             </summary>
             <param name="text">Text to be displayed in the cell.</param>
             <param name="font">Font for the text in the cell.</param>
             <param name="fontSize">Font size for the text in the cell.</param>
             <param name="colSpan">Number of columns that the cell will span.</param>
             <param name="rowSpan">Number of rows that the cell will span.</param>
             <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Cell2"/> object.</returns>
             <remarks>This method is used to add any text to a cell in a table.</remarks>
             <example>The following example shows you how to build a simple table.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
             	Sub Main()
             	
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
                     
                     Dim MyTable As Table2 = New Table2(0, 0, 600, 600)
                     
                     MyTable.CellDefault.Align = TextAlign.Center
                     MyTable.CellDefault.VAlign = VAlign.Center
                     MyTable.Border.LineStyle = LineStyle.Solid 
                     MyTable.CellSpacing = 5.0f
                     
                     ' Add columns to the table
                     MyTable.Columns.Add(150)
                     MyTable.Columns.Add(150)
                     MyTable.Columns.Add(150)
                     
                     ' Add rows to the table and add cells to the rows
                     Dim MyRow1 As Row2 = MyTable.Rows.Add(0, Font.HelveticaBold, 16, _
                         Grayscale.Black, Grayscale.LightGrey)
                     MyRow1.Cells.Add("Header 1")
                     MyRow1.Cells.Add("Header 2")
                     MyRow1.Cells.Add("Header 3")
                     
                     Dim MyRow2 As Row2 = MyTable.Rows.Add()
                     MyRow2.Cells.Add("Rowheader 1", Font.HelveticaBold, 16, Grayscale.Black, _
                         Grayscale.LightGrey, 1)
                     MyRow2.Cells.Add("Item 1", Font.Symbol, 20, 2, 2)
                     
                     Dim MyRow3 As Row2 = MyTable.Rows.Add()
                     MyRow3.Cells.Add("Rowheader 2", Font.HelveticaBold, 16, Grayscale.Black, _
                         Grayscale.LightGrey, 1)
                     
                     Dim MyRow4 As Row2 = MyTable.Rows.Add()
                     MyRow4.Cells.Add("Rowheader 3", Font.HelveticaBold, 16, Grayscale.Black, _
                         Grayscale.LightGrey, 1)
                     MyRow4.Cells.Add("Item 2")
                     MyRow4.Cells.Add("Item 3")
                     
                     ' Add the table to the page
                     MyPage.Elements.Add(MyTable)
            
            			' Save the PDF
            			MyDocument.Draw("C:\MyDocument.pdf")
             		
             	End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
             	static void Main()
             	{
            			// Create a PDF Document
            			Document document = new Document();
            			Page page = new Page();
            			document.Pages.Add( page );
            			 			 		
            			Table2 table = new Table2(0, 0, 600, 600);
            		
            			table.CellDefault.Align = TextAlign.Center;
            			table.CellDefault.VAlign = VAlign.Center;
                     table.Border.LineStyle = LineStyle.Solid; 
                     table.CellSpacing = 5.0f;
            			         
            			// Add columns to the table
            			table.Columns.Add( 150 );
            			table.Columns.Add( 150 );
            			table.Columns.Add( 150 );
            			         
            			// Add rows to the table and add cells to the rows
            			Row2 row1 = table.Rows.Add( 0, Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey );
            			row1.Cells.Add( "Header 1" );
            			row1.Cells.Add( "Header 2" );
            			row1.Cells.Add( "Header 3" );
            			         
            			Row2 row2 = table.Rows.Add();
            			row2.Cells.Add( "Rowheader 1", Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey, 1 );
            			row2.Cells.Add( "Item 1", Font.Symbol, 20, 2, 2 );
            		
            			Row2 row3 = table.Rows.Add();
            			row3.Cells.Add( "Rowheader 2", Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey, 1 );
            			                 
            			Row2 row4 = table.Rows.Add();
            			row4.Cells.Add( "Rowheader 3", Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey, 1 );
            			row4.Cells.Add( "Item 2" );
            			row4.Cells.Add( "Item 3" );		
            			
            			// Add the table to the page
            			page.Elements.Add( table );  
            			
            			// Save the PDF
            			document.Draw( @"C:\MyDocument.pdf" );
             	}
             }
             </code>
             </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Cell2List.Add(System.String,System.Int32,System.Int32)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Cell2"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Cell2List"/>.
            </summary>
            <param name="text">Text to be displayed in the cell.</param>
            <param name="colSpan">Number of columns that the cell will span.</param>
            <param name="rowSpan">Number of rows that the cell will span.</param>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Cell2"/> object.</returns>
            <remarks>This method is used to add any text to a cell in a table.</remarks>
            <example>The following example shows you how to build a simple table.<p/>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            	
                    ' Create a PDF Document
                    Dim MyDocument As Document = New Document
                    Dim MyPage As Page = New Page
                    MyDocument.Pages.Add(MyPage)
                    
                    Dim MyTable As Table2 = New Table2(0, 0, 600, 600)
                    
                    MyTable.CellDefault.Align = TextAlign.Center
                    MyTable.CellDefault.VAlign = VAlign.Center
                    MyTable.Border.LineStyle = LineStyle.Solid
                    MyTable.CellSpacing = 5.0f
                    
                    ' Add columns to the table
                    MyTable.Columns.Add(150)
                    MyTable.Columns.Add(150)
                    MyTable.Columns.Add(150)
                    
                    ' Add rows to the table and add cells to the rows
                    Dim MyRow1 As Row2 = MyTable.Rows.Add(0, Font.HelveticaBold, 16, _
                        Grayscale.Black, Grayscale.LightGrey)
                    MyRow1.Cells.Add("Header 1")
                    MyRow1.Cells.Add("Header 2")
                    MyRow1.Cells.Add("Header 3")
                    
                    Dim MyRow2 As Row2 = MyTable.Rows.Add()
                    MyRow2.Cells.Add("Rowheader 1", Font.HelveticaBold, 16, Grayscale.Black, _
                        Grayscale.LightGrey, 1)
                    MyRow2.Cells.Add("Item 1", 2, 2)
                    
                    Dim MyRow3 As Row2 = MyTable.Rows.Add()
                    MyRow3.Cells.Add("Rowheader 2", Font.HelveticaBold, 16, Grayscale.Black, _
                        Grayscale.LightGrey, 1)
                    
                    Dim MyRow4 As Row2 = MyTable.Rows.Add()
                    MyRow4.Cells.Add("Rowheader 3", Font.HelveticaBold, 16, Grayscale.Black, _
                        Grayscale.LightGrey, 1)
                    MyRow4.Cells.Add("Item 2")
                    MyRow4.Cells.Add("Item 3")
                    
                    ' Add the table to the page
                    MyPage.Elements.Add(MyTable)
                 	' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            		Page page = new Page();
            		document.Pages.Add( page );
            		 			 		
            		Table2 table = new Table2(0, 0, 600, 600);
            	
            		table.CellDefault.Align = TextAlign.Center;
            		table.CellDefault.VAlign = VAlign.Center;
                    table.Border.LineStyle = LineStyle.Solid; 
                    table.CellSpacing = 5.0f;
            		         
            		// Add columns to the table
            		table.Columns.Add( 150 );
            		table.Columns.Add( 150 );
            		table.Columns.Add( 150 );
            		         
            		// Add rows to the table and add cells to the rows
            		Row2 row1 = table.Rows.Add( 0, Font.HelveticaBold, 16, Grayscale.Black, 
            			Grayscale.LightGrey );
            		row1.Cells.Add( "Header 1" );
            		row1.Cells.Add( "Header 2" );
            		row1.Cells.Add( "Header 3" );
            		         
            		Row2 row2 = table.Rows.Add();
            		row2.Cells.Add( "Rowheader 1", Font.HelveticaBold, 16, Grayscale.Black, 
            			Grayscale.LightGrey, 1 );
            		row2.Cells.Add( "Item 1", 2, 2 );
            	
            		Row2 row3 = table.Rows.Add();
            		row3.Cells.Add( "Rowheader 2", Font.HelveticaBold, 16, Grayscale.Black, 
            			Grayscale.LightGrey, 1 );
            		                 
            		Row2 row4 = table.Rows.Add();
            		row4.Cells.Add( "Rowheader 3", Font.HelveticaBold, 16, Grayscale.Black, 
            			Grayscale.LightGrey, 1 );
            		row4.Cells.Add( "Item 2" );
            		row4.Cells.Add( "Item 3" );		
            		
            		// Add the table to the page
            		page.Elements.Add( table );  
            		
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Cell2List.Add(System.String,ceTe.DynamicPDF.Font,System.Nullable{System.Single},ceTe.DynamicPDF.Color,ceTe.DynamicPDF.Color,System.Int32)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Cell2"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Cell2List"/>.
            </summary>
            <param name="text">Text to be displayed in the cell.</param>
            <param name="font">Font for the text in the cell.</param>
            <param name="fontSize">Font size for the text in the cell.</param>
            <param name="textColor">Color for the text in the cell.</param>
            <param name="backColor">Background color for the cell.</param>
            <param name="colSpan">Number of columns that the cell will span.</param>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Cell2"/> object.</returns>
            <remarks>This method is used to add any text to a cell in a table.</remarks>
            <example>The following example shows you how to build a simple table.<p/>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            	
                    ' Create a PDF Document
                    Dim MyDocument As Document = New Document
                    Dim MyPage As Page = New Page
                    MyDocument.Pages.Add(MyPage)
                    
                    Dim MyTable As Table2 = New Table2(0, 0, 600, 600)
                    
                    MyTable.CellDefault.Align = TextAlign.Center
                    MyTable.CellDefault.VAlign = VAlign.Center
                    MyTable.Border.LineStyle = LineStyle.Solid 
                    MyTable.CellSpacing = 5.0f
                    
                    ' Add columns to the table
                    MyTable.Columns.Add(150)
                    MyTable.Columns.Add(150)
                    MyTable.Columns.Add(150)
                    
                    ' Add rows to the table and add cells to the rows
                    Dim MyRow1 As Row2 = MyTable.Rows.Add(0, Font.HelveticaBold, 16, _
                        Grayscale.Black, Grayscale.LightGrey)
                    MyRow1.Cells.Add("Header 1")
                    MyRow1.Cells.Add("Header 2")
                    MyRow1.Cells.Add("Header 3")
                    
                    Dim MyRow2 As Row2 = MyTable.Rows.Add()
                    MyRow2.Cells.Add("Rowheader 1", Font.HelveticaBold, 16, Grayscale.Black, _
                        Grayscale.LightGrey, 1)
                    MyRow2.Cells.Add("Item 1", Font.HelveticaOblique, 14, RgbColor.Blue, _
                        RgbColor.Yellow, 2)
                    
                    Dim MyRow3 As Row2 = MyTable.Rows.Add()
                    MyRow3.Cells.Add("Rowheader 2", Font.HelveticaBold, 16, Grayscale.Black, _
                        Grayscale.LightGrey, 1)
                    MyRow3.Cells.Add("Item 2")
                    MyRow3.Cells.Add("Item 3")
                    
                    Dim MyRow4 As Row2 = MyTable.Rows.Add()
                    MyRow4.Cells.Add("Rowheader 3", Font.HelveticaBold, 16, Grayscale.Black, _
                        Grayscale.LightGrey, 1)
                    MyRow4.Cells.Add("Item 4")
                    MyRow4.Cells.Add("Item 5")
                    
                    ' Add the table to the page
                    MyPage.Elements.Add(MyTable)
                    
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            		Page page = new Page();
            		document.Pages.Add( page );
            		 			 		
            		Table2 table = new Table2(0, 0, 600, 600);
            	
            		table.CellDefault.Align = TextAlign.Center;
            		table.CellDefault.VAlign = VAlign.Center;
                    table.Border.LineStyle = LineStyle.Solid; 
                    table.CellSpacing = 5.0f;
            		         
            		// Add columns to the table
            		table.Columns.Add( 150 );
            		table.Columns.Add( 150 );
            		table.Columns.Add( 150 );
            		         
            		// Add rows to the table and add cells to the rows
            		Row2 row1 = table.Rows.Add( 0, Font.HelveticaBold, 16, Grayscale.Black, 
            			Grayscale.LightGrey );
            		row1.Cells.Add( "Header 1" );
            		row1.Cells.Add( "Header 2" );
            		row1.Cells.Add( "Header 3" );
            		         
            		Row2 row2 = table.Rows.Add();
            		row2.Cells.Add( "Rowheader 1", Font.HelveticaBold, 16, Grayscale.Black, 
            			Grayscale.LightGrey, 1 );
            		row2.Cells.Add( "Item 1", Font.HelveticaOblique, 14, RgbColor.Blue, 
            			RgbColor.Yellow, 2 );
            	
            		Row2 row3 = table.Rows.Add();
            		row3.Cells.Add( "Rowheader 2", Font.HelveticaBold, 16, Grayscale.Black, 
            			Grayscale.LightGrey, 1 );
            		row3.Cells.Add( "Item 2" );
            		row3.Cells.Add( "Item 3" );
            		                 
            		Row2 row4 = table.Rows.Add();
            		row4.Cells.Add( "Rowheader 3", Font.HelveticaBold, 16, Grayscale.Black, 
            			Grayscale.LightGrey, 1 );
            		row4.Cells.Add( "Item 4" );
            		row4.Cells.Add( "Item 5" );		
            		
            		// Add the table to the page
            		page.Elements.Add( table );  
            		
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Cell2List.Add(System.String,ceTe.DynamicPDF.Font,System.Nullable{System.Single},ceTe.DynamicPDF.Color,ceTe.DynamicPDF.Color,System.Int32,System.Int32)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Cell2"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Cell2List"/>.
            </summary>
            <param name="text">Text to be displayed in the cell.</param>
            <param name="font">Font for the text in the cell.</param>
            <param name="fontSize">Font size for the text in the cell.</param>
            <param name="textColor">Color for the text in the cell.</param>
            <param name="backColor">Background color for the cell.</param>
            <param name="colSpan">Number of columns that the cell will span.</param>
            <param name="rowSpan">Number of rows that the cell will span.</param>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Cell2"/> object.</returns>
            <remarks>This method is used to add any text to a cell in a table.</remarks>
            <example>The following example shows you how to build a simple table.<p/>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            	        
            	    ' Create a PDF Document
                    Dim MyDocument As Document = New Document
                    Dim MyPage As Page = New Page
                    MyDocument.Pages.Add(MyPage)
                    
                    Dim MyTable As Table2 = New Table2(0, 0, 600, 600)
                    
                    MyTable.CellDefault.Align = TextAlign.Center
                    MyTable.CellDefault.VAlign = VAlign.Center
                    MyTable.Border.LineStyle = LineStyle.Solid 
                    MyTable.CellSpacing = 5.0f
                    
                    ' Add columns to the table
                    MyTable.Columns.Add(150)
                    MyTable.Columns.Add(150)
                    MyTable.Columns.Add(150)
                    
                    ' Add rows to the table and add cells to the rows
                    Dim MyRow1 As Row2 = MyTable.Rows.Add(0, Font.HelveticaBold, 16, _
                        Grayscale.Black, Grayscale.LightGrey)
                    MyRow1.Cells.Add("Header 1")
                    MyRow1.Cells.Add("Header 2")
                    MyRow1.Cells.Add("Header 3")
                    
                    Dim MyRow2 As Row2 = MyTable.Rows.Add()
                    MyRow2.Cells.Add("Rowheader 1", Font.HelveticaBold, 16, Grayscale.Black, _
                        Grayscale.LightGrey, 1)
                    MyRow2.Cells.Add("Item 1", Font.HelveticaOblique, 16, RgbColor.Red, _
                        RgbColor.LightSkyBlue, 2, 2)
                    
                    Dim MyRow3 As Row2 = MyTable.Rows.Add()
                    MyRow3.Cells.Add("Rowheader 2", Font.HelveticaBold, 16, Grayscale.Black, _
                        Grayscale.LightGrey, 1)
                    
                    Dim MyRow4 As Row2 = MyTable.Rows.Add()
                    MyRow4.Cells.Add("Rowheader 3", Font.HelveticaBold, 16, Grayscale.Black, _
                        Grayscale.LightGrey, 1)
                    MyRow4.Cells.Add("Item 2")
                    MyRow4.Cells.Add("Item 3")
                    
                    ' Add the table to the page
                    MyPage.Elements.Add(MyTable)
                             
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            		Page page = new Page();
            		document.Pages.Add( page );
            		 			 		
            		Table2 table = new Table2(0, 0, 600, 600);
            	
            		table.CellDefault.Align = TextAlign.Center;
            		table.CellDefault.VAlign = VAlign.Center;
                    table.Border.LineStyle = LineStyle.Solid; 
                    table.CellSpacing = 5.0f;
            		         
            		// Add columns to the table
            		table.Columns.Add( 150 );
            		table.Columns.Add( 150 );
            		table.Columns.Add( 150 );
            		         
            		// Add rows to the table and add cells to the rows
            		Row2 row1 = table.Rows.Add( 0, Font.HelveticaBold, 16, Grayscale.Black, 
            			Grayscale.LightGrey );
            		row1.Cells.Add( "Header 1" );
            		row1.Cells.Add( "Header 2" );
            		row1.Cells.Add( "Header 3" );
            		         
            		Row2 row2 = table.Rows.Add();
            		row2.Cells.Add( "Rowheader 1", Font.HelveticaBold, 16, Grayscale.Black, 
            			Grayscale.LightGrey, 1 );
            		row2.Cells.Add( "Item 1", Font.HelveticaOblique, 14, RgbColor.Red,
            			RgbColor.LightSkyBlue, 2, 2 );
            	
            		Row2 row3 = table.Rows.Add();
            		row3.Cells.Add( "Rowheader 2", Font.HelveticaBold, 16, Grayscale.Black, 
            			Grayscale.LightGrey, 1 );
            		                 
            		Row2 row4 = table.Rows.Add();
            		row4.Cells.Add( "Rowheader 3", Font.HelveticaBold, 16, Grayscale.Black, 
            			Grayscale.LightGrey, 1 );
            		row4.Cells.Add( "Item 2" );
            		row4.Cells.Add( "Item 3" );		
            		
            		// Add the table to the page
            		page.Elements.Add( table );  
            		
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Cell2List.Add(ceTe.DynamicPDF.PageElement)">
             <summary>
             Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Cell2"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Cell2List"/> with the specified page element.
             </summary>
             <param name="element">Page element to be displayed in the cell.</param>
             <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Cell2"/> object.</returns>
             <remarks>This method is used to add any page element to the table.  Note that a page element should only be added to the cell directly if that page element impliments <see cref="T:ceTe.DynamicPDF.PageElements.IArea"/>.  If the page element does not impliment IArea then it is recommended you place your page element(s) in an <see cref="T:ceTe.DynamicPDF.PageElements.AreaGroup"/>.  This will assuree that the row will adjust to the height of the page element as needed.</remarks>
             <example>The following example shows you how to build a simple table where some cells contain page elements.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
             	Sub Main()
             	
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
                     
                     Dim MyTable As Table2 = New Table2(0, 0, 600, 600)
                     
                     MyTable.CellDefault.Align = TextAlign.Center
                     MyTable.CellDefault.VAlign = VAlign.Center
                     MyTable.Border.LineStyle = LineStyle.Solid 
                     MyTable.CellSpacing = 5.0f
                     
                     ' Add columns to the table
                     MyTable.Columns.Add(150)
                     MyTable.Columns.Add(150)
                     MyTable.Columns.Add(150)
                     
                     ' Add rows to the table and add cells to the rows
                     Dim MyRow1 As Row2 = MyTable.Rows.Add(0, Font.HelveticaBold, 16, _
                         Grayscale.Black, Grayscale.LightGrey)
                     MyRow1.Cells.Add("Header 1")
                     MyRow1.Cells.Add("Header 2")
                     MyRow1.Cells.Add("Header 3")
                     
                     Dim MyRow2 As Row2 = MyTable.Rows.Add()
                     MyRow2.Cells.Add("Formatted Text", Font.HelveticaBold, 16, Grayscale.Black, _
                         Grayscale.LightGrey, 1)
                     Dim formattedText As String = "&lt;font face='Times'&gt;Font Face, &lt;/font&gt;" + _
                         "&lt;font color='FF0000'&gt;Color, &lt;/font&gt;&lt;b&gt;Bold.&lt;/b&gt;"
                     MyRow2.Cells.Add(New FormattedTextArea(formattedText, 0, 0, 140, 15, _
                         FontFamily.Helvetica, 14, False))
                     MyRow2.Cells.Add("Item 1")
                     
                     Dim MyRow3 As Row2 = MyTable.Rows.Add()
                     MyRow3.Cells.Add("Rowheader 1", Font.HelveticaBold, 16, Grayscale.Black, _
                         Grayscale.LightGrey, 1)
                     MyRow3.Cells.Add("Item 2")
                     MyRow3.Cells.Add("Item 3")
                     
                     Dim MyRow4 As Row2 = MyTable.Rows.Add()
                     MyRow4.Cells.Add("Rowheader 2", Font.HelveticaBold, 16, Grayscale.Black, _
                         Grayscale.LightGrey, 1)
                     MyRow4.Cells.Add("Item 4")
                     MyRow4.Cells.Add("Item 5")
                     
                     ' Add the table to the page
                     MyPage.Elements.Add(MyTable)
            
            			' Save the PDF
            			MyDocument.Draw("C:\MyDocument.pdf")
             		
             	End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
             	static void Main()
             	{
            			// Create a PDF Document
            			Document document = new Document();
            			Page page = new Page();
            			document.Pages.Add( page );
            			 			 		
            			Table2 table = new Table2(0, 0, 600, 600);
            		
            			table.CellDefault.Align = TextAlign.Center;
            			table.CellDefault.VAlign = VAlign.Center;
                     table.Border.LineStyle = LineStyle.Solid; 
                     table.CellSpacing = 5.0f;
            			         
            			// Add columns to the table
            			table.Columns.Add( 150 );
            			table.Columns.Add( 150 );
            			table.Columns.Add( 150 );
            			         
            			// Add rows to the table and add cells to the rows
            			Row2 row1 = table.Rows.Add( 0, Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey );
            			row1.Cells.Add( "Header 1" );
            			row1.Cells.Add( "Header 2" );
            			row1.Cells.Add( "Header 3" );
            			         
            			Row2 row2 = table.Rows.Add( 30 );
            			row2.Cells.Add( "Formatted Text", Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey, 1 );
            			string formattedText = "&lt;font face='Times'&gt;Font Face, &lt;/font&gt;" + 
            				"&lt;font color='FF0000'&gt;Color, &lt;/font&gt;&lt;b&gt;Bold.&lt;/b&gt;";
            			row2.Cells.Add( new FormattedTextArea( formattedText, 0, 0, 140, 15, 
            				FontFamily.Helvetica, 14, false ) );
            			row2.Cells.Add( "Item 1" );
            		
            			Row2 row3 = table.Rows.Add();
            			row3.Cells.Add( "Rowheader 1", Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey, 1 );
            			row3.Cells.Add( "Item 2" );
            			row3.Cells.Add( "Item 3" );
            			                 
            			Row2 row4 = table.Rows.Add();
            			row4.Cells.Add( "Rowheader 2", Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey, 1 );
            			row4.Cells.Add( "Item 4" );
            			row4.Cells.Add( "Item 5" );		
            			
            			// Add the table to the page
            			page.Elements.Add( table );  
            			
            			// Save the PDF
            			document.Draw( @"C:\MyDocument.pdf" );
             	}
             }
             </code>
             </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Cell2List.Add(ceTe.DynamicPDF.PageElement,System.Int32)">
             <summary>
             Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Cell2"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Cell2List"/> with the specified page element.
             </summary>
             <param name="element">Page element to be displayed in the cell.</param>
             <param name="colSpan">Number of columns that the cell will span.</param>
             <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Cell2"/> object.</returns>
             <remarks>This method is used to add any page element to the table.  Note that a page element should only be added to the cell directly if that page element impliments <see cref="T:ceTe.DynamicPDF.PageElements.IArea"/>.  If the page element does not impliment IArea then it is recommended you place your page element(s) in an <see cref="T:ceTe.DynamicPDF.PageElements.AreaGroup"/>.  This will assuree that the row will adjust to the height of the page element as needed.</remarks>
             <example>The following example shows you how to build a simple table where some cells contain page elements.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
             	Sub Main()
             	
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
                     
                     Dim MyTable As Table2 = New Table2(0, 0, 600, 600)
                     
                     MyTable.CellDefault.Align = TextAlign.Center
                     MyTable.CellDefault.VAlign = VAlign.Center
                     MyTable.Border.LineStyle = LineStyle.Solid 
                     MyTable.CellSpacing = 5.0f
                     
                     ' Add columns to the table
                     MyTable.Columns.Add(150)
                     MyTable.Columns.Add(150)
                     MyTable.Columns.Add(150)
                     
                     ' Add rows to the table and add cells to the rows
                     Dim MyRow1 As Row2 = MyTable.Rows.Add(0, Font.HelveticaBold, 16, _
                         Grayscale.Black, Grayscale.LightGrey)
                     MyRow1.Cells.Add("Header 1")
                     MyRow1.Cells.Add("Header 2")
                     MyRow1.Cells.Add("Header 3")
                     
                     Dim MyRow8 As Row2 = MyTable.Rows.Add()
                     MyRow8.Cells.Add("Lines", Font.HelveticaBold, 16, Grayscale.Black, _
                         Grayscale.LightGrey, 1)
                     Dim lineGroup As AreaGroup = New AreaGroup(150, 150)
                     lineGroup.Add(New Line(25, 25, 125, 125, 5))
                     lineGroup.Add(New Line(25, 125, 125, 25, 5))
                     MyRow8.Cells.Add(lineGroup, 2)
                     
                     Dim MyRow3 As Row2 = MyTable.Rows.Add()
                     MyRow3.Cells.Add("Rowheader 1", Font.HelveticaBold, 16, Grayscale.Black, _
                         Grayscale.LightGrey, 1)
                     MyRow3.Cells.Add("Item 1")
                     MyRow3.Cells.Add("Item 2")
                     
                     Dim MyRow4 As Row2 = MyTable.Rows.Add()
                     MyRow4.Cells.Add("Rowheader 2", Font.HelveticaBold, 16, Grayscale.Black, _
                         Grayscale.LightGrey, 1)
                     MyRow4.Cells.Add("Item 3")
                     MyRow4.Cells.Add("Item 4")
                     
                     ' Add the table to the page
                     MyPage.Elements.Add(MyTable)
            
            			' Save the PDF
            			MyDocument.Draw("C:\MyDocument.pdf")
             		
             	End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
             	static void Main()
             	{
            			// Create a PDF Document
            			Document document = new Document();
            			Page page = new Page();
            			document.Pages.Add( page );
            			 			 		
            			Table2 table = new Table2(0, 0, 600, 600);
            		
            			table.CellDefault.Align = TextAlign.Center;
            			table.CellDefault.VAlign = VAlign.Center;
                     table.Border.LineStyle = LineStyle.Solid; 
                     table.CellSpacing = 5.0f;
            			         
            			// Add columns to the table
            			table.Columns.Add( 150 );
            			table.Columns.Add( 150 );
            			table.Columns.Add( 150 );
            			         
            			// Add rows to the table and add cells to the rows
            			Row2 row1 = table.Rows.Add( 0, Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey );
            			row1.Cells.Add( "Header 1" );
            			row1.Cells.Add( "Header 2" );
            			row1.Cells.Add( "Header 3" );
            			         
            			Row2 row2 = table.Rows.Add( 30 );
            			row2.Cells.Add( "Lines", Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey, 1 );
            			AreaGroup lineGroup = new AreaGroup( 150, 150 );
            			lineGroup.Add( new Line( 25, 25, 125, 125, 5 ) );
            			lineGroup.Add( new Line( 25, 125, 125, 25, 5 ) );
            			row2.Cells.Add( lineGroup, 2 );
            					
            			Row2 row3 = table.Rows.Add();
            			row3.Cells.Add( "Rowheader 1", Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey, 1 );
            			row3.Cells.Add( "Item 1" );
            			row3.Cells.Add( "Item 2" );
            			                 
            			Row2 row4 = table.Rows.Add();
            			row4.Cells.Add( "Rowheader 2", Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey, 1 );
            			row4.Cells.Add( "Item 3" );
            			row4.Cells.Add( "Item 4" );		
            			
            			// Add the table to the page
            			page.Elements.Add( table );  
            			
            			// Save the PDF
            			document.Draw( @"C:\MyDocument.pdf" );
             	}
             }
             </code>
             </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Cell2List.Add(ceTe.DynamicPDF.PageElement,System.Int32,System.Int32)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Cell2"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Cell2List"/> with the specified page element.
            </summary>
            <param name="element">Page element to be displayed in the cell.</param>
            <param name="colSpan">Number of columns that the cell will span.</param>
            <param name="rowSpan">Number of rows that the cell will span.</param>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Cell2"/> object.</returns>
            <remarks>This method is used to add any page element to the table.  Note that a page element should only be added to the cell directly if that page element impliments <see cref="T:ceTe.DynamicPDF.PageElements.IArea"/>.  If the page element does not impliment IArea then it is recommended you place your page element(s) in an <see cref="T:ceTe.DynamicPDF.PageElements.AreaGroup"/>.  This will assuree that the row will adjust to the height of the page element as needed.</remarks>
            <example>The following example shows you how to build a simple table where some cells contain page elements.<p/>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            	
            	    ' Create a PDF Document
                    Dim MyDocument As Document = New Document
                    Dim MyPage As Page = New Page
                    MyDocument.Pages.Add(MyPage)
                    
                    Dim MyTable As Table2 = New Table2(0, 0, 600, 600)
                    
                    MyTable.CellDefault.Align = TextAlign.Center
                    MyTable.CellDefault.VAlign = VAlign.Center
                    MyTable.Border.LineStyle = LineStyle.Solid 
                    MyTable.CellSpacing = 5.0f
                    
                    ' Add columns to the table
                    MyTable.Columns.Add(150)
                    MyTable.Columns.Add(150)
                    MyTable.Columns.Add(150)
                    
                    ' Add rows to the table and add cells to the rows
                    Dim MyRow1 As Row2 = MyTable.Rows.Add(0, Font.HelveticaBold, 16, _
                        Grayscale.Black, Grayscale.LightGrey)
                    MyRow1.Cells.Add("Header 1")
                    MyRow1.Cells.Add("Header 2")
                    MyRow1.Cells.Add("Header 3")
                    
                    Dim MyRow2 As Row2 = MyTable.Rows.Add()
                    MyRow2.Cells.Add("Rectangle", Font.HelveticaBold, 16, Grayscale.Black, _
                        Grayscale.LightGrey, 1)
                    Dim rect As Rectangle = New Rectangle(0, 0, 90, 90, RgbColor.YellowGreen, _
                        RgbColor.Blue, 2)
                    MyRow2.Cells.Add(rect, 2, 2)
                    
                    Dim MyRow3 As Row2 = MyTable.Rows.Add()
                    MyRow3.Cells.Add("Rectangle", Font.HelveticaBold, 16, Grayscale.Black, _
                        Grayscale.LightGrey, 1)
                    
                    Dim MyRow4 As Row2 = MyTable.Rows.Add()
                    MyRow4.Cells.Add("Rowheader 1", Font.HelveticaBold, 16, Grayscale.Black, _
                        Grayscale.LightGrey, 1)
                    MyRow4.Cells.Add("Item 1")
                    MyRow4.Cells.Add("Item 2")
                    
                    ' Add the table to the page
                    MyPage.Elements.Add(MyTable)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            	
            	End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            		Page page = new Page();
            		document.Pages.Add( page );
            		
            		Table2 table = new Table2(0, 0, 600, 600);
            		
            		table.CellDefault.Align = TextAlign.Center;
            		table.CellDefault.VAlign = VAlign.Center;
                    table.Border.LineStyle = LineStyle.Solid; 
                    table.CellSpacing = 5.0f;
            		
            		// Add columns to the table
            		table.Columns.Add( 150 );
            		table.Columns.Add( 150 );
            		table.Columns.Add( 150 );
            		
            		// Add rows to the table and add cells to the rows
            		Row2 row1 = table.Rows.Add( 0, Font.HelveticaBold, 16, Grayscale.Black, 
            			Grayscale.LightGrey );
            		row1.Cells.Add( "Header 1" );
            		row1.Cells.Add( "Header 2" );
            		row1.Cells.Add( "Header 3" );
            		
            		Row2 row2 = table.Rows.Add();
            			row2.Cells.Add( "Rectangle", Font.HelveticaBold, 16, Grayscale.Black, 
            		Grayscale.LightGrey, 1 );
            		Rectangle rect = new Rectangle( 0, 0, 90, 90, RgbColor.YellowGreen, 
            			RgbColor.Blue, 2 );
            		row2.Cells.Add( rect, 2, 2 );
            		
            		Row2 row3 = table.Rows.Add();
            		row3.Cells.Add( "Rectangle", Font.HelveticaBold, 16, Grayscale.Black, 
            			Grayscale.LightGrey, 1 );
            		
            		Row2 row4 = table.Rows.Add();
            		row4.Cells.Add( "Rowheader 1", Font.HelveticaBold, 16, Grayscale.Black, 
            			Grayscale.LightGrey, 1 );
            		row4.Cells.Add( "Item 1" );
            		row4.Cells.Add( "Item 2" );		
            		
            		// Add the table to the page
            		page.Elements.Add( table );  
            		
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Cell2List.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:ceTe.DynamicPDF.PageElements.Cell2"/>.
            </summary>
            <returns>An <b>IEnumerator</b> for the entire <see cref="T:ceTe.DynamicPDF.PageElements.Cell2"/>.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell2List.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Cell2"/> at the given index.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell2List.Count">
            <summary>
            Gets the number of elements actually contained in the <see cref="T:ceTe.DynamicPDF.PageElements.Cell2"/>.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.CellBorderStyle">
            <summary>
            Represents the style of the border.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CellBorderStyle.Width">
            <summary>
            Gets or sets the width of the border.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CellBorderStyle.Color">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.CellBorderStyle.Color"/> of the border.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CellBorderStyle.LineStyle">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.CellBorderStyle.LineStyle"/> of the border.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.CellDefault">
            <summary>
            Represents the default value of the cell.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CellDefault.Font">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.CellDefault.Font"/> object to use for the row.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CellDefault.FontSize">
            <summary>
            Gets or sets the font size to use for the cell.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CellDefault.TextColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the text in the cell.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CellDefault.Align">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.TextAlign"/> enumeration to use for the horizontal alignment of each cell.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CellDefault.VAlign">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.CellDefault.VAlign"/> enumeration to use for the vertical alignment of each cell.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CellDefault.BackgroundColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the background of the table.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CellDefault.AutoLeading">
            <summary>
            Gets or sets whether the leading of the cell should be calculated automatically.
            </summary>
            <remarks>This property is automatically set to false any time the <see cref="P:ceTe.DynamicPDF.PageElements.CellDefault.Leading"/> property is set.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CellDefault.Leading">
            <summary>
            Gets or sets the leading for the text of the cell.
            </summary>
            <remarks>Setting this property will automatically set the <see cref="P:ceTe.DynamicPDF.PageElements.CellDefault.AutoLeading"/> property to false.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CellDefault.ParagraphIndent">
            <summary>
            Gets or sets the paragraph indent for the paragraphs of the cell.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CellDefault.ParagraphSpacing">
            <summary>
            Gets or sets the paragraph spacing for the paragraphs of the cell.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CellDefault.RightToLeft">
            <summary>
            Gets or sets a value specifying whether the text in the cell will be displayed right to left.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CellDefault.Underline">
            <summary>
            Gets or sets a value specifying whether the text in the cell will be underlined. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CellDefault.Padding">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.CellPadding"/> object for the cells.  
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CellDefault.Border">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.PageElements.CellDefault.Border"/> object for the cells.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.CellList">
            <summary>
            <font color="red">Obsolete.</font> Represents a list of cells.
            </summary>
            <remarks><font color="red">NOTE: This class is obsolete.</font> Use <see cref="T:ceTe.DynamicPDF.PageElements.Cell2List"/> class instead.</remarks>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.CellList.Add(System.String)">
             <summary>
             Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Cell"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.CellList"/>.
             </summary>
             <param name="text">Text to be displayed in the cell.</param>
             <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Cell"/> object.</returns>
             <remarks>This method is used to add any text to a cell in a table.</remarks>
             <example>The following example shows you how to build a simple table.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
             	Sub Main()
            			
            			' Create a PDF Document
            			Dim MyDocument As Document = New Document
            			Dim MyPage As Page = New Page
            			MyDocument.Pages.Add(MyPage)
            
            			Dim MyTable As Table = New Table(0, 0, 600, 600)
            
            			MyTable.Align = TextAlign.Center
            			MyTable.VAlign = VAlign.Center
            
            			' Add columns to the table
            			MyTable.Columns.Add(150)
            			MyTable.Columns.Add(150)
            			MyTable.Columns.Add(150)
            
            			' Add rows to the table and add cells to the rows
            			Dim MyRow1 As Row = MyTable.Rows.Add(0, Font.HelveticaBold, 16, Grayscale.Black, _
            				Grayscale.LightGrey)
            			MyRow1.Cells.Add("Header 1")
            			MyRow1.Cells.Add("Header 2")
            			MyRow1.Cells.Add("Header 3")
            
            			Dim MyRow2 As Row = MyTable.Rows.Add()
            			MyRow2.Cells.Add("Rowheader 1", Font.HelveticaBold, 16, Grayscale.Black, _
            				Grayscale.LightGrey, 1)
            			MyRow2.Cells.Add("Item 1")
            			MyRow2.Cells.Add("Item 2")
            
            			Dim MyRow3 As Row = MyTable.Rows.Add()
            			MyRow3.Cells.Add("Rowheader 2", Font.HelveticaBold, 16, Grayscale.Black, _
            				Grayscale.LightGrey, 1)
            			MyRow3.Cells.Add("Item 3")
            			MyRow3.Cells.Add("Item 4")
            
            			Dim MyRow4 As Row = MyTable.Rows.Add()
            			MyRow4.Cells.Add("Rowheader 3", Font.HelveticaBold, 16, Grayscale.Black, _
            				Grayscale.LightGrey, 1)
            			MyRow4.Cells.Add("Item 5")
            			MyRow4.Cells.Add("Item 6")
            
            			' Add the table to the page
            			MyPage.Elements.Add(MyTable)
            
            			' Save the PDF
            			MyDocument.Draw("C:\MyDocument.pdf")
             		
             	End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
             	static void Main()
             	{
            			// Create a PDF Document
            			Document document = new Document();
            			Page page = new Page();
            			document.Pages.Add( page );
            				 			 		
            			Table table = new Table(0, 0, 600, 800);
            
            			table.Align = TextAlign.Center;
            			table.VAlign = VAlign.Center;
            			         
            			// Add columns to the table
            			table.Columns.Add( 150 );
            			table.Columns.Add( 150 );
            			table.Columns.Add( 150 );
            			         
            			// Add rows to the table and add cells to the rows
            			Row row1 = table.Rows.Add( 0, Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey );
            			row1.Cells.Add( "Header 1" );
            			row1.Cells.Add( "Header 2" );
            			row1.Cells.Add( "Header 3" );
            				         
            			Row row2 = table.Rows.Add();
            			row2.Cells.Add( "Rowheader 1", Font.HelveticaBold, 16, Grayscale.Black, 
            			Grayscale.LightGrey, 1 );
            			row2.Cells.Add( "Item 1" );
            			row2.Cells.Add( "Item 2" );
            				                 
            			Row row3 = table.Rows.Add();
            			row3.Cells.Add( "Rowheader 2", Font.HelveticaBold, 16, Grayscale.Black, 
            			Grayscale.LightGrey, 1 );
            			row3.Cells.Add( "Item 3" );
            			row3.Cells.Add( "Item 4" );
            				                 
            			Row row4 = table.Rows.Add();
            			row4.Cells.Add( "Rowheader 3", Font.HelveticaBold, 16, Grayscale.Black, 
            			Grayscale.LightGrey, 1 );
            			row4.Cells.Add( "Item 5" );
            			row4.Cells.Add( "Item 6" );
            
             		// Add the table to the page
             		page.Elements.Add( table );  
            
            			// Save the PDF
            			document.Draw( @"C:\MyDocument.pdf" );
             	}
             }
             </code>
             </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.CellList.Add(System.String,System.Int32)">
             <summary>
             Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Cell"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.CellList"/>.
             </summary>
             <param name="text">Text to be displayed in the cell.</param>
             <param name="colSpan">Number of columns that the cell will span.</param>
             <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Cell"/> object.</returns>
             <remarks>This method is used to add any text to a cell in a table.</remarks>
             <example>The following example shows you how to build a simple table.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
             	Sub Main()
             	
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
                     
                     Dim MyTable As Table = New Table(0, 0, 600, 600)
                     
                     MyTable.Align = TextAlign.Center
                     MyTable.VAlign = VAlign.Center
                     
                     ' Add columns to the table
                     MyTable.Columns.Add(150)
                     MyTable.Columns.Add(150)
                     MyTable.Columns.Add(150)
                     
                     ' Add rows to the table and add cells to the rows
                     Dim MyRow1 As Row = MyTable.Rows.Add(0, Font.HelveticaBold, 16, Grayscale.Black, _
                         Grayscale.LightGrey)
                     MyRow1.Cells.Add("Header 1")
                     MyRow1.Cells.Add("Header 2")
                     MyRow1.Cells.Add("Header 3")
                     
                     Dim MyRow2 As Row = MyTable.Rows.Add()
                     MyRow2.Cells.Add("Rowheader 1", Font.HelveticaBold, 16, Grayscale.Black, _
                         Grayscale.LightGrey, 1)
                     MyRow2.Cells.Add("Item 1")
                     MyRow2.Cells.Add("Item 2")
                     
                     Dim MyRow3 As Row = MyTable.Rows.Add()
                     MyRow3.Cells.Add("Rowheader 2", Font.HelveticaBold, 16, Grayscale.Black, _
                         Grayscale.LightGrey, 1)
                     MyRow3.Cells.Add("Item 3")
                     MyRow3.Cells.Add("Item 4")
                     
                     Dim MyRow4 As Row = MyTable.Rows.Add()
                     MyRow4.Cells.Add("Rowheader 3", Font.HelveticaBold, 16, Grayscale.Black, _
                         Grayscale.LightGrey, 1)
                     MyRow4.Cells.Add("Item 5", 2)
                     
                     ' Add the table to the page
                     MyPage.Elements.Add(MyTable)
                     
                     ' Save the PDF
            			MyDocument.Draw("C:\MyDocument.pdf")
             		
             	End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
             	static void Main()
             	{
            			// Create a PDF Document
            			Document document = new Document();
            			Page page = new Page();
            			document.Pages.Add( page );
            				 			 		
            			Table table = new Table(0, 0, 600, 600);
            		
            			table.Align = TextAlign.Center;
            			table.VAlign = VAlign.Center;
            			         
            			// Add columns to the table
            			table.Columns.Add( 150 );
            			table.Columns.Add( 150 );
            			table.Columns.Add( 150 );
            			         
            			// Add rows to the table and add cells to the rows
            			Row row1 = table.Rows.Add( 0, Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey );
            			row1.Cells.Add( "Header 1" );
            			row1.Cells.Add( "Header 2" );
            			row1.Cells.Add( "Header 3" );
            			         
            			Row row2 = table.Rows.Add();
            			row2.Cells.Add( "Rowheader 1", Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey, 1 );
            			row2.Cells.Add( "Item 1" );
            			row2.Cells.Add( "Item 2" );
            			                 
            			Row row3 = table.Rows.Add();
            			row3.Cells.Add( "Rowheader 2", Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey, 1 );
            			row3.Cells.Add( "Item 3" );
            			row3.Cells.Add( "Item 4" );
            			                 
            			Row row4 = table.Rows.Add();
            			row4.Cells.Add( "Rowheader 3", Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey, 1 );
            			row4.Cells.Add( "Item 5", 2 );
            		
            			// Add the table to the page
            			page.Elements.Add( table );  
            
            			// Save the PDF
            			document.Draw( @"C:\MyDocument.pdf" );
             	}
             }
             </code>
             </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.CellList.Add(System.String,ceTe.DynamicPDF.Font,System.Single)">
             <summary>
             Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Cell"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.CellList"/>.
             </summary>
             <param name="text">Text to be displayed in the cell.</param>
             <param name="font">Font for the text in the cell.</param>
             <param name="size">Font size for the text in the cell.</param>
             <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Cell"/> object.</returns>
             <remarks>This method is used to add any text to a cell in a table.</remarks>
             <example>The following example shows you how to build a simple table.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
             	Sub Main()
             	
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
                     
                     Dim MyTable As Table = New Table(0, 0, 600, 600)
                     
                     MyTable.Align = TextAlign.Center
                     MyTable.VAlign = VAlign.Center
                     
                     ' Add columns to the table
                     MyTable.Columns.Add(150)
                     MyTable.Columns.Add(150)
                     MyTable.Columns.Add(150)
                     
                     ' Add rows to the table and add cells to the rows
                     Dim MyRow1 As Row = MyTable.Rows.Add(0, Font.HelveticaBold, 16, Grayscale.Black, _
                         Grayscale.LightGrey)
                     MyRow1.Cells.Add("Header 1")
                     MyRow1.Cells.Add("Header 2")
                     MyRow1.Cells.Add("Header 3")
                     
                     Dim MyRow2 As Row = MyTable.Rows.Add()
                     MyRow2.Cells.Add("Rowheader 1", Font.HelveticaBold, 16, Grayscale.Black, _
                         Grayscale.LightGrey, 1)
                     MyRow2.Cells.Add("Item 1")
                     MyRow2.Cells.Add("Item 2")
                     
                     Dim MyRow3 As Row = MyTable.Rows.Add()
                     MyRow3.Cells.Add("Rowheader 2", Font.HelveticaBold, 16, Grayscale.Black, _
                         Grayscale.LightGrey, 1)
                     MyRow3.Cells.Add("Item 3")
                     MyRow3.Cells.Add("Item 4")
                     
                     Dim MyRow4 As Row = MyTable.Rows.Add()
                     MyRow4.Cells.Add("Rowheader 3", Font.HelveticaBold, 16, Grayscale.Black, _
                         Grayscale.LightGrey, 1)
                     MyRow4.Cells.Add("Item 5", Font.Courier, 10)
                     MyRow4.Cells.Add("Item 6", Font.Courier, 10)
                     
                     ' Add the table to the page
                     MyPage.Elements.Add(MyTable)
            
            			' Save the PDF
            			MyDocument.Draw("C:\MyDocument.pdf")
             		
             	End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
             	static void Main()
             	{
            			// Create a PDF Document
            			Document document = new Document();
            			Page page = new Page();
            			document.Pages.Add( page );
            			 			 		
            			Table table = new Table(0, 0, 600, 600);
            		
            			table.Align = TextAlign.Center;
            			table.VAlign = VAlign.Center;
            			         
            			// Add columns to the table
            			table.Columns.Add( 150 );
            			table.Columns.Add( 150 );
            			table.Columns.Add( 150 );
            			         
            			// Add rows to the table and add cells to the rows
            			Row row1 = table.Rows.Add( 0, Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey );
            			row1.Cells.Add( "Header 1" );
            			row1.Cells.Add( "Header 2" );
            			row1.Cells.Add( "Header 3" );
            			         
            			Row row2 = table.Rows.Add();
            			row2.Cells.Add( "Rowheader 1", Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey, 1 );
            			row2.Cells.Add( "Item 1" );
            			row2.Cells.Add( "Item 2" );
            			                 
            			Row row3 = table.Rows.Add();
            			row3.Cells.Add( "Rowheader 2", Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey, 1 );
            			row3.Cells.Add( "Item 3" );
            			row3.Cells.Add( "Item 4" );
            			                 
            			Row row4 = table.Rows.Add();
            			row4.Cells.Add( "Rowheader 3", Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey, 1 );
            			row4.Cells.Add( "Item 5", Font.Courier, 10 );
            			row4.Cells.Add( "Item 6", Font.Courier, 10 );
            	
            			// Add the table to the page
            			page.Elements.Add( table );  
            			
            			// Save the PDF
            			document.Draw( @"C:\MyDocument.pdf" );
             	}
             }
             </code>
             </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.CellList.Add(System.String,ceTe.DynamicPDF.Font,System.Single,System.Int32)">
             <summary>
             Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Cell"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.CellList"/>.
             </summary>
             <param name="text">Text to be displayed in the cell.</param>
             <param name="font">Font for the text in the cell.</param>
             <param name="size">Font size for the text in the cell.</param>
             <param name="colSpan">Number of columns that the cell will span.</param>
             <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Cell"/> object.</returns>
             <remarks>This method is used to add any text to a cell in a table.</remarks>
             <example>The following example shows you how to build a simple table.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
             	Sub Main()
             	
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
                     
                     Dim MyTable As Table = New Table(0, 0, 600, 600)
                     
                     MyTable.Align = TextAlign.Center
                     MyTable.VAlign = VAlign.Center
                     
                     ' Add columns to the table
                     MyTable.Columns.Add(150)
                     MyTable.Columns.Add(150)
                     MyTable.Columns.Add(150)
                     
                     ' Add rows to the table and add cells to the rows
                     Dim MyRow1 As Row = MyTable.Rows.Add(0, Font.HelveticaBold, 16, _
                         Grayscale.Black, Grayscale.LightGrey)
                     MyRow1.Cells.Add("Header 1")
                     MyRow1.Cells.Add("Header 2")
                     MyRow1.Cells.Add("Header 3")
                     
                     Dim MyRow2 As Row = MyTable.Rows.Add()
                     MyRow2.Cells.Add("Rowheader 1", Font.HelveticaBold, 16, Grayscale.Black, _
                         Grayscale.LightGrey, 1)
                     MyRow2.Cells.Add("Item 1", Font.HelveticaOblique, 14, 2)
                     
                     Dim MyRow3 As Row = MyTable.Rows.Add()
                     MyRow3.Cells.Add("Rowheader 2", Font.HelveticaBold, 16, Grayscale.Black, _
                         Grayscale.LightGrey, 1)
                     MyRow3.Cells.Add("Item 2")
                     MyRow3.Cells.Add("Item 3")
                     
                     Dim MyRow4 As Row = MyTable.Rows.Add()
                     MyRow4.Cells.Add("Rowheader 3", Font.HelveticaBold, 16, Grayscale.Black, _
                         Grayscale.LightGrey, 1)
                     MyRow4.Cells.Add("Item 4")
                     MyRow4.Cells.Add("Item 5")
                     
                     ' Add the table to the page
                     MyPage.Elements.Add(MyTable)
            
            			' Save the PDF
            			MyDocument.Draw("C:\MyDocument.pdf")
             		
             	End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
             	static void Main()
             	{
            			// Create a PDF Document
            			Document document = new Document();
            			Page page = new Page();
            			document.Pages.Add( page );
            			 			 		
            			Table table = new Table(0, 0, 600, 600);
            		
            			table.Align = TextAlign.Center;
            			table.VAlign = VAlign.Center;
            			         
            			// Add columns to the table
            			table.Columns.Add( 150 );
            			table.Columns.Add( 150 );
            			table.Columns.Add( 150 );
            			         
            			// Add rows to the table and add cells to the rows
            			Row row1 = table.Rows.Add( 0, Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey );
            			row1.Cells.Add( "Header 1" );
            			row1.Cells.Add( "Header 2" );
            			row1.Cells.Add( "Header 3" );
            			         
            			Row row2 = table.Rows.Add();
            			row2.Cells.Add( "Rowheader 1", Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey, 1 );
            			row2.Cells.Add( "Item 1", Font.HelveticaOblique, 14, 2 );
            		
            			Row row3 = table.Rows.Add();
            			row3.Cells.Add( "Rowheader 2", Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey, 1 );
            			row3.Cells.Add( "Item 2" );
            			row3.Cells.Add( "Item 3" );
            			                 
            			Row row4 = table.Rows.Add();
            			row4.Cells.Add( "Rowheader 3", Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey, 1 );
            			row4.Cells.Add( "Item 4" );
            			row4.Cells.Add( "Item 5" );		
            			
            			// Add the table to the page
            			page.Elements.Add( table );  
            			
            			// Save the PDF
            			document.Draw( @"C:\MyDocument.pdf" );
             	}
             }
             </code>
             </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.CellList.Add(System.String,ceTe.DynamicPDF.Font,System.Single,System.Int32,System.Int32)">
             <summary>
             Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Cell"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.CellList"/>.
             </summary>
             <param name="text">Text to be displayed in the cell.</param>
             <param name="font">Font for the text in the cell.</param>
             <param name="size">Font size for the text in the cell.</param>
             <param name="colSpan">Number of columns that the cell will span.</param>
             <param name="rowSpan">Number of rows that the cell will span.</param>
             <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Cell"/> object.</returns>
             <remarks>This method is used to add any text to a cell in a table.</remarks>
             <example>The following example shows you how to build a simple table.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
             	Sub Main()
             	
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
                     
                     Dim MyTable As Table = New Table(0, 0, 600, 600)
                     
                     MyTable.Align = TextAlign.Center
                     MyTable.VAlign = VAlign.Center
                     
                     ' Add columns to the table
                     MyTable.Columns.Add(150)
                     MyTable.Columns.Add(150)
                     MyTable.Columns.Add(150)
                     
                     ' Add rows to the table and add cells to the rows
                     Dim MyRow1 As Row = MyTable.Rows.Add(0, Font.HelveticaBold, 16, _
                         Grayscale.Black, Grayscale.LightGrey)
                     MyRow1.Cells.Add("Header 1")
                     MyRow1.Cells.Add("Header 2")
                     MyRow1.Cells.Add("Header 3")
                     
                     Dim MyRow2 As Row = MyTable.Rows.Add()
                     MyRow2.Cells.Add("Rowheader 1", Font.HelveticaBold, 16, Grayscale.Black, _
                         Grayscale.LightGrey, 1)
                     MyRow2.Cells.Add("Item 1", Font.Symbol, 20, 2, 2)
                     
                     Dim MyRow3 As Row = MyTable.Rows.Add()
                     MyRow3.Cells.Add("Rowheader 2", Font.HelveticaBold, 16, Grayscale.Black, _
                         Grayscale.LightGrey, 1)
                     
                     Dim MyRow4 As Row = MyTable.Rows.Add()
                     MyRow4.Cells.Add("Rowheader 3", Font.HelveticaBold, 16, Grayscale.Black, _
                         Grayscale.LightGrey, 1)
                     MyRow4.Cells.Add("Item 2")
                     MyRow4.Cells.Add("Item 3")
                     
                     ' Add the table to the page
                     MyPage.Elements.Add(MyTable)
            
            			' Save the PDF
            			MyDocument.Draw("C:\MyDocument.pdf")
             		
             	End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
             	static void Main()
             	{
            			// Create a PDF Document
            			Document document = new Document();
            			Page page = new Page();
            			document.Pages.Add( page );
            			 			 		
            			Table table = new Table(0, 0, 600, 600);
            		
            			table.Align = TextAlign.Center;
            			table.VAlign = VAlign.Center;
            			         
            			// Add columns to the table
            			table.Columns.Add( 150 );
            			table.Columns.Add( 150 );
            			table.Columns.Add( 150 );
            			         
            			// Add rows to the table and add cells to the rows
            			Row row1 = table.Rows.Add( 0, Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey );
            			row1.Cells.Add( "Header 1" );
            			row1.Cells.Add( "Header 2" );
            			row1.Cells.Add( "Header 3" );
            			         
            			Row row2 = table.Rows.Add();
            			row2.Cells.Add( "Rowheader 1", Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey, 1 );
            			row2.Cells.Add( "Item 1", Font.Symbol, 20, 2, 2 );
            		
            			Row row3 = table.Rows.Add();
            			row3.Cells.Add( "Rowheader 2", Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey, 1 );
            			                 
            			Row row4 = table.Rows.Add();
            			row4.Cells.Add( "Rowheader 3", Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey, 1 );
            			row4.Cells.Add( "Item 2" );
            			row4.Cells.Add( "Item 3" );		
            			
            			// Add the table to the page
            			page.Elements.Add( table );  
            			
            			// Save the PDF
            			document.Draw( @"C:\MyDocument.pdf" );
             	}
             }
             </code>
             </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.CellList.Add(System.String,System.Int32,System.Int32)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Cell"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.CellList"/>.
            </summary>
            <param name="text">Text to be displayed in the cell.</param>
            <param name="colSpan">Number of columns that the cell will span.</param>
            <param name="rowSpan">Number of rows that the cell will span.</param>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Cell"/> object.</returns>
            <remarks>This method is used to add any text to a cell in a table.</remarks>
            <example>The following example shows you how to build a simple table.<p/>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            	
                    ' Create a PDF Document
                    Dim MyDocument As Document = New Document
                    Dim MyPage As Page = New Page
                    MyDocument.Pages.Add(MyPage)
                    
                    Dim MyTable As Table = New Table(0, 0, 600, 600)
                    
                    MyTable.Align = TextAlign.Center
                    MyTable.VAlign = VAlign.Center
                    
                    ' Add columns to the table
                    MyTable.Columns.Add(150)
                    MyTable.Columns.Add(150)
                    MyTable.Columns.Add(150)
                    
                    ' Add rows to the table and add cells to the rows
                    Dim MyRow1 As Row = MyTable.Rows.Add(0, Font.HelveticaBold, 16, _
                        Grayscale.Black, Grayscale.LightGrey)
                    MyRow1.Cells.Add("Header 1")
                    MyRow1.Cells.Add("Header 2")
                    MyRow1.Cells.Add("Header 3")
                    
                    Dim MyRow2 As Row = MyTable.Rows.Add()
                    MyRow2.Cells.Add("Rowheader 1", Font.HelveticaBold, 16, Grayscale.Black, _
                        Grayscale.LightGrey, 1)
                    MyRow2.Cells.Add("Item 1", 2, 2)
                    
                    Dim MyRow3 As Row = MyTable.Rows.Add()
                    MyRow3.Cells.Add("Rowheader 2", Font.HelveticaBold, 16, Grayscale.Black, _
                        Grayscale.LightGrey, 1)
                    
                    Dim MyRow4 As Row = MyTable.Rows.Add()
                    MyRow4.Cells.Add("Rowheader 3", Font.HelveticaBold, 16, Grayscale.Black, _
                        Grayscale.LightGrey, 1)
                    MyRow4.Cells.Add("Item 2")
                    MyRow4.Cells.Add("Item 3")
                    
                    ' Add the table to the page
                    MyPage.Elements.Add(MyTable)
                 	' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            		Page page = new Page();
            		document.Pages.Add( page );
            		 			 		
            		Table table = new Table(0, 0, 600, 600);
            	
            		table.Align = TextAlign.Center;
            		table.VAlign = VAlign.Center;
            		         
            		// Add columns to the table
            		table.Columns.Add( 150 );
            		table.Columns.Add( 150 );
            		table.Columns.Add( 150 );
            		         
            		// Add rows to the table and add cells to the rows
            		Row row1 = table.Rows.Add( 0, Font.HelveticaBold, 16, Grayscale.Black, 
            			Grayscale.LightGrey );
            		row1.Cells.Add( "Header 1" );
            		row1.Cells.Add( "Header 2" );
            		row1.Cells.Add( "Header 3" );
            		         
            		Row row2 = table.Rows.Add();
            		row2.Cells.Add( "Rowheader 1", Font.HelveticaBold, 16, Grayscale.Black, 
            			Grayscale.LightGrey, 1 );
            		row2.Cells.Add( "Item 1", 2, 2 );
            	
            		Row row3 = table.Rows.Add();
            		row3.Cells.Add( "Rowheader 2", Font.HelveticaBold, 16, Grayscale.Black, 
            			Grayscale.LightGrey, 1 );
            		                 
            		Row row4 = table.Rows.Add();
            		row4.Cells.Add( "Rowheader 3", Font.HelveticaBold, 16, Grayscale.Black, 
            			Grayscale.LightGrey, 1 );
            		row4.Cells.Add( "Item 2" );
            		row4.Cells.Add( "Item 3" );		
            		
            		// Add the table to the page
            		page.Elements.Add( table );  
            		
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.CellList.Add(System.String,ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.Color,System.Int32)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Cell"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.CellList"/>.
            </summary>
            <param name="text">Text to be displayed in the cell.</param>
            <param name="font">Font for the text in the cell.</param>
            <param name="size">Font size for the text in the cell.</param>
            <param name="textColor">Color for the text in the cell.</param>
            <param name="backColor">Background color for the cell.</param>
            <param name="colSpan">Number of columns that the cell will span.</param>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Cell"/> object.</returns>
            <remarks>This method is used to add any text to a cell in a table.</remarks>
            <example>The following example shows you how to build a simple table.<p/>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            	
                    ' Create a PDF Document
                    Dim MyDocument As Document = New Document
                    Dim MyPage As Page = New Page
                    MyDocument.Pages.Add(MyPage)
                    
                    Dim MyTable As Table = New Table(0, 0, 600, 600)
                    
                    MyTable.Align = TextAlign.Center
                    MyTable.VAlign = VAlign.Center
                    
                    ' Add columns to the table
                    MyTable.Columns.Add(150)
                    MyTable.Columns.Add(150)
                    MyTable.Columns.Add(150)
                    
                    ' Add rows to the table and add cells to the rows
                    Dim MyRow1 As Row = MyTable.Rows.Add(0, Font.HelveticaBold, 16, _
                        Grayscale.Black, Grayscale.LightGrey)
                    MyRow1.Cells.Add("Header 1")
                    MyRow1.Cells.Add("Header 2")
                    MyRow1.Cells.Add("Header 3")
                    
                    Dim MyRow2 As Row = MyTable.Rows.Add()
                    MyRow2.Cells.Add("Rowheader 1", Font.HelveticaBold, 16, Grayscale.Black, _
                        Grayscale.LightGrey, 1)
                    MyRow2.Cells.Add("Item 1", Font.HelveticaOblique, 14, RgbColor.Blue, _
                        RgbColor.Yellow, 2)
                    
                    Dim MyRow3 As Row = MyTable.Rows.Add()
                    MyRow3.Cells.Add("Rowheader 2", Font.HelveticaBold, 16, Grayscale.Black, _
                        Grayscale.LightGrey, 1)
                    MyRow3.Cells.Add("Item 2")
                    MyRow3.Cells.Add("Item 3")
                    
                    Dim MyRow4 As Row = MyTable.Rows.Add()
                    MyRow4.Cells.Add("Rowheader 3", Font.HelveticaBold, 16, Grayscale.Black, _
                        Grayscale.LightGrey, 1)
                    MyRow4.Cells.Add("Item 4")
                    MyRow4.Cells.Add("Item 5")
                    
                    ' Add the table to the page
                    MyPage.Elements.Add(MyTable)
                    
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            		Page page = new Page();
            		document.Pages.Add( page );
            		 			 		
            		Table table = new Table(0, 0, 600, 600);
            	
            		table.Align = TextAlign.Center;
            		table.VAlign = VAlign.Center;
            		         
            		// Add columns to the table
            		table.Columns.Add( 150 );
            		table.Columns.Add( 150 );
            		table.Columns.Add( 150 );
            		         
            		// Add rows to the table and add cells to the rows
            		Row row1 = table.Rows.Add( 0, Font.HelveticaBold, 16, Grayscale.Black, 
            			Grayscale.LightGrey );
            		row1.Cells.Add( "Header 1" );
            		row1.Cells.Add( "Header 2" );
            		row1.Cells.Add( "Header 3" );
            		         
            		Row row2 = table.Rows.Add();
            		row2.Cells.Add( "Rowheader 1", Font.HelveticaBold, 16, Grayscale.Black, 
            			Grayscale.LightGrey, 1 );
            		row2.Cells.Add( "Item 1", Font.HelveticaOblique, 14, RgbColor.Blue, 
            			RgbColor.Yellow, 2 );
            	
            		Row row3 = table.Rows.Add();
            		row3.Cells.Add( "Rowheader 2", Font.HelveticaBold, 16, Grayscale.Black, 
            			Grayscale.LightGrey, 1 );
            		row3.Cells.Add( "Item 2" );
            		row3.Cells.Add( "Item 3" );
            		                 
            		Row row4 = table.Rows.Add();
            		row4.Cells.Add( "Rowheader 3", Font.HelveticaBold, 16, Grayscale.Black, 
            			Grayscale.LightGrey, 1 );
            		row4.Cells.Add( "Item 4" );
            		row4.Cells.Add( "Item 5" );		
            		
            		// Add the table to the page
            		page.Elements.Add( table );  
            		
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.CellList.Add(System.String,ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.Color,System.Int32,System.Int32)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Cell"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.CellList"/>.
            </summary>
            <param name="text">Text to be displayed in the cell.</param>
            <param name="font">Font for the text in the cell.</param>
            <param name="size">Font size for the text in the cell.</param>
            <param name="textColor">Color for the text in the cell.</param>
            <param name="backColor">Background color for the cell.</param>
            <param name="colSpan">Number of columns that the cell will span.</param>
            <param name="rowSpan">Number of rows that the cell will span.</param>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Cell"/> object.</returns>
            <remarks>This method is used to add any text to a cell in a table.</remarks>
            <example>The following example shows you how to build a simple table.<p/>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            	        
            	    ' Create a PDF Document
                    Dim MyDocument As Document = New Document
                    Dim MyPage As Page = New Page
                    MyDocument.Pages.Add(MyPage)
                    
                    Dim MyTable As Table = New Table(0, 0, 600, 600)
                    
                    MyTable.Align = TextAlign.Center
                    MyTable.VAlign = VAlign.Center
                    
                    ' Add columns to the table
                    MyTable.Columns.Add(150)
                    MyTable.Columns.Add(150)
                    MyTable.Columns.Add(150)
                    
                    ' Add rows to the table and add cells to the rows
                    Dim MyRow1 As Row = MyTable.Rows.Add(0, Font.HelveticaBold, 16, _
                        Grayscale.Black, Grayscale.LightGrey)
                    MyRow1.Cells.Add("Header 1")
                    MyRow1.Cells.Add("Header 2")
                    MyRow1.Cells.Add("Header 3")
                    
                    Dim MyRow2 As Row = MyTable.Rows.Add()
                    MyRow2.Cells.Add("Rowheader 1", Font.HelveticaBold, 16, Grayscale.Black, _
                        Grayscale.LightGrey, 1)
                    MyRow2.Cells.Add("Item 1", Font.HelveticaOblique, 16, RgbColor.Red, _
                        RgbColor.LightSkyBlue, 2, 2)
                    
                    Dim MyRow3 As Row = MyTable.Rows.Add()
                    MyRow3.Cells.Add("Rowheader 2", Font.HelveticaBold, 16, Grayscale.Black, _
                        Grayscale.LightGrey, 1)
                    
                    Dim MyRow4 As Row = MyTable.Rows.Add()
                    MyRow4.Cells.Add("Rowheader 3", Font.HelveticaBold, 16, Grayscale.Black, _
                        Grayscale.LightGrey, 1)
                    MyRow4.Cells.Add("Item 2")
                    MyRow4.Cells.Add("Item 3")
                    
                    ' Add the table to the page
                    MyPage.Elements.Add(MyTable)
                             
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            		Page page = new Page();
            		document.Pages.Add( page );
            		 			 		
            		Table table = new Table(0, 0, 600, 600);
            	
            		table.Align = TextAlign.Center;
            		table.VAlign = VAlign.Center;
            		         
            		// Add columns to the table
            		table.Columns.Add( 150 );
            		table.Columns.Add( 150 );
            		table.Columns.Add( 150 );
            		         
            		// Add rows to the table and add cells to the rows
            		Row row1 = table.Rows.Add( 0, Font.HelveticaBold, 16, Grayscale.Black, 
            			Grayscale.LightGrey );
            		row1.Cells.Add( "Header 1" );
            		row1.Cells.Add( "Header 2" );
            		row1.Cells.Add( "Header 3" );
            		         
            		Row row2 = table.Rows.Add();
            		row2.Cells.Add( "Rowheader 1", Font.HelveticaBold, 16, Grayscale.Black, 
            			Grayscale.LightGrey, 1 );
            		row2.Cells.Add( "Item 1", Font.HelveticaOblique, 14, RgbColor.Red,
            			RgbColor.LightSkyBlue, 2, 2 );
            	
            		Row row3 = table.Rows.Add();
            		row3.Cells.Add( "Rowheader 2", Font.HelveticaBold, 16, Grayscale.Black, 
            			Grayscale.LightGrey, 1 );
            		                 
            		Row row4 = table.Rows.Add();
            		row4.Cells.Add( "Rowheader 3", Font.HelveticaBold, 16, Grayscale.Black, 
            			Grayscale.LightGrey, 1 );
            		row4.Cells.Add( "Item 2" );
            		row4.Cells.Add( "Item 3" );		
            		
            		// Add the table to the page
            		page.Elements.Add( table );  
            		
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.CellList.Add(ceTe.DynamicPDF.PageElement)">
             <summary>
             Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Cell"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.CellList"/> with the specified page element.
             </summary>
             <param name="element">Page element to be displayed in the cell.</param>
             <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Cell"/> object.</returns>
             <remarks>This method is used to add any page element to the table.  Note that a page element should only be added to the cell directly if that page element impliments <see cref="T:ceTe.DynamicPDF.PageElements.IArea"/>.  If the page element does not impliment IArea then it is recommended you place your page element(s) in an <see cref="T:ceTe.DynamicPDF.PageElements.AreaGroup"/>.  This will assuree that the row will adjust to the height of the page element as needed.</remarks>
             <example>The following example shows you how to build a simple table where some cells contain page elements.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
             	Sub Main()
             	
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
                     
                     Dim MyTable As Table = New Table(0, 0, 600, 600)
                     
                     MyTable.Align = TextAlign.Center
                     MyTable.VAlign = VAlign.Center
                     
                     ' Add columns to the table
                     MyTable.Columns.Add(150)
                     MyTable.Columns.Add(150)
                     MyTable.Columns.Add(150)
                     
                     ' Add rows to the table and add cells to the rows
                     Dim MyRow1 As Row = MyTable.Rows.Add(0, Font.HelveticaBold, 16, _
                         Grayscale.Black, Grayscale.LightGrey)
                     MyRow1.Cells.Add("Header 1")
                     MyRow1.Cells.Add("Header 2")
                     MyRow1.Cells.Add("Header 3")
                     
                     Dim MyRow2 As Row = MyTable.Rows.Add()
                     MyRow2.Cells.Add("Formatted Text", Font.HelveticaBold, 16, Grayscale.Black, _
                         Grayscale.LightGrey, 1)
                     Dim formattedText As String = "&lt;font face='Times'&gt;Font Face, &lt;/font&gt;" + _
                         "&lt;font color='FF0000'&gt;Color, &lt;/font&gt;&lt;b&gt;Bold.&lt;/b&gt;"
                     MyRow2.Cells.Add(New FormattedTextArea(formattedText, 0, 0, 140, 15, _
                         FontFamily.Helvetica, 14, False))
                     MyRow2.Cells.Add("Item 1")
                     
                     Dim MyRow3 As Row = MyTable.Rows.Add()
                     MyRow3.Cells.Add("Rowheader 1", Font.HelveticaBold, 16, Grayscale.Black, _
                         Grayscale.LightGrey, 1)
                     MyRow3.Cells.Add("Item 2")
                     MyRow3.Cells.Add("Item 3")
                     
                     Dim MyRow4 As Row = MyTable.Rows.Add()
                     MyRow4.Cells.Add("Rowheader 2", Font.HelveticaBold, 16, Grayscale.Black, _
                         Grayscale.LightGrey, 1)
                     MyRow4.Cells.Add("Item 4")
                     MyRow4.Cells.Add("Item 5")
                     
                     ' Add the table to the page
                     MyPage.Elements.Add(MyTable)
            
            			' Save the PDF
            			MyDocument.Draw("C:\MyDocument.pdf")
             		
             	End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
             	static void Main()
             	{
            			// Create a PDF Document
            			Document document = new Document();
            			Page page = new Page();
            			document.Pages.Add( page );
            			 			 		
            			Table table = new Table(0, 0, 600, 600);
            		
            			table.Align = TextAlign.Center;
            			table.VAlign = VAlign.Center;
            			         
            			// Add columns to the table
            			table.Columns.Add( 150 );
            			table.Columns.Add( 150 );
            			table.Columns.Add( 150 );
            			         
            			// Add rows to the table and add cells to the rows
            			Row row1 = table.Rows.Add( 0, Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey );
            			row1.Cells.Add( "Header 1" );
            			row1.Cells.Add( "Header 2" );
            			row1.Cells.Add( "Header 3" );
            			         
            			Row row2 = table.Rows.Add( 30 );
            			row2.Cells.Add( "Formatted Text", Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey, 1 );
            			string formattedText = "&lt;font face='Times'&gt;Font Face, &lt;/font&gt;" + 
            				"&lt;font color='FF0000'&gt;Color, &lt;/font&gt;&lt;b&gt;Bold.&lt;/b&gt;";
            			row2.Cells.Add( new FormattedTextArea( formattedText, 0, 0, 140, 15, 
            				FontFamily.Helvetica, 14, false ) );
            			row2.Cells.Add( "Item 1" );
            		
            			Row row3 = table.Rows.Add();
            			row3.Cells.Add( "Rowheader 1", Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey, 1 );
            			row3.Cells.Add( "Item 2" );
            			row3.Cells.Add( "Item 3" );
            			                 
            			Row row4 = table.Rows.Add();
            			row4.Cells.Add( "Rowheader 2", Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey, 1 );
            			row4.Cells.Add( "Item 4" );
            			row4.Cells.Add( "Item 5" );		
            			
            			// Add the table to the page
            			page.Elements.Add( table );  
            			
            			// Save the PDF
            			document.Draw( @"C:\MyDocument.pdf" );
             	}
             }
             </code>
             </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.CellList.Add(ceTe.DynamicPDF.PageElement,System.Int32)">
             <summary>
             Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Cell"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.CellList"/> with the specified page element.
             </summary>
             <param name="element">Page element to be displayed in the cell.</param>
             <param name="colSpan">Number of columns that the cell will span.</param>
             <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Cell"/> object.</returns>
             <remarks>This method is used to add any page element to the table.  Note that a page element should only be added to the cell directly if that page element impliments <see cref="T:ceTe.DynamicPDF.PageElements.IArea"/>.  If the page element does not impliment IArea then it is recommended you place your page element(s) in an <see cref="T:ceTe.DynamicPDF.PageElements.AreaGroup"/>.  This will assuree that the row will adjust to the height of the page element as needed.</remarks>
             <example>The following example shows you how to build a simple table where some cells contain page elements.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
             	Sub Main()
             	
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
                     
                     Dim MyTable As Table = New Table(0, 0, 600, 600)
                     
                     MyTable.Align = TextAlign.Center
                     MyTable.VAlign = VAlign.Center
                     
                     ' Add columns to the table
                     MyTable.Columns.Add(150)
                     MyTable.Columns.Add(150)
                     MyTable.Columns.Add(150)
                     
                     ' Add rows to the table and add cells to the rows
                     Dim MyRow1 As Row = MyTable.Rows.Add(0, Font.HelveticaBold, 16, _
                         Grayscale.Black, Grayscale.LightGrey)
                     MyRow1.Cells.Add("Header 1")
                     MyRow1.Cells.Add("Header 2")
                     MyRow1.Cells.Add("Header 3")
                     
                     Dim MyRow8 As Row = MyTable.Rows.Add()
                     MyRow8.Cells.Add("Lines", Font.HelveticaBold, 16, Grayscale.Black, _
                         Grayscale.LightGrey, 1)
                     Dim lineGroup As AreaGroup = New AreaGroup(150, 150)
                     lineGroup.Add(New Line(25, 25, 125, 125, 5))
                     lineGroup.Add(New Line(25, 125, 125, 25, 5))
                     MyRow8.Cells.Add(lineGroup, 2)
                     
                     Dim MyRow3 As Row = MyTable.Rows.Add()
                     MyRow3.Cells.Add("Rowheader 1", Font.HelveticaBold, 16, Grayscale.Black, _
                         Grayscale.LightGrey, 1)
                     MyRow3.Cells.Add("Item 1")
                     MyRow3.Cells.Add("Item 2")
                     
                     Dim MyRow4 As Row = MyTable.Rows.Add()
                     MyRow4.Cells.Add("Rowheader 2", Font.HelveticaBold, 16, Grayscale.Black, _
                         Grayscale.LightGrey, 1)
                     MyRow4.Cells.Add("Item 3")
                     MyRow4.Cells.Add("Item 4")
                     
                     ' Add the table to the page
                     MyPage.Elements.Add(MyTable)
            
            			' Save the PDF
            			MyDocument.Draw("C:\MyDocument.pdf")
             		
             	End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
             	static void Main()
             	{
            			// Create a PDF Document
            			Document document = new Document();
            			Page page = new Page();
            			document.Pages.Add( page );
            			 			 		
            			Table table = new Table(0, 0, 600, 600);
            		
            			table.Align = TextAlign.Center;
            			table.VAlign = VAlign.Center;
            			         
            			// Add columns to the table
            			table.Columns.Add( 150 );
            			table.Columns.Add( 150 );
            			table.Columns.Add( 150 );
            			         
            			// Add rows to the table and add cells to the rows
            			Row row1 = table.Rows.Add( 0, Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey );
            			row1.Cells.Add( "Header 1" );
            			row1.Cells.Add( "Header 2" );
            			row1.Cells.Add( "Header 3" );
            			         
            			Row row2 = table.Rows.Add( 30 );
            			row2.Cells.Add( "Lines", Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey, 1 );
            			AreaGroup lineGroup = new AreaGroup( 150, 150 );
            			lineGroup.Add( new Line( 25, 25, 125, 125, 5 ) );
            			lineGroup.Add( new Line( 25, 125, 125, 25, 5 ) );
            			row2.Cells.Add( lineGroup, 2 );
            					
            			Row row3 = table.Rows.Add();
            			row3.Cells.Add( "Rowheader 1", Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey, 1 );
            			row3.Cells.Add( "Item 1" );
            			row3.Cells.Add( "Item 2" );
            			                 
            			Row row4 = table.Rows.Add();
            			row4.Cells.Add( "Rowheader 2", Font.HelveticaBold, 16, Grayscale.Black, 
            				Grayscale.LightGrey, 1 );
            			row4.Cells.Add( "Item 3" );
            			row4.Cells.Add( "Item 4" );		
            			
            			// Add the table to the page
            			page.Elements.Add( table );  
            			
            			// Save the PDF
            			document.Draw( @"C:\MyDocument.pdf" );
             	}
             }
             </code>
             </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.CellList.Add(ceTe.DynamicPDF.PageElement,System.Int32,System.Int32)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Cell"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.CellList"/> with the specified page element.
            </summary>
            <param name="element">Page element to be displayed in the cell.</param>
            <param name="colSpan">Number of columns that the cell will span.</param>
            <param name="rowSpan">Number of rows that the cell will span.</param>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Cell"/> object.</returns>
            <remarks>This method is used to add any page element to the table.  Note that a page element should only be added to the cell directly if that page element impliments <see cref="T:ceTe.DynamicPDF.PageElements.IArea"/>.  If the page element does not impliment IArea then it is recommended you place your page element(s) in an <see cref="T:ceTe.DynamicPDF.PageElements.AreaGroup"/>.  This will assuree that the row will adjust to the height of the page element as needed.</remarks>
            <example>The following example shows you how to build a simple table where some cells contain page elements.<p/>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            	
            	    ' Create a PDF Document
                    Dim MyDocument As Document = New Document
                    Dim MyPage As Page = New Page
                    MyDocument.Pages.Add(MyPage)
                    
                    Dim MyTable As Table = New Table(0, 0, 600, 600)
                    
                    MyTable.Align = TextAlign.Center
                    MyTable.VAlign = VAlign.Center
                    
                    ' Add columns to the table
                    MyTable.Columns.Add(150)
                    MyTable.Columns.Add(150)
                    MyTable.Columns.Add(150)
                    
                    ' Add rows to the table and add cells to the rows
                    Dim MyRow1 As Row = MyTable.Rows.Add(0, Font.HelveticaBold, 16, _
                        Grayscale.Black, Grayscale.LightGrey)
                    MyRow1.Cells.Add("Header 1")
                    MyRow1.Cells.Add("Header 2")
                    MyRow1.Cells.Add("Header 3")
                    
                    Dim MyRow2 As Row = MyTable.Rows.Add()
                    MyRow2.Cells.Add("Rectangle", Font.HelveticaBold, 16, Grayscale.Black, _
                        Grayscale.LightGrey, 1)
                    Dim rect As Rectangle = New Rectangle(0, 0, 90, 90, RgbColor.YellowGreen, _
                        RgbColor.Blue, 2)
                    MyRow2.Cells.Add(rect, 2, 2)
                    
                    Dim MyRow3 As Row = MyTable.Rows.Add()
                    MyRow3.Cells.Add("Rectangle", Font.HelveticaBold, 16, Grayscale.Black, _
                        Grayscale.LightGrey, 1)
                    
                    Dim MyRow4 As Row = MyTable.Rows.Add()
                    MyRow4.Cells.Add("Rowheader 1", Font.HelveticaBold, 16, Grayscale.Black, _
                        Grayscale.LightGrey, 1)
                    MyRow4.Cells.Add("Item 1")
                    MyRow4.Cells.Add("Item 2")
                    
                    ' Add the table to the page
                    MyPage.Elements.Add(MyTable)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            	
            	End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            		Page page = new Page();
            		document.Pages.Add( page );
            		
            		Table table = new Table(0, 0, 600, 600);
            		
            		table.Align = TextAlign.Center;
            		table.VAlign = VAlign.Center;
            		
            		// Add columns to the table
            		table.Columns.Add( 150 );
            		table.Columns.Add( 150 );
            		table.Columns.Add( 150 );
            		
            		// Add rows to the table and add cells to the rows
            		Row row1 = table.Rows.Add( 0, Font.HelveticaBold, 16, Grayscale.Black, 
            			Grayscale.LightGrey );
            		row1.Cells.Add( "Header 1" );
            		row1.Cells.Add( "Header 2" );
            		row1.Cells.Add( "Header 3" );
            		
            		Row row2 = table.Rows.Add();
            			row2.Cells.Add( "Rectangle", Font.HelveticaBold, 16, Grayscale.Black, 
            		Grayscale.LightGrey, 1 );
            		Rectangle rect = new Rectangle( 0, 0, 90, 90, RgbColor.YellowGreen, 
            			RgbColor.Blue, 2 );
            		row2.Cells.Add( rect, 2, 2 );
            		
            		Row row3 = table.Rows.Add();
            		row3.Cells.Add( "Rectangle", Font.HelveticaBold, 16, Grayscale.Black, 
            			Grayscale.LightGrey, 1 );
            		
            		Row row4 = table.Rows.Add();
            		row4.Cells.Add( "Rowheader 1", Font.HelveticaBold, 16, Grayscale.Black, 
            			Grayscale.LightGrey, 1 );
            		row4.Cells.Add( "Item 1" );
            		row4.Cells.Add( "Item 2" );		
            		
            		// Add the table to the page
            		page.Elements.Add( table );  
            		
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.CellList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:ceTe.DynamicPDF.PageElements.CellList"/>.
            </summary>
            <returns>An <b>IEnumerator</b> for the entire <see cref="T:ceTe.DynamicPDF.PageElements.CellList"/>.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CellList.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Cell"/> at the given index.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CellList.Count">
            <summary>
            Gets the number of elements actually contained in the <see cref="T:ceTe.DynamicPDF.PageElements.CellList"/>.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.CellPadding">
            <summary>
            Represents the cell padding.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.CellPadding.#ctor(System.Nullable{System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.CellPadding"/> class.
            </summary>
            <param name="value">padding value for all sides of the cell.</param>        
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.CellPadding.GetHashCode">
            <summary>
            Returns hash code for this instance.
            </summary>
            <remarks> The returned hash code is formed by combining the value of padding along with top, bottom, left and right if set separately.</remarks>
            <returns> Hash code value.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.CellPadding.Equals(System.Object)">
            <summary>
            Determines whether the given instance has padding values equal with the specified object.
            </summary>
            <param name="obj"> Instance to compare.</param>
            <returns> True if the padding values are equal for all four sides.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.CellPadding.Equals(ceTe.DynamicPDF.PageElements.CellPadding)">
            <summary>
            Determines whether the given instance has padding values equal with the specified instance.
            </summary>
            <param name="padding"> Instance to compare.</param>
            <returns> True if the padding values are equal for all four sides.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.CellPadding.op_Equality(ceTe.DynamicPDF.PageElements.CellPadding,ceTe.DynamicPDF.PageElements.CellPadding)">
            <summary>
            Returns a value indicating if the instances are equal or not.
            </summary>
            <returns>Value indicates whether or not the instances are equal.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.CellPadding.op_Inequality(ceTe.DynamicPDF.PageElements.CellPadding,ceTe.DynamicPDF.PageElements.CellPadding)">
            <summary>
            Returns a value indicating if the instances are equal or not.
            </summary>
            <returns>Value indicates whether or not the instances are not equal.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.CellPadding.op_Addition(ceTe.DynamicPDF.PageElements.CellPadding,ceTe.DynamicPDF.PageElements.CellPadding)">
            <summary>
            Returns a <see cref="T:ceTe.DynamicPDF.PageElements.CellPadding"/> object containing the added value of two instances.
            </summary>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.CellPadding"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.CellPadding.op_Subtraction(ceTe.DynamicPDF.PageElements.CellPadding,ceTe.DynamicPDF.PageElements.CellPadding)">
            <summary>
            Returns a <see cref="T:ceTe.DynamicPDF.PageElements.CellPadding"/> object containing the subtracted value of two instances.
            </summary>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.CellPadding"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.CellPadding.op_UnaryNegation(ceTe.DynamicPDF.PageElements.CellPadding)">
            <summary>
            Returns a <see cref="T:ceTe.DynamicPDF.PageElements.CellPadding"/> object containing the negation value of the given instance.
            </summary>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.CellPadding"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.CellPadding.op_Increment(ceTe.DynamicPDF.PageElements.CellPadding)">
            <summary>
            Returns a <see cref="T:ceTe.DynamicPDF.PageElements.CellPadding"/> object containing the incremented value of the given instance.
            </summary>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.CellPadding"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.CellPadding.op_Decrement(ceTe.DynamicPDF.PageElements.CellPadding)">
            <summary>
            Returns a <see cref="T:ceTe.DynamicPDF.PageElements.CellPadding"/> object containing the decreamented value of the given instance.
            </summary>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.CellPadding"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.CellPadding.op_Multiply(ceTe.DynamicPDF.PageElements.CellPadding,ceTe.DynamicPDF.PageElements.CellPadding)">
            <summary>
            Returns a <see cref="T:ceTe.DynamicPDF.PageElements.CellPadding"/> object containing the multiplied value of two instances.
            </summary>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.CellPadding"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.CellPadding.op_Division(ceTe.DynamicPDF.PageElements.CellPadding,ceTe.DynamicPDF.PageElements.CellPadding)">
            <summary>
            Returns a <see cref="T:ceTe.DynamicPDF.PageElements.CellPadding"/> object containing the divided value of two instances.
            </summary>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.CellPadding"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.CellPadding.op_Implicit(System.Nullable{System.Single})~ceTe.DynamicPDF.PageElements.CellPadding">
            <summary>
            Returns a value which is implicitly converted from the float value to <see cref="T:ceTe.DynamicPDF.PageElements.CellPadding"/> instance.
            </summary>
            <returns>Implicitly converted from the float value to <see cref="T:ceTe.DynamicPDF.PageElements.CellPadding"/> instance.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CellPadding.Value">
            <summary>
            Gets or sets the value of the cell padding.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CellPadding.Top">
            <summary>
            Gets or sets the top padding value for the cell.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CellPadding.Bottom">
            <summary>
            Gets or sets the bottom padding value for the cell.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CellPadding.Left">
            <summary>
            Gets or sets the left padding value for the cell.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CellPadding.Right">
            <summary>
            Gets or sets the right padding value for the cell.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Circle">
             <summary>
             Represents a circle.
             </summary>
             <remarks>This class can be used to place circles on a page.</remarks>
             <example>The following example will place two circles on the page with different size, shape and colors.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create two circles
                     Dim circle1 As Circle = New Circle(100, 100, 50, 100, Grayscale.Black, _
             			RgbColor.OrangeRed, 2, LineStyle.Solid)
                     Dim circle2 As Circle = New Circle(150, 75, 50, 50, Grayscale.Black, _
             			RgbColor.Lime, 2, LineStyle.Solid)
             
                     ' Add the circles to the page
                     MyPage.Elements.Add(circle1)
                     MyPage.Elements.Add(circle2)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create two circles
                     Circle circle1 = new Circle(100, 100, 50, 100, Grayscale.Black, RgbColor.OrangeRed, 
             			2, LineStyle.Solid);
                     Circle circle2 = new Circle(150, 75, 50, 50, Grayscale.Black, RgbColor.Lime, 
             			2, LineStyle.Solid);
             
                     // Add the circles to the page
                     page.Elements.Add( circle1 );	
                     page.Elements.Add( circle2 );	
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Professional Edition</item>
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Professional Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Professional Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Circle.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Circle"/> class.
            </summary>
            <param name="x">X coordinate of the circle.</param>
            <param name="y">Y coordinate of the circle.</param>
            <param name="radius">Radius of the circle.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Circle.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Circle"/> class.
            </summary>
            <param name="x">X coordinate of the circle.</param>
            <param name="y">Y coordinate of the circle.</param>
            <param name="radiusX">Horizontal radius of the circle.</param>
            <param name="radiusY">Vertical radius of the circle.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Circle.#ctor(System.Single,System.Single,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Circle"/> class.
            </summary>
            <param name="x">X coordinate of the circle.</param>
            <param name="y">Y coordinate of the circle.</param>
            <param name="radius">Radius of the circle.</param>
            <param name="borderColor">Color of the border of the circle.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Circle.#ctor(System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.LineStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Circle"/> class.
            </summary>
            <param name="x">X coordinate of the circle.</param>
            <param name="y">Y coordinate of the circle.</param>
            <param name="radius">Radius of the circle.</param>
            <param name="borderWidth">Width of the border of the circle.</param>
            <param name="borderStyle">Style of the border of the circle.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Circle.#ctor(System.Single,System.Single,System.Single,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.LineStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Circle"/> class.
            </summary>
            <param name="x">X coordinate of the circle.</param>
            <param name="y">Y coordinate of the circle.</param>
            <param name="radius">Radius of the circle.</param>
            <param name="borderColor">Color of the border of the circle.</param>
            <param name="borderWidth">Width of the border of the circle.</param>
            <param name="borderStyle">Style of the border of the circle.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Circle.#ctor(System.Single,System.Single,System.Single,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Circle"/> class.
            </summary>
            <param name="x">X coordinate of the circle.</param>
            <param name="y">Y coordinate of the circle.</param>
            <param name="radius">Radius of the circle.</param>
            <param name="borderColor">Color of the border of the circle.</param>
            <param name="fillColor">Fill color of the circle.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Circle.#ctor(System.Single,System.Single,System.Single,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.Color,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Circle"/> class.
            </summary>
            <param name="x">X coordinate of the circle.</param>
            <param name="y">Y coordinate of the circle.</param>
            <param name="radius">Radius of the circle.</param>
            <param name="borderColor">Color of the border of the circle.</param>
            <param name="fillColor">Fill color of the circle.</param>
            <param name="borderWidth">Width of the border of the circle.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Circle.#ctor(System.Single,System.Single,System.Single,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.LineStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Circle"/> class.
            </summary>
            <param name="x">X coordinate of the circle.</param>
            <param name="y">Y coordinate of the circle.</param>
            <param name="radius">Radius of the circle.</param>
            <param name="borderColor">Color of the border of the circle.</param>
            <param name="fillColor">Fill color of the circle.</param>
            <param name="borderWidth">Width of the border of the circle.</param>
            <param name="borderStyle">Style of the border of the circle.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Circle.#ctor(System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.LineStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Circle"/> class.
            </summary>
            <param name="x">X coordinate of the circle.</param>
            <param name="y">Y coordinate of the circle.</param>
            <param name="radiusX">Horizontal radius of the circle.</param>
            <param name="radiusY">Vertical radius of the circle.</param>
            <param name="borderColor">Color of the border of the circle.</param>
            <param name="fillColor">Fill color of the circle.</param>
            <param name="borderWidth">Width of the border of the circle.</param>
            <param name="borderStyle">Style of the border of the circle.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Circle.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the circle to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the circle's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Circle.BorderStyle">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.LineStyle"/> object that represents the border style of the circle.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Circle.BorderWidth">
            <summary>
            Gets or sets the border width of the circle.
            </summary>
            <remarks>To force the borders not to appear set the border width to any value 0 or less.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Circle.BorderColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the border of the circle.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Circle.FillColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the fill of the circle.
            </summary>
            <remarks>To force no color to appear in the rectangle (only borders) set the fill color to null (Nothing in Visual Basic).</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Circle.X">
            <summary>
            Gets or sets the X coordinate of the circle.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Circle.Y">
            <summary>
            Gets or sets the Y coordinate of the circle.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Circle.RadiusX">
            <summary>
            Gets or sets the horizontal radius of the circle.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Circle.RadiusY">
            <summary>
            Gets or sets the vertical radius of the circle.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Column">
            <summary>
            <font color="red">Obsolete.</font> Represents a column in a table.
            </summary>
            <remarks><font color="red">NOTE: This class is obsolete.</font> Use <see cref="T:ceTe.DynamicPDF.PageElements.Column2"/> class instead.</remarks>
            <example>The following example will display a simple table on the page.<p/>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
                Sub Main()
            		
                    ' Create a PDF Document
                    Dim MyDocument As Document = New Document
            		
                    ' Create a Page and add it to the document
                    Dim MyPage As Page = New Page
                    MyDocument.Pages.Add(MyPage)
            		
                    ' Create a table 
                    Dim MyTable As Table = New Table(0, 0, 600, 600)
            		
                    ' Add columns to the table
                    MyTable.Columns.Add(150)
                    MyTable.Columns.Add(90)
                    MyTable.Columns.Add(90)
                    MyTable.Columns.Add(90)
            		
                    ' Add rows to the table and add cells to the rows
                    Dim row1 As Row = MyTable.Rows.Add(40, ceTe.DynamicPDF.Font.HelveticaBold, _
            			16, Grayscale.Black, Grayscale.Gray)
                    row1.Align = TextAlign.Center
                    row1.VAlign = VAlign.Center
                    row1.Cells.Add("Header 1")
                    row1.Cells.Add("Header 2")
                    row1.Cells.Add("Header 3")
                    row1.Cells.Add("Header 4")
            		
                    Dim row2 As Row = MyTable.Rows.Add(30)
                    Dim cell1 As Cell = row2.Cells.Add("Rowheader 1", Font.HelveticaBold, 16, _
            			Grayscale.Black, Grayscale.Gray, 1)
                    cell1.Align = CellAlign.Center
                    cell1.VAlign = CellVAlign.Center
                    row2.Cells.Add("Item 1")
                    row2.Cells.Add("Item 2")
                    row2.Cells.Add("Item 3")
            		
                    Dim row3 As Row = MyTable.Rows.Add(30)
                    Dim cell2 As Cell = row3.Cells.Add("Rowheader 2", Font.HelveticaBold, 16, _
            			Grayscale.Black, Grayscale.Gray, 1)
                    cell2.Align = CellAlign.Center
                    cell2.VAlign = CellVAlign.Center
                    row3.Cells.Add("Item 4")
                    row3.Cells.Add("Item 5")
                    row3.Cells.Add("Item 6")
            		
                    ' Add the table to the page
                    MyPage.Elements.Add(MyTable)
            		
                    ' Save the PDF
                    MyDocument.Draw("C:\MyDocument.pdf")
            		
                End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
                static void Main()
                {
                    // Create a PDF Document
                    Document document = new Document();
            				
                    // Create a Page and add it to the document
                    Page page = new Page();
                    document.Pages.Add( page );
            					 	
                    // Create a table 
                    Table table = new Table(0, 0, 600, 600);
            					 	
                    //Add columns to the table
                    table.Columns.Add( 150 );
                    table.Columns.Add( 90 );
                    table.Columns.Add( 90 );
                    table.Columns.Add( 90 );
            					 	
                    // Add rows to the table and add cells to the rows
                    Row row1 = table.Rows.Add( 40, Font.HelveticaBold, 16, Grayscale.Black, 
            			Grayscale.Gray );
                    row1.Align = CellAlign.Center;
                    row1.VAlign = CellVAlign.Center;
                    row1.Cells.Add( "Header 1" );
                    row1.Cells.Add( "Header 2" );
                    row1.Cells.Add( "Header 3" );
                    row1.Cells.Add( "Header 4" );
            					 	
                    Row row2 = table.Rows.Add( 30 );
                    Cell cell1 = row2.Cells.Add( "Rowheader 1", Font.HelveticaBold, 16, 
            			Grayscale.Black, Grayscale.Gray, 1 );
                    cell1.Align = CellAlign.Center;
                    cell1.VAlign = CellVAlign.Center;
                    row2.Cells.Add( "Item 1" );
                    row2.Cells.Add( "Item 2" );
                    row2.Cells.Add( "Item 3" );
            					 			
                    Row row3 = table.Rows.Add( 30 );
                    Cell cell2 = row3.Cells.Add( "Rowheader 2", Font.HelveticaBold, 16, 
            			Grayscale.Black, Grayscale.Gray, 1 );
                    cell2.Align = CellAlign.Center;
                    cell2.VAlign = CellVAlign.Center;
                    row3.Cells.Add( "Item 4" );
                    row3.Cells.Add( "Item 5" );
                    row3.Cells.Add( "Item 6" );
            					 	
                    // Add the table to the page
                    page.Elements.Add( table );	
            					 	
                    // Save the PDF
                    document.Draw( @"C:\MyDocument.pdf" );
                }
            } 
            </code>
            </example>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Column.Width">
            <summary>
            Gets the width of the column.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Column2">
             <summary>
             Represents a column in a table.
             </summary>
             <example>The following example will display a simple table on the page.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             		
                     ' Create a table 
                     Dim MyTable As Table2 = New Table2(0, 0, 600, 600)
                     MyTable.Border.Width = 2
                     MyTable.CellSpacing = 5
             		
                     ' Add columns to the table
                     Dim column1 As Column2 = MyTable.Columns.Add(150)
                     column1.CellDefault.Border.Right.LineStyle = LineStyle.Dots
                     column1.CellDefault.Border.Right.Color = RgbColor.Blue
                     column1.CellDefault.Border.Top.Width = 3
                     MyTable.Columns.Add(90)
                     MyTable.Columns.Add(90)
                     MyTable.Columns.Add(90)
             		
                     ' Add rows to the table and add cells to the rows
                     Dim row1 As Row2 = MyTable.Rows.Add(40, ceTe.DynamicPDF.Font.HelveticaBold, _
             			16, Grayscale.Black, Grayscale.Gray)
                     row1.CellDefault.Align = TextAlign.Center
                     row1.CellDefault.VAlign = VAlign.Center
                     row1.Cells.Add("Header 1")
                     row1.Cells.Add("Header 2")
                     row1.Cells.Add("Header 3")
                     row1.Cells.Add("Header 4")
             		
                     Dim row2 As Row2 = MyTable.Rows.Add(30)
                     Dim cell1 As Cell2 = row2.Cells.Add("Rowheader 1", Font.HelveticaBold, 16, _
             			Grayscale.Black, Grayscale.Gray, 1)
                     cell1.Align = TextAlign.Center
                     cell1.VAlign = VAlign.Center
                     row2.Cells.Add("Item 1")
                     row2.Cells.Add("Item 2")
                     row2.Cells.Add("Item 3")
             		
                     Dim row3 As Row2 = MyTable.Rows.Add(30)
                     Dim cell2 As Cell2 = row3.Cells.Add("Rowheader 2", Font.HelveticaBold, 16, _
             			Grayscale.Black, Grayscale.Gray, 1)
                     cell2.Align = TextAlign.Center
                     cell2.VAlign = VAlign.Center
                     row3.Cells.Add("Item 4")
                     row3.Cells.Add("Item 5")
                     row3.Cells.Add("Item 6")
             		
                     ' Add the table to the page
                     MyPage.Elements.Add(MyTable)
             		
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System; 
             using ceTe.DynamicPDF;     
             using ceTe.DynamicPDF.PageElements;
            
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a table 
                     Table2 table = new Table2(0, 0, 600, 600);
                     table.Border.Width = 2;
                     table.CellSpacing = 5;
            
                     //Add columns to the table
                     Column2 column1 = table.Columns.Add(150);
                     column1.CellDefault.Border.Right.LineStyle = LineStyle.Dots;
                     column1.CellDefault.Border.Right.Color = RgbColor.Blue;
                     column1.CellDefault.Border.Top.Width = 3;
                     table.Columns.Add(90);
                     table.Columns.Add(90);
                     table.Columns.Add(90);
            
                     // Add rows to the table and add cells to the rows
                     Row2 row1 = table.Rows.Add(40, Font.HelveticaBold, 16, Grayscale.Black,
                         Grayscale.Gray);
                     row1.CellDefault.Align = TextAlign.Center;
                     row1.CellDefault.VAlign = VAlign.Center;
                     row1.Cells.Add("Header 1");
                     row1.Cells.Add("Header 2");
                     row1.Cells.Add("Header 3");
                     row1.Cells.Add("Header 4");
            
                     Row2 row2 = table.Rows.Add(30);
                     Cell2 cell1 = row2.Cells.Add("Rowheader 1", Font.HelveticaBold, 16,
                         Grayscale.Black, Grayscale.Gray, 1);
                     cell1.Align = TextAlign.Center;
                     cell1.VAlign = VAlign.Center;
                     row2.Cells.Add("Item 1");
                     row2.Cells.Add("Item 2");
                     row2.Cells.Add("Item 3");
            
                     Row2 row3 = table.Rows.Add(30);
                     Cell2 cell2 = row3.Cells.Add("Rowheader 2", Font.HelveticaBold, 16,
                         Grayscale.Black, Grayscale.Gray, 1);
                     cell2.Align = TextAlign.Center;
                     cell2.VAlign = VAlign.Center;
                     row3.Cells.Add("Item 4");
                     row3.Cells.Add("Item 5");
                     row3.Cells.Add("Item 6");
            
                     // Add the table to the page
                     page.Elements.Add(table);
            
                     // Save the PDF
                     document.Draw(@"C:\MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Professional Edition</item>
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Professional Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Professional Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>	
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Column2.Width">
            <summary>
            Gets the width of the column.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Column2.CellDefault">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.PageElements.Column2.CellDefault"/> object of the cells in the column.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Column2List">
            <summary>
            Represents a list of columns in a table.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Column2List.Add(System.Single)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Column2"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Column2List"/>
            </summary>
            <param name="width">Width of the column to be added.</param>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Column2"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Column2List.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:ceTe.DynamicPDF.PageElements.Column2List"/>.
            </summary>
            <returns>An <b>IEnumerator</b> for the entire <see cref="T:ceTe.DynamicPDF.PageElements.Column2List"/>.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Column2List.Count">
            <summary>
            Gets the number of elements actually contained in the <see cref="T:ceTe.DynamicPDF.PageElements.Column2List"/>.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Column2List.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Column2"/> at the given index.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.ColumnList">
            <summary>
            <font color="red">Obsolete.</font> Represents a list of columns in a table.
            </summary>
            <remarks><font color="red">NOTE: This class is obsolete.</font> Use <see cref="T:ceTe.DynamicPDF.PageElements.Column2List"/> class instead.</remarks>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.ColumnList.Add(System.Single)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Column"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.ColumnList"/>
            </summary>
            <param name="width">Width of the column to be added.</param>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Column"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.ColumnList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:ceTe.DynamicPDF.PageElements.ColumnList"/>.
            </summary>
            <returns>An <b>IEnumerator</b> for the entire <see cref="T:ceTe.DynamicPDF.PageElements.ColumnList"/>.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ColumnList.Count">
            <summary>
            Gets the number of elements actually contained in the <see cref="T:ceTe.DynamicPDF.PageElements.ColumnList"/>.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ColumnList.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Column"/> at the given index.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.ContentArea">
            <summary>
            Represents group of content with area.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.ContentArea.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.ContentArea"/> class.
            </summary>
            <param name="x">X coordinate of the content area.</param>
            <param name="y">Y coordinate of the content area.</param>
            <param name="width">Width of the content area.</param>
            <param name="height">Height of the content area.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.ContentArea.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the content area to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the content area's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ContentArea.X">
            <summary>
            Gets or sets the X coordinate of the content area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ContentArea.Y">
            <summary>
            Gets or sets the Y coordinate of the content area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ContentArea.Width">
            <summary>
            Gets or sets the width of the content area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ContentArea.Height">
            <summary>
            Gets or sets the height of the content area.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.CurveFromSubPath">
             <summary>
             Represents a Bézier curve from the previous point.
             </summary>
             <remarks>This class, when added to a <see cref="T:ceTe.DynamicPDF.PageElements.Path"/>, is used to create a Bézier curve 
             from the CurveToSubPath's specified location back to the last point in the <see cref="T:ceTe.DynamicPDF.PageElements.Path"/>.</remarks>
             <example>The following example will display a path that incorporates several different subpaths before retuning to its starting location.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a path
                     Dim MyPath As Path = New Path(50, 150, RgbColor.Blue, RgbColor.Yellow, _
             			3, LineStyle.Solid, True)
             
                     ' Add some sub paths to the path 
                     MyPath.SubPaths.Add(New CurveSubPath(50, 400, 300, 150, -200, 400))
                     MyPath.SubPaths.Add(New LineSubPath(300, 400))
                     MyPath.SubPaths.Add(New CurveToSubPath(300, 150, 50, 300))
                     MyPath.SubPaths.Add(New CurveFromSubPath(150, 100, 200, -100))
             
                     ' Add the path to the page
                     MyPage.Elements.Add(MyPath)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create a path
                     Path path = new Path( 50, 150, RgbColor.Blue, RgbColor.Yellow, 3, 
             			LineStyle.Solid, true );
             
                     // Add some sub paths to the path
                     path.SubPaths.Add( new CurveSubPath( 50, 400, 300, 150, -200, 400 ) );
                     path.SubPaths.Add( new LineSubPath( 300, 400 ) );
                     path.SubPaths.Add( new CurveToSubPath( 300, 150, 50, 300 ) );
                     path.SubPaths.Add( new CurveFromSubPath( 150, 100, 200, -100 ) );
             
                     // Add the path to the page
                     page.Elements.Add( path );	
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Professional Edition</item>
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Professional Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Professional Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.SubPath">
            <summary>
            Base class from which all sub paths are defined.
            </summary>
            <remarks>This class is the base class for all sub paths.  SubPath's derived classes are: <see cref="T:ceTe.DynamicPDF.PageElements.CurveFromSubPath"/>, <see cref="T:ceTe.DynamicPDF.PageElements.CurveToSubPath"/>, <see cref="T:ceTe.DynamicPDF.PageElements.CurveSubPath"/> and <see cref="T:ceTe.DynamicPDF.PageElements.LineSubPath"/></remarks>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.SubPath.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the sub path to the given <b>PageWriter</b> object.
            </summary>
            <param name="writer"><b>PageWriter</b> to receive the sub path's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.CurveFromSubPath.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.CurveFromSubPath"/> class.
            </summary>
            <param name="x">X coordinate of the destination.</param>
            <param name="y">Y coordinate of the destination.</param>
            <param name="sourceControlPointX">X coordinate of the sources control point.</param>
            <param name="sourceControlPointY">Y coordinate of the sources control point.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.CurveFromSubPath.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the sub path to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the sub path's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CurveFromSubPath.X">
            <summary>
            Gets or sets the X coordinate of the destination.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CurveFromSubPath.Y">
            <summary>
            Gets or sets the Y coordinate of the destination.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CurveFromSubPath.SourceControlPointX">
            <summary>
            Gets or sets the X coordinate of the sources control point.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CurveFromSubPath.SourceControlPointY">
            <summary>
            Gets or sets the Y coordinate of the sources control point.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.CurveSubPath">
             <summary>
             Represents a Bézier curve subpath.
             </summary>
             <remarks>This class, when added to a <see cref="T:ceTe.DynamicPDF.PageElements.Path"/>, is used to create a Bézier curve 
             to the CurveSubPath's specified location using the source and destination control points.</remarks>
             <example>The following example will display a path that incorporates several different subpaths before retuning to its starting location.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a path
                     Dim MyPath As Path = New Path(50, 150, RgbColor.Blue, RgbColor.Yellow, _
             			3, LineStyle.Solid, True)
             
                     ' Add some sub paths to the path 
                     MyPath.SubPaths.Add(New CurveSubPath(50, 400, 300, 150, -200, 400))
                     MyPath.SubPaths.Add(New LineSubPath(300, 400))
                     MyPath.SubPaths.Add(New CurveToSubPath(300, 150, 50, 300))
                     MyPath.SubPaths.Add(New CurveFromSubPath(150, 100, 200, -100))
             
                     ' Add the path to the page
                     MyPage.Elements.Add(MyPath)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create a path
                     Path path = new Path( 50, 150, RgbColor.Blue, RgbColor.Yellow, 3, 
             			LineStyle.Solid, true );
             
                     // Add some sub paths to the path
                     path.SubPaths.Add( new CurveSubPath( 50, 400, 300, 150, -200, 400 ) );
                     path.SubPaths.Add( new LineSubPath( 300, 400 ) );
                     path.SubPaths.Add( new CurveToSubPath( 300, 150, 50, 300 ) );
                     path.SubPaths.Add( new CurveFromSubPath( 150, 100, 200, -100 ) );
             
                     // Add the path to the page
                     page.Elements.Add( path );	
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Professional Edition</item>
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Professional Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Professional Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.CurveSubPath.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.CurveSubPath"/> class.
            </summary>
            <param name="x">X coordinate of the destination.</param>
            <param name="y">Y coordinate of the destination.</param>
            <param name="sourceControlPointX">X coordinate of the sources control point.</param>
            <param name="sourceControlPointY">Y coordinate of the sources control point.</param>
            <param name="destinationControlPointX">X coordinate of the destinations control point.</param>
            <param name="destinationControlPointY">Y coordinate of the destinations control point.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.CurveSubPath.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the sub path to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the sub path's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CurveSubPath.X">
            <summary>
            Gets or sets the X coordinate of the destination.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CurveSubPath.Y">
            <summary>
            Gets or sets the Y coordinate of the destination.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CurveSubPath.SourceControlPointX">
            <summary>
            Gets or sets the X coordinate of the sources control point.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CurveSubPath.SourceControlPointY">
            <summary>
            Gets or sets the Y coordinate of the sources control point.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CurveSubPath.DestinationControlPointX">
            <summary>
            Gets or sets the X coordinate of the destinations control point.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CurveSubPath.DestinationControlPointY">
            <summary>
            Gets or sets the Y coordinate of the destinations control point.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.CurveToSubPath">
             <summary>
             Represents a Bézier curve to the next subpath.
             </summary>
             <remarks>This class, when added to a <see cref="T:ceTe.DynamicPDF.PageElements.Path"/>, is used to create a Bézier curve 
             to the CurveToSubPath's specified location.</remarks>
             <example>The following example will display a path that incorporates several different subpaths before retuning to its starting location.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a path
                     Dim MyPath As Path = New Path(50, 150, RgbColor.Blue, RgbColor.Yellow, _
             			3, LineStyle.Solid, True)
             
                     ' Add some sub paths to the path 
                     MyPath.SubPaths.Add(New CurveSubPath(50, 400, 300, 150, -200, 400))
                     MyPath.SubPaths.Add(New LineSubPath(300, 400))
                     MyPath.SubPaths.Add(New CurveToSubPath(300, 150, 50, 300))
                     MyPath.SubPaths.Add(New CurveFromSubPath(150, 100, 200, -100))
             
                     ' Add the path to the page
                     MyPage.Elements.Add(MyPath)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create a path
                     Path path = new Path( 50, 150, RgbColor.Blue, RgbColor.Yellow, 3, 
             			LineStyle.Solid, true );
             
                     // Add some sub paths to the path
                     path.SubPaths.Add( new CurveSubPath( 50, 400, 300, 150, -200, 400 ) );
                     path.SubPaths.Add( new LineSubPath( 300, 400 ) );
                     path.SubPaths.Add( new CurveToSubPath( 300, 150, 50, 300 ) );
                     path.SubPaths.Add( new CurveFromSubPath( 150, 100, 200, -100 ) );
             
                     // Add the path to the page
                     page.Elements.Add( path );	
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Professional Edition</item>
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Professional Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Professional Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.CurveToSubPath.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.CurveSubPath"/> class.
            </summary>
            <param name="x">X coordinate of the destination.</param>
            <param name="y">Y coordinate of the destination.</param>
            <param name="destinationControlPointX">X coordinate of the destinations control point.</param>
            <param name="destinationControlPointY">Y coordinate of the destinations control point.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.CurveToSubPath.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the sub path to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the sub path's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CurveToSubPath.X">
            <summary>
            Gets or sets the X coordinate of the destination.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CurveToSubPath.Y">
            <summary>
            Gets or sets the Y coordinate of the destination.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CurveToSubPath.DestinationControlPointX">
            <summary>
            Gets or sets the X coordinate of the destinations control point.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CurveToSubPath.DestinationControlPointY">
            <summary>
            Gets or sets the Y coordinate of the destinations control point.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.FormattedTextArea">
             <summary>
             Represents an area of formatted text.
             </summary>
             <remarks>This class can be used to place formatted text onto an area of the page.  
             For a complete list of supported font tags take a look at the <a href="Formatted Text Area Formatting.html">Formatted TextArea Formatting</a> topic.
              See the <a href="Text Continuation.html">Text Continuation</a> topic for more on text continuation.</remarks>
             <example>The following example shows a paragraph of formatted text being displayed on the page.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a style
                     Dim style As FormattedTextAreaStyle = New FormattedTextAreaStyle(FontFamily.Helvetica, 12, False)
             
                     ' Create the text and the formatted text area
                     Dim formattedText As String = "&lt;p&gt;Formatted text area provide rich formatting support for " + _
             			"text that appears in the document. You have complete control over 8 paragraph " + _
             			"properties: spacing before, spacing after, first line indentation, left indentation," + _
             			" right indentation, alignment, allowing orphan lines, and white space preservation; " + _
             			"6 font properties: &lt;font face='Times'&gt;font face, &lt;/font&gt;&lt;font " + _
             			"pointSize='6'&gt;font size, &lt;/font&gt;&lt;font color='FF0000'&gt;color, " + _
             			"&lt;/font&gt;&lt;b&gt;bold, &lt;/b&gt;&lt;i&lt;italic and &lt;/i&gt;&lt;u&gt;" + _
             			"underline&lt;/u&gt;; and 2 line properties: leading, and leading type. Text can " + _
             			"also be rotated.&lt;/p&gt;"
             
                     Dim MyFormattedTextArea As FormattedTextArea = New FormattedTextArea(formattedText, 0, 0, 256, 400, style)
             
                     ' Add the formatted text area to the page
                     MyPage.Elements.Add(MyFormattedTextArea)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create an formatted style
                     FormattedTextAreaStyle style = new FormattedTextAreaStyle( FontFamily.Helvetica, 12, false );
             
                     // Create the text and the formatted text area
                     string formattedText = "&lt;p&gt;Formatted text area provide rich formatting support for text that " + 
             			"appears in the document. You have complete control over 8 paragraph properties: " + 
             			"spacing before, spacing after, first line indentation, left indentation, right " + 
             			"indentation, alignment, allowing orphan lines, and white space preservation; 6 " + 
             			"font properties: &lt;font face='Times'&gt;font face, &lt;/font&gt;&lt;font " + 
             			"pointSize='6'&gt;font size, &lt;/font&gt;&lt;font color='FF0000'&gt;color, " + 
             			"&lt;/font&gt;&lt;b&gt;bold, &lt;/b&gt;&lt;i&gt;italic and &lt;/i&gt;&lt;u&gt;" + 
             			"underline&lt;/u&gt;; and 2 line properties: leading, and leading type. Text can " + 
             			"also be rotated.&lt;/p&gt;"; 
             
                     FormattedTextArea formattedTextArea = new FormattedTextArea( formattedText, 0, 0, 256, 400, style );
             
                     // Add the formatted text area to the page
                     page.Elements.Add( formattedTextArea );	
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Professional Edition</item>
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Professional Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Professional Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.FormattedTextArea.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.FontFamily,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.FormattedTextArea"/> class.
            </summary>
            <param name="text">Text to display in the formatted text area.</param>
            <param name="x">X coordinate of the formatted text area.</param>
            <param name="y">Y coordinate of the formatted text area.</param>
            <param name="width">Width of the formatted text area.</param>
            <param name="height">Height of the formatted text area.</param>
            <param name="fontFamily">Initial <see cref="T:ceTe.DynamicPDF.FontFamily"/> of the formatted text area.</param>
            <param name="fontSize">Initial font size of the formatted text area.</param>
            <param name="preserveWhitespace">Specifies if white space should be preserved.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.FormattedTextArea.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.FormattedTextArea"/> class.
            </summary>
            <param name="text">Text to display in the formatted text area.</param>
            <param name="x">X coordinate of the formatted text area.</param>
            <param name="y">Y coordinate of the formatted text area.</param>
            <param name="width">Width of the formatted text area.</param>
            <param name="height">Height of the formatted text area.</param>
            <param name="style">Initial <see cref="T:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle"/> of the formatted text area.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.FormattedTextArea.DrawRotated(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the text area to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the formatted text area's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.FormattedTextArea.GetOverflowFormattedTextArea">
             <summary>
             Returns a new <see cref="T:ceTe.DynamicPDF.PageElements.FormattedTextArea"/> object containing the overflow text.
             </summary>
             <returns>A <see cref="T:ceTe.DynamicPDF.PageElements.FormattedTextArea"/> if there is overflow text; otherwise, <b>null</b>.</returns>
             <remarks>This method returns a new <b>TextArea</b> object that contains the remaining text that did not fit.</remarks>
             <example>The following example shows you how to use the GetOverflowTextArea object to allow text of variable length to flow onto new pages as needed.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
             	Sub Main()
             		
             		' Create a PDF Document
             		Dim MyDocument As Document = New Document 
            
             		' Create a string and assign it to text of variable length
             		Dim myVariableText As String = ""
             		Dim i As Integer
             		For i = 0 To 50
             			MyVariableText &amp;= "&lt;i&gt;This&lt;/i&gt; is a &lt;font color='FF0000'&gt;sentence&lt;/font&gt; that " + _
             			"I will use as my &lt;b&gt;variable length&lt;/b&gt; text.  "
             		Next
             		
             		' Create an formatted text area
             		Dim MyFormattedTextArea As FormattedTextArea = New FormattedTextArea(MyVariableText, 0, 0, 250, 200, FontFamily.Helvetica, 12, False)
             		Do
             			' Create a new page
             			Dim MyPage As Page = New Page
             
             			' Add the text area to the page;
             			MyPage.Elements.Add(MyFormattedTextArea)
             
             			' Add the page to the document
             			MyDocument.Pages.Add(MyPage)
             
             			' Set the text area object equal to the rest of the text that did not fit
             			' if all the text fit this will set textArea to null
             			MyFormattedTextArea = MyFormattedTextArea.GetOverflowFormattedTextArea()
             		Loop While Not MyFormattedTextArea Is Nothing
             
             		' Save the PDF
             		MyDocument.Draw("C:\MyDocument.pdf")
             		
             	End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
             	static void Main()
             	{
             		// Create a PDF Document
             		Document document = new Document();
             
             		// Create a string and assign it to text of variable length
             		string variableText = "";
             		for( int i = 0; i &lt; 50; i++ )
             			variableText += "&lt;i&gt;This&lt;/i&gt; is a &lt;font color='FF0000'&gt;sentence&lt;/font&gt; that I " +
             			"will use as my &lt;b&gt;variable length&lt;/b&gt; text. ";
             
             		// Create an formatted text area
             		FormattedTextArea formattedTextArea = new FormattedTextArea( variableText, 0, 0, 250, 200, FontFamily.Helvetica, 12, false ); 
             	
             		do
             		{
             			// Create a new page
             			Page page = new Page();
              
             			// Add the text area to the page;
             			page.Elements.Add( formattedTextArea );
             
             			// Add the page to the document
             			document.Pages.Add( page );
             
             			// Set the formatted text area object equal to the rest of the text that did not fit
             			// if all the text did fit, GetOverflowFormattedTextArea will return null
             			formattedTextArea = formattedTextArea.GetOverflowFormattedTextArea(); 
             		} while( formattedTextArea != null );
             	
             		// Save the PDF
             		document.Draw( @"C:\MyDocument.pdf" );
             	}
             }
             </code>
             </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.FormattedTextArea.GetOverflowFormattedTextArea(System.Single,System.Single)">
             <summary>
             Returns a new <see cref="T:ceTe.DynamicPDF.PageElements.FormattedTextArea"/> object containing the overflow text.
             </summary>
             <param name="x">X coordinate of the new object.</param>
             <param name="y">Y coordinate of the new object.</param>
             <returns>A <see cref="T:ceTe.DynamicPDF.PageElements.FormattedTextArea"/> if there is overflow text; otherwise, <b>null</b>.</returns>
             <remarks>This method returns a new <b>TextArea</b> object that contains the remaining text that did not fit.</remarks>
             <example>The following example shows you how to use the GetOverflowTextArea object to allow text of variable length to flow onto new pages as needed.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
             	Sub Main()
             		
             		' Create a PDF Document
             		Dim MyDocument As Document = New Document 
            
             		' Create a string and assign it to text of variable length
             		Dim myVariableText As String = ""
             		Dim i As Integer
             		For i = 0 To 50
             			MyVariableText &amp;= "&lt;i&gt;This&lt;/i&gt; is a &lt;font color='FF0000'&gt;sentence&lt;/font&gt; that " + _
             			"I will use as my &lt;b&gt;variable length&lt;/b&gt; text.  "
             		Next
             		
             		' Create an formatted text area
             		Dim MyFormattedTextArea As FormattedTextArea = New FormattedTextArea(MyVariableText, 0, 0, 250, 200, FontFamily.Helvetica, 12, False)
             		Do
             			' Create a new page
             			Dim MyPage As Page = New Page
             
             			' Add the text area to the page;
             			MyPage.Elements.Add(MyFormattedTextArea)
             
             			' Add the page to the document
             			MyDocument.Pages.Add(MyPage)
             
             			' Set the text area object equal to the rest of the text that did not fit
             			' if all the text fit this will set textArea to null
             			MyFormattedTextArea = MyFormattedTextArea.GetOverflowFormattedTextArea(50, 50)
             		Loop While Not MyFormattedTextArea Is Nothing
             
             		' Save the PDF
             		MyDocument.Draw("C:\MyDocument.pdf")
             		
             	End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
             	static void Main()
             	{
             		// Create a PDF Document
             		Document document = new Document();
             
             		// Create a string and assign it to text of variable length
             		string variableText = "";
             		for( int i = 0; i &lt; 50; i++ )
             			variableText += "&lt;i&gt;This&lt;/i&gt; is a &lt;font color='FF0000'&gt;sentence&lt;/font&gt; that I " +
             			"will use as my &lt;b&gt;variable length&lt;/b&gt; text. ";
             
             		// Create an formatted text area
             		FormattedTextArea formattedTextArea = new FormattedTextArea( variableText, 0, 0, 250, 200, FontFamily.Helvetica, 12, false ); 
             	
             		do
             		{
             			// Create a new page
             			Page page = new Page();
              
             			// Add the text area to the page;
             			page.Elements.Add( formattedTextArea );
             
             			// Add the page to the document
             			document.Pages.Add( page );
             
             			// Set the formatted text area object equal to the rest of the text that did not fit
             			// if all the text did fit, GetOverflowFormattedTextArea will return null
             			formattedTextArea = formattedTextArea.GetOverflowFormattedTextArea( 50, 50 ); 
             		} while( formattedTextArea != null );
             	
             		// Save the PDF
             		document.Draw( @"C:\MyDocument.pdf" );
             	}
             }
             </code>
             </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.FormattedTextArea.GetOverflowFormattedTextArea(System.Single,System.Single,System.Single)">
             <summary>
             Returns a new <see cref="T:ceTe.DynamicPDF.PageElements.FormattedTextArea"/> object containing the overflow text.
             </summary>
             <param name="x">X coordinate of the new object.</param>
             <param name="y">Y coordinate of the new object.</param>
             <param name="height">Height of the new object.</param>
             <returns>A <see cref="T:ceTe.DynamicPDF.PageElements.FormattedTextArea"/> if there is overflow text; otherwise, <b>null</b>.</returns>
             <remarks>This method returns a new <b>TextArea</b> object that contains the remaining text that did not fit.</remarks>
             <example>The following example shows you how to use the GetOverflowTextArea object to allow text of variable length to flow onto new pages as needed.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
             	Sub Main()
             		
             		' Create a PDF Document
             		Dim MyDocument As Document = New Document 
            
             		' Create a string and assign it to text of variable length
             		Dim myVariableText As String = ""
             		Dim i As Integer
             		For i = 0 To 50
             			MyVariableText &amp;= "&lt;i&gt;This&lt;/i&gt; is a &lt;font color='FF0000'&gt;sentence&lt;/font&gt; that " + _
             			"I will use as my &lt;b&gt;variable length&lt;/b&gt; text.  "
             		Next
             		
             		' Create an formatted text area
             		Dim MyFormattedTextArea As FormattedTextArea = New FormattedTextArea(MyVariableText, 0, 0, 250, 200, FontFamily.Helvetica, 12, False)
             		Do
             			' Create a new page
             			Dim MyPage As Page = New Page
             
             			' Add the text area to the page;
             			MyPage.Elements.Add(MyFormattedTextArea)
             
             			' Add the page to the document
             			MyDocument.Pages.Add(MyPage)
             
             			' Set the text area object equal to the rest of the text that did not fit
             			' if all the text fit this will set textArea to null
             			MyFormattedTextArea = MyFormattedTextArea.GetOverflowFormattedTextArea(50, 50, 100)
             		Loop While Not MyFormattedTextArea Is Nothing
             
             		' Save the PDF
             		MyDocument.Draw("C:\MyDocument.pdf")
             		
             	End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
             	static void Main()
             	{
             		// Create a PDF Document
             		Document document = new Document();
             
             		// Create a string and assign it to text of variable length
             		string variableText = "";
             		for( int i = 0; i &lt; 50; i++ )
             			variableText += "&lt;i&gt;This&lt;/i&gt; is a &lt;font color='FF0000'&gt;sentence&lt;/font&gt; that I " +
             			"will use as my &lt;b&gt;variable length&lt;/b&gt; text. ";
             
             		// Create an formatted text area
             		FormattedTextArea formattedTextArea = new FormattedTextArea( variableText, 0, 0, 250, 200, FontFamily.Helvetica, 12, false ); 
             	
             		do
             		{
             			// Create a new page
             			Page page = new Page();
              
             			// Add the text area to the page;
             			page.Elements.Add( formattedTextArea );
             
             			// Add the page to the document
             			document.Pages.Add( page );
             
             			// Set the formatted text area object equal to the rest of the text that did not fit
             			// if all the text did fit, GetOverflowFormattedTextArea will return null
             			formattedTextArea = formattedTextArea.GetOverflowFormattedTextArea( 50, 50, 100 ); 
             		} while( formattedTextArea != null );
             	
             		// Save the PDF
             		document.Draw( @"C:\MyDocument.pdf" );
             	}
             }
             </code>
             </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.FormattedTextArea.GetRequiredHeight">
            <summary>
            Returns the required height to fit all of the text of the <see cref="T:ceTe.DynamicPDF.PageElements.FormattedTextArea"/>.
            </summary>
            <returns>Height required to fit all text.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.FormattedTextArea.HasOverflowText">
            <summary>
            Returns a value specifying if there is text that did not fit in the <see cref="T:ceTe.DynamicPDF.PageElements.FormattedTextArea"/>.
            </summary>
            <returns><b>True</b> if the <see cref="T:ceTe.DynamicPDF.PageElements.FormattedTextArea"/> has overflow text.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.FormattedTextArea.FontFaces">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.Text.FontFamilyList"/> used by the formatted text area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.FormattedTextArea.VAlign">
            <summary>
            Gets or sets a value indicating the vertical alignment of the formatted text area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.FormattedTextArea.Width">
            <summary>
            Gets or sets the width of the formatted text area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.FormattedTextArea.Height">
            <summary>
            Gets or sets the height of the formatted text area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.FormattedTextArea.Text">
            <summary>
            Gets or sets the text for the formatted text area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.FormattedTextArea.Style">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle"/> object used to specify the initial style of the formatted text area.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle">
             <summary>
             Represents an formatted text area style.
             </summary>
             <remarks>This class can be used to define a certain style of text to be used with an <see cref="T:ceTe.DynamicPDF.PageElements.FormattedTextArea"/>.</remarks>
             <example>The following example shows a paragraph of formatted formatted text being displayed on the page.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create an formatted style
                     Dim style As FormattedTextAreaStyle = New FormattedTextAreaStyle(FontFamily.Helvetica, 12, False)
             
                     ' Create the text and the formatted text area
                     Dim formattedText As String = "&lt;p&gt;Formatted text area provide rich formatting support for " + _
             			"text that appears in the document. You have complete control over 8 paragraph " + _
             			"properties: spacing before, spacing after, first line indentation, left indentation," + _
             			" right indentation, alignment, allowing orphan lines, and white space preservation; " + _
             			"6 font properties: &lt;font face='Times'&gt;font face, &lt;/font&gt;&lt;font " + _
             			"pointSize='6'&gt;font size, &lt;/font&gt;&lt;font color='FF0000'&gt;color, " + _
             			"&lt;/font&gt;&lt;b&gt;bold, &lt;/b&gt;&lt;i&lt;italic and &lt;/i&gt;&lt;u&gt;" + _
             			"underline&lt;/u&gt;; and 2 line properties: leading, and leading type. Text can " + _
             			"also be rotated.&lt;/p&gt;"
             
                     Dim MyFormattedTextArea As FormattedTextArea = New FormattedTextArea(formattedText, 0, 0, 256, 400, style)
             
                     ' Add the formatted text area to the page
                     MyPage.Elements.Add(MyFormattedTextArea)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create an formatted style
                     FormattedTextAreaStyle style = new FormattedTextAreaStyle( FontFamily.Helvetica, 12, false );
             
                     // Create the text and the formatted text area
                     string formattedText = "&lt;p&gt;Formatted text area provide rich formatting support for text that " + 
             			"appears in the document. You have complete control over 8 paragraph properties: " + 
             			"spacing before, spacing after, first line indentation, left indentation, right " + 
             			"indentation, alignment, allowing orphan lines, and white space preservation; 6 " + 
             			"font properties: &lt;font face='Times'&gt;font face, &lt;/font&gt;&lt;font " + 
             			"pointSize='6'&gt;font size, &lt;/font&gt;&lt;font color='FF0000'&gt;color, " + 
             			"&lt;/font&gt;&lt;b&gt;bold, &lt;/b&gt;&lt;i&gt;italic and &lt;/i&gt;&lt;u&gt;" + 
             			"underline&lt;/u&gt;; and 2 line properties: leading, and leading type. Text can " + 
             			"also be rotated.&lt;/p&gt;"; 
             
                     FormattedTextArea formattedTextArea = new FormattedTextArea( formattedText, 0, 0, 256, 400, style );
             
                     // Add the formatted text area to the page
                     page.Elements.Add( formattedTextArea );	
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Professional Edition</item>
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Professional Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Professional Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle.Bold">
            <summary>
            Represents bold text.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle.Italic">
            <summary>
            Represents italic text.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle.Underline">
            <summary>
            Represents underlined text.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle.Paragraph">
            <summary>
            Represents the paragraph style.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle.Font">
            <summary>
            Represents the font style.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle.Line">
            <summary>
            Represents the line style.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle.TextRise">
            <summary>
            Represents the rise level for superscript ot subscript.
            </summary>summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle.#ctor(ceTe.DynamicPDF.FontFamily,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle"/> structure.
            </summary>
            <param name="fontFamily">Font family of the style.</param>
            <param name="fontSize">Font size of the style.</param>
            <param name="preserveWhiteSpace">Preserve whitespace property of the style.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle.Equals(System.Object)">
            <summary>
            Tests equality of styles.
            </summary>
            <param name="obj"><b>Object</b> to compare to the current <see cref="T:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle"/>.</param>
            <returns><b>true</b> if the two styles are equal</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for use in
            hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current <see cref="T:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle.GetFont">
            <summary>
            Returns the <see cref="F:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle.Font"/> to use from the <see cref="T:ceTe.DynamicPDF.FontFamily"/> of the style.
            </summary>
            <returns>The <see cref="F:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle.Font"/> of the style</returns>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle.ParagraphStyle">
            <summary>
            Represents the style of a paragraph.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle.ParagraphStyle.SpacingBefore">
            <summary>
            Represents the spacing before a paragraph.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle.ParagraphStyle.SpacingAfter">
            <summary>
            Represents the spacing after a paragraph.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle.ParagraphStyle.Indent">
            <summary>
            Represents the indention of the first line of a paragraph.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle.ParagraphStyle.LeftIndent">
            <summary>
            Represents the left indentation of a paragraph.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle.ParagraphStyle.RightIndent">
            <summary>
            Represents the right indentation of a paragraph.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle.ParagraphStyle.Align">
            <summary>
            Represents the alignment of a paragraph.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle.ParagraphStyle.AllowOrphanLines">
            <summary>
            Represents if paragraphs should be allowed to break leaving one line on a page.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle.ParagraphStyle.PreserveWhiteSpace">
            <summary>
            Represents if a white space should be preserved.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle.ParagraphStyle.Equals(System.Object)">
            <summary>
            Tests equality of paragraph styles.
            </summary>
            <param name="obj"><b>Object</b> to compare to the current <see cref="T:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle.ParagraphStyle"/>.</param>
            <returns><b>true</b> if the two paragraph styles are equal</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle.ParagraphStyle.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for use in
            hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current <see cref="T:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle.ParagraphStyle"/> object.</returns>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle.LineStyle">
            <summary>
            Represents the style of a line.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle.LineStyle.Leading">
            <summary>
            Represents the leading of the line.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle.LineStyle.LeadingType">
            <summary>
            Represents the leading type of the line.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle.LineStyle.Equals(System.Object)">
            <summary>
            Tests equality of line styles.
            </summary>
            <param name="obj"><b>Object</b> to compare to the current <see cref="T:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle.LineStyle"/>.</param>
            <returns><b>true</b> if the two line styles are equal</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle.LineStyle.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for use in
            hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current <see cref="T:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle.LineStyle"/> object.</returns>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle.FontStyle">
            <summary>
            Represents the style of a font.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle.FontStyle.Face">
            <summary>
            Represents the font face.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle.FontStyle.Size">
            <summary>
            Represents the font size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle.FontStyle.Color">
            <summary>
            Represents the font color.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle.FontStyle.Equals(System.Object)">
            <summary>
            Tests equality of font styles.
            </summary>
            <param name="obj"><b>Object</b> to compare to the current <see cref="T:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle.FontStyle"/>.</param>
            <returns><b>true</b> if the two font styles are equal</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle.FontStyle.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for use in
            hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current <see cref="T:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle.FontStyle"/> object.</returns>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.IAnnotation">
            <summary>
            Defines an annotation.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Class</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="T:ceTe.DynamicPDF.PageElements.Link"/></term>
            <description>Represents a link with a destination or action.</description>
            </item>
            <item>
            <term><see cref="T:ceTe.DynamicPDF.PageElements.Note"/></term>
            <description>Represents a note annotation.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.IAnnotation.DrawAnnotation(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the annotation to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the annotation's output.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.IListProperties">
            <summary>
            Represents the properties of the List and Listitem.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.IListProperties.Font">
            <summary>
            Gets the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.IListProperties.FontSize">
            <summary>
            Gets size of the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.IListProperties.Leading">
            <summary>
            Gets the leading for the text.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.IListProperties.RightIndent">
            <summary>
            Gets the Right Indent.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.IListProperties.LeftIndent">
            <summary>
            Gets the left indent.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.IListProperties.TextAlign">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.PageElements.IListProperties.TextAlign"/> enumeration that specifies the text alignment.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.IListProperties.TextColor">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.Color"/>.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.IListProperties.BulletAlign">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.Align"/> enumeration that specifies the Bullet alignment.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.IListProperties.Level">
            <summary>
            Gets the level
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.IListProperties.ParagraphIndent">
            <summary>
            Gets the ParagraphIndent.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.IListProperties.BulletAreaWidth">
            <summary>
            Gets the BulletAreaWidth.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.IListProperties.StrikeThrough">
            <summary>
            Gets the Strikethrough.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.IListProperties.RightToLeft">
            <summary>
            Gets a value indicating if text should be displayed right to left.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.IListProperties.BulletSize">
            <summary>
            Gets the BulletSize.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.IListProperties.ListItemTopMargin">
            <summary>
            Gets the TopMargin.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.IListProperties.ListItemBottomMargin">
            <summary>
            Gets the BottomMargin.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.IListProperties.BulletSuffix">
            <summary>
            Get the Bullet suffix.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.IListProperties.BulletPrefix">
            <summary>
            Get the Bullet perfix.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.IListProperties.BulletType">
            <summary>
            Get the Bullet Numbering Style.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Image">
             <summary>
             Represents an image.
             </summary>
             <remarks>This class can be used to place images on a page.  If an image will be used more than once, 
             please see the <a href="Image ReUse.html">Image Reuse</a> topic.</remarks>
             <example>The following example will place an image on the page and then set the Y scale to twice as much as the X scale.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create an image
                     Dim MyImage As Image = New Image("C:\MyImage.jpg", 0, 0)
             
                     ' Add the image to the page
                     MyPage.Elements.Add(MyImage)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create an image
                     Image image = new Image( @"C:\MyImage.jpg", 0, 0 );
             	
                     // Add the image to the page
                     page.Elements.Add( image );	
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             The use of the GIF image type is a DynamicPDF Generator Community Edition feature.  All other image types (JPEG, JPEG 2000, PNG, BMP, EMF, EXIF, TIFF and WMF) are a DynamicPDF Generator Professional Edition feature, except for the use of 64 bit PNG images (in this case see below). One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
             <item>DynamicPDF Generator for .NET Professional Edition</item>
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Professional Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Professional Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             Use of 64 bit PNG images with this class is an Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Image.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Image"/> class.
            </summary>
            <param name="filePath">Physical file path of the image.</param>
            <param name="x">X coordinate of the image.</param>
            <param name="y">Y coordinate of the image.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Image.#ctor(ceTe.DynamicPDF.Imaging.ImageData,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Image"/> class.
            </summary>
            <param name="imageData"><see cref="P:ceTe.DynamicPDF.PageElements.Image.ImageData"/> object containing the image data.</param>
            <param name="x">X coordinate of the image.</param>
            <param name="y">Y coordinate of the image.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Image.#ctor(System.Drawing.Bitmap,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Image"/> class.
            </summary>
            <param name="bitmap"><see cref="T:System.Drawing.Bitmap"/> object containing the image data.</param>
            <param name="x">X coordinate of the image.</param>
            <param name="y">Y coordinate of the image.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Image.#ctor(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Image"/> class.
            </summary>
            <param name="filePath">Physical file path of the image.</param>
            <param name="x">X coordinate of the image.</param>
            <param name="y">Y coordinate of the image.</param>
            <param name="scale">The scale to use when rendering the image.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Image.#ctor(ceTe.DynamicPDF.Imaging.ImageData,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Image"/> class.
            </summary>
            <param name="imageData"><see cref="P:ceTe.DynamicPDF.PageElements.Image.ImageData"/> object containing the image data.</param>
            <param name="x">X coordinate of the image.</param>
            <param name="y">Y coordinate of the image.</param>
            <param name="scale">The scale to use when rendering the image.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Image.#ctor(System.IO.Stream,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Image"/> class.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> object containing the image data.</param>
            <param name="x">X coordinate of the image.</param>
            <param name="y">Y coordinate of the image.</param>
            <param name="scale">The scale to use when rendering the image.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Image.#ctor(System.Drawing.Bitmap,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Image"/> class.
            </summary>
            <param name="bitmap"><see cref="T:System.Drawing.Bitmap"/> object containing the image data.</param>
            <param name="x">X coordinate of the image.</param>
            <param name="y">Y coordinate of the image.</param>
            <param name="scale">The scale to use when rendering the image.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Image.DrawRotated(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the image to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the image's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Image.SetBounds(System.Single,System.Single)">
            <summary>
            Scales the image to fit in the given box keeping the X and Y scale equal.
            </summary>
            <param name="maximumWidth">The maximum width.</param>
            <param name="maximumHeight">The maximum height.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Image.SetSize(System.Single,System.Single)">
            <summary>
            Scales the image to fit the exact width and height given.
            </summary>
            <param name="width">Width of image.</param>
            <param name="height">Height of image.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Image.SetDpi(System.Single)">
            <summary>
            Scales the image to have the specified dpi (also known as pixels per inch).
            </summary>
            <param name="dpi">DPI of the image.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Image.SetDpi(System.Single,System.Single)">
            <summary>
            Scales the image to have the specified dpi (also known as pixels per inch).
            </summary>
            <param name="horizontalDpi">Horizontal dpi of the image.</param>
            <param name="verticalDpi">Horizontal dpi of the image.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Image.Align">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Image.Align"/> enumeration that specifies horizontal alignment of the image on the X coordinate.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Image.VAlign">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Image.VAlign"/> enumeration that specifies vertical alignment of the image on the Y coordinate.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Image.ScaleX">
            <summary>
            Gets or sets the horizontal scale of the image.
            </summary>
            <remarks>Setting this value affects the <see cref="P:ceTe.DynamicPDF.PageElements.Image.HorizontalDpi"/> property.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Image.ScaleY">
            <summary>
            Gets or sets the vertical scale of the image.
            </summary>
            <remarks>Setting this value affects the <see cref="P:ceTe.DynamicPDF.PageElements.Image.VerticalDpi"/> property.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Image.HorizontalDpi">
            <summary>
            Gets or sets the horizontal dpi (also known as pixels per inch) of the image.
            </summary>
            <remarks>Setting this value affects the <see cref="P:ceTe.DynamicPDF.PageElements.Image.ScaleX"/> property.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Image.VerticalDpi">
            <summary>
            Gets or sets the vertical dpi (also known as pixels per inch) of the image.
            </summary>
            <remarks>Setting this value affects the <see cref="P:ceTe.DynamicPDF.PageElements.Image.ScaleY"/> property.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Image.Width">
            <summary>
            Gets or sets the width of the image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Image.Height">
            <summary>
            Gets or sets the height of the image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Image.ImageData">
            <summary>
            Get the image's <see cref="P:ceTe.DynamicPDF.PageElements.Image.ImageData"/> object.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Image.AlternateText">
            <summary>
            Gets or sets the alternate text of the image.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Label">
             <summary>
             Represents a label page element.
             </summary>
             <remarks>This class can be used to place labels of text on a page.</remarks>
             <example>The following example will display text in a label on the page.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create the string and label
                     Dim MyText As String = "This is the dark blue, centered text at a 15 degree angle contained in the label."
                     Dim MyLabel As Label = New Label(MyText, 0, 0, 512, 14, Font.Helvetica, 14, TextAlign.Center, RgbColor.DarkBlue)
             
                     ' Change the angle property 
                     MyLabel.Angle = 15
             
                     ' Add the label to the page
                     MyPage.Elements.Add(MyLabel)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create the string and label
                     string text = "This is the dark blue, centered text at a 15 degree angle contained in the label.";
                     Label label = new Label( text, 0, 0, 512, 14, Font.Helvetica, 14, TextAlign.Center, RgbColor.DarkBlue );
             
                     // Change the angle property
                     label.Angle = 15;
             
                     // Add the label to the page
                     page.Elements.Add( label );	
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Community Edition feature.
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Label.#ctor(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Label"/> class.
            </summary>
            <param name="text">Text to display in the label.</param>
            <param name="x">X coordinate of the label.</param>
            <param name="y">Y coordinate of the label.</param>
            <param name="width">Width of the label.</param>
            <param name="height">Height of the label.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Label.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Label"/> class.
            </summary>
            <param name="text">Text to display in the label.</param>
            <param name="x">X coordinate of the label.</param>
            <param name="y">Y coordinate of the label.</param>
            <param name="width">Width of the label.</param>
            <param name="height">Height of the label.</param>
            <param name="font">Font for the text of the label.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Label.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Label"/> class.
            </summary>
            <param name="text">Text to display in the label.</param>
            <param name="x">X coordinate of the label.</param>
            <param name="y">Y coordinate of the label.</param>
            <param name="width">Width of the label.</param>
            <param name="height">Height of the label.</param>
            <param name="font">Font for the text of the label.</param>
            <param name="fontSize">Font size of the text of the label.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Label.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.TextAlign)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Label"/> class.
            </summary>
            <param name="text">Text to display in the label.</param>
            <param name="x">X coordinate of the label.</param>
            <param name="y">Y coordinate of the label.</param>
            <param name="width">Width of the label.</param>
            <param name="height">Height of the label.</param>
            <param name="font">Font for the text of the label.</param>
            <param name="fontSize">Font size of the text of the label.</param>
            <param name="align">Alignment of the text of the label.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Label.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Label"/> class.
            </summary>
            <param name="text">Text to display in the label.</param>
            <param name="x">X coordinate of the label.</param>
            <param name="y">Y coordinate of the label.</param>
            <param name="width">Width of the label.</param>
            <param name="height">Height of the label.</param>
            <param name="font">Font for the text of the label.</param>
            <param name="fontSize">Font size of the text of the label.</param>
            <param name="textColor">Color of the text of the label.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Label.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.TextAlign,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Label"/> class.
            </summary>
            <param name="text">Text to display in the label.</param>
            <param name="x">X coordinate of the label.</param>
            <param name="y">Y coordinate of the label.</param>
            <param name="width">Width of the label.</param>
            <param name="height">Height of the label.</param>
            <param name="font">Font for the text of the label.</param>
            <param name="fontSize">Font size of the text of the label.</param>
            <param name="align">Alignment of the text of the label.</param>
            <param name="textColor">Color of the text of the label.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Label.DrawRotated(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the label to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the label's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Label.Align">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Label.Align"/> enumeration that specifies the text alignment of the label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Label.VAlign">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Label.VAlign"/> enumeration that specifies the vertical text alignment of the label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Label.Underline">
            <summary>
            Gets or sets a value indicating if the label is underlined.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Label.RightToLeft">
            <summary>
            Gets or sets a value indicating if text should be displayed right to left.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Label.Text">
            <summary>
            Gets or sets the text of the label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Label.TextColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the text of the label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Label.Font">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Label.Font"/> object to use for the text of the label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Label.FontSize">
            <summary>
            Gets or sets the font size for the text of the label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Label.Width">
            <summary>
            Gets or sets the width or the label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Label.Height">
            <summary>
            Gets or sets the height or the label.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.LayoutGrid">
             <summary>
             Represents a layout grid.
             </summary>
             <remarks>This class can be used to place a grid on the entire page.  This grid is very helpful with the design and layout of the document.</remarks>
             <example>The following example will place a layout grid on the page and also places a rectangle on the page for reference.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a layout grid
                     Dim grid As LayoutGrid = New LayoutGrid(LayoutGrid.GridType.Decimal)
              
                     ' Add a rectangle to the page
                     MyPage.Elements.Add(New Rectangle(50, 50, 50, 50, 2))
             
                     ' Add the layout grid to the page
                     MyPage.Elements.Add(grid)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
             	End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create a layout grid
                     LayoutGrid grid = new LayoutGrid( LayoutGrid.GridType.Decimal );
             
                     // Add a rectangle to the page
                     page.Elements.Add( new Rectangle( 50, 50, 50, 50, 2 ) );
             
                     // Add the layoutgrid to the page
                     page.Elements.Add( grid );	
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             } 
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Community Edition feature.
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.LayoutGrid.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.LayoutGrid"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.LayoutGrid.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.LayoutGrid"/> class.
            </summary>
            <param name="showTitle">This value specifies whether or not to display the grid's title information.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.LayoutGrid.#ctor(ceTe.DynamicPDF.PageElements.LayoutGrid.GridType)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.LayoutGrid"/> class.
            </summary>
            <param name="type">Type of grid to display.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.LayoutGrid.#ctor(ceTe.DynamicPDF.PageElements.LayoutGrid.GridType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.LayoutGrid"/> class.
            </summary>
            <param name="type">Type of grid to display.</param>
            <param name="showTitle">This value specifies whether or not to display the grid's title information.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.LayoutGrid.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the layout grid to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the layout grid's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.LayoutGrid.Type">
            <summary>
            Gets or sets the style of grid.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.LayoutGrid.ShowTitle">
            <summary>
            Gets or sets a value specifying whether or not to display the grids title information.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.LayoutGrid.GridType">
            <summary>
            Specifies the type of grid. 
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.LayoutGrid.GridType.Decimal">
            <summary>
            Decimal style of grid.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.LayoutGrid.GridType.Standard">
            <summary>
            Standard measurement style of grid.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.LayoutGrid.GridType.Metric">
            <summary>
            Metrics measurement style of grid.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.LayoutGrid.GridType.Print">
            <summary>
            Print measurement style of grid.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Line">
             <summary>
             Represents a line page element.
             </summary>
             <remarks>This class can be used to place lines of different length, width, color and patterns on a page.</remarks>
             <example>The following example will display two different lines on the page.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a line
                     Dim MyLine As Line = New Line(50, 50, 50, 400, 5, _
             			Grayscale.Black, LineStyle.Solid)
             
                     ' Change the line cap property 
                     MyLine.Cap = LineCap.Round
             
                     ' Add two lines to the page
                     MyPage.Elements.Add(MyLine)
                     MyPage.Elements.Add(New Line(60, 50, 150, 400, 2, _
                     RgbColor.Blue, LineStyle.DashLarge))
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create a line
                     Line line = new Line( 50, 50, 50, 400, 5, Grayscale.Black, 
             			LineStyle.Solid );
             
                     // Change the line cap property
                     line.Cap = LineCap.Round;
             
                     // Add two lines to the page
                     page.Elements.Add( line );	
                     page.Elements.Add( new Line( 60, 50, 150, 400, 2, 
             			RgbColor.Blue, LineStyle.DashLarge ) );
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Community Edition feature.
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Line.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Line"/> class.
            </summary>
            <param name="x1">X1 coordinate of the line.</param>
            <param name="y1">Y1 coordinate of the line.</param>
            <param name="x2">X2 coordinate of the line.</param>
            <param name="y2">Y2 coordinate of the line.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Line.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Line"/> class.
            </summary>
            <param name="x1">X1 coordinate of the line.</param>
            <param name="y1">Y1 coordinate of the line.</param>
            <param name="x2">X2 coordinate of the line.</param>
            <param name="y2">Y2 coordinate of the line.</param>
            <param name="width">Width of the line.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Line.#ctor(System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Line"/> class.
            </summary>
            <param name="x1">X1 coordinate of the line.</param>
            <param name="y1">Y1 coordinate of the line.</param>
            <param name="x2">X2 coordinate of the line.</param>
            <param name="y2">Y2 coordinate of the line.</param>
            <param name="color">Color of the line.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Line.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Line"/> class.
            </summary>
            <param name="x1">X1 coordinate of the line.</param>
            <param name="y1">Y1 coordinate of the line.</param>
            <param name="x2">X2 coordinate of the line.</param>
            <param name="y2">Y2 coordinate of the line.</param>
            <param name="width">Width of the line.</param>
            <param name="color">Color of the line.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Line.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.LineStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Line"/> class.
            </summary>
            <param name="x1">X1 coordinate of the line.</param>
            <param name="y1">Y1 coordinate of the line.</param>
            <param name="x2">X2 coordinate of the line.</param>
            <param name="y2">Y2 coordinate of the line.</param>
            <param name="width">Width of the line.</param>
            <param name="color">Color of the line.</param>
            <param name="style">Style of the line.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Line.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the line to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the line's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Line.Style">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.LineStyle"/> object to use for the style of the line.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Line.Cap">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.LineCap"/> enumeration used to specify the line cap style of the line.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Line.Width">
            <summary>
            Gets or sets the width of the line.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Line.Color">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Line.Color"/> object to use for the line.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Line.X1">
            <summary>
            Gets or sets the X1 coordinate of the line.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Line.Y1">
            <summary>
            Gets or sets the Y1 coordinate of the line.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Line.X2">
            <summary>
            Gets or sets the X2 coordinate of the line.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Line.Y2">
            <summary>
            Gets or sets the Y2 coordinate of the line.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.LineSubPath">
             <summary>
             Represents a line subpath.
             </summary>
             <remarks>This class, when added to a <see cref="T:ceTe.DynamicPDF.PageElements.Path"/>, is used to create a straight line 
             path to the LineSubPath's specified location.</remarks>
             <example>The following example will display a path that incorporates several different subpaths before retuning to its starting location.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a path
                     Dim MyPath As Path = New Path(50, 150, RgbColor.Blue, RgbColor.Yellow, _
             			3, LineStyle.Solid, True)
             
                     ' Add some sub paths to the path 
                     MyPath.SubPaths.Add(New CurveSubPath(50, 400, 300, 150, -200, 400))
                     MyPath.SubPaths.Add(New LineSubPath(300, 400))
                     MyPath.SubPaths.Add(New CurveToSubPath(300, 150, 50, 300))
                     MyPath.SubPaths.Add(New CurveFromSubPath(150, 100, 200, -100))
             
                     ' Add the path to the page
                     MyPage.Elements.Add(MyPath)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create a path
                     Path path = new Path( 50, 150, RgbColor.Blue, RgbColor.Yellow, 3, 
             			LineStyle.Solid, true );
             
                     // Add some sub paths to the path
                     path.SubPaths.Add( new CurveSubPath( 50, 400, 300, 150, -200, 400 ) );
                     path.SubPaths.Add( new LineSubPath( 300, 400 ) );
                     path.SubPaths.Add( new CurveToSubPath( 300, 150, 50, 300 ) );
                     path.SubPaths.Add( new CurveFromSubPath( 150, 100, 200, -100 ) );
             
             		// Add the path to the page
                     page.Elements.Add( path );	
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Professional Edition</item>
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Professional Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Professional Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.LineSubPath.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.LineSubPath"/> class.
            </summary>
            <param name="x">X coordinate of the destination.</param>
            <param name="y">Y coordinate of the destination.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.LineSubPath.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the sub path to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the sub path's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.LineSubPath.X">
            <summary>
            Gets or sets the X coordinate of the destination.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.LineSubPath.Y">
            <summary>
            Gets or sets the Y coordinate of the destination.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Link">
             <summary>
             Represents a link with a destination or action.
             </summary>
             <remarks>This class can be used to place links on the PDF.
             <p/><b>NOTE:</b> This page element cannot be used within a table cell, or tranformation group.</remarks>
             <example>The following example will place a label on the PDF then create a link at that location that links to a webpage.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     Dim MyText As String = "This is a link to mydomain.com"
                     Dim MyFont As Font = Font.Helvetica
             
                     ' Create the link's label
                     Dim MyLabel As Label = New Label(MyText, 50, 50, 400, 20, MyFont, 18, _
             			RgbColor.Blue)
                     MyLabel.Underline = True
             
                     ' Set the action then create the link
                     Dim action As UrlAction = New UrlAction("http://www.mydomain.com")
                     Dim MyLink As Link = New Link(50, 50, MyFont.GetTextWidth(MyText, 18), _
             			20, Action)
             
                     ' Add the label and the link to the page
                     MyPage.Elements.Add(MyLabel)
                     MyPage.Elements.Add(MyLink)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     string text = "This is a link to mydomain.com";
                     Font font = Font.Helvetica;
             
                     // Create the link's label
                     Label label = new Label( text, 50, 50, 400, 20, font, 18, 
             			RgbColor.Blue );
                     label.Underline = true;
             
                     // Set the action then create the link
                     UrlAction action = new UrlAction( "http://www.mydomain.com" );
                     Link link = new Link( 50, 50, font.GetTextWidth( text, 18 ), 20, 
             			action );
             
                     // Add the label and the link to the page
                     page.Elements.Add( label );
                     page.Elements.Add( link );
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Professional Edition</item>
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Professional Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Professional Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Link.#ctor(System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Link"/> class.
            </summary>
            <param name="x">X coordinate of the link.</param>
            <param name="y">Y coordinate of the link.</param>
            <param name="width">Width of the link.</param>
            <param name="height">Height of the link.</param>
            <param name="action">Action or destination of the link.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Link.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the link to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the link's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Link.DrawAnnotation(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the link to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the link's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Link.X">
            <summary>
            Gets or sets the X coordinate of the link.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Link.Y">
            <summary>
            Gets or sets the Y coordinate of the link.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Link.Width">
            <summary>
            Gets or sets the width of the link.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Link.Height">
            <summary>
            Gets or sets the height of the link.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Link.Action">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.PageElements.Link.Action"/> to be taken by the link.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Link.Tag">
            <summary>
            Gets or sets the structure element of the link.
            </summary>
            <licensing>
            This property is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>        
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.List">
            <summary>
            Represents the List.
            </summary>
            <remarks>See the <a href="Lists.html">Lists</a> topic for more on lists.</remarks>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.List.DrawRotated(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the List to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"> <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the List's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.List.ListItemTopMargin">
            <summary>
            Gets or Sets the TopMargin of the ListItems in the List.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.List.ListItemBottomMargin">
            <summary>
            Gets or Sets the BottomMargin of the ListItems in the List.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.List.StrikeThrough">
            <summary>
            Gets or Sets the text of each <see cref="T:ceTe.DynamicPDF.PageElements.ListItem"/> of the List as StrikeThrough.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.List.BulletSize">
            <summary>
            Gets or Sets the bullet's size for the List .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.List.BulletAreaWidth">
            <summary>
            Gets or sets the Width in which bullets will be drawn, for each <see cref="T:ceTe.DynamicPDF.PageElements.ListItem"/> of the List.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.List.ParagraphIndent">
            <summary>
            Gets or Sets the paragraphIndent of the List.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.List.BulletAlign">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Align"/> enumeration that specifies the Bullet alignment of the List.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.List.TextAlign">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.List.TextAlign"/> enumeration that specifies the text alignment of the List.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.List.LeftIndent">
            <summary>
            Gets or Sets the LeftIndent of the whole List. Each ListItem may have his own LeftIndent.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.List.RightIndent">
            <summary>
            Gets or Sets the RightIndent of the whole List. Each ListItem may have his own RightIndent.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.List.TextColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> of the Text for whole List.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.List.RightToLeft">
            <summary>
            Gets or Sets a value indicating if the Text is in RighttoLeft language.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.List.Font">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.List.Font"/> of the text for the List.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.List.FontSize">
            <summary>
            Gets or Sets the Fontsize of the List.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.List.Leading">
            <summary>
            Gets or Sets the leading for the text of the List.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.List.Items">
            <summary>
            Gets the ListItemLists of the List.
            </summary>
            <returns>ListItemLists of the List</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.List.Width">
            <summary>
            Gets or sets the Width of the List.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.List.Height">
            <summary>
            Gets or sets the Height of the List.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.List.Tag">
            <summary>
            Gets or sets the tag of the taggable element.
            </summary>
            <licensing>
            This property is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>        
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.List.TagOrder">
            <summary>
            Gets or sets the tag order of the taggable element.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.ListItem">
            <summary>
            Represents the ListItem.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ListItem.Font">
            <summary>
            Gets or Sets the <see cref="P:ceTe.DynamicPDF.PageElements.ListItem.Font"/> of the ListItem.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ListItem.ceTe#DynamicPDF#PageElements#IListProperties#Font">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.PageElements.ListItem.Font"/> of the ListItem.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ListItem.FontSize">
            <summary>
            Gets or Sets the FontSize of the ListItem.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ListItem.ceTe#DynamicPDF#PageElements#IListProperties#FontSize">
            <summary>
            Gets the FontSize of the ListItem.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ListItem.RightToLeft">
            <summary>
            Gets or sets a value indicating if text language is RightToLeft.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ListItem.ceTe#DynamicPDF#PageElements#IListProperties#RightToLeft">
            <summary>
            Gets a value indicating if text language is RightToLeft.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ListItem.Underline">
            <summary>
            Gets or sets the underline property  of the ListItem.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ListItem.StrikeThrough">
            <summary>
            Gets or Sets the StrikeThrough property of the ListItem.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ListItem.ceTe#DynamicPDF#PageElements#IListProperties#StrikeThrough">
            <summary>
            Gets the StrikeThrough property of the ListItem.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ListItem.TextColor">
            <summary>
            Gets or Sets the Text <see cref="T:ceTe.DynamicPDF.Color"/> of the ListItem.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ListItem.ceTe#DynamicPDF#PageElements#IListProperties#TextColor">
            <summary>
            Gets the Text <see cref="T:ceTe.DynamicPDF.Color"/> of the ListItem.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ListItem.Text">
            <summary>
            Gets or sets the Text of the ListItem.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ListItem.Leading">
            <summary>
            Gets or Sets the leading for the text of the ListItem.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ListItem.ceTe#DynamicPDF#PageElements#IListProperties#Leading">
            <summary>
            Gets the leading for the text of the ListItem.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ListItem.RightIndent">
            <summary>
            Gets or Sets the rightIndent of the ListItem.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ListItem.ceTe#DynamicPDF#PageElements#IListProperties#RightIndent">
            <summary>
            Gets the rightIndent of the ListItem.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ListItem.LeftIndent">
            <summary>
            Gets or Sets the LeftIndent of the ListItem.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ListItem.ceTe#DynamicPDF#PageElements#IListProperties#LeftIndent">
            <summary>
            Gets the LeftIndent of the ListItem.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ListItem.BulletAlign">
            <summary>
            Gets or Sets the <see cref="T:ceTe.DynamicPDF.Align"/> enumeration that specifies the Bullet alignment of the ListItem.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ListItem.ceTe#DynamicPDF#PageElements#IListProperties#BulletAlign">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.Align"/> enumeration that specifies the Bullet alignment of the ListItem.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ListItem.BulletAreaWidth">
            <summary>
            Gets or Sets the width in which bullets will be drawn, for this <see cref="T:ceTe.DynamicPDF.PageElements.ListItem"/>.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ListItem.ceTe#DynamicPDF#PageElements#IListProperties#BulletAreaWidth">
            <summary>
            Gets the width in which bullets will be drawn, for this <see cref="T:ceTe.DynamicPDF.PageElements.ListItem"/>.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ListItem.TextAlign">
            <summary>
            Sets or Gets the <see cref="P:ceTe.DynamicPDF.PageElements.ListItem.TextAlign"/> enumeration that specifies the text alignment of the ListItem.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ListItem.ceTe#DynamicPDF#PageElements#IListProperties#TextAlign">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.PageElements.ListItem.TextAlign"/> enumeration that specifies the text alignment of the ListItem.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ListItem.BulletSize">
            <summary>
            Gets or Sets the Bulletsize of the ListItem.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ListItem.ceTe#DynamicPDF#PageElements#IListProperties#BulletSize">
            <summary>
            Gets the Bulletsize of the ListItem.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ListItem.ceTe#DynamicPDF#PageElements#IListProperties#ListItemBottomMargin">
            <summary>
            Gets the BottomMargin of the ListItem.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ListItem.ceTe#DynamicPDF#PageElements#IListProperties#ListItemTopMargin">
            <summary>
            Gets the TopMargin of the ListItem.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ListItem.ParagraphIndent">
            <summary>
            Gets or Sets the ParagraphIndent of the ListItem.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ListItem.ceTe#DynamicPDF#PageElements#IListProperties#ParagraphIndent">
            <summary>
            Gets the ParagraphIndent of the ListItem.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ListItem.ceTe#DynamicPDF#PageElements#IListProperties#BulletPrefix">
            <summary>
            Gets the BulletPrefix of the ListItem.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ListItem.ceTe#DynamicPDF#PageElements#IListProperties#BulletSuffix">
            <summary>
            Gets the BulletSuffix of the ListItem.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ListItem.ceTe#DynamicPDF#PageElements#IListProperties#BulletType">
            <summary>
            Gets the NumberingStyle of the ListItem.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ListItem.SubLists">
            <summary>
            Gets the SubListList of the ListItem.
            </summary>
            <returns>SubListList of the ListItem</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ListItem.Tag">
            <summary>
            Gets or sets the structure element of the list item sublists.
            </summary>
            <licensing>
            This property is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>        
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ListItem.TagOrder">
            <summary>
            Gets or sets the structure element order of the list item sublists.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ListItem.BulletTag">
            <summary>
            Gets or sets the structure element of the list item bullet.
            </summary>
            <licensing>
            This property is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>        
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ListItem.BulletTagOrder">
            <summary>
            Gets or sets the structure element order of the list item bullet.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ListItem.BodyTag">
            <summary>
            Gets or sets the structure element of the list item body.
            </summary>
            <licensing>
            This property is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>        
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ListItem.BodyTagOrder">
            <summary>
            Gets or sets the structure element order of the list item body.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ListItem.ListItemTag">
            <summary>
            Gets or sets the structure element of the list item.
            </summary>
            <licensing>
            This property is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>        
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ListItem.ListItemTagOrder">
            <summary>
            Gets or sets the structure element order of the list item .
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.ListItemList">
            <summary>
            Represents the collection of ListItems on a List.
            <see cref="T:ceTe.DynamicPDF.PageElements.List"/>
            <see cref="T:ceTe.DynamicPDF.PageElements.ListItem"/>
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.ListItemList.Add(System.String)">
            <summary>
            Add new ListItem to the ListItemList.
            </summary>
            <param name="item">Text of the ListItem.</param>
            <returns>Returns newly created ListItem.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ListItemList.Item(System.Int32)">
            <summary>
            Gets the ListItem from the ListItemList based on the given index value.
            </summary>
            <param name="index">Index of the ListItem.</param>
            <returns>ListItem of the given index.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ListItemList.Count">
            <summary>
            Returns the number of ListItems in the List.
            </summary>
            <returns>The number of ListItems in the List.</returns>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Note">
             <summary>
             Represents a note annotation.
             </summary>
             <remarks>This class can be used to place a note annotation on the PDF.</remarks>
             <example>The following example will place an icon on the PDF that once clicked, will display text in a separate box.
             <p/><b>NOTE:</b> This page element cannot be used within a table cell, or tranformation group.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a note
                     Dim MyNote As Note = New Note("This is my help note.", 50, 50, _
             			150, 50, NoteType.Help, False)
             
                     ' Change the color property 
                     MyNote.Color = RgbColor.Red
             
                     ' Add the note to the page
                     MyPage.Elements.Add(MyNote)
                     MyPage.Elements.Add(New Label("Click on the above icon to view " + _
             			"the note.", 50, 80, 150, 72, Font.HelveticaBold, 18))
             
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
             	static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create a note
                     Note note = new Note( "This is my help note.", 50, 50, 150, 50, 
             			NoteType.Help, true );
             
                     // Change the color property
                     note.Color = RgbColor.Red;
             
                     // Add the note to the page
                     page.Elements.Add( note );	
                     page.Elements.Add( new Label( "Click on the above icon to view " +
             			"the note.", 50, 80, 150, 72, Font.HelveticaBold, 18 ) );
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Professional Edition</item>
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Professional Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Professional Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Note.#ctor(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Note"/> class.
            </summary>
            <param name="text">Text of the note.</param>
            <param name="x">X coordinate of the note.</param>
            <param name="y">Y coordinate of the note.</param>
            <param name="width">Width of the note.</param>
            <param name="height">Height of the note.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Note.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.PageElements.NoteType)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Note"/> class.
            </summary>
            <param name="text">Text of the note.</param>
            <param name="x">X coordinate of the note.</param>
            <param name="y">Y coordinate of the note.</param>
            <param name="width">Width of the note.</param>
            <param name="height">Height of the note.</param>
            <param name="type">Specifies the type of note.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Note.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Note"/> class.
            </summary>
            <param name="text">Text of the note.</param>
            <param name="x">X coordinate of the note.</param>
            <param name="y">Y coordinate of the note.</param>
            <param name="width">Width of the note.</param>
            <param name="height">Height of the note.</param>
            <param name="isOpen">Specifies if the note is open initially.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Note.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.PageElements.NoteType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Note"/> class.
            </summary>
            <param name="text">Text of the note.</param>
            <param name="x">X coordinate of the note.</param>
            <param name="y">Y coordinate of the note.</param>
            <param name="width">Width of the note.</param>
            <param name="height">Height of the note.</param>
            <param name="type">Specifies the type of note.</param>
            <param name="isOpen">Specifies if the note is open initially.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Note.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the link to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the link's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Note.DrawAnnotation(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the link to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the link's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Note.X">
            <summary>
            Gets or sets the X coordinate of the link.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Note.Y">
            <summary>
            Gets or sets the Y coordinate of the link.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Note.Width">
            <summary>
            Gets or sets the width of the link.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Note.Height">
            <summary>
            Gets or sets the height of the link.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Note.NoteType">
            <summary>
            Gets or sets the type of note.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Note.Text">
            <summary>
            Gets or sets the text of the note.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Note.IsOpen">
            <summary>
            Gets or sets a value indicating if the note is opened by default.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Note.Color">
            <summary>
            Gets or sets the color of the note.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Note.Tag">
            <summary>
            Gets or sets the structure element of the note.
            </summary>
            <licensing>
            This property is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>        
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.NoteType">
            <summary>
            Specifies a note type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.NoteType.Comment">
            <summary>Represents a note with a comment icon.</summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.NoteType.Help">
            <summary>Represents a note with a help icon.</summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.NoteType.Insert">
            <summary>Represents a note with an insert icon.</summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.NoteType.Key">
            <summary>Represents a note with a key icon.</summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.NoteType.NewParagraph">
            <summary>Represents a note with a new paragraph icon.</summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.NoteType.Note">
            <summary>Represents a note with a note icon.</summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.NoteType.Paragraph">
            <summary>Represents a note with a paragraph icon.</summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.NumberingType">
            <summary>
            Specifies the numbering style.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.NumberingType.Numeric">
            <summary>
            Numeric numbering type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.NumberingType.AlphabeticLowerCase">
            <summary>
            AlphabeticLowerCase numbering type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.NumberingType.AlphabeticUpperCase">
            <summary>
            AlphabeticUpperCase numbering type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.NumberingType.ShortenedAlphabeticLowerCase">
            <summary>
            ShortenedAlphabeticLowerCase numbering type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.NumberingType.ShortenedAlphabeticUpperCase">
            <summary>
            ShortenedAlphabeticUpperCase numbering type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.NumberingType.RomanLowerCase">
            <summary>
            RomanLowerCase numbering type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.NumberingType.RomanUpperCase">
            <summary>
            RomanUpperCase numbering type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.NumberingType.None">
            <summary>
            No numbering type.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.OrderedList">
             <summary>
             Represents an ordered list.
             </summary>
             <remarks>See the <a href="Lists.html">Lists</a> topic for more on ordered lists.
             <p/><b>NOTE:</b> This page element cannot be used within a table cell, or tranformation group.</remarks>
             <example>The following example shows a OrderedList text being displayed on the page.<p/>
             <code lang="VB">
             Imports System
            	Imports ceTe.DynamicPDF
            	Imports ceTe.DynamicPDF.PageElements
            
             Module MyModule
                 Sub Main()
            	     ' Create a PDF Document
                    Dim MyDocument As Document = New Document
            
                    ' Create a Page
                    Dim MyPage As Page = New Page
            
                    ' Create a OrderedList.
                    Dim list As OrderedList = New OrderedList(50, 50, 300, 500)
            
                    list.ListItemTopMargin = 5
                    list.ListItemBottomMargin = 5
                    list.BulletPrefix = "("
                    list.BulletSuffix = ")"
                    list.TextColor = RgbColor.BlueViolet
            
                    ' Add ListItem to the List.
                    Dim item1 As ListItem = list.Items.Add("List item 1")
                    item1.Underline = True
                    Dim item2 As ListItem = list.Items.Add("List item 2")
                    item2.Underline = True
                    Dim item3 As ListItem = list.Items.Add("List item 3")
                    item3.Underline = True
                    Dim item4 As ListItem = list.Items.Add("List item 4")
                    item4.Underline = True
            
                    ' Add OrderedSubList under ListItem item1
                    Dim subList1 As OrderedSubList = item1.SubLists.AddOrderedSubList(NumberingStyle.RomanUpperCase)
                    subList1.TextColor = RgbColor.HotPink
                    Dim item5 As ListItem = subList1.Items.Add("Sub-list item 1")
                    Dim item6 As ListItem = subList1.Items.Add("Sub-list item 2")
            
                    Dim subList2 As OrderedSubList = item2.SubLists.AddOrderedSubList(NumberingStyle.AlphabeticLowerCase)
                    subList2.TextColor = RgbColor.DarkGoldenRod
                    Dim item7 As ListItem = subList2.Items.Add("Second level sub-list item 1")
                    Dim item8 As ListItem = subList2.Items.Add("Second level sub-list item 2")
            
                    Dim subList3 As OrderedSubList = item3.SubLists.AddOrderedSubList(NumberingStyle.AlphabeticLowerCase)
                    subList3.TextColor = RgbColor.DarkGoldenRod
                    Dim item9 As ListItem = subList3.Items.Add("Second level sub-list item 1")
                    Dim item10 As ListItem = subList3.Items.Add("Second level sub-list item 2")
            
                    Dim subList4 As OrderedSubList = item6.SubLists.AddOrderedSubList(NumberingStyle.RomanUpperCase)
                    subList4.TextColor = RgbColor.HotPink
                    Dim item11 As ListItem = subList4.Items.Add("Sub-list item 1")
                    Dim item12 As ListItem = subList4.Items.Add("Sub-list item 2")
            
                    Dim subList5 As OrderedSubList = item7.SubLists.AddOrderedSubList(NumberingStyle.AlphabeticLowerCase)
                    subList5.TextColor = RgbColor.DarkGoldenRod
                    Dim item13 As ListItem = subList5.Items.Add("Second level sub-list item 1")
                    Dim item14 As ListItem = subList5.Items.Add("Second level sub-list item 2")
            
                    Dim subList6 As OrderedSubList = item4.SubLists.AddOrderedSubList(NumberingStyle.AlphabeticLowerCase)
                    subList6.TextColor = RgbColor.DarkGoldenRod
                    Dim item15 As ListItem = subList6.Items.Add("Second level sub-list item 1")
                    Dim item16 As ListItem = subList6.Items.Add("Second level sub-list item 2")
            
                    Dim subList7 As OrderedSubList = item5.SubLists.AddOrderedSubList(NumberingStyle.RomanUpperCase)
                    subList7.TextColor = RgbColor.HotPink
                    Dim item17 As ListItem = subList7.Items.Add("Sub-list item 1")
                    Dim item18 As ListItem = subList7.Items.Add("Sub-list item 2")
            
                    ' Add the OrderedList to the Page.
                    MyPage.Elements.Add(list)
            
                    'Add the Page to the Document.
                    MyDocument.Pages.Add(MyPage)
            
                    ' Save the PDF.
                    MyDocument.Draw("C:\MyDocument.pdf")
                 End Sub
            	End Module
             </code>
             <code lang="C#">
             using System;
            	using ceTe.DynamicPDF;
            	using ceTe.DynamicPDF.PageElements;
            
              class MyClass
             {
                 static void Main()
                 {
                        Document document = new Document();
            
                        // Create a Page.
                        Page page = new Page();
            
                        // Create a OrderedList.
                        OrderedList list = new OrderedList(50, 50, 300, 500);
            
                        list.ListItemTopMargin = 5;
                        list.ListItemBottomMargin = 5;
                        list.BulletPrefix = "(";
                        list.BulletSuffix = ")";
                        list.TextColor = RgbColor.BlueViolet;
            
                        // Add ListItem to the List.
                        ListItem item1 = list.Items.Add("List item 1");
                        item1.Underline = true;
                        ListItem item2 = list.Items.Add("List item 2");
                        item2.Underline = true;
                        ListItem item3 = list.Items.Add("List item 3");
                        item3.Underline = true;
                        ListItem item4 = list.Items.Add("List item 4");
                        item4.Underline = true;
            
                        // Add OrderedSubList under ListItem item1
                        OrderedSubList subList1 = item1.SubLists.AddOrderedSubList(NumberingStyle.RomanUpperCase);
                        subList1.TextColor = RgbColor.HotPink;
                        ListItem item5 = subList1.Items.Add("Sub-list item 1");
                        ListItem item6 = subList1.Items.Add("Sub-list item 2");
            
                        OrderedSubList subList2 = item5.SubLists.AddOrderedSubList(NumberingStyle.AlphabeticLowerCase);
                        subList2.TextColor = RgbColor.DarkGoldenRod;
                        ListItem item7 = subList2.Items.Add("Second level sub-list item 1");
                        ListItem item8 = subList2.Items.Add("Second level sub-list item 2");
            
                        OrderedSubList subList3 = item6.SubLists.AddOrderedSubList(NumberingStyle.AlphabeticLowerCase);
                        subList3.TextColor = RgbColor.DarkGoldenRod;
                        ListItem item9 = subList3.Items.Add("Second level sub-list item 1");
                        ListItem item10 = subList3.Items.Add("Second level sub-list item 2");
            
                        OrderedSubList subList4 = item2.SubLists.AddOrderedSubList(NumberingStyle.RomanUpperCase);
                        subList4.TextColor = RgbColor.HotPink;
                        ListItem item11 = subList4.Items.Add("Sub-list item 1");
                        ListItem item12 = subList4.Items.Add("Sub-list item 2");
            
                        OrderedSubList subList5 = item11.SubLists.AddOrderedSubList(NumberingStyle.AlphabeticLowerCase);
                        subList5.TextColor = RgbColor.DarkGoldenRod;
                        ListItem item13 = subList5.Items.Add("Second level sub-list item 1");
                        ListItem item14 = subList5.Items.Add("Second level sub-list item 2");
            
                        OrderedSubList subList6 = item12.SubLists.AddOrderedSubList(NumberingStyle.AlphabeticLowerCase);
                        subList6.TextColor = RgbColor.DarkGoldenRod;
                        ListItem item15 = subList6.Items.Add("Second level sub-list item 1");
                        ListItem item16 = subList6.Items.Add("Second level sub-list item 2");
            
                        OrderedSubList subList7 = item3.SubLists.AddOrderedSubList(NumberingStyle.RomanUpperCase);
                        subList7.TextColor = RgbColor.HotPink;
                        ListItem item17 = subList7.Items.Add("Sub-list item 1");
                        ListItem item18 = subList7.Items.Add("Sub-list item 2");
            
                        // Add the OrderedList to the page
                        page.Elements.Add(list);
            
                        // Add the Page to the Document.
                        document.Pages.Add(page);
            
                        //save the PDF.
                        document.Draw(@"c:\MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Professional Edition</item>
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Professional Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Professional Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.OrderedList.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creating new Instance of the OrderedList.
            </summary>
            <param name="x">X coordinate of the OrderedList.</param>
            <param name="y">Y coordinate of the OrderedList.</param>
            <param name="width">Width of the OrderedList.</param>
            <param name="height">Height of the OrderedList.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.OrderedList.#ctor(System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.NumberingStyle)">
            <summary>
            Creating new Instance of the OrderedList.
            </summary>
            <param name="x">X coordinate of the OrderedList.</param>
            <param name="y">Y coordinate of the OrderedList.</param>
            <param name="width">Width of the OrderedList.</param>
            <param name="height">Height of the OrderedList.</param>
            <param name="font"><see cref="T:ceTe.DynamicPDF.Font"/> of the OrderedList.</param>
            <param name="fontSize">FontSize of the OrderedList.</param>
            <param name="nStyle"><see cref="T:ceTe.DynamicPDF.NumberingStyle"/> of the OrderedList.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.OrderedList.#ctor(System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Creating new Instance of the OrderedList.
            </summary>
            <param name="x">X coordinate of the OrderedList.</param>
            <param name="y">Y coordinate of the OrderedList.</param>
            <param name="width">Width of the OrderedList.</param>
            <param name="height">Height of the OrderedList.</param>
            <param name="font"><see cref="T:ceTe.DynamicPDF.Font"/> of the OrderedList.</param>
            <param name="fontSize">FontSize of the OrderedList.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.OrderedList.GetRequiredHeight">
            <summary>
            Gets the height required to fit all of the text supplied.
            </summary>
            <returns>The float value indicating required height to display all text.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.OrderedList.GetOverFlowList">
             <summary>
             Gets a OrderedList object containing the List Text.
             </summary>
             <returns>Returns a OrderedList object.</returns>
             <remarks>This method returns a new <b>OrderedList</b> object that contains the remaining text that did not fit.</remarks>
             <example>The following example shows you how to use the GetOverflowList object to allow text of variable length to flow onto new pages as needed.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             	Sub Main()
                    ' Create a PDF Document
                    Dim MyDocument As Document = New Document
            
                    ' Create a Page
                    Dim MyPage As Page = New Page
            
                    ' Create a OrderedList.
                    Dim list As OrderedList = New OrderedList(50, 50, 300, 250)
            
                    list.ListItemTopMargin = 5
                    list.ListItemBottomMargin = 5
                    list.BulletPrefix = "("
                    list.BulletSuffix = ")"
                    list.TextColor = RgbColor.BlueViolet
            
                    ' Add ListItem to the List.
                    Dim item1 As ListItem = list.Items.Add("List item 1")
                    item1.Underline = True
                    Dim item2 As ListItem = list.Items.Add("List item 2")
                    item2.Underline = True
                    Dim item3 As ListItem = list.Items.Add("List item 3")
                    item3.Underline = True
                    Dim item4 As ListItem = list.Items.Add("List item 4")
                    item4.Underline = True
            
                    ' Add OrderedSubList under ListItem item1
                    Dim subList1 As OrderedSubList = item1.SubLists.AddOrderedSubList(NumberingStyle.RomanUpperCase)
                    subList1.TextColor = RgbColor.HotPink
                    Dim item5 As ListItem = subList1.Items.Add("Sub-list item 1")
                    Dim item6 As ListItem = subList1.Items.Add("Sub-list item 2")
            
                    Dim subList2 As OrderedSubList = item2.SubLists.AddOrderedSubList(NumberingStyle.AlphabeticLowerCase)
                    subList2.TextColor = RgbColor.DarkGoldenRod
                    Dim item7 As ListItem = subList2.Items.Add("Second level sub-list item 1")
                    Dim item8 As ListItem = subList2.Items.Add("Second level sub-list item 2")
            
                    Dim subList3 As OrderedSubList = item3.SubLists.AddOrderedSubList(NumberingStyle.AlphabeticLowerCase)
                    subList3.TextColor = RgbColor.DarkGoldenRod
                    Dim item9 As ListItem = subList3.Items.Add("Second level sub-list item 1")
                    Dim item10 As ListItem = subList3.Items.Add("Second level sub-list item 2")
            
                    Dim subList4 As OrderedSubList = item6.SubLists.AddOrderedSubList(NumberingStyle.RomanUpperCase)
                    subList4.TextColor = RgbColor.HotPink
                    Dim item11 As ListItem = subList4.Items.Add("Sub-list item 1")
                    Dim item12 As ListItem = subList4.Items.Add("Sub-list item 2")
            
                    Dim subList5 As OrderedSubList = item7.SubLists.AddOrderedSubList(NumberingStyle.AlphabeticLowerCase)
                    subList5.TextColor = RgbColor.DarkGoldenRod
                    Dim item13 As ListItem = subList5.Items.Add("Second level sub-list item 1")
                    Dim item14 As ListItem = subList5.Items.Add("Second level sub-list item 2")
            
                    Dim subList6 As OrderedSubList = item4.SubLists.AddOrderedSubList(NumberingStyle.AlphabeticLowerCase)
                    subList6.TextColor = RgbColor.DarkGoldenRod
                    Dim item15 As ListItem = subList6.Items.Add("Second level sub-list item 1")
                    Dim item16 As ListItem = subList6.Items.Add("Second level sub-list item 2")
            
                    Dim subList7 As OrderedSubList = item5.SubLists.AddOrderedSubList(NumberingStyle.AlphabeticLowerCase)
                    subList7.TextColor = RgbColor.HotPink
                    Dim item17 As ListItem = subList7.Items.Add("Sub-list item 1")
                    Dim item18 As ListItem = subList7.Items.Add("Sub-list item 2")
            
                    ' Add the OrderedList to the Page.
                    MyPage.Elements.Add(list)
            
                    'Add the Page to the Document.
                    MyDocument.Pages.Add(MyPage)
            
                    ' Set the UnorderedList object equal to the rest of the text that did not fit
                    'if all the text did fit, GetOverflowList will return null
                    list = list.GetOverFlowList()
            
                    While Not list Is Nothing
                        MyPage = New Page(PageSize.A4)
                        MyPage.Elements.Add(list)
                        MyDocument.Pages.Add(MyPage)
                        list = list.GetOverFlowList()
                    End While
            
                    ' Save the PDF.
                    MyDocument.Draw("C:\MyDocument.pdf")
            		End Sub
            	End Module
             </code>
             <code lang="C#">
             using System;
            	using ceTe.DynamicPDF;
            	using ceTe.DynamicPDF.PageElements;
              class MyClass
             {
             	static void Main()
             	{
              		   Document document = new Document();
            
                        // Create a Page.
                        Page page = new Page();
            
                        // Create a OrderedList.
                        OrderedList list = new OrderedList(50, 50, 300, 250);
            
                        list.ListItemTopMargin = 5;
                        list.ListItemBottomMargin = 5;
                        list.BulletPrefix = "(";
                        list.BulletSuffix = ")";
                        list.TextColor = RgbColor.BlueViolet;
            
                        // Add ListItem to the List.
                        ListItem item1 = list.Items.Add("List item 1");
                        item1.Underline = true;
                        ListItem item2 = list.Items.Add("List item 2");
                        item2.Underline = true;
                        ListItem item3 = list.Items.Add("List item 3");
                        item3.Underline = true;
                        ListItem item4 = list.Items.Add("List item 4");
                        item4.Underline = true;
            
                        // Add OrderedSubList under ListItem item1
                        OrderedSubList subList1 = item1.SubLists.AddOrderedSubList(NumberingStyle.RomanUpperCase);
                        subList1.TextColor = RgbColor.HotPink;
                        ListItem item5 = subList1.Items.Add("Sub-list item 1");
                        ListItem item6 = subList1.Items.Add("Sub-list item 2");
            
                        OrderedSubList subList2 = item5.SubLists.AddOrderedSubList(NumberingStyle.AlphabeticLowerCase);
                        subList2.TextColor = RgbColor.DarkGoldenRod;
                        ListItem item7 = subList2.Items.Add("Second level sub-list item 1");
                        ListItem item8 = subList2.Items.Add("Second level sub-list item 2");
            
                        OrderedSubList subList3 = item6.SubLists.AddOrderedSubList(NumberingStyle.AlphabeticLowerCase);
                        subList3.TextColor = RgbColor.DarkGoldenRod;
                        ListItem item9 = subList3.Items.Add("Second level sub-list item 1");
                        ListItem item10 = subList3.Items.Add("Second level sub-list item 2");
            
                        OrderedSubList subList4 = item2.SubLists.AddOrderedSubList(NumberingStyle.RomanUpperCase);
                        subList4.TextColor = RgbColor.HotPink;
                        ListItem item11 = subList4.Items.Add("Sub-list item 1");
                        ListItem item12 = subList4.Items.Add("Sub-list item 2");
            
                        OrderedSubList subList5 = item11.SubLists.AddOrderedSubList(NumberingStyle.AlphabeticLowerCase);
                        subList5.TextColor = RgbColor.DarkGoldenRod;
                        ListItem item13 = subList5.Items.Add("Second level sub-list item 1");
                        ListItem item14 = subList5.Items.Add("Second level sub-list item 2");
            
                        OrderedSubList subList6 = item12.SubLists.AddOrderedSubList(NumberingStyle.AlphabeticLowerCase);
                        subList6.TextColor = RgbColor.DarkGoldenRod;
                        ListItem item15 = subList6.Items.Add("Second level sub-list item 1");
                        ListItem item16 = subList6.Items.Add("Second level sub-list item 2");
            
                        OrderedSubList subList7 = item3.SubLists.AddOrderedSubList(NumberingStyle.RomanUpperCase);
                        subList7.TextColor = RgbColor.HotPink;
                        ListItem item17 = subList7.Items.Add("Sub-list item 1");
                        ListItem item18 = subList7.Items.Add("Sub-list item 2");
            
                        // Add the OrderedList to the page
                        page.Elements.Add(list);
            
                        // Add the Page to the Document.
                        document.Pages.Add(page);
            
                        // if all the text did fit, GetOverflowList will return null
                        list = list.GetOverFlowList();
            
                        while (list != null)
                        {
                            page = new Page(PageSize.A4);
                            page.Elements.Add(list);
                            document.Pages.Add(page);
                            list = list.GetOverFlowList();
                        }
                        //save the PDF.
                        document.Draw(@"c:\MyDocument.pdf");
             	}
             }
             </code>
             </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.OrderedList.GetOverFlowList(System.Single,System.Single)">
             <summary>
             Gets a OrderedList object containing the List Text.
             </summary>
             <param name="x">New X coordinate of the OrderedList.</param>
             <param name="y">New Y coordinate of the OrderedList.</param>
             <returns>Returns a OrderedList object.</returns>
             <remarks>This method returns a new <b>OrderedList</b> object that contains the remaining text that did not fit.</remarks>
             <example>The following example shows you how to use the GetOverflowList object to allow text of variable length to flow onto new pages as needed.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             	Sub Main()
                    ' Create a PDF Document
                    Dim MyDocument As Document = New Document
            
                    ' Create a Page
                    Dim MyPage As Page = New Page
            
                    ' Create a OrderedList.
                    Dim list As OrderedList = New OrderedList(50, 50, 300, 250)
            
                    list.ListItemTopMargin = 5
                    list.ListItemBottomMargin = 5
                    list.BulletPrefix = "("
                    list.BulletSuffix = ")"
                    list.TextColor = RgbColor.BlueViolet
            
                    ' Add ListItem to the List.
                    Dim item1 As ListItem = list.Items.Add("List item 1")
                    item1.Underline = True
                    Dim item2 As ListItem = list.Items.Add("List item 2")
                    item2.Underline = True
                    Dim item3 As ListItem = list.Items.Add("List item 3")
                    item3.Underline = True
                    Dim item4 As ListItem = list.Items.Add("List item 4")
                    item4.Underline = True
            
                    ' Add OrderedSubList under ListItem item1
                    Dim subList1 As OrderedSubList = item1.SubLists.AddOrderedSubList(NumberingStyle.RomanUpperCase)
                    subList1.TextColor = RgbColor.HotPink
                    Dim item5 As ListItem = subList1.Items.Add("Sub-list item 1")
                    Dim item6 As ListItem = subList1.Items.Add("Sub-list item 2")
            
                    Dim subList2 As OrderedSubList = item2.SubLists.AddOrderedSubList(NumberingStyle.AlphabeticLowerCase)
                    subList2.TextColor = RgbColor.DarkGoldenRod
                    Dim item7 As ListItem = subList2.Items.Add("Second level sub-list item 1")
                    Dim item8 As ListItem = subList2.Items.Add("Second level sub-list item 2")
            
                    Dim subList3 As OrderedSubList = item3.SubLists.AddOrderedSubList(NumberingStyle.AlphabeticLowerCase)
                    subList3.TextColor = RgbColor.DarkGoldenRod
                    Dim item9 As ListItem = subList3.Items.Add("Second level sub-list item 1")
                    Dim item10 As ListItem = subList3.Items.Add("Second level sub-list item 2")
            
                    Dim subList4 As OrderedSubList = item6.SubLists.AddOrderedSubList(NumberingStyle.RomanUpperCase)
                    subList4.TextColor = RgbColor.HotPink
                    Dim item11 As ListItem = subList4.Items.Add("Sub-list item 1")
                    Dim item12 As ListItem = subList4.Items.Add("Sub-list item 2")
            
                    Dim subList5 As OrderedSubList = item7.SubLists.AddOrderedSubList(NumberingStyle.AlphabeticLowerCase)
                    subList5.TextColor = RgbColor.DarkGoldenRod
                    Dim item13 As ListItem = subList5.Items.Add("Second level sub-list item 1")
                    Dim item14 As ListItem = subList5.Items.Add("Second level sub-list item 2")
            
                    Dim subList6 As OrderedSubList = item4.SubLists.AddOrderedSubList(NumberingStyle.AlphabeticLowerCase)
                    subList6.TextColor = RgbColor.DarkGoldenRod
                    Dim item15 As ListItem = subList6.Items.Add("Second level sub-list item 1")
                    Dim item16 As ListItem = subList6.Items.Add("Second level sub-list item 2")
            
                    Dim subList7 As OrderedSubList = item5.SubLists.AddOrderedSubList(NumberingStyle.AlphabeticLowerCase)
                    subList7.TextColor = RgbColor.HotPink
                    Dim item17 As ListItem = subList7.Items.Add("Sub-list item 1")
                    Dim item18 As ListItem = subList7.Items.Add("Sub-list item 2")
            
                    ' Add the OrderedList to the Page.
                    MyPage.Elements.Add(list)
            
                    'Add the Page to the Document.
                    MyDocument.Pages.Add(MyPage)
            
                    ' Set the UnorderedList object equal to the rest of the text that did not fit
                    'if all the text did fit, GetOverflowList will return null
                    list = list.GetOverFlowList(50,50)
            
                    While Not list Is Nothing
                        MyPage = New Page(PageSize.A4)
                        MyPage.Elements.Add(list)
                        MyDocument.Pages.Add(MyPage)
                        list = list.GetOverFlowList(50,50)
                    End While
            
                    ' Save the PDF.
                    MyDocument.Draw("C:\MyDocument.pdf")
            		End Sub
            	End Module
             </code>
             <code lang="C#">
             using System;
            	using ceTe.DynamicPDF;
            	using ceTe.DynamicPDF.PageElements;
              class MyClass
             {
             	static void Main()
             	{
              		   Document document = new Document();
            
                        // Create a Page.
                        Page page = new Page();
            
                        // Create a OrderedList.
                        OrderedList list = new OrderedList(50, 50, 300, 250);
            
                        list.ListItemTopMargin = 5;
                        list.ListItemBottomMargin = 5;
                        list.BulletPrefix = "(";
                        list.BulletSuffix = ")";
                        list.TextColor = RgbColor.BlueViolet;
            
                        // Add ListItem to the List.
                        ListItem item1 = list.Items.Add("List item 1");
                        item1.Underline = true;
                        ListItem item2 = list.Items.Add("List item 2");
                        item2.Underline = true;
                        ListItem item3 = list.Items.Add("List item 3");
                        item3.Underline = true;
                        ListItem item4 = list.Items.Add("List item 4");
                        item4.Underline = true;
            
                        // Add OrderedSubList under ListItem item1
                        OrderedSubList subList1 = item1.SubLists.AddOrderedSubList(NumberingStyle.RomanUpperCase);
                        subList1.TextColor = RgbColor.HotPink;
                        ListItem item5 = subList1.Items.Add("Sub-list item 1");
                        ListItem item6 = subList1.Items.Add("Sub-list item 2");
            
                        OrderedSubList subList2 = item5.SubLists.AddOrderedSubList(NumberingStyle.AlphabeticLowerCase);
                        subList2.TextColor = RgbColor.DarkGoldenRod;
                        ListItem item7 = subList2.Items.Add("Second level sub-list item 1");
                        ListItem item8 = subList2.Items.Add("Second level sub-list item 2");
            
                        OrderedSubList subList3 = item6.SubLists.AddOrderedSubList(NumberingStyle.AlphabeticLowerCase);
                        subList3.TextColor = RgbColor.DarkGoldenRod;
                        ListItem item9 = subList3.Items.Add("Second level sub-list item 1");
                        ListItem item10 = subList3.Items.Add("Second level sub-list item 2");
            
                        OrderedSubList subList4 = item2.SubLists.AddOrderedSubList(NumberingStyle.RomanUpperCase);
                        subList4.TextColor = RgbColor.HotPink;
                        ListItem item11 = subList4.Items.Add("Sub-list item 1");
                        ListItem item12 = subList4.Items.Add("Sub-list item 2");
            
                        OrderedSubList subList5 = item11.SubLists.AddOrderedSubList(NumberingStyle.AlphabeticLowerCase);
                        subList5.TextColor = RgbColor.DarkGoldenRod;
                        ListItem item13 = subList5.Items.Add("Second level sub-list item 1");
                        ListItem item14 = subList5.Items.Add("Second level sub-list item 2");
            
                        OrderedSubList subList6 = item12.SubLists.AddOrderedSubList(NumberingStyle.AlphabeticLowerCase);
                        subList6.TextColor = RgbColor.DarkGoldenRod;
                        ListItem item15 = subList6.Items.Add("Second level sub-list item 1");
                        ListItem item16 = subList6.Items.Add("Second level sub-list item 2");
            
                        OrderedSubList subList7 = item3.SubLists.AddOrderedSubList(NumberingStyle.RomanUpperCase);
                        subList7.TextColor = RgbColor.HotPink;
                        ListItem item17 = subList7.Items.Add("Sub-list item 1");
                        ListItem item18 = subList7.Items.Add("Sub-list item 2");
            
                        // Add the OrderedList to the page
                        page.Elements.Add(list);
            
                        // Add the Page to the Document.
                        document.Pages.Add(page);
            
                        // if all the text did fit, GetOverflowList will return null
                        list = list.GetOverFlowList(50,50);
            
                        while (list != null)
                        {
                            page = new Page(PageSize.A4);
                            page.Elements.Add(list);
                            document.Pages.Add(page);
                            list = list.GetOverFlowList(50,50);
                        }
                        //save the PDF.
                        document.Draw(@"c:\MyDocument.pdf");
             	}
             }
             </code>
             </example>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.OrderedList.BulletPrefix">
            <summary>
            Sets or Gets the Prefix String of the Bullets.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.OrderedList.BulletSuffix">
            <summary>
            Sets or Gets the suffix String of the Bullets.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.OrderedListItemList">
            <summary>
            Represents a list of ordered items.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.OrderedSubList">
            <summary>
            Represents the an ordered sub list.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.SubList">
            <summary>
            Represents the SubList can be initialized on <see cref="T:ceTe.DynamicPDF.PageElements.List"/>.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.SubList.Leading">
            <summary>
            Gets or Sets the leading for the text of the SubList.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.SubList.ceTe#DynamicPDF#PageElements#IListProperties#Leading">
            <summary>
            Gets the leading for the text of the SubList.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.SubList.FontSize">
            <summary>
            Gets or Sets the Fontsize of the SubList.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.SubList.ceTe#DynamicPDF#PageElements#IListProperties#FontSize">
            <summary>
            Gets the Fontsize of the SubList.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.SubList.Font">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.SubList.Font"/> of the text for the SubList.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.SubList.ceTe#DynamicPDF#PageElements#IListProperties#Font">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.PageElements.SubList.Font"/> of the text for the SubList.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.SubList.ceTe#DynamicPDF#PageElements#IListProperties#RightToLeft">
            <summary>
            Gets a value indicating if the Text is in RighttoLeft language.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.SubList.RightToLeft">
            <summary>
            Gets or Sets a value indicating if the Text is in RighttoLeft language.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.SubList.TextColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> of the Text for whole SubList.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.SubList.ceTe#DynamicPDF#PageElements#IListProperties#TextColor">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.Color"/> of the Text for whole SubList.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.SubList.RightIndent">
            <summary>
            Gets or Sets the RightIndent of the whole SubList. Each ListItem may have his own RightIndent.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.SubList.ceTe#DynamicPDF#PageElements#IListProperties#RightIndent">
            <summary>
            Gets the RightIndent of the whole SubList. Each ListItem may have his own RightIndent.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.SubList.LeftIndent">
            <summary>
            Gets or Sets the LeftIndent of the whole SubList. Each ListItem may have his own LeftIndent.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.SubList.ceTe#DynamicPDF#PageElements#IListProperties#LeftIndent">
            <summary>
            Gets the LeftIndent of the whole SubList. Each ListItem may have his own LeftIndent.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.SubList.TextAlign">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.SubList.TextAlign"/> enumeration that specifies the text alignment of the SubList.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.SubList.ceTe#DynamicPDF#PageElements#IListProperties#TextAlign">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.PageElements.SubList.TextAlign"/> enumeration that specifies the text alignment of the SubList.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.SubList.BulletAlign">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Align"/> enumeration that specifies the Bullet alignment of the SubList.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.SubList.ceTe#DynamicPDF#PageElements#IListProperties#BulletAlign">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.Align"/> enumeration that specifies the Bullet alignment of the SubList.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.SubList.ceTe#DynamicPDF#PageElements#IListProperties#BulletPrefix">
            <summary>
            Gets the BulletPrefix of the SubList.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.SubList.ceTe#DynamicPDF#PageElements#IListProperties#BulletSuffix">
            <summary>
            Gets the BulletSuffix of the SubList.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.SubList.ceTe#DynamicPDF#PageElements#IListProperties#BulletType">
            <summary>
            Gets the Numberingstyle of the SubList.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.SubList.ParagraphIndent">
            <summary>
            Gets or Sets the paragraphIndent of the SubList.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.SubList.ceTe#DynamicPDF#PageElements#IListProperties#ParagraphIndent">
            <summary>
            Gets the paragraphIndent of the SubList.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.SubList.BulletAreaWidth">
            <summary>
            Gets or sets the Width in which bullets will be drawn, for each <see cref="T:ceTe.DynamicPDF.PageElements.ListItem"/> of the SubList.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.SubList.ceTe#DynamicPDF#PageElements#IListProperties#BulletAreaWidth">
            <summary>
            Gets the Width in which bullets will be drawn, for each <see cref="T:ceTe.DynamicPDF.PageElements.ListItem"/> of the SubList.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.SubList.Items">
            <summary>
            Gets the ListItemLists of the SubList.
            </summary>
            <returns>ListItemLists of the SubList</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.SubList.ListItemTopMargin">
            <summary>
            Gets or Sets the TopMargin of the ListItems in the SubList.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.SubList.ceTe#DynamicPDF#PageElements#IListProperties#ListItemTopMargin">
            <summary>
            Gets the TopMargin of the ListItems in the SubList.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.SubList.ListItemBottomMargin">
            <summary>
            Gets or Sets the BottomMargin of the ListItems in the SubList.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.SubList.ceTe#DynamicPDF#PageElements#IListProperties#ListItemBottomMargin">
            <summary>
            Gets the BottomMargin of the ListItems in the SubList.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.SubList.StrikeThrough">
            <summary>
            Gets or Sets the text of each <see cref="T:ceTe.DynamicPDF.PageElements.ListItem"/> of the SubList as StrikeThrough.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.SubList.ceTe#DynamicPDF#PageElements#IListProperties#StrikeThrough">
            <summary>
            Gets the text of each <see cref="T:ceTe.DynamicPDF.PageElements.ListItem"/> of the SubList as StrikeThrough.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.SubList.BulletSize">
            <summary>
            Gets or Sets the bullet's size for the SubList .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.SubList.ceTe#DynamicPDF#PageElements#IListProperties#BulletSize">
            <summary>
            Gets the bullet's size for the SubList.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.SubList.Tag">
            <summary>
            Gets or sets the structure element of the sub list.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.SubList.TagOrder">
            <summary>
            Gets or sets the structure element order of the sub list.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.OrderedSubList.BulletPrefix">
            <summary>
            Sets or Gets the Prefix String of the Bullets.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.OrderedSubList.ceTe#DynamicPDF#PageElements#IListProperties#BulletPrefix">
            <summary>
            Gets the Prefix String of the Bullets.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.OrderedSubList.BulletSuffix">
            <summary>
            Sets or Gets the suffix String of the Bullets.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.OrderedSubList.ceTe#DynamicPDF#PageElements#IListProperties#BulletSuffix">
            <summary>
            Gets the suffix String of the Bullets.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.OrderedSubList.ceTe#DynamicPDF#PageElements#IListProperties#BulletType">
            <summary>
            Gets the NumberingStyle of the Bullets.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.PageNumberingLabel">
            <summary>
            Represents a page numbering label page element.
            </summary>
            <remarks>
            This class can be used to add page and section numbering to a PDF document. A document can be broken up into
            sections using the <see cref="P:ceTe.DynamicPDF.Document.Sections"/> property of the <see cref="T:ceTe.DynamicPDF.Document"/> class. The following
            tokens can be used within the text of a PageNumberingLabel. They will be replaced with the appropriate value
            when the PDF is output.
            <list type="table">
            <listheader>
            <term>Token</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>CP</term>
            <description>Current page. The default numbering style is numeric. The current page can be offset using the is
            offset by the <see cref="P:ceTe.DynamicPDF.PageElements.PageNumberingLabel.PageOffset"/> property.</description>
            </item>
            <item>
            <term>TP</term>
            <description>Total pages. The default numbering style is numeric. The total pages can be offset using the is
            offset by the <see cref="P:ceTe.DynamicPDF.PageElements.PageNumberingLabel.PageTotalOffset"/> property.</description>
            </item>
            <item>
            <term>SP</term>
            <description>Section page. The default numbering style is the numbering style used by the section. The total
            pages can be offset using the is offset by the <see cref="P:ceTe.DynamicPDF.PageElements.PageNumberingLabel.PageTotalOffset"/> property.</description>
            </item>
            <item>
            <term>ST</term>
            <description>Section Total. The default numbering style is the numbering style used by the section. The total
            pages can be offset using the is offset by the <see cref="P:ceTe.DynamicPDF.PageElements.PageNumberingLabel.PageTotalOffset"/> property.</description>
            </item>
            <item>
            <term>PR</term>
            <description>Prefix. The sections prefix.</description>
            </item>
            </list>
            <p/>
            All tokens except the /%/%PR/%/% token can also contain a numbering style specifier. The numbering style specifier
            is placed in parenthesis after the token. If no numbering style specifier is given, then the current sections
            numbering specifier is used. If there are no document sections or the current section does not have a numbering
            specifier, numeric numbering is used.
            <list type="table">
            <listheader>
            <term>Numbering Style</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>1</term>
            <description>Numeric. Arabic numbers are used: 1, 2, 3, etc. Example: "/%/%CP(1)/%/%"</description>
            </item>
            <item>
            <term>i</term>
            <description>Lower Case Roman Numerals. Lower case roman numerals are used: i, ii, iii, etc.
            Example: "/%/%CP(i)/%/%".</description>
            </item>
            <item>
            <term>I</term>
            <description>Upper Case Roman Numerals. Upper case roman numerals are used: I, II, III, etc.
            Example: "/%/%CP(I)/%/%".</description>
            </item>
            <item>
            <term>a</term>
            <description>Lower Latin Letters. Lower case Latin letters are used: a, b, c, etc. After z, aa is used
            followed by bb, cc, etc. Example: "/%/%CP(a)/%/%".</description>
            </item>
            <item>
            <term>A</term>
            <description>Upper Latin Letters. Upper case Latin letters are used: A, B, C, etc. After Z, AA is used
            followed by BB, CC, etc. Example: "/%/%CP(A)/%/%".</description>
            </item>
            <item>
            <term>b</term>
            <description>Lower Latin Letters. Lower case Latin letters are used: a, b, c, etc. After z, aa is used
            followed by ab, ac, etc. Example: "/%/%CP(b)/%/%".</description>
            </item>
            <item>
            <term>B</term>
            <description>Lower Latin Letters. Lower case Latin letters are used: A, B, C, etc. After Z, AA is used
            followed by AB, AC, etc. Example: "/%/%CP(B)/%/%".</description>
            </item>
            </list>
            <p/>
            There should be no spaces within a token, only the token and optional numbering style specifier. This
            token is <b>invalid</b> /%/%CP ( i )/%/% because of the extra spaces.<p/>Here are some examples of valid tokens:
            <ul style="margin-top: 0px;">
            <li>/%/%SP/%/%</li>
            <li>/%/%SP(I)/%/%</li>
            <li>/%/%PR/%/%</li>
            <li>/%/%ST(B)/%/%</li>
            </ul>
            </remarks>
            <example>The following example shows how to use page numbering in a document.<p/>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
                Sub Main()
            		
                    ' Create a PDF Document
                    Dim MyDocument As Document = New Document 
            
                    ' Create a document template and add it to the document
                    Dim documentTemplate As Template = New Template()
                    MyDocument.Template = documentTemplate
            
                    ' Place a page numbering label in the document template
                    documentTemplate.Elements.Add( New PageNumberingLabel( _
            			"%%PR%%%%SP%% of %%ST%%", 0, 680, 512, 12, Font.Helvetica, _
            			12, TextAlign.Center ) )
            
                    ' Begin the first section
                    MyDocument.Sections.Begin( NumberingStyle.RomanLowerCase )
            
                    ' Add three pages
                    MyDocument.Pages.Add( new Page() ) 'Page 1
                    MyDocument.Pages.Add( new Page() ) 'Page 2
                    MyDocument.Pages.Add( new Page() ) 'Page 3
            
                    ' Begin the second section
                    MyDocument.Sections.Begin( NumberingStyle.Numeric )
            
                    ' Add four pages
                    MyDocument.Pages.Add( new Page() ) 'Page 4
                    MyDocument.Pages.Add( new Page() ) 'page 5
                    MyDocument.Pages.Add( new Page() ) 'page 6
                    MyDocument.Pages.Add( new Page() ) 'page 7
            
                    ' Begin the third section specifying a section prefix
                    MyDocument.Sections.Begin( NumberingStyle.RomanLowerCase, _
            			"Appendix A - " )
            
                    ' Add two pages
                    MyDocument.Pages.Add( new Page() ) 'page 8
                    MyDocument.Pages.Add( new Page() ) 'page 9
            
                    ' Save the PDF
                    MyDocument.Draw("C:\MyDocument.pdf")
            		
                End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
                static void Main()
                {
                    // Create a PDF Document
                    Document document = new Document();
            
                    // Create a document template and add it to the document
                    Template documentTemplate = new Template();
                    document.Template = documentTemplate;
            
                    // Place a page numbering label in the document template
                    documentTemplate.Elements.Add( new PageNumberingLabel( 
            			"%%PR%%%%SP%% of %%ST%%", 0, 680, 512, 12, Font.Helvetica, 
            			12, TextAlign.Center ) );
            
                    // Begin the first section
                    document.Sections.Begin( NumberingStyle.RomanLowerCase );
            
                    // Add three pages
                    document.Pages.Add( new Page() ); //Page 1
                    document.Pages.Add( new Page() ); //Page 2
                    document.Pages.Add( new Page() ); //Page 3
            
                    // Begin the second section
                    document.Sections.Begin( NumberingStyle.Numeric );
            
                    // Add four pages
                    document.Pages.Add( new Page() ); //Page 4
                    document.Pages.Add( new Page() ); //page 5
                    document.Pages.Add( new Page() ); //page 6
                    document.Pages.Add( new Page() ); //page 7
            
                    // Begin the third section specifying a section prefix
                    document.Sections.Begin( NumberingStyle.RomanLowerCase, 
            			"Appendix A - " );
            
                    // Add two pages
                    document.Pages.Add( new Page() ); //page 8
                    document.Pages.Add( new Page() ); //page 9
            
                    // Save the PDF
                    document.Draw( @"C:\MyDocument.pdf" );
                }
            }
            </code>
            </example>
            <licensing>
            This class is a DynamicPDF Generator Community Edition feature.
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.PageNumberingLabel.#ctor(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.PageNumberingLabel"/> class.
            </summary>
            <param name="text">Text to display in the label.</param>
            <param name="x">X coordinate of the label.</param>
            <param name="y">Y coordinate of the label.</param>
            <param name="width">Width of the label.</param>
            <param name="height">Height of the label.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.PageNumberingLabel.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.PageNumberingLabel"/> class.
            </summary>
            <param name="text">Text to display in the label.</param>
            <param name="x">X coordinate of the label.</param>
            <param name="y">Y coordinate of the label.</param>
            <param name="width">Width of the label.</param>
            <param name="height">Height of the label.</param>
            <param name="font">Font for the text of the label.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.PageNumberingLabel.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.PageNumberingLabel"/> class.
            </summary>
            <param name="text">Text to display in the label.</param>
            <param name="x">X coordinate of the label.</param>
            <param name="y">Y coordinate of the label.</param>
            <param name="width">Width of the label.</param>
            <param name="height">Height of the label.</param>
            <param name="font">Font for the text of the label.</param>
            <param name="fontSize">Font size of the text of the label.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.PageNumberingLabel.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.TextAlign)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.PageNumberingLabel"/> class.
            </summary>
            <param name="text">Text to display in the label.</param>
            <param name="x">X coordinate of the label.</param>
            <param name="y">Y coordinate of the label.</param>
            <param name="width">Width of the label.</param>
            <param name="height">Height of the label.</param>
            <param name="font">Font for the text of the label.</param>
            <param name="fontSize">Font size of the text of the label.</param>
            <param name="align">Alignment of the text of the label.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.PageNumberingLabel.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.PageNumberingLabel"/> class.
            </summary>
            <param name="text">Text to display in the label.</param>
            <param name="x">X coordinate of the label.</param>
            <param name="y">Y coordinate of the label.</param>
            <param name="width">Width of the label.</param>
            <param name="height">Height of the label.</param>
            <param name="font">Font for the text of the label.</param>
            <param name="fontSize">Font size of the text of the label.</param>
            <param name="textColor">Color of the text of the label.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.PageNumberingLabel.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.TextAlign,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.PageNumberingLabel"/> class.
            </summary>
            <param name="text">Text to display in the label.</param>
            <param name="x">X coordinate of the label.</param>
            <param name="y">Y coordinate of the label.</param>
            <param name="width">Width of the label.</param>
            <param name="height">Height of the label.</param>
            <param name="font">Font for the text of the label.</param>
            <param name="fontSize">Font size of the text of the label.</param>
            <param name="align">Alignment of the text of the label.</param>
            <param name="textColor">Color of the text of the label.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.PageNumberingLabel.DrawRotated(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the label to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the label's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.PageNumberingLabel.Align">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.PageNumberingLabel.Align"/> enumeration that specifies the text alignment of the label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.PageNumberingLabel.VAlign">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.PageNumberingLabel.VAlign"/> enumeration that specifies the vertical text alignment of the label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.PageNumberingLabel.Underline">
            <summary>
            Gets or sets a value indicating if the label is underlined.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.PageNumberingLabel.Text">
            <summary>
            Gets or sets the text of the label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.PageNumberingLabel.TextColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the text of the label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.PageNumberingLabel.Font">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.PageNumberingLabel.Font"/> object to use for the text of the label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.PageNumberingLabel.FontSize">
            <summary>
            Gets or sets the font size for the text of the label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.PageNumberingLabel.Width">
            <summary>
            Gets or sets the width or the label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.PageNumberingLabel.PageTotalOffset">
            <summary>
            Gets or sets the page total offset for page numbering.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.PageNumberingLabel.PageOffset">
            <summary>
            Gets or sets the page offset for page numbering.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Path">
             <summary>
             Represents a path with sub paths.
             </summary>
             <remarks>This class can be used to specify a collection of sub paths which will be used to complete your path.  
             Sub paths that can be added are CurveFromSubPath, CurveSubPath, CurveToSubPath and LineSubPath.</remarks>
             <example>The following example will display a path that incorporates several different subpaths before retuning to its starting location.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a path
                     Dim MyPath As Path = New Path(50, 150, RgbColor.Blue, RgbColor.Yellow, _
             			 3, LineStyle.Solid, True)
             
                     ' Add some sub paths to the path 
                     MyPath.SubPaths.Add(New CurveSubPath(50, 400, 300, 150, -200, 400))
                     MyPath.SubPaths.Add(New LineSubPath(300, 400))
                     MyPath.SubPaths.Add(New CurveToSubPath(300, 150, 50, 300))
                     MyPath.SubPaths.Add(New CurveFromSubPath(150, 100, 200, -100))
             
                     ' Add the path to the page
                     MyPage.Elements.Add(MyPath)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create a path
                     Path path = new Path( 50, 150, RgbColor.Blue, RgbColor.Yellow, 
             			3, LineStyle.Solid, true );
             
                     // Add some sub paths to the path
                     path.SubPaths.Add( new CurveSubPath( 50, 400, 300, 150, -200, 400 ) );
                     path.SubPaths.Add( new LineSubPath( 300, 400 ) );
                     path.SubPaths.Add( new CurveToSubPath( 300, 150, 50, 300 ) );
                     path.SubPaths.Add( new CurveFromSubPath( 150, 100, 200, -100 ) );
             
                     // Add the path to the page
                     page.Elements.Add( path );	
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Professional Edition</item>
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Professional Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Professional Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Path.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Path"/> class.
            </summary>
            <param name="x">X coordinate of the path.</param>
            <param name="y">Y coordinate of the path.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Path.#ctor(System.Single,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Path"/> class.
            </summary>
            <param name="x">X coordinate of the path.</param>
            <param name="y">Y coordinate of the path.</param>
            <param name="lineColor">Color of the lines of the path.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Path.#ctor(System.Single,System.Single,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Path"/> class.
            </summary>
            <param name="x">X coordinate of the path.</param>
            <param name="y">Y coordinate of the path.</param>
            <param name="lineColor">Color of the lines of the path.</param>
            <param name="fillColor">Color of the fill of the path.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Path.#ctor(System.Single,System.Single,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.LineStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Path"/> class.
            </summary>
            <param name="x">X coordinate of the path.</param>
            <param name="y">Y coordinate of the path.</param>
            <param name="lineColor">Color of the lines of the path.</param>
            <param name="lineWidth">Width of the lines of the path.</param>
            <param name="lineStyle">Style of the lines of the path.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Path.#ctor(System.Single,System.Single,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.LineStyle,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Path"/> class.
            </summary>
            <param name="x">X coordinate of the path.</param>
            <param name="y">Y coordinate of the path.</param>
            <param name="lineColor">Color of the lines of the path.</param>
            <param name="lineWidth">Width of the lines of the path.</param>
            <param name="lineStyle">Style of the lines of the path.</param>
            <param name="closePath">Specifies if the path should be closed.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Path.#ctor(System.Single,System.Single,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.LineStyle,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Path"/> class.
            </summary>
            <param name="x">X coordinate of the path.</param>
            <param name="y">Y coordinate of the path.</param>
            <param name="lineColor">Color of the lines of the path.</param>
            <param name="fillColor">Color of the fill of the path.</param>
            <param name="lineWidth">Width of the lines of the path.</param>
            <param name="lineStyle">Style of the lines of the path.</param>
            <param name="closePath">Specifies if the path should be closed.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Path.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the path to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the sub path's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Path.LineStyle">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Path.LineStyle"/> object used to specify the style of the path's lines.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Path.LineCap">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Path.LineCap"/> enumeration used to specify the line cap style of the path's lines.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Path.LineJoin">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Path.LineJoin"/> enumeration used to specify the line join style of the path's lines.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Path.MiterLimit">
            <summary>
            Gets or sets the miter limit of the path's lines.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Path.SubPaths">
            <summary>
            Gets <see cref="T:ceTe.DynamicPDF.PageElements.SubPathList"/> that contains a collection of <see cref="T:ceTe.DynamicPDF.PageElements.SubPath"/> objects.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Path.LineWidth">
            <summary>
            Gets or sets the width of the path's lines.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Path.LineColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the path's lines.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Path.FillColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the fill of the path.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Path.X">
            <summary>
            Gets or set the X coordinate of the path.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Path.Y">
            <summary>
            Gets or sets the Y coordinate of the path.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Path.ClosePath">
            <summary>
            Gets or sets a value specifying if the path should be closed.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Rectangle">
             <summary>
             Represents a rectangle page element.
             </summary>
             <remarks>This class can be used to place rectangles of any size or color on a page.</remarks>
             <example>The following example will display a custom rectangle on the page.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a rectangle
                     Dim MyRectangle As Rectangle = New Rectangle(50, 50, 200, _
             			200, Grayscale.Black, RgbColor.Gray, 4, LineStyle.Solid)
             
                     ' Change the corner radius property 
                     MyRectangle.CornerRadius = 10
             
                     ' Add the rectangle to the page
                     MyPage.Elements.Add(MyRectangle)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create a rectangle
                     Rectangle rectangle = new Rectangle( 50, 50, 200, 200,
             			Grayscale.Black, RgbColor.Gray, 4, LineStyle.Solid );
             
                     // Change the corner radius property
                     rectangle.CornerRadius = 10;
             
                     // Add the rectangle to the page
                     page.Elements.Add( rectangle );	
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             } 
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Community Edition feature.
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Rectangle.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Rectangle"/> class.
            </summary>
            <param name="x">X coordinate of the rectangle.</param>
            <param name="y">Y coordinate of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Rectangle.#ctor(System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Rectangle"/> class.
            </summary>
            <param name="x">X coordinate of the rectangle.</param>
            <param name="y">Y coordinate of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
            <param name="borderColor">Color of the border of the rectangle.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Rectangle.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Rectangle"/> class.
            </summary>
            <param name="x">X coordinate of the rectangle.</param>
            <param name="y">Y coordinate of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
            <param name="borderWidth">Width of the border of the rectangle.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Rectangle.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Rectangle"/> class.
            </summary>
            <param name="x">X coordinate of the rectangle.</param>
            <param name="y">Y coordinate of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
            <param name="borderWidth">Width of the border of the rectangle.</param>
            <param name="fillColor">Color of the fill of the rectangle.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Rectangle.#ctor(System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Color,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Rectangle"/> class.
            </summary>
            <param name="x">X coordinate of the rectangle.</param>
            <param name="y">Y coordinate of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
            <param name="borderColor">Color of the border of the rectangle.</param>
            <param name="borderWidth">Width of the border of the rectangle.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Rectangle.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.LineStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Rectangle"/> class.
            </summary>
            <param name="x">X coordinate of the rectangle.</param>
            <param name="y">Y coordinate of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
            <param name="borderWidth">Width of the border of the rectangle.</param>
            <param name="borderStyle">Style of the border of the rectangle.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Rectangle.#ctor(System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.LineStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Rectangle"/> class.
            </summary>
            <param name="x">X coordinate of the rectangle.</param>
            <param name="y">Y coordinate of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
            <param name="borderColor">Color of the border of the rectangle.</param>
            <param name="borderWidth">Width of the border of the rectangle.</param>
            <param name="borderStyle">Style of the border of the rectangle.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Rectangle.#ctor(System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.Color,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Rectangle"/> class.
            </summary>
            <param name="x">X coordinate of the rectangle.</param>
            <param name="y">Y coordinate of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
            <param name="borderColor">Color of the border of the rectangle.</param>
            <param name="fillColor">Color of the fill of the rectangle.</param>
            <param name="borderWidth">Width of the border of the rectangle.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Rectangle.#ctor(System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Rectangle"/> class.
            </summary>
            <param name="x">X coordinate of the rectangle.</param>
            <param name="y">Y coordinate of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
            <param name="borderColor">Color of the border of the rectangle.</param>
            <param name="fillColor">Color of the fill of the rectangle.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Rectangle.#ctor(System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.LineStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Rectangle"/> class.
            </summary>
            <param name="x">X coordinate of the rectangle.</param>
            <param name="y">Y coordinate of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
            <param name="borderColor">Color of the border of the rectangle.</param>
            <param name="fillColor">Color of the fill of the rectangle.</param>
            <param name="borderWidth">Width of the border of the rectangle.</param>
            <param name="borderStyle">Style of the border of the rectangle.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Rectangle.DrawRotated(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the rectangle to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the rectangle's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Rectangle.BorderStyle">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.LineStyle"/> object used to specify the border style of the rectangle.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Rectangle.CornerRadius">
            <summary>
            Gets or sets the corner radius of the rectangle.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Rectangle.BorderWidth">
            <summary>
            Gets or sets the border width of the rectangle.
            </summary>
            <remarks>To force the borders not to appear set the border width to any value 0 or less.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Rectangle.BorderColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the border of the rectangle.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Rectangle.FillColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the fill of the rectangle.
            </summary>
            <remarks>To force no color to appear in the rectangle (only borders) set the fill color to null (Nothing in Visual Basic).</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Rectangle.Width">
            <summary>
            Gets or sets the width of the rectangle.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Row">
            <summary>
            <font color="red">Obsolete.</font> Represents a row in a table.
            </summary>
            <remarks><font color="red">NOTE: This class is obsolete.</font> Use <see cref="T:ceTe.DynamicPDF.PageElements.Row2"/> class instead.</remarks>
            <example>The following example will display a simple table on the page.<p/>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
                Sub Main()
            		
                    ' Create a PDF Document
                    Dim MyDocument As Document = New Document
            		
                    ' Create a Page and add it to the document
                    Dim MyPage As Page = New Page
                    MyDocument.Pages.Add(MyPage)
            		
                    ' Create a table 
                    Dim MyTable As Table = New Table(0, 0, 600, 600)
            		
                    ' Add columns to the table
                    MyTable.Columns.Add(150)
                    MyTable.Columns.Add(90)
                    MyTable.Columns.Add(90)
                    MyTable.Columns.Add(90)
            		
                    ' Add rows to the table and add cells to the rows
                    Dim row1 As Row = MyTable.Rows.Add(40, ceTe.DynamicPDF.Font.HelveticaBold, _
            			16, Grayscale.Black, Grayscale.Gray)
                    row1.Align = TextAlign.Center
                    row1.VAlign = VAlign.Center
                    row1.Cells.Add("Header 1")
                    row1.Cells.Add("Header 2")
                    row1.Cells.Add("Header 3")
                    row1.Cells.Add("Header 4")
            		
                    Dim row2 As Row = MyTable.Rows.Add(30)
                    Dim cell1 As Cell = row2.Cells.Add("Rowheader 1", Font.HelveticaBold, 16, _
            			Grayscale.Black, Grayscale.Gray, 1)
                    cell1.Align = CellAlign.Center
                    cell1.VAlign = CellVAlign.Center
                    row2.Cells.Add("Item 1")
                    row2.Cells.Add("Item 2")
                    row2.Cells.Add("Item 3")
            		
                    Dim row3 As Row = MyTable.Rows.Add(30)
                    Dim cell2 As Cell = row3.Cells.Add("Rowheader 2", Font.HelveticaBold, 16, _
            			Grayscale.Black, Grayscale.Gray, 1)
                    cell2.Align = CellAlign.Center
                    cell2.VAlign = CellVAlign.Center
                    row3.Cells.Add("Item 4")
                    row3.Cells.Add("Item 5")
                    row3.Cells.Add("Item 6")
            		
                    ' Add the table to the page
                    MyPage.Elements.Add(MyTable)
            		
                    ' Save the PDF
                    MyDocument.Draw("C:\MyDocument.pdf")
            		
                End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
                static void Main()
                {
                    // Create a PDF Document
                    Document document = new Document();
            				
                    // Create a Page and add it to the document
                    Page page = new Page();
                    document.Pages.Add( page );
            					 	
                    // Create a table 
                    Table table = new Table(0, 0, 600, 600);
            					 	
                    //Add columns to the table
                    table.Columns.Add( 150 );
                    table.Columns.Add( 90 );
                    table.Columns.Add( 90 );
                    table.Columns.Add( 90 );
            					 	
                    // Add rows to the table and add cells to the rows
                    Row row1 = table.Rows.Add( 40, Font.HelveticaBold, 16, Grayscale.Black, 
            			Grayscale.Gray );
                    row1.Align = CellAlign.Center;
                    row1.VAlign = CellVAlign.Center;
                    row1.Cells.Add( "Header 1" );
                    row1.Cells.Add( "Header 2" );
                    row1.Cells.Add( "Header 3" );
                    row1.Cells.Add( "Header 4" );
            					 	
                    Row row2 = table.Rows.Add( 30 );
                    Cell cell1 = row2.Cells.Add( "Rowheader 1", Font.HelveticaBold, 16, 
            			Grayscale.Black, Grayscale.Gray, 1 );
                    cell1.Align = CellAlign.Center;
                    cell1.VAlign = CellVAlign.Center;
                    row2.Cells.Add( "Item 1" );
                    row2.Cells.Add( "Item 2" );
                    row2.Cells.Add( "Item 3" );
            					 			
                    Row row3 = table.Rows.Add( 30 );
                    Cell cell2 = row3.Cells.Add( "Rowheader 2", Font.HelveticaBold, 16, 
            			Grayscale.Black, Grayscale.Gray, 1 );
                    cell2.Align = CellAlign.Center;
                    cell2.VAlign = CellVAlign.Center;
                    row3.Cells.Add( "Item 4" );
                    row3.Cells.Add( "Item 5" );
                    row3.Cells.Add( "Item 6" );
            					 	
                    // Add the table to the page
                    page.Elements.Add( table );	
            					 	
                    // Save the PDF
                    document.Draw( @"C:\MyDocument.pdf" );
                }
            } 
            </code>
            </example>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Row.Font">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Row.Font"/> object to use for the row.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Row.FontSize">
            <summary>
            Gets or sets the font size to use for the row.
            </summary>explanation should be same as padding here...
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Row.TextColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the text in the row.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Row.BackgroundColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the background in the row.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Row.Align">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.CellAlign"/> enumeration to use for the horizontal alignment of each cell in that row.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Row.VAlign">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.CellVAlign"/> enumeration to use for the vertical alignment of each cell in that row.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Row.Padding">
            <summary>
            Gets or sets the padding of the cells in the row.  By default this value is set to float.MinValue.  Being set to 'Not a Number' implies that the row's padding will be pulled from the padding for the table containing that row. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Row.Height">
            <summary>
            Gets or sets the minimum height of the row.
            </summary>
            <remarks>If no height is specified for a Row this value will return -1.  A -1 signifies that the height will automatically adjust to the height of the text.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Row.Cells">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.CellList"/> containing all the cells in that row.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Row.ActualRowHeight">
            <summary>
            Gets the actual height of the row as it will be displayed.  This is different than the Height property.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Row.Tag">
            <summary>
            Gets or sets the structure element of the angle element.
            </summary>
            <licensing>
            This property is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>        
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Row.TagOrder">
            <summary>
            Gets or sets the structure element order of the angle element.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Row2">
            <summary>
            Represents a row in a table.
            </summary>
            <example>The following example will display a simple table on the page.<p/>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
                Sub Main()
            		
                    ' Create a PDF Document
                    Dim MyDocument As Document = New Document
            		
                    ' Create a Page and add it to the document
                    Dim MyPage As Page = New Page
                    MyDocument.Pages.Add(MyPage)
            		
                    ' Create a table 
                    Dim MyTable As Table2 = New Table2(0, 0, 600, 600)
            		
                    ' Add columns to the table
                    MyTable.Columns.Add(150)
                    MyTable.Columns.Add(90)
                    MyTable.Columns.Add(90)
                    MyTable.Columns.Add(90)
            		
                    ' Add rows to the table and add cells to the rows
                    Dim row1 As Row2 = MyTable.Rows.Add(40, ceTe.DynamicPDF.Font.HelveticaBold, _
            			16, Grayscale.Black, Grayscale.Gray)
                    row1.CellDefault.Align = TextAlign.Center
                    row1.CellDefault.VAlign = VAlign.Center
                    row1.CellDefault.Border.Color = RgbColor.Blue
                    row1.CellDefault.Border.Width = 2.0f
                    row1.CellDefault.Border.LineStyle = LineStyle.None
                    row1.Cells.Add("Header 1")
                    row1.Cells.Add("Header 2")
                    row1.Cells.Add("Header 3")
                    row1.Cells.Add("Header 4")
            		
                    Dim row2 As Row2 = MyTable.Rows.Add(30)
                    Dim cell1 As Cell2 = row2.Cells.Add("Rowheader 1", Font.HelveticaBold, 16, _
            			Grayscale.Black, Grayscale.Gray, 1)
                    cell1.Align = TextAlign.Center
                    cell1.VAlign = VAlign.Center
                    cell1.Border.Color = RgbColor.Blue
                    cell1.Border.Width = 2.0f
                    cell1.Border.LineStyle = LineStyle.Solid
                    row2.Cells.Add("Item 1")
                    row2.Cells.Add("Item 2")
                    row2.Cells.Add("Item 3")
                    row2.CellDefault.Border.Left.Color = RgbColor.Green
                    row2.CellDefault.Border.Top.Width = 3.0f
                    row2.CellDefault.Border.Right.LineStyle = LineStyle.None
                    row2.CellDefault.Border.Bottom.Color = RgbColor.Green
            		
                    Dim row3 As Row2 = MyTable.Rows.Add(30)
                    Dim cell2 As Cell2 = row3.Cells.Add("Rowheader 2", Font.HelveticaBold, 16, _
            			Grayscale.Black, Grayscale.Gray, 1)
                    cell2.Align = TextAlign.Center
                    cell2.VAlign = VAlign.Center
                    cell2.Border.Color = RgbColor.Blue
                    cell2.Border.Width = 2.0f
                    cell2.Border.LineStyle = LineStyle.None
                    row3.Cells.Add("Item 4")
                    row3.Cells.Add("Item 5")
                    row3.Cells.Add("Item 6")
                    row3.CellDefault.Padding.Left = 4.0f
                    row3.CellDefault.Padding.Top = 4.0f
                    row3.CellDefault.Padding.Right = 2.0f
                    row3.CellDefault.Padding.Bottom = 2.0f
            		
                    MyTable.CellDefault.Padding.Value = 3.0f
                    MyTable.CellSpacing = 5.0f
            
                    ' Add the table to the page
                    MyPage.Elements.Add(MyTable)
            		
                    ' Save the PDF
                    MyDocument.Draw("C:\MyDocument.pdf")
            		
                End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
                static void Main()
                {
                    // Create a PDF Document
                    Document document = new Document();
            				
                    // Create a Page and add it to the document
                    Page page = new Page();
                    document.Pages.Add( page );
            					 	
                    // Create a table 
                    Table2 table = new Table2(0, 0, 600, 600);
            					 	
                    //Add columns to the table
                    table.Columns.Add( 150 );
                    table.Columns.Add( 90 );
                    table.Columns.Add( 90 );
                    table.Columns.Add( 90 );
            					 	
                    // Add rows to the table and add cells to the rows
                    Row2 row1 = table.Rows.Add( 40, Font.HelveticaBold, 16, Grayscale.Black, 
            			Grayscale.Gray );
                    row1.CellDefault.Align = TextAlign.Center;
                    row1.CellDefault.VAlign = VAlign.Center;
                    row1.CellDefault.Border.Color = RgbColor.Blue;
                    row1.CellDefault.Border.Width = 2.0f;
                    row1.CellDefault.Border.LineStyle = LineStyle.None;
                    row1.Cells.Add( "Header 1" );
                    row1.Cells.Add( "Header 2" );
                    row1.Cells.Add( "Header 3" );
                    row1.Cells.Add( "Header 4" );
            					 	
                    Row2 row2 = table.Rows.Add( 30 );
                    Cell2 cell1 = row2.Cells.Add( "Rowheader 1", Font.HelveticaBold, 16, 
            			Grayscale.Black, Grayscale.Gray, 1 );
                    cell1.Align = TextAlign.Center;
                    cell1.VAlign = VAlign.Center;
                    cell1.Border.Left.Color = RgbColor.Blue;
                    cell1.Border.Right.Width = 2.0f;
                    cell1.Border.Right.LineStyle = LineStyle.Solid;
                    row2.Cells.Add( "Item 1" );
                    row2.Cells.Add( "Item 2" );
                    row2.Cells.Add( "Item 3" );
                    row2.CellDefault.Border.Left.Color = RgbColor.Green;
                    row2.CellDefault.Border.Top.Width = 3.0f;
                    row2.CellDefault.Border.Right.LineStyle = LineStyle.None;
                    row2.CellDefault.Border.Bottom.Color = RgbColor.Green;
            					 			
                    Row2 row3 = table.Rows.Add( 30 );
                    Cell2 cell2 = row3.Cells.Add( "Rowheader 2", Font.HelveticaBold, 16, 
            			Grayscale.Black, Grayscale.Gray, 1 );
                    cell2.Align = TextAlign.Center;
                    cell2.VAlign = VAlign.Center;
                    cell2.Border.Color = RgbColor.Blue;
                    cell2.Border.Width = 2.0f;
                    cell2.Border.LineStyle = LineStyle.None;
                    row3.Cells.Add( "Item 4" );
                    row3.Cells.Add( "Item 5" );
                    row3.Cells.Add( "Item 6" );
                    row3.CellDefault.Padding.Left = 4.0f;
                    row3.CellDefault.Padding.Top = 4.0f;
                    row3.CellDefault.Padding.Right = 2.0f;
                    row3.CellDefault.Padding.Bottom = 2.0f;
            
                    table.CellDefault.Padding.Value = 3.0f;
                    table.CellSpacing = 5.0f;
            
                    // Add the table to the page
                    page.Elements.Add( table );	
            					 	
                    // Save the PDF
                    document.Draw( @"C:\MyDocument.pdf" );
                }
            } 
            </code>
            </example>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Row2.CellDefault">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.PageElements.Row2.CellDefault"/> object of the cells in the row.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Row2.Height">
            <summary>
            Gets or sets the minimum height of the row.
            </summary>
            <remarks>If no height is specified for a Row this value will return -1.  A -1 signifies that the height will automatically adjust to the height of the text.</remarks>        
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Row2.Cells">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.CellList"/> containing all the cells in that row.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Row2.ActualRowHeight">
            <summary>
            Gets the actual height of the row as it will be displayed.  This is different than the Height property.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Row2.Tag">
            <summary>
            Gets or sets the structure element of the row.
            </summary>
            <licensing>
            This property is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>        
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Row2.TagOrder">
            <summary>
            Gets or sets the structure element order of the row.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Row2List">
            <summary>
            Represents a list of Rows in a table.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Row2List.Add">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Row2"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Row2List"/>.
            </summary>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Row2"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Row2List.Add(System.Single)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Row2"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Row2List"/>.
            </summary>
            <param name="height">Height of the row to be added.</param>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Row2"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Row2List.Add(ceTe.DynamicPDF.Font,System.Nullable{System.Single})">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Row2"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Row2List"/>.
            </summary>
            <param name="font">Font for the text in the row.</param>
            <param name="fontSize">Font size for the text in the row.</param>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Row2"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Row2List.Add(System.Single,ceTe.DynamicPDF.Font,System.Nullable{System.Single})">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Row2"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Row2List"/>.
            </summary>
            <param name="height">Height of the row to be added.</param>
            <param name="font">Font for the text in the row.</param>
            <param name="fontSize">Font size for the text in the row.</param>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Row2"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Row2List.Add(ceTe.DynamicPDF.Font,System.Nullable{System.Single},ceTe.DynamicPDF.Color,ceTe.DynamicPDF.Color)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Row2"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Row2List"/>.
            </summary>
            <param name="font">Font for the text in the row.</param>
            <param name="fontSize">Font size for the text in the row.</param>
            <param name="textColor">Color for the text in the row.</param>
            <param name="backColor">Background color for the row.</param>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Row2"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Row2List.Add(System.Single,ceTe.DynamicPDF.Font,System.Nullable{System.Single},ceTe.DynamicPDF.Color,ceTe.DynamicPDF.Color)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Row2"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.Row2List"/>.
            </summary>
            <param name="height">Height of the row to be added.</param>
            <param name="font">Font for the text in the row.</param>
            <param name="fontSize">Font size for the text in the row.</param>
            <param name="textColor">Color for the text in the row.</param>
            <param name="backColor">Background color for the row.</param>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Row2"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Row2List.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:ceTe.DynamicPDF.PageElements.Row2List"/>.
            </summary>
            <returns>An <b>IEnumerator</b> for the entire <see cref="T:ceTe.DynamicPDF.PageElements.Row2List"/>.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Row2List.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Row2"/> at the given index.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Row2List.Count">
            <summary>
            Gets the number of elements actually contained in the <see cref="T:ceTe.DynamicPDF.PageElements.Row2List"/>.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.RowList">
            <summary>
            <font color="red">Obsolete.</font> Represents a list of Rows in a table.
            </summary>
            <remarks><font color="red">NOTE: This class is obsolete.</font> Use <see cref="T:ceTe.DynamicPDF.PageElements.Row2List"/> class instead.</remarks>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.RowList.Add">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Row"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.RowList"/>.
            </summary>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Row"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.RowList.Add(System.Single)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Row"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.RowList"/>.
            </summary>
            <param name="height">Height of the row to be added.</param>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Row"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.RowList.Add(ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Row"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.RowList"/>.
            </summary>
            <param name="font">Font for the text in the row.</param>
            <param name="size">Font size for the text in the row.</param>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Row"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.RowList.Add(System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Row"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.RowList"/>.
            </summary>
            <param name="height">Height of the row to be added.</param>
            <param name="font">Font for the text in the row.</param>
            <param name="size">Font size for the text in the row.</param>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Column"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.RowList.Add(ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.Color)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Row"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.RowList"/>.
            </summary>
            <param name="font">Font for the text in the row.</param>
            <param name="size">Font size for the text in the row.</param>
            <param name="textColor">Color for the text in the row.</param>
            <param name="backColor">Background color for the row.</param>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Row"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.RowList.Add(System.Single,ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.Color)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Row"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.RowList"/>.
            </summary>
            <param name="height">Height of the row to be added.</param>
            <param name="font">Font for the text in the row.</param>
            <param name="size">Font size for the text in the row.</param>
            <param name="textColor">Color for the text in the row.</param>
            <param name="backColor">Background color for the row.</param>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Column"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.RowList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:ceTe.DynamicPDF.PageElements.RowList"/>.
            </summary>
            <returns>An <b>IEnumerator</b> for the entire <see cref="T:ceTe.DynamicPDF.PageElements.RowList"/>.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.RowList.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Row"/> at the given index.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.RowList.Count">
            <summary>
            Gets the number of elements actually contained in the <see cref="T:ceTe.DynamicPDF.PageElements.RowList"/>.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.SubListList">
            <summary>
            Represents the SubListList.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.SubListList.AddOrderedSubList">
            <summary>
            Creates new OrderedSubList as a sublist of ListItem Which is calling this method.
            </summary>
            <returns> The newly Created OrderedSubList. </returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.SubListList.AddOrderedSubList(ceTe.DynamicPDF.NumberingStyle)">
            <summary>
            Creates new OrderedSubList as a sublist of ListItem Which is calling this method.
            </summary>
            <param name="nStyle"><see cref="T:ceTe.DynamicPDF.NumberingStyle"/> of the newly created orderedList.</param>
            <returns>The newly Created OrderedSubList.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.SubListList.AddUnorderedSubList">
            <summary>
            Creates new UnorderedSubList as a sublist of ListItem Which is calling this method.
            </summary>
            <returns> The newly Created UnorderedSubList. </returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.SubListList.AddUnorderedSubList(ceTe.DynamicPDF.PageElements.UnorderedListStyle)">
            <summary>
            Creates new UnorderedSubList as a sublist of ListItem Which is calling this method.
            </summary>
            <param name="bullet"><see cref="T:ceTe.DynamicPDF.PageElements.UnorderedListStyle"/> of the newly created UnorderedList.</param>
            <returns>The newly Created UnorderedSubList.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.SubListList.Item(System.Int32)">
            <summary>
            Gets the List from the subList of Lists based on the given index value.
            </summary>
            <param name="index">Index of the List.</param>
            <returns>List of the given index.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.SubListList.Count">
            <summary>
            Gets the number of sublists.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.SubPathList">
            <summary>
            Represents a collection of sub paths.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.SubPathList.Add(ceTe.DynamicPDF.PageElements.SubPath)">
            <summary>
            Adds a sub path to the current path.
            </summary>
            <param name="subPath"><b>SubPath</b> object to add to the path.</param>
            <returns>The index of the added subpath.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.SubPathList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <b>SubPathList</b>.
            </summary>
            <returns>An <b>IEnumerator</b> for the entire <b>SubPathList</b></returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.SubPathList.Count">
            <summary>
            Gets the number of <see cref="T:ceTe.DynamicPDF.PageElements.SubPath"/> objects in the collection.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.SubPathList.Item(System.Int32)">
            <summary>
            Gets or sets a <see cref="T:ceTe.DynamicPDF.PageElements.SubPath"/> object at the given index.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Table">
            <summary>
            <font color="red">Obsolete.</font> Represents a table with rows, columns and cells.
            </summary>
            <remarks><font color="red">NOTE: This class is obsolete.</font>  Use <see cref="T:ceTe.DynamicPDF.PageElements.Table2"/> class instead.
            This class can be used to create tables.  A table must contain at least one Column and one Row with at least one 
            Cell in that Row.  Formatting of each cell in the table is done in a hierarchical manner in that a Cell's formatting take 
            precedent over a Row's formatting which in term takes precedent over a Table's formatting .  The column object contains no
            formatting information.  Using the Tables GetOverflowColumns and GetOverflowRows methods you can allow your table to easily 
            flow onto other pages.   See the <a href="Tables.html">Tables</a> topic for more on tables.</remarks>
            <example>The following example will display a simple table on the page.<p/>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
                Sub Main()
            		
                    ' Create a PDF Document
                    Dim MyDocument As Document = New Document
            		
                    ' Create a Page and add it to the document
                    Dim MyPage As Page = New Page
                    MyDocument.Pages.Add(MyPage)
            		
                    ' Create a table 
                    Dim MyTable As Table = New Table(0, 0, 600, 600)
            		
                    ' Add columns to the table
                    MyTable.Columns.Add(150)
                    MyTable.Columns.Add(90)
                    MyTable.Columns.Add(90)
                    MyTable.Columns.Add(90)
            		
                    ' Add rows to the table and add cells to the rows
                    Dim row1 As Row = MyTable.Rows.Add(40, ceTe.DynamicPDF.Font.HelveticaBold, _
            			16, Grayscale.Black, Grayscale.Gray)
                    row1.Align = TextAlign.Center
                    row1.VAlign = VAlign.Center
                    row1.Cells.Add("Header 1")
                    row1.Cells.Add("Header 2")
                    row1.Cells.Add("Header 3")
                    row1.Cells.Add("Header 4")
            		
                    Dim row2 As Row = MyTable.Rows.Add(30)
                    Dim cell1 As Cell = row2.Cells.Add("Rowheader 1", Font.HelveticaBold, 16, _
            			Grayscale.Black, Grayscale.Gray, 1)
                    cell1.Align = CellAlign.Center
                    cell1.VAlign = CellVAlign.Center
                    row2.Cells.Add("Item 1")
                    row2.Cells.Add("Item 2")
                    row2.Cells.Add("Item 3")
            		
                    Dim row3 As Row = MyTable.Rows.Add(30)
                    Dim cell2 As Cell = row3.Cells.Add("Rowheader 2", Font.HelveticaBold, 16, _
            			Grayscale.Black, Grayscale.Gray, 1)
                    cell2.Align = CellAlign.Center
                    cell2.VAlign = CellVAlign.Center
                    row3.Cells.Add("Item 4")
                    row3.Cells.Add("Item 5")
                    row3.Cells.Add("Item 6")
            		
                    ' Add the table to the page
                    MyPage.Elements.Add(MyTable)
            		
                    ' Save the PDF
                    MyDocument.Draw("C:\MyDocument.pdf")
            		
                End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
                static void Main()
                {
                    // Create a PDF Document
                    Document document = new Document();
            				
                    // Create a Page and add it to the document
                    Page page = new Page();
                    document.Pages.Add( page );
            					 	
                    // Create a table 
                    Table table = new Table(0, 0, 600, 600);
            					 	
                    //Add columns to the table
                    table.Columns.Add( 150 );
                    table.Columns.Add( 90 );
                    table.Columns.Add( 90 );
                    table.Columns.Add( 90 );
            					 	
                    // Add rows to the table and add cells to the rows
                    Row row1 = table.Rows.Add( 40, Font.HelveticaBold, 16, Grayscale.Black, 
            			Grayscale.Gray );
                    row1.Align = CellAlign.Center;
                    row1.VAlign = CellVAlign.Center;
                    row1.Cells.Add( "Header 1" );
                    row1.Cells.Add( "Header 2" );
                    row1.Cells.Add( "Header 3" );
                    row1.Cells.Add( "Header 4" );
            					 	
                    Row row2 = table.Rows.Add( 30 );
                    Cell cell1 = row2.Cells.Add( "Rowheader 1", Font.HelveticaBold, 16, 
            			Grayscale.Black, Grayscale.Gray, 1 );
                    cell1.Align = CellAlign.Center;
                    cell1.VAlign = CellVAlign.Center;
                    row2.Cells.Add( "Item 1" );
                    row2.Cells.Add( "Item 2" );
                    row2.Cells.Add( "Item 3" );
            					 			
                    Row row3 = table.Rows.Add( 30 );
                    Cell cell2 = row3.Cells.Add( "Rowheader 2", Font.HelveticaBold, 16, 
            			Grayscale.Black, Grayscale.Gray, 1 );
                    cell2.Align = CellAlign.Center;
                    cell2.VAlign = CellVAlign.Center;
                    row3.Cells.Add( "Item 4" );
                    row3.Cells.Add( "Item 5" );
                    row3.Cells.Add( "Item 6" );
            					 	
                    // Add the table to the page
                    page.Elements.Add( table );	
            					 	
                    // Save the PDF
                    document.Draw( @"C:\MyDocument.pdf" );
                }
            } 
            </code>
            </example>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Table"/> class.
            </summary>
            <param name="x">X coordinate of the table.</param>
            <param name="y">Y coordinate of the table.</param>
            <param name="width">Width of the table.</param>
            <param name="height">Height of the table.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table.#ctor(System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Table"/> class.
            </summary>
            <param name="x">X coordinate of the table.</param>
            <param name="y">X coordinate of the table.</param>
            <param name="width">Width of the table.</param>
            <param name="height">Height of the table.</param>
            <param name="font">Font for the text in the table.</param>
            <param name="size">Font size for the text in the table.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table.#ctor(System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Table"/> class.
            </summary>
            <param name="x">X coordinate of the table.</param>
            <param name="y">X coordinate of the table.</param>
            <param name="width">Width of the table.</param>
            <param name="height">Height of the table.</param>
            <param name="font">Font for the text in the table.</param>
            <param name="size">Font size for the text in the table.</param>
            <param name="textColor">Color of the text in the table.</param>
            <param name="backColor">Background color of the table.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table.GetOverflowRows">
             <summary>
             Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Table"/> object containing the overflow rows.
             </summary>
             <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Table"/> object.</returns>
             <remarks>This method returns a new <b>Table</b> object that contains the remaining rows that did not fit.</remarks>
             <example>The following example shows you how to use the GetOverflowRows method to allow tables of variable length to flow onto new pages as needed.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
            
                     Dim MyTable As Table = New Table(0, 0, 200, 700)
            
                     MyTable.Columns.Add(100)
                     MyTable.Columns.Add(100)
            
                     ' This loop populates the table
                     Dim I As Integer
                     For I = 1 To 400
                         Dim MyRow As Row = MyTable.Rows.Add(20)
                         MyRow.Cells.Add("Row #" &amp; I)
                         MyRow.Cells.Add("Item")
                     Next
            			
                     Do
                     	Dim MyPage As Page = New Page
                         MyDocument.Pages.Add(MyPage)
                         MyPage.Elements.Add(MyTable)
                         MyTable = MyTable.GetOverflowRows()
                     Loop While Not (MyTable Is Nothing)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
             		
                     Table table = new Table( 0, 0, 200, 700 );
            
                     table.Columns.Add( 100 );
                     table.Columns.Add( 100 );
            
                     // This loop populates the table 
                     for ( int i = 1; i &lt;= 400; i++ )
                     {
                         Row row = table.Rows.Add( 20 );
                         row.Cells.Add( "Row #" + i );
                         row.Cells.Add( "Item" );
                     }
            
                     do
                     {
                         Page page = new Page();
                         document.Pages.Add( page );
                         page.Elements.Add( table );
                         table = table.GetOverflowRows();
                     } while ( table != null );
            	
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table.GetOverflowRows(System.Single,System.Single)">
             <summary>
             Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Table"/> object containing the overflow rows.
             </summary>
             <param name="x">X coordinate of the new table.</param>
             <param name="y">Y coordinate of the new table.</param>
             <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Table"/> object.</returns>
             <remarks>This method returns a new <b>Table</b> object that contains the remaining rows that did not fit.  This new table will be assigned the specified values for x and y.</remarks>
             <example>The following example shows you how to use the GetOverflowRows method to allow tables of variable length to flow onto new pages as needed.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
            
                     Dim MyTable As Table = New Table(0, 0, 200, 700)
            
                     MyTable.Columns.Add(100)
                     MyTable.Columns.Add(100)
            
                     ' This loop populates the table
                     Dim I As Integer
                     For I = 1 To 400
                         Dim MyRow As Row = MyTable.Rows.Add(20)
                         MyRow.Cells.Add("Row #" &amp; I)
                         MyRow.Cells.Add("Item")
                     Next
            			
                     Do
                         Dim MyPage As Page = New Page
                         MyDocument.Pages.Add(MyPage)
                         MyPage.Elements.Add(MyTable)
                         MyTable = MyTable.GetOverflowRows(50, 50)
                     Loop While Not (MyTable Is Nothing)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
             		
                     Table table = new Table( 0, 0, 200, 700 );
            
                     table.Columns.Add( 100 );
                     table.Columns.Add( 100 );
            
                     // This loop populates the table 
                     for ( int i = 1; i &lt;= 400; i++ )
                     {
                         Row row = table.Rows.Add( 20 );
                         row.Cells.Add( "Row #" + i );
                         row.Cells.Add( "Item" );
                     }
            
                     do
                     {
                         Page page = new Page();
                         document.Pages.Add( page );
                         page.Elements.Add( table );
                         table = table.GetOverflowRows( 50, 50 );
                     } while ( table != null );
            	
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table.GetOverflowRows(System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Table"/> object containing the overflow rows.
             </summary>
             <param name="x">X coordinate of the new table.</param>
             <param name="y">Y coordinate of the new table.</param>
             <param name="width">Width of the new table.</param>
             <param name="height">Height of the new table.</param>
             <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Table"/> object.</returns>
             <remarks>This method returns a new <b>Table</b> object that contains the remaining rows that did not fit.  This new table will be assigned the specified values for x, y, height and width.</remarks>
             <example>The following example shows you how to use the GetOverflowRows method to allow tables of variable length to flow onto new pages as needed.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
            
                     Dim MyTable As Table = New Table(0, 0, 200, 700)
            
                     MyTable.Columns.Add(100)
                     MyTable.Columns.Add(100)
            
                     ' This loop populates the table
                     Dim I As Integer
                     For I = 1 To 400
                     	Dim MyRow As Row = MyTable.Rows.Add(20)
                         MyRow.Cells.Add("Row #" &amp; I)
                         MyRow.Cells.Add("Item")
                     Next
            			
                     Do
                         Dim MyPage As Page = New Page
                         MyDocument.Pages.Add(MyPage)
                         MyPage.Elements.Add(MyTable)
                         MyTable = MyTable.GetOverflowRows(50, 50, 200, 350)
                     Loop While Not (MyTable Is Nothing)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
             		
                     Table table = new Table( 0, 0, 200, 700 );
            
                     table.Columns.Add( 100 );
                     table.Columns.Add( 100 );
            
                     // This loop populates the table 
                     for ( int i = 1; i &lt;= 400; i++ )
                     {
                         Row row = table.Rows.Add( 20 );
                         row.Cells.Add( "Row #" + i );
                         row.Cells.Add( "Item" );
                     }
            
                     do
                     {
                         Page page = new Page();
                         document.Pages.Add( page );
                         page.Elements.Add( table );
                         table = table.GetOverflowRows( 50, 50, 200, 350 );
                     } while ( table != null );
            	
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table.GetOverflowColumns">
             <summary>
             Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Table"/> object containing the overflow columns.
             </summary>
             <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Table"/> object.</returns>
             <remarks>This method returns a new <b>Table</b> object that contains the remaining columns that did not fit.</remarks>
             <example>The following example shows you how to use the GetOverflowColumns method to allow tables of variable length to flow onto new pages as needed.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
            
                     Dim MyTable As Table = New Table(0, 0, 500, 50)
            
                     ' Create some number of columns
                     Dim Cols As Integer = 50
                     Dim Int As Integer
                     For Int = 0 To Cols
                         MyTable.Columns.Add(100)
                     Next
            
                     ' Create your rows to fill in
                     Dim MyRow1 As Row = MyTable.Rows.Add(20)
                     Dim MyRow2 As Row = MyTable.Rows.Add(20)
            
                     Dim J As Integer
                     For J = 1 To Cols
                         MyRow1.Cells.Add("Column #" &amp; J)
                         MyRow2.Cells.Add("Item")
                     Next
            
                     Do
                         Dim MyPage As Page = New Page
                         MyDocument.Pages.Add(MyPage)
                         MyPage.Elements.Add(MyTable)
                         MyTable = MyTable.GetOverflowColumns()
                     Loop While Not (MyTable Is Nothing)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
             
                     Table table = new Table( 0, 0, 500, 50 );
            
                     // Create some number of columns
                     int cols = 50;
                     for( int i = 0; i &lt;= cols; i++ )
                     table.Columns.Add( 100 );
            			
                     // Create your rows to fill in
                     Row row1 = table.Rows.Add( 20 );
                     Row row2 = table.Rows.Add( 20 );
            
                     for( int j = 0; j &lt;= cols; j++ )
                     {
                         row1.Cells.Add( "Column #" + j );
                         row2.Cells.Add( "Item" );
                     }
            		
                     do
                     {
                         Page page = new Page();
                         document.Pages.Add( page );
                         page.Elements.Add( table );
                         table = table.GetOverflowColumns();
                     } while ( table != null );
            		
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table.GetOverflowColumns(System.Single,System.Single)">
             <summary>
             Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Table"/> object containing the overflow columns.
             </summary>
             <param name="x">X coordinate of the new table.</param>
             <param name="y">Y coordinate of the new table.</param>
             <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Table"/> object.</returns>
             <remarks>This method returns a new <b>Table</b> object that contains the remaining columns that did not fit.  This new table will be assigned the specified values for x and y.</remarks>
             <example>The following example shows you how to use the GetOverflowColumns method to allow tables of variable length to flow onto new pages as needed.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
            
                     Dim MyTable As Table = New Table(0, 0, 500, 50)
            
                     ' Create some number of columns
                     Dim Cols As Integer = 50
                     Dim Int As Integer
                     For Int = 0 To Cols
                         MyTable.Columns.Add(100)
                     Next
            
                     ' Create your rows to fill in
                     Dim MyRow1 As Row = MyTable.Rows.Add(20)
                     Dim MyRow2 As Row = MyTable.Rows.Add(20)
            
                     Dim J As Integer
                     For J = 1 To Cols
                         MyRow1.Cells.Add("Column #" &amp; J)
                         MyRow2.Cells.Add("Item")
                     Next
            
                     Do
                         Dim MyPage As Page = New Page
                         MyDocument.Pages.Add(MyPage)
                         MyPage.Elements.Add(MyTable)
                         MyTable = MyTable.GetOverflowColumns(50, 50)
                     Loop While Not (MyTable Is Nothing)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
             
                     Table table = new Table( 0, 0, 500, 50 );
            
                     // Create some number of columns
                     int cols = 50;
                     for( int i = 0; i &lt;= cols; i++ )
                     table.Columns.Add( 100 );
            			
                     // Create your rows to fill in
                     Row row1 = table.Rows.Add( 20 );
                     Row row2 = table.Rows.Add( 20 );
            
                     for( int j = 0; j &lt;= cols; j++ )
                     {
                         row1.Cells.Add( "Column #" + j );
                         row2.Cells.Add( "Item" );
                     }
            		
                     do
                     {
                         Page page = new Page();
                         document.Pages.Add( page );
                         page.Elements.Add( table );
                         table = table.GetOverflowColumns( 50, 50 );
                     } while ( table != null );
            		
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table.GetOverflowColumns(System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Table"/> object containing the overflow columns.
             </summary>
             <param name="x">X coordinate of the new table.</param>
             <param name="y">Y coordinate of the new table.</param>
             <param name="width">Width of the new table.</param>
             <param name="height">Height of the new table.</param>
             <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Table"/> object.</returns>
             <remarks>This method returns a new <b>Table</b> object that contains the remaining columns that did not fit.  This new table will be assigned the specified values for x, y, height and width.</remarks>
             <example>The following example shows you how to use the GetOverflowColumns method to allow tables of variable length to flow onto new pages as needed.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
            
                     Dim MyTable As Table = New Table(0, 0, 500, 50)
            
                     ' Create some number of columns
                     Dim Cols As Integer = 50
                     Dim Int As Integer
                     For Int = 0 To Cols
                         MyTable.Columns.Add(100)
                     Next
            
                     ' Create your rows to fill in
                     Dim MyRow1 As Row = MyTable.Rows.Add(20)
                     Dim MyRow2 As Row = MyTable.Rows.Add(20)
            
                     Dim J As Integer
                     For J = 1 To Cols
                         MyRow1.Cells.Add("Column #" &amp; J)
                         MyRow2.Cells.Add("Item")
                     Next
            
                     Do
                         Dim MyPage As Page = New Page
                         MyDocument.Pages.Add(MyPage)
                         MyPage.Elements.Add(MyTable)
                         MyTable = MyTable.GetOverflowColumns(50, 50, 250, 50)
                     Loop While Not (MyTable Is Nothing)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
             
                     Table table = new Table( 0, 0, 500, 50 );
            
                     // Create some number of columns
                     int cols = 50;
                     for( int i = 0; i &lt;= cols; i++ )
                     table.Columns.Add( 100 );
            			
                     // Create your rows to fill in
                     Row row1 = table.Rows.Add( 20 );
                     Row row2 = table.Rows.Add( 20 );
            
                     for( int j = 0; j &lt;= cols; j++ )
                     {
                         row1.Cells.Add( "Column #" + j );
                         row2.Cells.Add( "Item" );
                     }
            		
                     do
                     {
                         Page page = new Page();
                         document.Pages.Add( page );
                         page.Elements.Add( table );
                         table = table.GetOverflowColumns( 50, 50, 250, 50 );
                     } while ( table != null );
            		
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table.GetVisibleWidth">
            <summary>
            Returns the width of the table that will be seen on the page.
            </summary>
            <returns>The width of all visible text of the table. </returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table.GetVisibleHeight">
            <summary>
            Returns the height of the table that will be seen on the page.
            </summary>
            <returns>The height of all visible text of the table.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table.GetRequiredWidth">
            <summary>
            Returns the width required to horizontally fit the entire table (all the columns) on the page.
            </summary>
            <returns>The width to fit the entire table on the page horizontally.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table.GetRequiredHeight">
            <summary>
            Returns the height required to vertically fit the entire table on the page.
            </summary>
            <returns>The height to fit the entire table on the page vertically.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table.HasOverflowRows">
            <summary>
            Returns a value indicating if there are rows remaining that will not be drawn to the table.
            </summary>
            <returns>Value indication whether or not overflow rows exists.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table.HasOverflowColumns">
            <summary>
            Returns a value indicating if there are columns remaining that will not be drawn to the table.
            </summary>
            <returns>Value indication whether or not overflow columns exists.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table.GetVisibleRowCount">
            <summary>
            Returns the number of rows that will be displayed in the current table.
            </summary>
            <returns>The number are rows that will display.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table.GetVisibleColumnCount">
            <summary>
            Returns the number of columns that will be displayed in the current table.
            </summary>
            <returns>The number are columns that will display.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table.DrawRotated(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the table to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the table's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Table.X">
            <summary>
            Gets or sets the x coordinate of the table.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Table.Y">
            <summary>
            Gets or sets the y coordinate of the table.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Table.Width">
            <summary>
            Gets or sets the width of the table.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Table.Height">
            <summary>
            Gets or sets the height of the table.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Table.Rows">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.RowList"/> object contained in the table.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Table.Columns">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.ColumnList"/> object contained in the table.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Table.Font">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Table.Font"/> object to use for the table.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Table.FontSize">
            <summary>
            Gets or sets the font size of the text in the table.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Table.TextColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the text of the table.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Table.BackgroundColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the background of the table.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Table.Align">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.TextAlign"/> enumeration to use for the horizontal alignment of the text in the table.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Table.VAlign">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Table.VAlign"/> enumeration to use for the vertical alignment of the text in the table.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Table.Padding">
            <summary>
            Gets or sets the padding of the cells in the table.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Table.RepeatRowHeaderCount">
            <summary>
            Gets or sets the number of columns that will be repeated as the row header.  This number is only considered if RepeatColumnHeader is set to true.  This is set to 0 by default.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Table.RepeatColumnHeaderCount">
            <summary>
            Gets or sets the number of initial rows in the table that should also be drawn as the first rows on all subsequent row overflow tables.  This is set to 0 by default.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Table.BorderWidth">
            <summary>
            Gets or sets the width of the border on the table.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Table.BorderColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the borders of the table.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Table2">
             <summary>
             Represents a table with rows, columns and cells.
             </summary>
             <remarks>This class can be used to create tables.  A table must contain at least one Column and one Row with at least one 
             Cell in that Row.  Formatting of each cell in the table is done in a hierarchical manner in that a Cell's formatting take 
             precedent over a Row's formatting which in term takes precedent over a Column's formatting which in term takes precedent 
             over a Table's formatting . Using the AdvancedTables GetOverflowColumns and GetOverflowRows methods you can allow your table to easily 
             flow onto other pages.   See the <a href="Tables.html">Tables</a> topic for more on tables.</remarks>
             <example>The following example will display a simple table on the page.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             		
                     ' Create a table 
                     Dim MyTable As Table2 = New Table2(0, 0, 600, 600)
             		
                     ' Add columns to the table
                     Column2 column1 = MyTable.Columns.Add(150)
                     column1.CellDefault.Align = TextAlign.Center
                     MyTable.Columns.Add(90)
                     MyTable.Columns.Add(90)
                     MyTable.Columns.Add(90)
             		
                     ' Add rows to the table and add cells to the rows
                     Dim row1 As Row2 = MyTable.Rows.Add(40, ceTe.DynamicPDF.Font.HelveticaBold, _
             			16, Grayscale.Black, Grayscale.Gray)
                     row1.CellDefault.Align = TextAlign.Center
                     row1.CellDefault.VAlign = VAlign.Center
                     row1.Cells.Add("Header 1")
                     row1.Cells.Add("Header 2")
                     row1.Cells.Add("Header 3")
                     row1.Cells.Add("Header 4")
             		
                     Dim row2 As Row2 = MyTable.Rows.Add(30)
                     Dim cell1 As Cell2 = row2.Cells.Add("Rowheader 1", Font.HelveticaBold, 16, _
             			Grayscale.Black, Grayscale.Gray, 1)
                     cell1.Align = TextAlign.Center
                     cell1.VAlign = VAlign.Center
                     row2.Cells.Add("Item 1")
                     row2.Cells.Add("Item 2")
                     row2.Cells.Add("Item 3")
             		
                     Dim row3 As Row2 = MyTable.Rows.Add(30)
                     Dim cell2 As Cell2 = row3.Cells.Add("Rowheader 2", Font.HelveticaBold, 16, _
             			Grayscale.Black, Grayscale.Gray, 1)
                     cell2.Align = TextAlign.Center
                     cell2.VAlign = VAlign.Center
                     row3.Cells.Add("Item 4")
                     row3.Cells.Add("Item 5")
                     row3.Cells.Add("Item 6")
             		
                     MyTable.CellDefault.Padding.Value = 5.0f 
                     MyTable.CellSpacing = 5.0f
                     MyTable.Border.Top.Color = RgbColor.Blue
                     MyTable.Border.Bottom.Color = RgbColor.Blue
                     MyTable.Border.Top.Width = 2
                     MyTable.Border.Bottom.Width = 2
                     MyTable.Border.Left.LineStyle = LineStyle.None;     
                     MyTable.Border.Right.LineStyle = LineStyle.None
             
                     ' Add the table to the page
                     MyPage.Elements.Add(MyTable)
             		
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
             				
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             					 	
                     // Create a table 
                     Table2 table = new Table2(0, 0, 600, 600);
             					 	
                     //Add columns to the table
                     Column2 column1 = table.Columns.Add(150);
                     column1.CellDefault.Align = TextAlign.Center;
                     table.Columns.Add( 90 );
                     table.Columns.Add( 90 );
                     table.Columns.Add( 90 );
             					 	
                     // Add rows to the table and add cells to the rows
                     Row2 row1 = table.Rows.Add( 40, Font.HelveticaBold, 16, Grayscale.Black, 
             			Grayscale.Gray );
                     row1.CellDefault.Align = TextAlign.Center;
                     row1.CellDefault.VAlign = VAlign.Center;
                     row1.Cells.Add( "Header 1" );
                     row1.Cells.Add( "Header 2" );
                     row1.Cells.Add( "Header 3" );
                     row1.Cells.Add( "Header 4" );
             					 	
                     Row2 row2 = table.Rows.Add( 30 );
                     Cell2 cell1 = row2.Cells.Add( "Rowheader 1", Font.HelveticaBold, 16, 
             			Grayscale.Black, Grayscale.Gray, 1 );
                     cell1.Align = TextAlign.Center;
                     cell1.VAlign = VAlign.Center;
                     row2.Cells.Add( "Item 1" );
                     row2.Cells.Add( "Item 2" );
                     row2.Cells.Add( "Item 3" );
             					 			
                     Row2 row3 = table.Rows.Add( 30 );
                     Cell2 cell2 = row3.Cells.Add( "Rowheader 2", Font.HelveticaBold, 16, 
             			Grayscale.Black, Grayscale.Gray, 1 );
                     cell2.Align = TextAlign.Center;
                     cell2.VAlign = VAlign.Center;
                     row3.Cells.Add( "Item 4" );
                     row3.Cells.Add( "Item 5" );
                     row3.Cells.Add( "Item 6" );
             		
                     table.CellDefault.Padding.Value = 5.0f;           
                     table.CellSpacing = 5.0f;
                     table.Border.Top.Color = RgbColor.Blue;
                     table.Border.Bottom.Color = RgbColor.Blue;
                     table.Border.Top.Width = 2;
                     table.Border.Bottom.Width = 2;
                     table.Border.Left.LineStyle = LineStyle.None;
                     table.Border.Right.LineStyle = LineStyle.None;            
            
                     // Add the table to the page
                     page.Elements.Add( table );	
             					 	
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             } 
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Professional Edition</item>
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Professional Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Professional Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table2.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Table2"/> class.
            </summary>
            <param name="x">X coordinate of the table.</param>
            <param name="y">Y coordinate of the table.</param>
            <param name="width">Width of the table.</param>
            <param name="height">Height of the table.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table2.#ctor(System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Nullable{System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Table2"/> class.
            </summary>
            <param name="x">X coordinate of the table.</param>
            <param name="y">Y coordinate of the table.</param>
            <param name="width">Width of the table.</param>
            <param name="height">Height of the table.</param>
            <param name="font">Font for the text in the table.</param>
            <param name="fontSize">Font size for the text in the table.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table2.#ctor(System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Nullable{System.Single},ceTe.DynamicPDF.Color,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Table2"/> class.
            </summary>
            <param name="x">X coordinate of the table.</param>
            <param name="y">Y coordinate of the table.</param>
            <param name="width">Width of the table.</param>
            <param name="height">Height of the table.</param>
            <param name="font">Font for the text in the table.</param>
            <param name="fontSize">Font size for the text in the table.</param>
            <param name="textColor">Color of the text in the table.</param>
            <param name="backColor">Background color of the table.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table2.GetOverflowRows">
             <summary>
             Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Table2"/> object containing the overflow rows.
             </summary>
             <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Table2"/> object.</returns>
             <remarks>This method returns a new <b>Table2</b> object that contains the remaining rows that did not fit.</remarks>
             <example>The following example shows you how to use the GetOverflowRows method to allow tables of variable length to flow onto new pages as needed.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
            
                     Dim MyTable As Table2 = New Table2(0, 0, 200, 700)
            
                     MyTable.Columns.Add(100)
                     MyTable.Columns.Add(100)
            
                     ' This loop populates the table
                     Dim I As Integer
                     For I = 1 To 400
                         Dim MyRow As Row2 = MyTable.Rows.Add(20)
                         MyRow.Cells.Add("Row #" &amp; I)
                         MyRow.Cells.Add("Item")
                     Next
            			
                     Do
                         Dim MyPage As Page = New Page
                         MyDocument.Pages.Add(MyPage)
                         MyPage.Elements.Add(MyTable)
                         MyTable = MyTable.GetOverflowRows()
                     Loop While Not (MyTable Is Nothing)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
             		
                     Table2 table = new Table2( 0, 0, 200, 700 );
            
                     table.Columns.Add( 100 );
                     table.Columns.Add( 100 );
            
                     // This loop populates the table 
                     for ( int i = 1; i &lt;= 400; i++ )
                     {
                         Row2 row = table.Rows.Add( 20 );
                         row.Cells.Add( "Row #" + i );
                         row.Cells.Add( "Item" );
                     }
            
                     do
                     {
                         Page page = new Page();
                         document.Pages.Add( page );
                         page.Elements.Add( table );
                         table = table.GetOverflowRows();
                     } while ( table != null );
            	
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table2.GetOverflowRows(System.Single,System.Single)">
             <summary>
             Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Table2"/> object containing the overflow rows.
             </summary>
             <param name="x">X coordinate of the new table.</param>
             <param name="y">Y coordinate of the new table.</param>
             <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Table2"/> object.</returns>
             <remarks>This method returns a new <b>Table2</b> object that contains the remaining rows that did not fit.  This new table will be assigned the specified values for x and y.</remarks>
             <example>The following example shows you how to use the GetOverflowRows method to allow tables of variable length to flow onto new pages as needed.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
            
                     Dim MyTable As Table2 = New Table2(0, 0, 200, 700)
            
                     MyTable.Columns.Add(100)
                     MyTable.Columns.Add(100)
            
                     ' This loop populates the table
                     Dim I As Integer
                     For I = 1 To 400
                         Dim MyRow As Row2 = MyTable.Rows.Add(20)
                         MyRow.Cells.Add("Row #" &amp; I)
                         MyRow.Cells.Add("Item")
                     Next
            			
                     Do
                         Dim MyPage As Page = New Page
                         MyDocument.Pages.Add(MyPage)
                         MyPage.Elements.Add(MyTable)
                         MyTable = MyTable.GetOverflowRows(30, 30)
                     Loop While Not (MyTable Is Nothing)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
             		
                     Table2 table = new Table2( 0, 0, 200, 700 );
            
                     table.Columns.Add( 100 );
                     table.Columns.Add( 100 );
            
                     // This loop populates the table 
                     for ( int i = 1; i &lt;= 400; i++ )
                     {
                         Row2 row = table.Rows.Add( 20 );
                         row.Cells.Add( "Row #" + i );
                         row.Cells.Add( "Item" );
                     }
            
                     do
                     {
                         Page page = new Page();
                         document.Pages.Add( page );
                         page.Elements.Add( table );
                         table = table.GetOverflowRows( 30, 30 );
                     } while ( table != null );
            	
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table2.GetOverflowRows(System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Table2"/> object containing the overflow rows.
             </summary>
             <param name="x">X coordinate of the new table.</param>
             <param name="y">Y coordinate of the new table.</param>
             <param name="width">Width of the new table.</param>
             <param name="height">Height of the new table.</param>
             <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Table2"/> object.</returns>
             <remarks>This method returns a new <b>Table2</b> object that contains the remaining rows that did not fit.  This new table will be assigned the specified values for x, y, height and width.</remarks>
             <example>The following example shows you how to use the GetOverflowRows method to allow tables of variable length to flow onto new pages as needed.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
            
                     Dim MyTable As Table2 = New Table2(0, 0, 200, 700)
            
                     MyTable.Columns.Add(100)
                     MyTable.Columns.Add(100)
            
                     ' This loop populates the table
                     Dim I As Integer
                     For I = 1 To 400
                         Dim MyRow As Row2 = MyTable.Rows.Add(20)
                         MyRow.Cells.Add("Row #" &amp; I)
                         MyRow.Cells.Add("Item")
                     Next
            			
                     Do
                         Dim MyPage As Page = New Page
                         MyDocument.Pages.Add(MyPage)
                         MyPage.Elements.Add(MyTable)
                         MyTable = MyTable.GetOverflowRows(50, 50, 200, 350)
                     Loop While Not (MyTable Is Nothing)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
             		
                     Table2 table = new Table2( 0, 0, 200, 700 );
            
                     table.Columns.Add( 100 );
                     table.Columns.Add( 100 );
            
                     // This loop populates the table 
                     for ( int i = 1; i &lt;= 400; i++ )
                     {
                         Row2 row = table.Rows.Add( 20 );
                         row.Cells.Add( "Row #" + i );
                         row.Cells.Add( "Item" );
                     }
            
                     do
                     {
                         Page page = new Page();
                         document.Pages.Add( page );
                         page.Elements.Add( table );
                         table = table.GetOverflowRows( 50, 50, 200, 350 );
                     } while ( table != null );
            	
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table2.GetOverflowColumns">
             <summary>
             Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Table2"/> object containing the overflow columns.
             </summary>
             <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Table2"/> object.</returns>
             <remarks>This method returns a new <b>Table2</b> object that contains the remaining columns that did not fit.</remarks>
             <example>The following example shows you how to use the GetOverflowColumns method to allow tables of variable length to flow onto new pages as needed.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
            
                     Dim MyTable As Table2 = New Table2(0, 0, 500, 50)
            
                     ' Create some number of columns
                     Dim ColumnCount As Integer = 50
                     Dim Int As Integer
                     For Int = 0 To ColumnCount
                         MyTable.Columns.Add(100)
                     Next
            
                     ' Create your rows to fill in
                     Dim MyRow1 As Row2 = MyTable.Rows.Add(20)
                     Dim MyRow2 As Row2 = MyTable.Rows.Add(20)
            
                     Dim J As Integer
                     For J = 1 To ColumnCount
                         MyRow1.Cells.Add("Column #" &amp; J)
                         MyRow2.Cells.Add("Item")
                     Next
            
                     Do
                         Dim MyPage As Page = New Page
                         MyDocument.Pages.Add(MyPage)
                         MyPage.Elements.Add(MyTable)
                         MyTable = MyTable.GetOverflowColumns()
                     Loop While Not (MyTable Is Nothing)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
             
                     Table2 table = new Table2( 0, 0, 500, 50 );
            
                     // Create some number of columns
                     int columnCount = 50;
                     for( int i = 0; i &lt;= columnCount; i++ )
                         table.Columns.Add( 100 );
            			
                     // Create your rows to fill in
                     Row2 row1 = table.Rows.Add( 20 );
                     Row2 row2 = table.Rows.Add( 20 );
            
                     for( int j = 0; j &lt;= columnCount; j++ )
                     {
                         row1.Cells.Add( "Column #" + j );
                         row2.Cells.Add( "Item" );
                     }
            		
                     do
                     {
                         Page page = new Page();
                         document.Pages.Add( page );
                         page.Elements.Add( table );
                         table = table.GetOverflowColumns();
                     } while ( table != null );
            		
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table2.GetOverflowColumns(System.Single,System.Single)">
             <summary>
             Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Table2"/> object containing the overflow columns.
             </summary>
             <param name="x">X coordinate of the new table.</param>
             <param name="y">Y coordinate of the new table.</param>
             <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Table2"/> object.</returns>
             <remarks>This method returns a new <b>Table2</b> object that contains the remaining columns that did not fit.  This new table will be assigned the specified values for x and y.</remarks>
             <example>The following example shows you how to use the GetOverflowColumns method to allow tables of variable length to flow onto new pages as needed.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
            
                     Dim MyTable As Table2 = New Table2(0, 0, 500, 50)
            
                     ' Create some number of columns
                     Dim ColumnCount As Integer = 50
                     Dim Int As Integer
                     For Int = 0 To ColumnCount
                         MyTable.Columns.Add(100)
                     Next
            
                     ' Create your rows to fill in
                     Dim MyRow1 As Row2 = MyTable.Rows.Add(20)
                     Dim MyRow2 As Row2 = MyTable.Rows.Add(20)
            
                     Dim J As Integer
                     For J = 1 To ColumnCount
                         MyRow1.Cells.Add("Column #" &amp; J)
                         MyRow2.Cells.Add("Item")
                     Next
            
                     Do
                         Dim MyPage As Page = New Page
                         MyDocument.Pages.Add(MyPage)
                         MyPage.Elements.Add(MyTable)
                         MyTable = MyTable.GetOverflowColumns(50, 50)
                     Loop While Not (MyTable Is Nothing)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
             
                     Table2 table = new Table2( 0, 0, 500, 50 );
            
                     // Create some number of columns
                     int columnCount = 50;
                     for( int i = 0; i &lt;= columnCount; i++ )
                         table.Columns.Add( 100 );
            			
                     // Create your rows to fill in
                     Row2 row1 = table.Rows.Add( 20 );
                     Row2 row2 = table.Rows.Add( 20 );
            
                     for( int j = 0; j &lt;= columnCount; j++ )
                     {
                         row1.Cells.Add( "Column #" + j );
                         row2.Cells.Add( "Item" );
                     }
            		
                     do
                     {
                         Page page = new Page();
                         document.Pages.Add( page );
                         page.Elements.Add( table );
                         table = table.GetOverflowColumns( 50, 50 );
                     } while ( table != null );
            		
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table2.GetOverflowColumns(System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Table2"/> object containing the overflow columns.
             </summary>
             <param name="x">X coordinate of the new table.</param>
             <param name="y">Y coordinate of the new table.</param>
             <param name="width">Width of the new table.</param>
             <param name="height">Height of the new table.</param>
             <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Table2"/> object.</returns>
             <remarks>This method returns a new <b>Table2</b> object that contains the remaining columns that did not fit.  This new table will be assigned the specified values for x, y, height and width.</remarks>
             <example>The following example shows you how to use the GetOverflowColumns method to allow tables of variable length to flow onto new pages as needed.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
            
                     Dim MyTable As Table2 = New Table2(0, 0, 500, 50)
            
                     ' Create some number of columns
                     Dim ColumnCount As Integer = 50
                     Dim Int As Integer
                     For Int = 0 To ColumnCount
                         MyTable.Columns.Add(100)
                     Next
            
                     ' Create your rows to fill in
                     Dim MyRow1 As Row2 = MyTable.Rows.Add(20)
                     Dim MyRow2 As Row2 = MyTable.Rows.Add(20)
            
                     Dim J As Integer
                     For J = 1 To ColumnCount
                         MyRow1.Cells.Add("Column #" &amp; J)
                         MyRow2.Cells.Add("Item")
                     Next
            
                     Do
                         Dim MyPage As Page = New Page
                         MyDocument.Pages.Add(MyPage)
                         MyPage.Elements.Add(MyTable)
                         MyTable = MyTable.GetOverflowColumns(50, 50, 250, 50)
                     Loop While Not (MyTable Is Nothing)
            
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
             
                     Table2 table = new Table2( 0, 0, 500, 50 );
            
                     // Create some number of columns
                     int columnCount = 50;
                     for( int i = 0; i &lt;= columnCount; i++ )
                     table.Columns.Add( 100 );
            			
                     // Create your rows to fill in
                     Row2 row1 = table.Rows.Add( 20 );
                     Row2 row2 = table.Rows.Add( 20 );
            
                     for( int j = 0; j &lt;= columnCount; j++ )
                     {
                         row1.Cells.Add( "Column #" + j );
                         row2.Cells.Add( "Item" );
                     }
            		
                     do
                     {
                         Page page = new Page();
                         document.Pages.Add( page );
                         page.Elements.Add( table );
                         table = table.GetOverflowColumns( 50, 50, 250, 50 );
                     } while ( table != null );
            		
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table2.GetVisibleWidth">
            <summary>
            Returns the width of the table that will be seen on the page.
            </summary>
            <returns>The width of all visible text of the table. </returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table2.GetVisibleHeight">
            <summary>
            Returns the height of the table that will be seen on the page.
            </summary>
            <returns>The height of all visible text of the table.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table2.GetRequiredWidth">
            <summary>
            Returns the width required to horizontally fit the entire table (all the columns) on the page.
            </summary>
            <returns>The width to fit the entire table on the page horizontally.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table2.GetRequiredHeight">
            <summary>
            Returns the height required to vertically fit the entire table on the page.
            </summary>
            <returns>The height to fit the entire table on the page vertically.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table2.HasOverflowRows">
            <summary>
            Returns a value indicating if there are rows remaining that will not be drawn to the table.
            </summary>
            <returns>Value indication whether or not overflow rows exists.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table2.HasOverflowColumns">
            <summary>
            Returns a value indicating if there are columns remaining that will not be drawn to the table.
            </summary>
            <returns>Value indication whether or not overflow columns exists.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table2.GetVisibleRowCount">
            <summary>
            Returns the number of rows that will be displayed in the current table.
            </summary>
            <returns>The number are rows that will display.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table2.GetVisibleColumnCount">
            <summary>
            Returns the number of columns that will be displayed in the current table.
            </summary>
            <returns>The number are columns that will display.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table2.DrawRotated(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the table to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the table's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Table2.Width">
            <summary>
            Gets or sets the width of the table.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Table2.Height">
            <summary>
            Gets or sets the height of the table.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Table2.Rows">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Row2List"/> object contained in the table.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Table2.Columns">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Column2List"/> object contained in the table.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Table2.CellDefault">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.PageElements.Table2.CellDefault"/> object of the cells in the table.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Table2.RepeatRowHeaderCount">
            <summary>
            Gets or sets the number of columns that will be repeated as the row header.  This number is only considered if RepeatColumnHeader is set to true.  This is set to 1 by default.
            </summary>        
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Table2.RepeatColumnHeaderCount">
            <summary>
            Gets or sets the number of initial rows in the table that should also be drawn as the first rows on all subsequent row overflow tables.  This is set to 0 by default.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Table2.CellSpacing">
            <summary>
            Gets or sets the cellspacing for the cells in the table.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Table2.Border">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.PageElements.Table2.Border"/> object to use for the border of the table.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Table2.BackgroundColor">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the background of the table.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.TableException">
            <summary>
            The exception that is thrown for a Table page element error.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.TableException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.TableException"/> class.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the error.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.TextArea">
             <summary>
             Represents an area of text.
             </summary>
             <remarks>This class can be used to place text on a page.  Using the methods GetOverflowText or GetOverflowTextArea and HasOverflowText, 
             users can control the pagination of TextAreas that come from a source of unknown length.  See the <a href="Text Continuation.html">Text Continuation</a> topic for more on text continuation.</remarks>
             <example>The following example will display text on the page.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a text area
                     Dim MyTextArea As TextArea = New TextArea("This is the " + "underlined text of a TextArea", 100, 100, 400, 30, _
             			ceTe.DynamicPDF.Font.HelveticaBoldOblique, 18)
             
                     ' Change the underline property to true
                     MyTextArea.Underline = True
             
                     ' Add the text to the page
                     MyPage.Elements.Add(MyTextArea)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             		
                     // Create a text area
                     TextArea textArea = new TextArea( "This is the underlined " + "text of a TextArea", 100, 100, 400, 30, 
             			ceTe.DynamicPDF.Font.HelveticaBoldOblique, 18 );
             
                     // Change the underline property to true
                     textArea.Underline = true;
             
                     // Add the text area to the page
                     page.Elements.Add( textArea );	
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Professional Edition</item>
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Professional Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Professional Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.TextArea.#ctor(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.TextArea"/> class.
            </summary>
            <param name="text">Text to display in the text area.</param>
            <param name="x">X coordinate of the text area.</param>
            <param name="y">Y coordinate of the text area.</param>
            <param name="width">Width of the text area.</param>
            <param name="height">Height of the text area.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.TextArea.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.TextArea"/> class.
            </summary>
            <param name="text">Text to display in the text area.</param>
            <param name="x">X coordinate of the text area.</param>
            <param name="y">Y coordinate of the text area.</param>
            <param name="width">Width of the text area.</param>
            <param name="height">Height of the text area.</param>
            <param name="font">Font for the text of the text area.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.TextArea.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.TextArea"/> class.
            </summary>
            <param name="text">Text to display in the text area.</param>
            <param name="x">X coordinate of the text area.</param>
            <param name="y">Y coordinate of the text area.</param>
            <param name="width">Width of the text area.</param>
            <param name="height">Height of the text area.</param>
            <param name="font">Font for the text of the text area.</param>
            <param name="fontSize">Font size of the text of the text area.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.TextArea.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.TextAlign)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.TextArea"/> class.
            </summary>
            <param name="text">Text to display in the text area.</param>
            <param name="x">X coordinate of the text area.</param>
            <param name="y">Y coordinate of the text area.</param>
            <param name="width">Width of the text area.</param>
            <param name="height">Height of the text area.</param>
            <param name="font">Font for the text of the text area.</param>
            <param name="fontSize">Font size of the text of the text area.</param>
            <param name="align">Alignment of the text of the text area.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.TextArea.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.TextArea"/> class.
            </summary>
            <param name="text">Text to display in the text area.</param>
            <param name="x">X coordinate of the text area.</param>
            <param name="y">Y coordinate of the text area.</param>
            <param name="width">Width of the text area.</param>
            <param name="height">Height of the text area.</param>
            <param name="font">Font for the text of the text area.</param>
            <param name="fontSize">Font size of the text of the text area.</param>
            <param name="textColor">Color of the text of the text area.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.TextArea.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.TextAlign,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.TextArea"/> class.
            </summary>
            <param name="text">Text to display in the text area.</param>
            <param name="x">X coordinate of the text area.</param>
            <param name="y">Y coordinate of the text area.</param>
            <param name="width">Width of the text area.</param>
            <param name="height">Height of the text area.</param>
            <param name="font">Font for the text of the text area.</param>
            <param name="fontSize">Font size of the text of the text area.</param>
            <param name="align">Alignment of the text of the text area.</param>
            <param name="textColor">Color of the text of the text area.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.TextArea.DrawRotated(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the text area to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the text area's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.TextArea.GetRequiredHeight">
            <summary>
            Returns the height required to fit all of the text supplied.
            </summary>
            <returns>The required height to display all text.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.TextArea.GetTextHeight">
            <summary>
            Returns the height of the text that will be drawn.
            </summary>
            <returns>The height of visible text.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.TextArea.GetOverflowText">
            <summary>
            Returns the text remaining that will be clipped by the text area.
            </summary>
            <returns>The overflow text as a <b>string</b>.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.TextArea.GetOverflowTextArea">
             <summary>
             Returns a <b>TextArea</b> object containing the overflow text.
             </summary>
             <returns>Returns a <b>TextArea</b> object.</returns>
             <remarks>This method returns a new <b>TextArea</b> object that contains the remaining text that did not fit.</remarks>
             <example>The following example shows you how to use the GetOverflowTextArea object to allow text of variable length to flow onto new pages as needed.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
            
                     ' Create a string and assign it to text of variable length
                     Dim myVariableText As String = ""
                     Dim i As Integer
                     For i = 0 To 50
                         myVariableText &amp;= "This is a sentence that I will use as my variable length text.  "
                     Next
                     ' Create a text area
                     Dim MyTextArea As TextArea = New TextArea(myVariableText, 0, 0, 250, 200)
                     Do
                         ' Create a new page
                         Dim MyPage As Page = New Page
             
                         ' Add the text area to the page;
                         MyPage.Elements.Add(MyTextArea)
             
                         ' Add the page to the document
                         MyDocument.Pages.Add(MyPage)
             
                         ' Set the text area object equal to the rest of the text that did not fit
                         ' if all the text fit this will set textArea to null
                         MyTextArea = MyTextArea.GetOverflowTextArea()
                     Loop While Not MyTextArea Is Nothing
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf") 
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
             
                     // Create a string and assign it to text of variable length
                     string variableText = "";
                     for( int i = 0; i &lt; 50; i++ )
                         variableText += "This is a sentence that I will use as my variable length text.  ";
             
                     // Create a text area
                     TextArea textArea = new TextArea( variableText, 0, 0, 250, 200 ); 
             	
                     do
                     {
                         // Create a new page
                         Page page = new Page();
             
                         // Add the text area to the page;
                         page.Elements.Add( textArea );
             
                         // Add the page to the document
                         document.Pages.Add( page );
             
                         // Set the text area object equal to the rest of the text that did not fit
                         // if all the text did fit, GetOverflowTextArea will return null
                         textArea = textArea.GetOverflowTextArea();
                     } while( textArea != null );
             	
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.TextArea.GetOverflowTextArea(System.Single,System.Single)">
             <summary>
             Returns a <b>TextArea</b> object containing the overflow text.
             </summary>
             <param name="x">X coordinate of the new text area.</param>
             <param name="y">Y coordinate of the new text area.</param>
             <returns>Returns a <b>TextArea</b> object.</returns>
             <remarks>This method returns a new <b>TextArea</b> object that contains the remaining text that did not fit.</remarks>
             <example>The following example shows you how to use the GetOverflowTextArea object to allow text of variable length to flow onto new pages as needed.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
            
                     ' Create a string and assign it to text of variable length
                     Dim myVariableText As String = ""
                     Dim i As Integer
                     For i = 0 To 50
                         myVariableText &amp;= "This is a sentence that I will use as my variable length text.  "
                     Next
                     ' Create a text area
                     Dim MyTextArea As TextArea = New TextArea(myVariableText, 0, 0, 250, 200)
                     Do
                         ' Create a new page
                         Dim MyPage As Page = New Page
             
                         ' Add the text area to the page;
                         MyPage.Elements.Add(MyTextArea)
             
                         ' Add the page to the document
                         MyDocument.Pages.Add(MyPage)
             
                         ' Set the text area object equal to the rest of the text that did not fit
                         ' if all the text fit this will set textArea to null
                         MyTextArea = MyTextArea.GetOverflowTextArea(50, 50)
                     Loop While Not MyTextArea Is Nothing
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf") 
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
             
                     // Create a string and assign it to text of variable length
                     string variableText = "";
                     for( int i = 0; i &lt; 50; i++ )
                     variableText += "This is a sentence that I will use as my variable length text.  ";
             
                     // Create a text area
                     TextArea textArea = new TextArea( variableText, 0, 0, 250, 200 ); 
             	
                     do
                     {
                         // Create a new page
                         Page page = new Page();
             
                         // Add the text area to the page;
                         page.Elements.Add( textArea );
             
                         // Add the page to the document
                         document.Pages.Add( page );
             
                         // Set the text area object equal to the rest of the text that did not fit
                         // if all the text did fit, GetOverflowTextArea will return null
                         textArea = textArea.GetOverflowTextArea( 50, 50 );
                     } while( textArea != null );
             	
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.TextArea.GetOverflowTextArea(System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Returns a <b>TextArea</b> object containing the overflow text.
             </summary>
             <param name="x">X coordinate of the new text area.</param>
             <param name="y">Y coordinate of the new text area.</param>
             <param name="width">Width of the new text area.</param>
             <param name="height">Height of the new text area.</param>
             <returns>Returns a <b>TextArea</b> object.</returns>
             <remarks>This method returns a new <b>TextArea</b> object that contains the remaining text that did not fit.</remarks>
             <example>The following example shows you how to use the GetOverflowTextArea object to allow text of variable length to flow onto new pages as needed.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
            
                     ' Create a string and assign it to text of variable length
                     Dim myVariableText As String = ""
                     Dim i As Integer
                     For i = 0 To 50
                         myVariableText &amp;= "This is a sentence that I will use as my variable length text.  "
                     Next
                     ' Create a text area
                     Dim MyTextArea As TextArea = New TextArea(myVariableText, 0, 0, 250, 200)
                     Do
                         ' Create a new page
                         Dim MyPage As Page = New Page
             
                         ' Add the text area to the page;
                         MyPage.Elements.Add(MyTextArea)
             
                         ' Add the page to the document
                         MyDocument.Pages.Add(MyPage)
             
                         ' Set the text area object equal to the rest of the text that did not fit
                         ' if all the text fit this will set textArea to null
                         MyTextArea = MyTextArea.GetOverflowTextArea(50, 50, 100,200)
                     Loop While Not MyTextArea Is Nothing
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf") 
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
             
                     // Create a string and assign it to text of variable length
                     string variableText = "";
                     for( int i = 0; i &lt; 50; i++ )
                     variableText += "This is a sentence that I will use as my variable length text.  ";
             
                     // Create a text area
                     TextArea textArea = new TextArea( variableText, 0, 0, 250, 200 ); 
             	
                     do
                     {
                         // Create a new page
                         Page page = new Page();
             
                         // Add the text area to the page;
                         page.Elements.Add( textArea );
             
                         // Add the page to the document
                         document.Pages.Add( page );
             
                         // Set the text area object equal to the rest of the text that did not fit
                         // if all the text did fit, GetOverflowTextArea will return null
                         textArea = textArea.GetOverflowTextArea( 50, 50, 100,200);
                     } while( textArea != null );
             	
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.TextArea.HasOverflowText">
            <summary>
            Returns a value indicating if there is text remaining that will not be drawn to the text area.
            </summary>
            <returns>Value indication whether or not overflow text exists.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.TextArea.GetKerningValues">
            <summary>
            Gets the Kerning values.
            </summary>
            <returns><see cref="T:ceTe.DynamicPDF.Text.KerningValues"/>The kerning values.</returns>
            <exception cref="T:ceTe.DynamicPDF.GeneratorException">If <see cref="P:ceTe.DynamicPDF.PageElements.TextArea.KerningEnabled"/> is set to false.</exception>
            <example>
                The following exmaple demonstrates how to apply custom kerning.
                <code lang="VB">
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.Text
            Imports ceTe.DynamicPDF.PageElements
             
            Module Module1
             
                Sub Main()
             
                    ' Create a PDF Document
                    Dim MyDocument As Document = New Document
             
                    ' Create a PDF Page
                    Dim MyPage As Page = New Page
             
                    ' Create a Texr Area
                    Dim MyTextArea As TextArea = New TextArea("Text with kerning", 10, 10, 200, 100)
             
                    ' Enable the kerning for the text area
                    MyTextArea.KerningEnabled = True
             
                    ' Get the Kerning Pairs for the text area
                    Dim MyKerningValues As KerningValues = MyTextArea.GetKerningValues
             
                    ' Apply a custom kerning value between 'T' &amp; 'e' in 'Text'
                    ' so that chars will be closer than normal
                    MyKerningValues.Spacing(0) = 200
             
                    ' Add the text area to the page
                    MyPage.Elements.Add(MyTextArea)
             
                    ' Add the page to the document
                    MyDocument.Pages.Add(MyPage)
             
                    
                    ' Save the document
                    MyDocument.Draw("C:\MyDocument.pdf")
             
                End Sub
             
            End Module
                </code>
            	<code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.Text;
            using ceTe.DynamicPDF.PageElements;
             
            class MyClass
            {
                static void Main(string[] args)
                {
                    // Create a PDF Document
                    Document document = new Document();
             
                    // Create a PDF Page
                    Page page = new Page();
             
                    // Create a Texr Area
                    TextArea textArea = new TextArea("Text with kerning", 10, 10, 200, 100);
             
                    // Enable the kerning for the text area
                    textArea.KerningEnabled = true;
             
                    // Get the Kerning Pairs for the text area
                    KerningValues kerningValues = textArea.GetKerningValues();
             
                    // Apply a custom kerning value between 'T' &amp; 'e' in 'Text'
                    // so that chars will be closer than normal
                    kerningValues.Spacing[0] = 200;
             
                    // Add the text area to the page
                    page.Elements.Add(textArea);
             
                    // Add the page to the document
                    document.Pages.Add(page);
             
                    // Save the document
                    document.Draw(@"C:\MyDocument.pdf");        
                }
            }
                </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.TextArea.GetVisibleLineCount">
            <summary>
            Returns the number of lines that will be displayed in the current textarea.
            </summary>
            <returns>The number are lines that will display.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.TextArea.GetLineTextWidth(System.Int32)">
            <summary>
            Returns the width of the given line index with kerning spaces.
            </summary>
            <param name="lineIndex">Line number of the textarea.</param>
            <returns>Width of the line with kerning spaces.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TextArea.Align">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.TextAlign"/> enumeration that specifies the text alignment of the text area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TextArea.VAlign">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.TextArea.VAlign"/> enumeration that specifies the vertical text alignment of the text area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TextArea.Underline">
            <summary>
            Gets or sets a value indicating if the text area is underlined.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TextArea.RightToLeft">
            <summary>
            Gets or sets a value indicating if text should be displayed right to left.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TextArea.Text">
            <summary>
            Gets or sets the text of the text area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TextArea.TextColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the text of the text area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TextArea.Font">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.TextArea.Font"/> object used to specify the font of the text for the text area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TextArea.FontSize">
            <summary>
            Gets or sets the font size for the text of the text area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TextArea.Leading">
            <summary>
            Gets or sets the leading for the text of the text area.
            </summary>
            <remarks>Setting this property will automatically set the <see cref="P:ceTe.DynamicPDF.PageElements.TextArea.AutoLeading"/> property to false.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TextArea.AutoLeading">
            <summary>
            Gets or sets a value indicating whether the leading of the text area should be calculated automatically.
            </summary>
            <remarks>This property is automatically set to false any time the <see cref="P:ceTe.DynamicPDF.PageElements.TextArea.Leading"/> property is set.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TextArea.ParagraphSpacing">
            <summary>
            Gets or sets the paragraph spacing for the paragraphs of the text area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TextArea.ParagraphIndent">
            <summary>
            Gets or sets the paragraph indenting for the paragraphs of the text area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TextArea.CleanParagraphBreaks">
            <summary>
            Gets or sets the clean paragraph breaks for the paragraphs of the text area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TextArea.Width">
            <summary>
            Gets or sets the width of the text area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TextArea.Height">
            <summary>
            Gets or sets the height of the text area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TextArea.KerningEnabled">
            <summary>
            Enable or disable the kerning property of the text.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.TransformationGroup">
             <summary>
             Represents a group of page elements to transform.
             </summary>
             <remarks>This class can be used to transform entire groups of page elements. Any page element that is placed in this group
             will be displayed with the transformation values and attributes of this group.</remarks>
             <example>The following example will display an image and some text that has been rotated and horizontally scaled as a group.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a transformation group and add a rectangle and a label to it
                     Dim MyGroup As TransformationGroup = New TransformationGroup(100, 100,200, 200, 30)
                     MyGroup.Add(New Rectangle(0, 0, 75, 75, RgbColor.Blue, RgbColor.Blue))
                     MyGroup.Add(New Label("This text is inside a TransformationGroup.", 0,100, 300, 12))
             
                     ' Vertically scale the group
                     MyGroup.ScaleY = 2
             
                     ' Add the transformation group to the page
                     MyPage.Elements.Add(MyGroup)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module	
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create a transformation group and add a rectangle and label to it
                     TransformationGroup group = new TransformationGroup( 100, 100, 200, 200, 30 );
                     group.Add( new Rectangle( 0, 0, 75, 75, RgbColor.Blue, RgbColor.Blue ) );
                     group.Add( new Label( "This text is inside a TransformationGroup.", 0, 100, 300, 12 ) );
             
                     // Vertically scale the group
                     group.ScaleY = 2;
             
                     // Add the transformation group to the page
                     page.Elements.Add( group );
             
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Professional Edition</item>
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Professional Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Professional Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.TransformationGroup.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.TransformationGroup"/> class.
            </summary>
            <param name="x">X coordinate of the transformation group.</param>
            <param name="y">Y coordinate of the transformation group.</param>
            <param name="width">Width of the transformation group.</param>
            <param name="height">Height of the transformation group.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.TransformationGroup.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.TransformationGroup"/> class.
            </summary>
            <param name="x">X coordinate of the transformation group.</param>
            <param name="y">Y coordinate of the transformation group.</param>
            <param name="width">Width of the transformation group.</param>
            <param name="height">Height of the transformation group.</param>
            <param name="angle">Angle of the transformation group in degrees.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.TransformationGroup.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the transformation group to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the transformation group's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TransformationGroup.Angle">
            <summary>
            Gets or sets the Angle of the transformation group.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TransformationGroup.ScaleX">
            <summary>
            Gets or sets the X scale of the transformation group.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TransformationGroup.ScaleY">
            <summary>
            Gets or sets the Y scale of the transformation group.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TransformationGroup.X">
            <summary>
            Gets or sets the X coordinate of the transformation group.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TransformationGroup.Y">
            <summary>
            Gets or sets the Y coordinate of the transformation group.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TransformationGroup.Width">
            <summary>
            Gets or sets the width of the transformation group.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TransformationGroup.Height">
            <summary>
            Gets or sets the height of the transformation group.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.TransparencyGroup">
             <summary>
             Represents a group of page elements that will have transparency.
             </summary>
             <remarks>This class can be used to add transparency to page elements. Any page element that is placed in this group
             will be displayed with the transparency values and attributes of this group.</remarks>
             <example>The following example will display text with a transparent rectangle over it.
             The text will be visible beneath the rectangle.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a transparency group and add a rectangle to it
                     Dim MyGroup As TransparencyGroup = New TransparencyGroup(0.5F)
                     MyGroup.Add(New Rectangle(50, 0, 100, 100, RgbColor.Red, RgbColor.Red))
             
                     ' Add a label to the page
                     MyPage.Elements.Add(New Label("This text is beneath the rectangle.", 0, 0, 200, 12))
             
                     'Add the transparency group to the page
                     MyPage.Elements.Add(MyGroup)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create a transparency group and add a rectangle to it
                     TransparencyGroup group = new TransparencyGroup( 0.5f );
                     group.Add( new Rectangle( 50, 0, 100, 100, RgbColor.Red, RgbColor.Red ) );
             
                     // Add a label to the page
                     page.Elements.Add( new Label( "This text is beneath the rectangle.", 0, 0, 200, 12 ) );
             
                     // Add the transparency group to the page
                     page.Elements.Add( group );
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Professional Edition</item>
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Professional Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Professional Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.TransparencyGroup.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.TransparencyGroup"/> class.
            </summary>
            <param name="alpha">Amount of transparency the group will have.</param>
            <remarks>An alpha value of 0 represents full transparency meaning the page elements will not be visible. An alpha value of 1
            means the page elements will have no transparency.</remarks>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.TransparencyGroup.#ctor(System.Single,ceTe.DynamicPDF.BlendMode)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.TransparencyGroup"/> class.
            </summary>
            <param name="alpha">Amount of transparency the group will have.</param>
            <param name="blendMode">Blend mode to use for the transparency group.</param>
            <remarks>An alpha value of 0 represents full transparency meaning the page elements will not be visible. An alpha value of 1
            means the page elements will have no transparency.</remarks>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.TransparencyGroup.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the transparency group to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the transparency group's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TransparencyGroup.StrokeAlpha">
            <summary>
            Gets or sets the stroke alpha value. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TransparencyGroup.FillAlpha">
            <summary>
            Gets or sets the fill alpha value. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TransparencyGroup.BlendMode">
            <summary>
            Gets or sets the blend mode value. 
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.UnorderedList">
             <summary>
             Represents the unordered list.
             </summary>
             <remarks>See the <a href="Lists.html">Lists</a> topic for more on unordered lists.
             <p/><b>NOTE:</b> This page element cannot be used within a table cell, or tranformation group.</remarks>
             <example>The following example shows a UnorderedList text being displayed on the page.<p/>
             <code lang="VB">
            	Imports System
            	Imports ceTe.DynamicPDF
            	Imports ceTe.DynamicPDF.PageElements
            
             Module MyModule
                 Sub Main()
              	   ' Create a PDF Document
                    Dim MyDocument As Document = New Document
            
                    ' Create a Page
                    Dim MyPage As Page = New Page
            
                    ' Create a OrderedList.
                    Dim list As UnorderedList = New UnorderedList(50, 50, 300, 500)
            
                    list.ListItemTopMargin = 5
                    list.ListItemBottomMargin = 5
                    list.TextColor = RgbColor.BlueViolet
            
                    ' Add ListItem to the List.
                    Dim item1 As ListItem = list.Items.Add("List item 1")
                    item1.Underline = True
                    Dim item2 As ListItem = list.Items.Add("List item 2")
                    item2.Underline = True
                    Dim item3 As ListItem = list.Items.Add("List item 3")
                    item3.Underline = True
                    Dim item4 As ListItem = list.Items.Add("List item 4")
                    item4.Underline = True
            
                    ' Add OrderedSubList under ListItem item1
                    Dim subList1 As UnorderedSubList = item1.SubLists.AddUnorderedSubList(UnorderedListStyle.Circle)
                    subList1.TextColor = RgbColor.HotPink
                    Dim item5 As ListItem = subList1.Items.Add("Sub-list item 1")
                    Dim item6 As ListItem = subList1.Items.Add("Sub-list item 2")
            
                    Dim subList2 As UnorderedSubList = item2.SubLists.AddUnorderedSubList(UnorderedListStyle.Square)
                    subList2.TextColor = RgbColor.DarkGoldenRod
                    Dim item7 As ListItem = subList2.Items.Add("Second level sub-list item 1")
                    Dim item8 As ListItem = subList2.Items.Add("Second level sub-list item 2")
            
                    Dim subList3 As UnorderedSubList = item3.SubLists.AddUnorderedSubList(UnorderedListStyle.Square)
                    subList3.TextColor = RgbColor.DarkGoldenRod
                    Dim item9 As ListItem = subList3.Items.Add("Second level sub-list item 1")
                    Dim item10 As ListItem = subList3.Items.Add("Second level sub-list item 2")
            
                    Dim subList4 As UnorderedSubList = item6.SubLists.AddUnorderedSubList(UnorderedListStyle.Circle)
                    subList4.TextColor = RgbColor.HotPink
                    Dim item11 As ListItem = subList4.Items.Add("Sub-list item 1")
                    Dim item12 As ListItem = subList4.Items.Add("Sub-list item 2")
            
                    Dim subList5 As UnorderedSubList = item7.SubLists.AddUnorderedSubList(UnorderedListStyle.Square)
                    subList5.TextColor = RgbColor.DarkGoldenRod
                    Dim item13 As ListItem = subList5.Items.Add("Second level sub-list item 1")
                    Dim item14 As ListItem = subList5.Items.Add("Second level sub-list item 2")
            
                    Dim subList6 As UnorderedSubList = item4.SubLists.AddUnorderedSubList(UnorderedListStyle.Square)
                    subList6.TextColor = RgbColor.DarkGoldenRod
                    Dim item15 As ListItem = subList6.Items.Add("Second level sub-list item 1")
                    Dim item16 As ListItem = subList6.Items.Add("Second level sub-list item 2")
            
                    Dim subList7 As UnorderedSubList = item5.SubLists.AddUnorderedSubList(UnorderedListStyle.Circle)
                    subList7.TextColor = RgbColor.HotPink
                    Dim item17 As ListItem = subList7.Items.Add("Sub-list item 1")
                    Dim item18 As ListItem = subList7.Items.Add("Sub-list item 2")
            
                    ' Add the OrderedList to the Page.
                    MyPage.Elements.Add(list)
            
                    'Add the Page to the Document.
                    MyDocument.Pages.Add(MyPage)
            
                    ' Save the PDF.
                    MyDocument.Draw("C:\MyDocument.pdf")
                 End Sub
            	End Module
             </code>
             <code lang="c#">
             using System;
            	using ceTe.DynamicPDF;
            	using ceTe.DynamicPDF.PageElements;
            
             class MyClass
             {
                 static void Main()
                 {
                	       Document document = new Document();
            
                        // Create a Page.
                        Page page = new Page();
            
                        // Create a UnorderedList.
                        UnorderedList list = new UnorderedList(50, 50, 300, 500);
            
                        list.ListItemTopMargin = 5;
                        list.ListItemBottomMargin = 5;
                        list.TextColor = RgbColor.BlueViolet;
            
                        // Add ListItem to the List.
                        ListItem item1 = list.Items.Add("List item 1");
                        item1.Underline = true;
                        ListItem item2 = list.Items.Add("List item 2");
                        item2.Underline = true;
                        ListItem item3 = list.Items.Add("List item 3");
                        item3.Underline = true;
                        ListItem item4 = list.Items.Add("List item 4");
                        item4.Underline = true;
            
                        // Add UnorderedSubList under ListItem item1
                        UnorderedSubList subList1 = item1.SubLists.AddUnorderedSubList(UnorderedListStyle.Circle);
                        subList1.TextColor = RgbColor.HotPink;
                        ListItem item5 = subList1.Items.Add("Sub-list item 1");
                        ListItem item6 = subList1.Items.Add("Sub-list item 2");
            
                        UnorderedSubList subList2 = item5.SubLists.AddUnorderedSubList(UnorderedListStyle.Square);
                        subList2.TextColor = RgbColor.DarkGoldenRod;
                        ListItem item7 = subList2.Items.Add("Second level sub-list item 1");
                        ListItem item8 = subList2.Items.Add("Second level sub-list item 2");
            
                        UnorderedSubList subList3 = item6.SubLists.AddUnorderedSubList(UnorderedListStyle.Square);
                        subList3.TextColor = RgbColor.DarkGoldenRod;
                        ListItem item9 = subList3.Items.Add("Second level sub-list item 1");
                        ListItem item10 = subList3.Items.Add("Second level sub-list item 2");
            
                        UnorderedSubList subList4 = item2.SubLists.AddUnorderedSubList(UnorderedListStyle.Circle);
                        subList4.TextColor = RgbColor.HotPink;
                        ListItem item11 = subList4.Items.Add("Sub-list item 1");
                        ListItem item12 = subList4.Items.Add("Sub-list item 2");
            
                        UnorderedSubList subList5 = item11.SubLists.AddUnorderedSubList(UnorderedListStyle.Square);
                        subList5.TextColor = RgbColor.DarkGoldenRod;
                        ListItem item13 = subList5.Items.Add("Second level sub-list item 1");
                        ListItem item14 = subList5.Items.Add("Second level sub-list item 2");
            
                        UnorderedSubList subList6 = item12.SubLists.AddUnorderedSubList(UnorderedListStyle.Square);
                        subList6.TextColor = RgbColor.DarkGoldenRod;
                        ListItem item15 = subList6.Items.Add("Second level sub-list item 1");
                        ListItem item16 = subList6.Items.Add("Second level sub-list item 2");
            
                        UnorderedSubList subList7 = item3.SubLists.AddUnorderedSubList(UnorderedListStyle.Circle);
                        subList7.TextColor = RgbColor.HotPink;
                        ListItem item17 = subList7.Items.Add("Sub-list item 1");
                        ListItem item18 = subList7.Items.Add("Sub-list item 2");
            
                        // Add the UnorderedList to the page
                        page.Elements.Add(list);
            
                        // Add the Page to the Document.
                        document.Pages.Add(page);
            
                        // Save the PDF.
                        doc.Draw(@"c:\MyDocument.pdf");
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Professional Edition</item>
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Professional Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Professional Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.UnorderedList.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creating new Instance of the UnorderedList.
            </summary>
            <param name="x">X coordinate of the UnorderedList.</param>
            <param name="y">Y coordinate of the UnorderedList.</param>
            <param name="width">Width of the UnorderedList.</param>
            <param name="height">Height of the UnorderedList.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.UnorderedList.#ctor(System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.PageElements.UnorderedListStyle)">
            <summary>
            Creating new Instance of the UnorderedList.
            </summary>
            <param name="x">X coordinate of the UnorderedList.</param>
            <param name="y">Y coordinate of the UnorderedList.</param>
            <param name="width">Width of the UnorderedList.</param>
            <param name="height">Height of the UnorderedList.</param>
            <param name="font"><see cref="T:ceTe.DynamicPDF.Font"/> of the UnorderedList.</param>
            <param name="fontSize">FontSize of the UnorderedList.</param>
            <param name="bullet"><see cref="T:ceTe.DynamicPDF.PageElements.UnorderedListStyle"/> of the UnorderedList.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.UnorderedList.#ctor(System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Creating new Instance of the UnorderedList.
            </summary>
            <param name="x">X coordinate of the UnorderedList.</param>
            <param name="y">Y coordinate of the UnorderedList.</param>
            <param name="width">Width of the UnorderedList.</param>
            <param name="height">Height of the UnorderedList.</param>
            <param name="font"><see cref="T:ceTe.DynamicPDF.Font"/> of the UnorderedList.</param>
            <param name="fontSize">FontSize of the UnorderedList.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.UnorderedList.GetRequiredHeight">
            <summary>
            Gets the height required to fit all of the text supplied.
            </summary>
            <returns>The float value indicating required height to display all text.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.UnorderedList.GetOverFlowList">
             <summary>
             Gets a UnorderedList object containing the List Text.
             </summary>
             <returns>Returns a UnorderedList object.</returns>
             <remarks>This method returns a new <b>UnorderedList</b> object that contains the remaining text that did not fit.</remarks>
             <example>The following example shows you how to use the GetOverflowList object to allow text of variable length to flow onto new pages as needed.<p/>
             <code lang="VB">
            	Imports System
            	Imports ceTe.DynamicPDF
            	Imports ceTe.DynamicPDF.PageElements
            
            	Module MyModule
            		Sub Main()
             	     ' Create a PDF Document
                    Dim MyDocument As Document = New Document
            
                    ' Create a Page
                    Dim MyPage As Page = New Page
            
                    ' Create a OrderedList.
                    Dim list As UnorderedList = New UnorderedList(50, 50, 300, 250)
            
                    list.ListItemTopMargin = 5
                    list.ListItemBottomMargin = 5
                    list.TextColor = RgbColor.BlueViolet
            
                    ' Add ListItem to the List.
                    Dim item1 As ListItem = list.Items.Add("List item 1")
                    item1.Underline = True
                    Dim item2 As ListItem = list.Items.Add("List item 2")
                    item2.Underline = True
                    Dim item3 As ListItem = list.Items.Add("List item 3")
                    item3.Underline = True
                    Dim item4 As ListItem = list.Items.Add("List item 4")
                    item4.Underline = True
            
                    ' Add OrderedSubList under ListItem item1
                    Dim subList1 As UnorderedSubList = item1.SubLists.AddUnorderedSubList(UnorderedListStyle.Circle)
                    subList1.TextColor = RgbColor.HotPink
                    Dim item5 As ListItem = subList1.Items.Add("Sub-list item 1")
                    Dim item6 As ListItem = subList1.Items.Add("Sub-list item 2")
            
                    Dim subList2 As UnorderedSubList = item2.SubLists.AddUnorderedSubList(UnorderedListStyle.Square)
                    subList2.TextColor = RgbColor.DarkGoldenRod
                    Dim item7 As ListItem = subList2.Items.Add("Second level sub-list item 1")
                    Dim item8 As ListItem = subList2.Items.Add("Second level sub-list item 2")
            
                    Dim subList3 As UnorderedSubList = item3.SubLists.AddUnorderedSubList(UnorderedListStyle.Square)
                    subList3.TextColor = RgbColor.DarkGoldenRod
                    Dim item9 As ListItem = subList3.Items.Add("Second level sub-list item 1")
                    Dim item10 As ListItem = subList3.Items.Add("Second level sub-list item 2")
            
                    Dim subList4 As UnorderedSubList = item6.SubLists.AddUnorderedSubList(UnorderedListStyle.Circle)
                    subList4.TextColor = RgbColor.HotPink
                    Dim item11 As ListItem = subList4.Items.Add("Sub-list item 1")
                    Dim item12 As ListItem = subList4.Items.Add("Sub-list item 2")
            
                    Dim subList5 As UnorderedSubList = item7.SubLists.AddUnorderedSubList(UnorderedListStyle.Square)
                    subList5.TextColor = RgbColor.DarkGoldenRod
                    Dim item13 As ListItem = subList5.Items.Add("Second level sub-list item 1")
                    Dim item14 As ListItem = subList5.Items.Add("Second level sub-list item 2")
            
                    Dim subList6 As UnorderedSubList = item4.SubLists.AddUnorderedSubList(UnorderedListStyle.Square)
                    subList6.TextColor = RgbColor.DarkGoldenRod
                    Dim item15 As ListItem = subList6.Items.Add("Second level sub-list item 1")
                    Dim item16 As ListItem = subList6.Items.Add("Second level sub-list item 2")
            
                    Dim subList7 As UnorderedSubList = item5.SubLists.AddUnorderedSubList(UnorderedListStyle.Circle)
                    subList7.TextColor = RgbColor.HotPink
                    Dim item17 As ListItem = subList7.Items.Add("Sub-list item 1")
                    Dim item18 As ListItem = subList7.Items.Add("Sub-list item 2")
            
                    'Add the OrderedList to the Page.
                    MyPage.Elements.Add(list)
            
                    'Add the Page to the Document.
                    MyDocument.Pages.Add(MyPage)
            
                    ' Set the UnorderedList object equal to the rest of the text that did not fit
                    ' if all the text did fit, GetOverflowList will return null
                    list = list.GetOverFlowList()
            
                    While Not list Is Nothing
                        MyPage = New Page(PageSize.A4)
                        MyPage.Elements.Add(list)
                       MyDocument.Pages.Add(MyPage)
                        list = list.GetOverFlowList()
                    End While
            
                    ' Save the PDF.
                    MyDocument.Draw("C:\MyDocument.pdf")
            		End sub
            	End Module
             </code>
             <code lang="C#">
             using System;
            	using ceTe.DynamicPDF;
            	using ceTe.DynamicPDF.PageElements;
            
              class MyClass
             {
             	static void Main()
             	{
               	   Document document = new Document();
            
                        // Create a Page.
                        Page page = new Page();
            
                        // Create a OrderedList.
                        UnorderedList list = new UnorderedList(50, 50, 300, 250);
            
                        list.ListItemTopMargin = 5;
                        list.ListItemBottomMargin = 5;
                        list.TextColor = RgbColor.BlueViolet;
            
                        // Add ListItem to the List.
                        ListItem item1 = list.Items.Add("List item 1");
                        item1.Underline = true;
                        ListItem item2 = list.Items.Add("List item 2");
                        item2.Underline = true;
                        ListItem item3 = list.Items.Add("List item 3");
                        item3.Underline = true;
                        ListItem item4 = list.Items.Add("List item 4");
                        item4.Underline = true;
            
                        // Add UnorderedSubList under ListItem item1
                        UnorderedSubList subList1 = item1.SubLists.AddUnorderedSubList(UnorderedListStyle.Circle);
                        subList1.TextColor = RgbColor.HotPink;
                        ListItem item5 = subList1.Items.Add("Sub-list item 1");
                        ListItem item6 = subList1.Items.Add("Sub-list item 2");
            
                        UnorderedSubList subList2 = item5.SubLists.AddUnorderedSubList(UnorderedListStyle.Square);
                        subList2.TextColor = RgbColor.DarkGoldenRod;
                        ListItem item7 = subList2.Items.Add("Second level sub-list item 1");
                        ListItem item8 = subList2.Items.Add("Second level sub-list item 2");
            
                        UnorderedSubList subList3 = item6.SubLists.AddUnorderedSubList(UnorderedListStyle.Square);
                        subList3.TextColor = RgbColor.DarkGoldenRod;
                        ListItem item9 = subList3.Items.Add("Second level sub-list item 1");
                        ListItem item10 = subList3.Items.Add("Second level sub-list item 2");
            
                        UnorderedSubList subList4 = item2.SubLists.AddUnorderedSubList(UnorderedListStyle.Circle);
                        subList4.TextColor = RgbColor.HotPink;
                        ListItem item11 = subList4.Items.Add("Sub-list item 1");
                        ListItem item12 = subList4.Items.Add("Sub-list item 2");
            
                        UnorderedSubList subList5 = item11.SubLists.AddUnorderedSubList(UnorderedListStyle.Square);
                        subList5.TextColor = RgbColor.DarkGoldenRod;
                        ListItem item13 = subList5.Items.Add("Second level sub-list item 1");
                        ListItem item14 = subList5.Items.Add("Second level sub-list item 2");
            
                        UnorderedSubList subList6 = item12.SubLists.AddUnorderedSubList(UnorderedListStyle.Square);
                        subList6.TextColor = RgbColor.DarkGoldenRod;
                        ListItem item15 = subList6.Items.Add("Second level sub-list item 1");
                        ListItem item16 = subList6.Items.Add("Second level sub-list item 2");
            
                        UnorderedSubList subList7 = item3.SubLists.AddUnorderedSubList(UnorderedListStyle.Circle);
                        subList7.TextColor = RgbColor.HotPink;
                        ListItem item17 = subList7.Items.Add("Sub-list item 1");
                        ListItem item18 = subList7.Items.Add("Sub-list item 2");
            
            
                        // Add the UnorderedList to the page
                        page.Elements.Add(list);
            
                        // Add the Page to the Document.
                        document.Pages.Add(page);
            
                        // Set the UnorderedList object equal to the rest of the text that did not fit
                        // if all the text did fit, GetOverflowList will return null
                        list = list.GetOverFlowList();
            
                        while (list != null)
                        {
                            page = new Page(PageSize.A4);
                            page.Elements.Add(list);
                            document.Pages.Add(page);
                            list = list.GetOverFlowList();
                        }           
                        
                        //save the PDF.
                        document.Draw(@"c:\MyDocument.pdf");
             	}
             }
             </code>
             </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.UnorderedList.GetOverFlowList(System.Single,System.Single)">
             <summary>
             Gets a UnorderedList object containing the List Text.
             </summary>
             <param name="x">New X coordinate of the UnorderedList.</param>
             <param name="y">New Y coordinate of the UnorderedList.</param>
             <returns>Returns a UnorderedList object.</returns>
             <remarks>This method returns a new <b>UnorderedList</b> object that contains the remaining text that did not fit.</remarks>
             <example>The following example shows you how to use the GetOverflowList object to allow text of variable length to flow onto new pages as needed.<p/>
            	<code lang="VB">
            	Imports System
            	Imports ceTe.DynamicPDF
            	Imports ceTe.DynamicPDF.PageElements
            
            	Module MyModule
            		Sub Main()
             	     ' Create a PDF Document
                    Dim MyDocument As Document = New Document
            
                    ' Create a Page
                    Dim MyPage As Page = New Page
            
                    ' Create a OrderedList.
                    Dim list As UnorderedList = New UnorderedList(50, 50, 300, 250)
            
                    list.ListItemTopMargin = 5
                    list.ListItemBottomMargin = 5
                    list.TextColor = RgbColor.BlueViolet
            
                    ' Add ListItem to the List.
                    Dim item1 As ListItem = list.Items.Add("List item 1")
                    item1.Underline = True
                    Dim item2 As ListItem = list.Items.Add("List item 2")
                    item2.Underline = True
                    Dim item3 As ListItem = list.Items.Add("List item 3")
                    item3.Underline = True
                    Dim item4 As ListItem = list.Items.Add("List item 4")
                    item4.Underline = True
            
                    ' Add OrderedSubList under ListItem item1
                    Dim subList1 As UnorderedSubList = item1.SubLists.AddUnorderedSubList(UnorderedListStyle.Circle)
                    subList1.TextColor = RgbColor.HotPink
                    Dim item5 As ListItem = subList1.Items.Add("Sub-list item 1")
                    Dim item6 As ListItem = subList1.Items.Add("Sub-list item 2")
            
                    Dim subList2 As UnorderedSubList = item2.SubLists.AddUnorderedSubList(UnorderedListStyle.Square)
                    subList2.TextColor = RgbColor.DarkGoldenRod
                    Dim item7 As ListItem = subList2.Items.Add("Second level sub-list item 1")
                    Dim item8 As ListItem = subList2.Items.Add("Second level sub-list item 2")
            
                    Dim subList3 As UnorderedSubList = item3.SubLists.AddUnorderedSubList(UnorderedListStyle.Square)
                    subList3.TextColor = RgbColor.DarkGoldenRod
                    Dim item9 As ListItem = subList3.Items.Add("Second level sub-list item 1")
                    Dim item10 As ListItem = subList3.Items.Add("Second level sub-list item 2")
            
                    Dim subList4 As UnorderedSubList = item6.SubLists.AddUnorderedSubList(UnorderedListStyle.Circle)
                    subList4.TextColor = RgbColor.HotPink
                    Dim item11 As ListItem = subList4.Items.Add("Sub-list item 1")
                    Dim item12 As ListItem = subList4.Items.Add("Sub-list item 2")
            
                    Dim subList5 As UnorderedSubList = item7.SubLists.AddUnorderedSubList(UnorderedListStyle.Square)
                    subList5.TextColor = RgbColor.DarkGoldenRod
                    Dim item13 As ListItem = subList5.Items.Add("Second level sub-list item 1")
                    Dim item14 As ListItem = subList5.Items.Add("Second level sub-list item 2")
            
                    Dim subList6 As UnorderedSubList = item4.SubLists.AddUnorderedSubList(UnorderedListStyle.Square)
                    subList6.TextColor = RgbColor.DarkGoldenRod
                    Dim item15 As ListItem = subList6.Items.Add("Second level sub-list item 1")
                    Dim item16 As ListItem = subList6.Items.Add("Second level sub-list item 2")
            
                    Dim subList7 As UnorderedSubList = item5.SubLists.AddUnorderedSubList(UnorderedListStyle.Circle)
                    subList7.TextColor = RgbColor.HotPink
                    Dim item17 As ListItem = subList7.Items.Add("Sub-list item 1")
                    Dim item18 As ListItem = subList7.Items.Add("Sub-list item 2")
            
                    'Add the OrderedList to the Page.
                    MyPage.Elements.Add(list)
            
                    'Add the Page to the Document.
                    MyDocument.Pages.Add(MyPage)
            
                    ' Set the UnorderedList object equal to the rest of the text that did not fit
                    ' if all the text did fit, GetOverflowList will return null
                    list = list.GetOverFlowList(50,50)
            
                    While Not list Is Nothing
                        MyPage = New Page(PageSize.A4)
                        MyPage.Elements.Add(list)
                       MyDocument.Pages.Add(MyPage)
                        list = list.GetOverFlowList(50,50)
                    End While
            
                    ' Save the PDF.
                    MyDocument.Draw("C:\MyDocument.pdf")
            		End sub
            	End Module
            	</code>
             <code lang="C#">
             using System;
            	using ceTe.DynamicPDF;
            	using ceTe.DynamicPDF.PageElements;
            
              class MyClass
             {
             	static void Main()
             	{
               	   Document document = new Document();
            
                        // Create a Page.
                        Page page = new Page();
            
                        // Create a OrderedList.
                        UnorderedList list = new UnorderedList(50, 50, 300, 250);
            
                        list.ListItemTopMargin = 5;
                        list.ListItemBottomMargin = 5;
                        list.TextColor = RgbColor.BlueViolet;
            
                        // Add ListItem to the List.
                        ListItem item1 = list.Items.Add("List item 1");
                        item1.Underline = true;
                        ListItem item2 = list.Items.Add("List item 2");
                        item2.Underline = true;
                        ListItem item3 = list.Items.Add("List item 3");
                        item3.Underline = true;
                        ListItem item4 = list.Items.Add("List item 4");
                        item4.Underline = true;
            
                        // Add UnorderedSubList under ListItem item1
                        UnorderedSubList subList1 = item1.SubLists.AddUnorderedSubList(UnorderedListStyle.Circle);
                        subList1.TextColor = RgbColor.HotPink;
                        ListItem item5 = subList1.Items.Add("Sub-list item 1");
                        ListItem item6 = subList1.Items.Add("Sub-list item 2");
            
                        UnorderedSubList subList2 = item5.SubLists.AddUnorderedSubList(UnorderedListStyle.Square);
                        subList2.TextColor = RgbColor.DarkGoldenRod;
                        ListItem item7 = subList2.Items.Add("Second level sub-list item 1");
                        ListItem item8 = subList2.Items.Add("Second level sub-list item 2");
            
                        UnorderedSubList subList3 = item6.SubLists.AddUnorderedSubList(UnorderedListStyle.Square);
                        subList3.TextColor = RgbColor.DarkGoldenRod;
                        ListItem item9 = subList3.Items.Add("Second level sub-list item 1");
                        ListItem item10 = subList3.Items.Add("Second level sub-list item 2");
            
                        UnorderedSubList subList4 = item2.SubLists.AddUnorderedSubList(UnorderedListStyle.Circle);
                        subList4.TextColor = RgbColor.HotPink;
                        ListItem item11 = subList4.Items.Add("Sub-list item 1");
                        ListItem item12 = subList4.Items.Add("Sub-list item 2");
            
                        UnorderedSubList subList5 = item11.SubLists.AddUnorderedSubList(UnorderedListStyle.Square);
                        subList5.TextColor = RgbColor.DarkGoldenRod;
                        ListItem item13 = subList5.Items.Add("Second level sub-list item 1");
                        ListItem item14 = subList5.Items.Add("Second level sub-list item 2");
            
                        UnorderedSubList subList6 = item12.SubLists.AddUnorderedSubList(UnorderedListStyle.Square);
                        subList6.TextColor = RgbColor.DarkGoldenRod;
                        ListItem item15 = subList6.Items.Add("Second level sub-list item 1");
                        ListItem item16 = subList6.Items.Add("Second level sub-list item 2");
            
                        UnorderedSubList subList7 = item3.SubLists.AddUnorderedSubList(UnorderedListStyle.Circle);
                        subList7.TextColor = RgbColor.HotPink;
                        ListItem item17 = subList7.Items.Add("Sub-list item 1");
                        ListItem item18 = subList7.Items.Add("Sub-list item 2");
            
            
                        // Add the UnorderedList to the page
                        page.Elements.Add(list);
            
                        // Add the Page to the Document.
                        document.Pages.Add(page);
            
                        // Set the UnorderedList object equal to the rest of the text that did not fit
                        // if all the text did fit, GetOverflowList will return null
                        list = list.GetOverFlowList(50,50);
            
                        while (list != null)
                        {
                            page = new Page(PageSize.A4);
                            page.Elements.Add(list);
                            document.Pages.Add(page);
                            list = list.GetOverFlowList(50,50);
                        }           
                        
                        //save the PDF.
                        document.Draw(@"c:\MyDocument.pdf");
             	}
             }
             </code>
             </example>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.UnorderedList.BulletStyle">
            <summary>
            Gets or Sets the BulletStyle of the List.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.UnorderedListItemList">
            <summary>
            Description of UnorderedListItemList.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.UnorderedListStyle">
            <summary>
            Represents the UnorderedListStyle.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.UnorderedListStyle.#ctor(System.String,ceTe.DynamicPDF.Font)">
            <summary>
            Creates Custom Bullets.
            </summary>
            <param name="type">Custom bullet String.</param>
            <param name="font">Font of the Custom bullet.</param>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.UnorderedListStyle.None">
            <summary>
            None specified.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.UnorderedListStyle.Asterisk">
            <summary>
            UnorderedListStyle Asterisk.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.UnorderedListStyle.Circle">
            <summary>
            UnorderedListStyle Circle.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.UnorderedListStyle.Dash">
            <summary>
            UnorderedListStyle Dash.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.UnorderedListStyle.Disc">
            <summary>
            UnorderedListStyle Disc.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.UnorderedListStyle.Square">
            <summary>
            UnorderedListStyle Square.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.UnorderedSubList">
            <summary>
            Represents the UnorderedSubList.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.UnorderedSubList.BulletStyle">
            <summary>
            Gets or Sets the BulletStyle of the SubList.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.Data.ClosingRecordSetEventArgs">
            <summary>
            Provides data for the <see cref="T:ceTe.DynamicPDF.ReportWriter.Data.Query">Query's</see> ClosingRecordSet event.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.ReportWriter.Data.ClosingRecordSetEventArgs.#ctor(ceTe.DynamicPDF.ReportWriter.Data.RecordSet,ceTe.DynamicPDF.ReportWriter.IO.LayoutWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.ReportWriter.Data.ClosingRecordSetEventArgs"/> class.
            </summary>
            <param name="recordSet">The <see cref="P:ceTe.DynamicPDF.ReportWriter.Data.ClosingRecordSetEventArgs.RecordSet"/> to use for the <see cref="T:ceTe.DynamicPDF.ReportWriter.Data.ClosingRecordSetEventArgs"/>.</param>
            <param name="layoutWriter">The <see cref="P:ceTe.DynamicPDF.ReportWriter.Data.ClosingRecordSetEventArgs.LayoutWriter"/> to use for the <see cref="T:ceTe.DynamicPDF.ReportWriter.Data.ClosingRecordSetEventArgs"/>.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Data.ClosingRecordSetEventArgs.LayoutWriter">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.ReportWriter.Data.ClosingRecordSetEventArgs.LayoutWriter"/> argument of the Query's ClosingRecordSet Event.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Data.ClosingRecordSetEventArgs.RecordSet">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.ReportWriter.Data.ClosingRecordSetEventArgs.RecordSet"/> argument of the Query's ClosingRecordSet Event.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Data.ClosingRecordSetEventArgs.Closed">
            <summary>
            Gets or sets a value indicating whether the connection and recordset is already closed.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.Data.ClosingRecordSetEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ceTe.DynamicPDF.ReportWriter.Data.Query.ClosingRecordSet"/> event of the <see cref="T:ceTe.DynamicPDF.ReportWriter.Data.Query"/>.
            </summary>
            <param name="sender">Reference of type <see cref="T:System.Object"/>.</param>
            <param name="e">Reference of type <see cref="T:ceTe.DynamicPDF.ReportWriter.Data.ClosingRecordSetEventArgs"/>.</param>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.Data.DataReaderRecordSet">
            <summary>
            Represents a recordset based off of a datareader
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.Data.RecordSet">
            <summary>
            Represents the base class for which all recordsets are derived.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Data.RecordSet.Item(System.String)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the given name.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Data.RecordSet.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the given field number.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Data.RecordSet.Id">
            <summary>
            Gets the ID for the query.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Data.RecordSet.Query">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.ReportWriter.Data.RecordSet.Query"/> for the <see cref="T:ceTe.DynamicPDF.ReportWriter.Data.RecordSet"/>.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Data.RecordSet.HasData">
            <summary>
            Gets a value indicating whether the <see cref="T:ceTe.DynamicPDF.ReportWriter.Data.RecordSet"/> conatins data.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.ReportWriter.Data.DataReaderRecordSet.#ctor(System.Data.IDbConnection,System.Data.IDataReader)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.ReportWriter.Data.DataReaderRecordSet"/> class.
            </summary>
            <param name="connection">Database connection used to create the datareader.</param>
            <param name="reader">The datareader for the record set.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Data.DataReaderRecordSet.Item(System.String)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the given name.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Data.DataReaderRecordSet.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the given field number.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Data.DataReaderRecordSet.HasData">
            <summary>
            Gets a value indicating whether the <see cref="T:ceTe.DynamicPDF.ReportWriter.Data.DataReaderRecordSet"/> contains data.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Data.DataReaderRecordSet.Connection">
            <summary>
            Gets the database connection of the <see cref="T:ceTe.DynamicPDF.ReportWriter.Data.DataReaderRecordSet"/>.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Data.DataReaderRecordSet.DataReader">
            <summary>
            Gets the <see cref="T:System.Data.IDataReader"/> of the <see cref="T:ceTe.DynamicPDF.ReportWriter.Data.DataReaderRecordSet"/>.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.Data.DataTableRecordSet">
            <summary>
            Represents a recordset based off of a datatable
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.ReportWriter.Data.DataTableRecordSet.#ctor(System.Data.DataTable)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.ReportWriter.Data.DataTableRecordSet"/> class.
            </summary>
            <param name="dataTable">The datatable for the record set.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.ReportWriter.Data.DataTableRecordSet.#ctor(System.Data.IDbConnection,System.Data.DataTable)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.ReportWriter.Data.DataTableRecordSet"/> class.
            </summary>
            <param name="connection">Database connection used to create the datatable.</param>
            <param name="dataTable">The datatable for the record set.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Data.DataTableRecordSet.Item(System.String)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the given name.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Data.DataTableRecordSet.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the given field number.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Data.DataTableRecordSet.HasData">
            <summary>
            Gets a value indicating whether the <see cref="T:ceTe.DynamicPDF.ReportWriter.Data.DataTableRecordSet"/> contains data.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Data.DataTableRecordSet.Connection">
            <summary>
            Gets the database connection of the <see cref="T:ceTe.DynamicPDF.ReportWriter.Data.DataTableRecordSet"/>.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.Data.EnumerableRecordSet">
            <summary>
            Represents a recordset based on a list of objects.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.ReportWriter.Data.EnumerableRecordSet.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.ReportWriter.Data.EnumerableRecordSet"/> class.
            </summary>
            <param name="enumerable">A list of objects that implements the <see cref="T:System.Collections.IEnumerable"/> interface.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Data.EnumerableRecordSet.Item(System.String)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the given name.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Data.EnumerableRecordSet.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the given field number.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Data.EnumerableRecordSet.HasData">
            <summary>
            Gets a value indicating whether the <see cref="T:ceTe.DynamicPDF.ReportWriter.Data.RecordSet"/> conatins data.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.Data.EventDrivenQuery">
            <summary>
            Represents a event driven query.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.Data.Query">
            <summary>
            Base class from which all queries are derived.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.ReportWriter.Data.Query.GetRecordSet(ceTe.DynamicPDF.ReportWriter.IO.LayoutWriter)">
            <summary>
            Abstract. Gets the <see cref="T:ceTe.DynamicPDF.ReportWriter.Data.RecordSet"/> of the query.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.ReportWriter.IO.LayoutWriter"/> of the query.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.ReportWriter.Data.RecordSet"/> object.</returns>
        </member>
        <member name="E:ceTe.DynamicPDF.ReportWriter.Data.Query.OpeningRecordSet">
            <summary>
            Occurs when the recordset is opening.
            </summary>
        </member>
        <member name="E:ceTe.DynamicPDF.ReportWriter.Data.Query.ClosingRecordSet">
            <summary>
            Occurs when the recordset is closing.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Data.Query.Id">
            <summary>
            Gets the unique ID for the query.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.ReportWriter.Data.EventDrivenQuery.GetRecordSet(ceTe.DynamicPDF.ReportWriter.IO.LayoutWriter)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.ReportWriter.Data.RecordSet"/> for the <see cref="T:ceTe.DynamicPDF.ReportWriter.Data.EventDrivenQuery"/>.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.ReportWriter.IO.LayoutWriter"/> of the query.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.ReportWriter.Data.RecordSet"/> object.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Data.EventDrivenQuery.Statement">
            <summary>
            Gets or sets the Sql statement of query.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Data.EventDrivenQuery.ConnectionString">
            <summary>
            Gets or sets the connection string of the query.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.Data.GroupByQuery">
            <summary>
            Represents a groupby query.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.ReportWriter.Data.GroupByQuery.GetRecordSet(ceTe.DynamicPDF.ReportWriter.IO.LayoutWriter)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.ReportWriter.Data.RecordSet"/> for the <see cref="T:ceTe.DynamicPDF.ReportWriter.Data.GroupByQuery"/>.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.ReportWriter.IO.LayoutWriter"/> of the query.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.ReportWriter.Data.RecordSet"/> object.</returns>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.Data.OpeningRecordSetEventArgs">
            <summary>
            Provides data for the <see cref="T:ceTe.DynamicPDF.ReportWriter.Data.Query">Query's</see> OpeningRecordSet event.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.ReportWriter.Data.OpeningRecordSetEventArgs.#ctor(ceTe.DynamicPDF.ReportWriter.IO.LayoutWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.ReportWriter.Data.OpeningRecordSetEventArgs"/> class.
            </summary>
            <param name="layoutWriter">The <see cref="P:ceTe.DynamicPDF.ReportWriter.Data.OpeningRecordSetEventArgs.LayoutWriter"/> to use for the <see cref="T:ceTe.DynamicPDF.ReportWriter.Data.OpeningRecordSetEventArgs"/>.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Data.OpeningRecordSetEventArgs.LayoutWriter">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.ReportWriter.Data.OpeningRecordSetEventArgs.LayoutWriter"/> argument of the Query's OpeningRecordSet Event.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Data.OpeningRecordSetEventArgs.RecordSet">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.ReportWriter.Data.OpeningRecordSetEventArgs.RecordSet"/> argument of the Query's OpeningRecordSet Event.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.Data.OpeningRecordSetEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ceTe.DynamicPDF.ReportWriter.Data.Query.OpeningRecordSet"/> event of the <see cref="T:ceTe.DynamicPDF.ReportWriter.Data.Query"/>.
            </summary>
            <param name="sender">Reference of type <see cref="T:System.Object"/>.</param>
            <param name="e">Reference of type <see cref="T:ceTe.DynamicPDF.ReportWriter.Data.OpeningRecordSetEventArgs"/>.</param>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.Data.ParameterType">
            <summary>
            Specifies the type of parameter.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.BigInt">
            <summary>
            BigInt parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.Bit">
            <summary>
            Bit parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.Boolean">
            <summary>
            Boolean parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.Bstr">
            <summary>
            Bstr parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.Byte">
            <summary>
            Byte parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.Char">
            <summary>
            Char parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.Currency">
            <summary>
            Currency parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.Date">
            <summary>
            Date parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.DateTime">
            <summary>
            DateTime parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.DBDate">
            <summary>
            DBDate parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.DBTime">
            <summary>
            DBTime parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.DBTimestamp">
            <summary>
            DBTimestamp parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.Decimal">
            <summary>
            Decimal parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.Double">
            <summary>
            Double parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.Filetime">
            <summary>
            Filetime parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.Float">
            <summary>
            Float parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.Guid">
            <summary>
            Guid parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.Int">
            <summary>
            Int parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.Int16">
            <summary>
            Int16 parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.Int32">
            <summary>
            Int32 parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.Integer">
            <summary>
            Integer parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.IntervalDayToSecond">
            <summary>
            IntervalDayToSecond parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.IntervalYearToMonth">
            <summary>
            IntervalYearToMonth parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.LongVarChar">
            <summary>
            LongVarChar parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.LongVarWChar">
            <summary>
            LongVarWChar parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.Money">
            <summary>
            Money parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.NChar">
            <summary>
            NChar parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.NText">
            <summary>
            NText parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.Number">
            <summary>
            Number parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.Numeric">
            <summary>
            Numeric parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.NVarChar">
            <summary>
            NVarChar parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.Real">
            <summary>
            Real parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.RowId">
            <summary>
            RowId parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.SByte">
            <summary>
            SByte parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.Single">
            <summary>
            Single parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.SmallDateTime">
            <summary>
            SmallDateTime parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.SmallInt">
            <summary>
            SmallInt parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.SmallMoney">
            <summary>
            SmallMoney parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.Text">
            <summary>
            Text parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.Time">
            <summary>
            Time parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.Timestamp">
            <summary>
            Timestamp parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.TimestampLocal">
            <summary>
            TimestampLocal parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.TimestampWithTZ">
            <summary>
            TimestampWithTZ parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.TinyInt">
            <summary>
            TinyInt parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.UInt16">
            <summary>
            UInt16 parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.UInt32">
            <summary>
            UInt32 parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.UniqueIdentifier">
            <summary>
            UniqueIdentifier parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.UnsignedBigInt">
            <summary>
            UnsignedBigInt parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.UnsignedInt">
            <summary>
            UnsignedInt parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.UnsignedSmallInt">
            <summary>
            UnsignedSmallInt parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.UnsignedTinyInt">
            <summary>
            UnsignedTinyInt parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.VarChar">
            <summary>
            VarChar parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.VarNumeric">
            <summary>
            VarNumeric parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.VarWChar">
            <summary>
            VarWChar parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.WChar">
            <summary>
            WChar parameter type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ParameterType.RefCursor">
            <summary>
            RefCursor parameter type.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.Data.ProviderType">
            <summary>
            Specifies the type of database provider.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ProviderType.MsSql">
            <summary>
            Microsoft SQL provider type. 
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ProviderType.Odbc">
            <summary>
            ODBC provider type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ProviderType.OleDb">
            <summary>
            OLE-DB provider type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.Data.ProviderType.Oracle">
            <summary>
            Oracle provider type.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.Data.RecordSetStack">
            <summary>
            Represents a recordset stack.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Data.RecordSetStack.Item(System.String)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.ReportWriter.Data.RecordSet"/> with the given ID.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Data.RecordSetStack.Current">
            <summary>
            Gets the current <see cref="T:ceTe.DynamicPDF.ReportWriter.Data.RecordSet"/>
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.Data.ReferenceQuery">
            <summary>
            Represents a reference query.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.ReportWriter.Data.ReferenceQuery.GetRecordSet(ceTe.DynamicPDF.ReportWriter.IO.LayoutWriter)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.ReportWriter.Data.RecordSet"/> for the <see cref="T:ceTe.DynamicPDF.ReportWriter.Data.ReferenceQuery"/>.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.ReportWriter.IO.LayoutWriter"/> of the query.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.ReportWriter.Data.RecordSet"/> object.</returns>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.Data.SqlQuery">
            <summary>
            Represents a SQL query.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.ReportWriter.Data.SqlQuery.GetRecordSet(ceTe.DynamicPDF.ReportWriter.IO.LayoutWriter)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.ReportWriter.Data.RecordSet"/> for the <see cref="T:ceTe.DynamicPDF.ReportWriter.Data.SqlQuery"/>.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.ReportWriter.IO.LayoutWriter"/> of the query.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.ReportWriter.Data.RecordSet"/> object.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Data.SqlQuery.Sql">
            <summary>
            Gets or sets the SQL statement.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Data.SqlQuery.ConnectionString">
            <summary>
            Gets or sets the connection string of the query.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Data.SqlQuery.ProviderType">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.ReportWriter.Data.SqlQuery.ProviderType"/> of the query.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.Data.StoredProcedureQuery">
            <summary>
            Represents a stored procedure query.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.ReportWriter.Data.StoredProcedureQuery.GetRecordSet(ceTe.DynamicPDF.ReportWriter.IO.LayoutWriter)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.ReportWriter.Data.RecordSet"/> for the <see cref="T:ceTe.DynamicPDF.ReportWriter.Data.StoredProcedureQuery"/>.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.ReportWriter.IO.LayoutWriter"/> of the query.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.ReportWriter.Data.RecordSet"/> object.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Data.StoredProcedureQuery.ConnectionString">
            <summary>
            Gets or sets the connection string of the query.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Data.StoredProcedureQuery.ProviderType">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.ReportWriter.Data.StoredProcedureQuery.ProviderType"/> of the query.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.IO.LayoutWriter">
            <summary>
            Represents a writer classs for a layout.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.IO.LayoutWriter.RecordSets">
            <summary>
            Gets a <see cref="T:ceTe.DynamicPDF.ReportWriter.Data.RecordSetStack"/> for the layout.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.IO.LayoutWriter.Document">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.ReportWriter.IO.LayoutWriter.Document"/> for the layout.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.IO.LayoutWriter.Parameters">
            <summary>
            Gets or sets the parameters of the layout.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.IO.LayoutWriter.DocumentLayout">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.ReportWriter.IO.LayoutWriter.DocumentLayout"/> of the layout. 
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.Layout.LayoutTextArea">
            <summary>
            Represents a text area.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.ReportWriter.Layout.LayoutTextArea.DrawRotated(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the rotated page element to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the page element's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Layout.LayoutTextArea.Align">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.TextAlign"/> enumeration that specifies the text alignment of the report text area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Layout.LayoutTextArea.VAlign">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.ReportWriter.Layout.LayoutTextArea.VAlign"/> enumeration that specifies the vertical text alignment of the report text area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Layout.LayoutTextArea.Underline">
            <summary>
            Gets or sets a value indicating if the report text area is underlined.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Layout.LayoutTextArea.RightToLeft">
            <summary>
            Gets or sets a value indicating if text should be displayed right to left.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Layout.LayoutTextArea.TextColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the text of the report text area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Layout.LayoutTextArea.Font">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.ReportWriter.Layout.LayoutTextArea.Font"/> object used to specify the font of the text for the report text area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Layout.LayoutTextArea.FontSize">
            <summary>
            Gets or sets the font size for the text of the report text area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Layout.LayoutTextArea.Leading">
            <summary>
            Gets or sets the leading for the text of the report text area.
            </summary>
            <remarks>Setting this property will automatically set the <see cref="P:ceTe.DynamicPDF.ReportWriter.Layout.LayoutTextArea.AutoLeading"/> property to false.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Layout.LayoutTextArea.AutoLeading">
            <summary>
            Gets or sets a value indicating whether the leading of the report text area should be calculated automatically.
            </summary>
            <remarks>This property is automatically set to false any time the <see cref="P:ceTe.DynamicPDF.ReportWriter.Layout.LayoutTextArea.Leading"/> property is set.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Layout.LayoutTextArea.ParagraphSpacing">
            <summary>
            Gets or sets the paragraph spacing for the paragraphs of the report text area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Layout.LayoutTextArea.ParagraphIndent">
            <summary>
            Gets or sets the paragraph indenting for the paragraphs of the report text area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Layout.LayoutTextArea.CleanParagraphBreaks">
            <summary>
            Gets or sets the clean paragraph breaks for the paragraphs of the report text area.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportElements.ContentGroup">
            <summary>
            Represents a group of report elements.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportElement">
            <summary>
            Base class from which all report elements are derived.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.ContentGroup.Height">
            <summary>
            Gets or sets the height of the content group.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.ContentGroup.Elements">
            <summary>
            Gets a <see cref="T:ceTe.DynamicPDF.ReportWriter.ReportElementList"/> of elements in the content group.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.ContentGroup.Width">
            <summary>
            Gets or sets the width of the content group.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.ContentGroup.X">
            <summary>
            Gets or sets the X coordinate of the content group.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.ContentGroup.Y">
            <summary>
            Gets or sets the Y coordinate of the content group.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportElements.FormattedRecordArea">
            <summary>
            Represents an area for a formatted record.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="E:ceTe.DynamicPDF.ReportWriter.ReportElements.FormattedRecordArea.LayingOut">
            <summary>
            Occurs before the formatted text area is laid out.
            </summary>
        </member>
        <member name="E:ceTe.DynamicPDF.ReportWriter.ReportElements.FormattedRecordArea.LaidOut">
            <summary>
            Occurs after the formatted text area has been laid out.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.FormattedRecordArea.Text">
            <summary>
            Gets or sets the text for the formatted record area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.FormattedRecordArea.Splittable">
            <summary>
            Gets or sets a value indicating if the formatted record area is splittable.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.FormattedRecordArea.Expandable">
            <summary>
            Gets or sets a value indicating if the formatted record area is expandable.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.FormattedRecordArea.X">
            <summary>
            Gets or sets the X coordinate of the formatted record area group.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.FormattedRecordArea.Y">
            <summary>
            Gets or sets the Y coordinate of the formatted record area group.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.FormattedRecordArea.Width">
            <summary>
            Gets or sets the width of the formatted record area group.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.FormattedRecordArea.Height">
            <summary>
            Gets or sets the height of the formatted record area group.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.FormattedRecordArea.InitialStyle">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.FormattedTextAreaStyle"/> object used to specify the initial style of the formatted record area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.FormattedRecordArea.VAlign">
            <summary>
            Gets or sets a value indicating the vertical alignment of the formatted record area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.FormattedRecordArea.Angle">
            <summary>
            Gets or sets a value indicating the angle of the formatted record area.
            </summary>
            
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportElements.FormattedRecordAreaLaidOutEventArgs">
            <summary>
            Provides data for the <see cref="T:ceTe.DynamicPDF.ReportWriter.ReportElements.FormattedRecordArea">FormattedRecordArea's</see> LaidOut event.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.FormattedRecordAreaLaidOutEventArgs.LayoutWriter">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportElements.FormattedRecordAreaLaidOutEventArgs.LayoutWriter"/> argument of the FormattedRecordArea's LaidOut Event.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.FormattedRecordAreaLaidOutEventArgs.FormattedTextArea">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportElements.FormattedRecordAreaLaidOutEventArgs.FormattedTextArea"/> element of the FormattedRecordArea's LaidOut event.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportElements.FormattedRecordAreaLaidOutEventHandler">
            <summary>
            Represents the method that will handle the formatted record area LaidOut event of the <see cref="T:ceTe.DynamicPDF.ReportWriter.ReportElements.FormattedRecordArea"/>.
            </summary>
            <param name="sender">Reference of type <see cref="T:System.Object"/>.</param>
            <param name="e">Reference of type <see cref="T:ceTe.DynamicPDF.ReportWriter.ReportElements.FormattedRecordAreaLaidOutEventArgs"/>.</param>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportElements.Image">
            <summary>
            Represents an image report element.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="E:ceTe.DynamicPDF.ReportWriter.ReportElements.Image.LayingOut">
            <summary>
            Occurs before the image is laid out.
            </summary>
        </member>
        <member name="E:ceTe.DynamicPDF.ReportWriter.ReportElements.Image.LaidOut">
            <summary>
            Occurs after the image has been laid out.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Image.Angle">
            <summary>
            Gets or sets the angle of the image in degrees.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Image.Height">
            <summary>
            Gets or sets the height of the image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Image.Width">
            <summary>
            Gets or sets the width of the image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Image.X">
            <summary>
            Gets or sets the X coordinate of the image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Image.Y">
            <summary>
            Gets or sets the Y coordinate of the image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Image.ImageData">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Image.ImageData"/> of the Image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Image.AlternateText">
            <summary>
            Gets or sets the alternate text of the image.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportElements.ImageLaidOutEventArgs">
            <summary>
            Provides data for the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportElements.ImageLaidOutEventArgs.Image">Image's</see> LaidOut event.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.ImageLaidOutEventArgs.LayoutWriter">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportElements.ImageLaidOutEventArgs.LayoutWriter"/> argument of the Image's LaidOut Event.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.ImageLaidOutEventArgs.Image">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportElements.ImageLaidOutEventArgs.Image"/> element of the Image's LaidOut event.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportElements.ImageLaidOutEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ceTe.DynamicPDF.ReportWriter.ReportElements.Image.LaidOut"/> event of the <see cref="T:ceTe.DynamicPDF.ReportWriter.ReportElements.Image"/>.
            </summary>
            <param name="sender">Reference of type <see cref="T:System.Object"/>.</param>
            <param name="e">Reference of type <see cref="T:ceTe.DynamicPDF.ReportWriter.ReportElements.ImageLaidOutEventArgs"/>.</param>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportElements.Label">
            <summary>
            Represents a label report element.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="E:ceTe.DynamicPDF.ReportWriter.ReportElements.Label.LayingOut">
            <summary>
            Occurs before the label is laid out.
            </summary>
        </member>
        <member name="E:ceTe.DynamicPDF.ReportWriter.ReportElements.Label.LaidOut">
            <summary>
            Occurs after the label has been laid out.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Label.Align">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Label.Align"/> enumeration that specifies the text alignment of the label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Label.Font">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Label.Font"/> object to use for the text of the label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Label.FontSize">
            <summary>
            Gets or sets the font size for the text of the label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Label.Text">
            <summary>
            Gets or sets the text of the label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Label.TextColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the text of the label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Label.Underline">
            <summary>
            Gets or sets a value indicating if the label is underlined.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Label.VAlign">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Label.VAlign"/> enumeration that specifies the vertical text alignment of the label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Label.Angle">
            <summary>
            Gets or sets the angle of the label in degrees.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Label.Height">
            <summary>
            Gets or sets the height of the label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Label.Width">
            <summary>
            Gets or sets the width of the label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Label.X">
            <summary>
            Gets or sets the X coordinate of the label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Label.Y">
            <summary>
            Gets or sets the Y coordinate of the label.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportElements.LabelLaidOutEventArgs">
            <summary>
            Provides data for the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportElements.LabelLaidOutEventArgs.Label">Label's</see> LaidOut event.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.LabelLaidOutEventArgs.LayoutWriter">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportElements.LabelLaidOutEventArgs.LayoutWriter"/> argument of the Label's LaidOut Event.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.LabelLaidOutEventArgs.Label">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportElements.LabelLaidOutEventArgs.Label"/> element of the Label's LaidOut event.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportElements.LabelLaidOutEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ceTe.DynamicPDF.ReportWriter.ReportElements.Label.LaidOut"/> event of the <see cref="T:ceTe.DynamicPDF.ReportWriter.ReportElements.Label"/>.
            </summary>
            <param name="sender">Reference of type <see cref="T:System.Object"/>.</param>
            <param name="e">Reference of type <see cref="T:ceTe.DynamicPDF.ReportWriter.ReportElements.LabelLaidOutEventArgs"/>.</param>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportElements.LayingOutEventArgs">
            <summary>
            Provides data for the LayingOut event.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.LayingOutEventArgs.LayoutWriter">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportElements.LayingOutEventArgs.LayoutWriter"/> argument of the LayingOut Event.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.LayingOutEventArgs.Layout">
            <summary>
            Gets or sets a value indicating whether the element should be layed out.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportElements.LayingOutEventHandler">
            <summary>
            Represents the method that will handle the LayingOut event.
            </summary>
            <param name="sender">Reference of type <see cref="T:System.Object"/>.</param>
            <param name="e">Reference of type <see cref="T:ceTe.DynamicPDF.ReportWriter.ReportElements.LayingOutEventArgs"/>.</param>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportElements.Line">
            <summary>
            Represents a line report element.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="E:ceTe.DynamicPDF.ReportWriter.ReportElements.Line.LayingOut">
            <summary>
            Occurs before the line is laid out.
            </summary>
        </member>
        <member name="E:ceTe.DynamicPDF.ReportWriter.ReportElements.Line.LaidOut">
            <summary>
            Occurs after the line has been laid out.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Line.X1">
            <summary>
            Gets or sets the first X coordinate of the line.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Line.X2">
            <summary>
            Gets or sets the second X coordinate of the line.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Line.Y1">
            <summary>
            Gets or sets the first Y coordinate of the line.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Line.Y2">
            <summary>
            Gets or sets the second Y coordinate of the line.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Line.Width">
            <summary>
            Gets or sets the width of the line.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Line.Cap">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.LineCap"/> enumeration used to specify the line cap style of the line.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Line.Color">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Line.Color"/> object to use for the line.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Line.LineStyle">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Line.LineStyle"/> object to use for the style of the line.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportElements.LineLaidOutEventArgs">
            <summary>
            Provides data for the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportElements.LineLaidOutEventArgs.Line">Line's</see> LaidOut event.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.LineLaidOutEventArgs.LayoutWriter">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportElements.LineLaidOutEventArgs.LayoutWriter"/> argument of the Line's LaidOut Event.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.LineLaidOutEventArgs.Line">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportElements.LineLaidOutEventArgs.Line"/> element of the Line's LaidOut event.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportElements.LineLaidOutEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ceTe.DynamicPDF.ReportWriter.ReportElements.Line.LaidOut"/> event of the <see cref="T:ceTe.DynamicPDF.ReportWriter.ReportElements.Line"/>.
            </summary>
            <param name="sender">Reference of type <see cref="T:System.Object"/>.</param>
            <param name="e">Reference of type <see cref="T:ceTe.DynamicPDF.ReportWriter.ReportElements.LineLaidOutEventArgs"/>.</param>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportElements.NoSplitZone">
            <summary>
            Summary description for NoSplitZone.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.NoSplitZone.Top">
            <summary>
            Gets or sets the top Y coordinate of the nosplitzone.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.NoSplitZone.Bottom">
            <summary>
            Gets or sets the bottom Y coordinate of the nosplitzone.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportElements.PageBreak">
            <summary>
            Summary description for PageBreak.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.PageBreak.Y">
            <summary>
            Gets or sets the Y coordinate of the pagebreak.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportElements.PageNumberingLabel">
            <summary>
            Represents a page numbering report element.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="E:ceTe.DynamicPDF.ReportWriter.ReportElements.PageNumberingLabel.LayingOut">
            <summary>
            Occurs before the page numbering label is laid out.
            </summary>
        </member>
        <member name="E:ceTe.DynamicPDF.ReportWriter.ReportElements.PageNumberingLabel.LaidOut">
            <summary>
            Occurs after the page numbering label has been laid out.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.PageNumberingLabel.Align">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportElements.PageNumberingLabel.Align"/> enumeration that specifies the text alignment of the page numbering label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.PageNumberingLabel.Font">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportElements.PageNumberingLabel.Font"/> object to use for the text of the page numbering label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.PageNumberingLabel.FontSize">
            <summary>
            Gets or sets the font size for the text of the page numbering label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.PageNumberingLabel.Text">
            <summary>
            Gets or sets the text of the page numbering label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.PageNumberingLabel.TextColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the text of the page numbering label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.PageNumberingLabel.Underline">
            <summary>
            Gets or sets a value indicating if the page numbering label is underlined.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.PageNumberingLabel.VAlign">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportElements.PageNumberingLabel.VAlign"/> enumeration that specifies the vertical text alignment of the page numbering label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.PageNumberingLabel.Angle">
            <summary>
            Gets or sets the angle of the page numbering label in degrees.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.PageNumberingLabel.Height">
            <summary>
            Gets or sets the height of the page numbering label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.PageNumberingLabel.Width">
            <summary>
            Gets or sets the width of the page numbering label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.PageNumberingLabel.X">
            <summary>
            Gets or sets the X coordinate of the page numbering label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.PageNumberingLabel.Y">
            <summary>
            Gets or sets the Y coordinate of the page numbering label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.PageNumberingLabel.PageTotalOffset">
            <summary>
            Gets or sets the page total offset for page numbering.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.PageNumberingLabel.PageOffset">
            <summary>
            Gets or sets the page offset for page numbering.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportElements.PageNumberingLabelLaidOutEventArgs">
            <summary>
            Provides data for the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportElements.PageNumberingLabelLaidOutEventArgs.PageNumberingLabel">PageNumberingLabel's</see> LaidOut event.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.PageNumberingLabelLaidOutEventArgs.LayoutWriter">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportElements.PageNumberingLabelLaidOutEventArgs.LayoutWriter"/> argument of the PageNumberingLabel's LaidOut Event.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.PageNumberingLabelLaidOutEventArgs.PageNumberingLabel">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportElements.PageNumberingLabelLaidOutEventArgs.PageNumberingLabel"/> element of the PageNumberingLabel's LaidOut event.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportElements.PageNumberingLabelLaidOutEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ceTe.DynamicPDF.ReportWriter.ReportElements.PageNumberingLabel.LaidOut"/> event of the <see cref="T:ceTe.DynamicPDF.ReportWriter.ReportElements.PageNumberingLabel"/>.
            </summary>
            <param name="sender">Reference of type <see cref="T:System.Object"/>.</param>
            <param name="e">Reference of type <see cref="T:ceTe.DynamicPDF.ReportWriter.ReportElements.PageNumberingLabelLaidOutEventArgs"/>.</param>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportElements.PlaceHolder">
            <summary>
            Represents a place holder report element.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="E:ceTe.DynamicPDF.ReportWriter.ReportElements.PlaceHolder.LaidOut">
            <summary>
            Occurs after the place holder has been laid out.
            </summary>
        </member>
        <member name="E:ceTe.DynamicPDF.ReportWriter.ReportElements.PlaceHolder.LayingOut">
            <summary>
            Occurs before the place holder is laid out.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.PlaceHolder.X">
            <summary>
            Gets or sets the X coordinate of the place holder.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.PlaceHolder.Y">
            <summary>
            Gets or sets the Y coordinate of the place holder.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.PlaceHolder.Width">
            <summary>
            Gets or sets the width of the place holder.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.PlaceHolder.Height">
            <summary>
            Gets or sets the height of the place holder.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportElements.PlaceHolderLaidOutEventArgs">
            <summary>
            Provides data for the <see cref="T:ceTe.DynamicPDF.ReportWriter.ReportElements.PlaceHolder">PlaceHolder's</see> LaidOut event.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.PlaceHolderLaidOutEventArgs.LayoutWriter">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportElements.PlaceHolderLaidOutEventArgs.LayoutWriter"/> argument of the PlaceHolder's LaidOut Event.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.PlaceHolderLaidOutEventArgs.ContentArea">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportElements.PlaceHolderLaidOutEventArgs.ContentArea"/> argument of the PlaceHolder's LaidOut event.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportElements.PlaceHolderLaidOutEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ceTe.DynamicPDF.ReportWriter.ReportElements.PlaceHolder.LaidOut"/> event of the <see cref="T:ceTe.DynamicPDF.ReportWriter.ReportElements.PlaceHolder"/>.
            </summary>
            <param name="sender">Reference of type <see cref="T:System.Object"/>.</param>
            <param name="e">Reference of type <see cref="T:ceTe.DynamicPDF.ReportWriter.ReportElements.PlaceHolderLaidOutEventArgs"/>.</param>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordArea">
            <summary>
            Represents a record area report element.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="E:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordArea.LayingOut">
            <summary>
            Occurs before the record area is laid out.
            </summary>
        </member>
        <member name="E:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordArea.LaidOut">
            <summary>
            Occurs after the record area has been laid out.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordArea.Align">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.TextAlign"/> enumeration that specifies the text alignment of the record area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordArea.AutoLeading">
            <summary>
            Gets or sets a value indicating whether the leading of the record area should be calculated automatically.
            </summary>
            <remarks>This property is automatically set to false any time the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordArea.Leading"/> property is set.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordArea.CleanParagraphBreaks">
            <summary>
            Gets or sets the clean paragraph breaks for the paragraphs of the record area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordArea.Expandable">
            <summary>
            Gets or sets a value indicating whether the record area will expand if all the text is not visible.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordArea.Splittable">
            <summary>
            Gets or sets a value indicating whether the text within the record area will split if the record area reaches the end of the page.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordArea.Font">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordArea.Font"/> object used to specify the font of the text for the record area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordArea.FontSize">
            <summary>
            Gets or sets the font size for the text of the record area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordArea.Leading">
            <summary>
            Gets or sets the leading for the text of the record area.
            </summary>
            <remarks>Setting this property will automatically set the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordArea.AutoLeading"/> property to false.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordArea.ParagraphIndent">
            <summary>
            Gets or sets the paragraph indenting for the paragraphs of the record area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordArea.ParagraphSpacing">
            <summary>
            Gets or sets the paragraph spacing for the paragraphs of the record area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordArea.Text">
            <summary>
            Gets or sets the text of the record area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordArea.TextColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the text of the record area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordArea.Underline">
            <summary>
            Gets or sets a value indicating if the record area is underlined.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordArea.VAlign">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordArea.VAlign"/> enumeration that specifies the vertical text alignment of the record area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordArea.Angle">
            <summary>
            Gets or sets the angle of the record area in degrees.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordArea.Height">
            <summary>
            Gets or sets the height of the record area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordArea.Width">
            <summary>
            Gets or sets the width of the record area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordArea.X">
            <summary>
            Gets or sets the X coordinate of the record area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordArea.Y">
            <summary>
            Gets or sets the Y coordinate of the record area.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordAreaLaidOutEventArgs">
            <summary>
            Provides data for the <see cref="T:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordArea">RecordArea's</see> LaidOut event.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordAreaLaidOutEventArgs.LayoutWriter">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordAreaLaidOutEventArgs.LayoutWriter"/> argument of the RecordArea's LaidOut Event.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordAreaLaidOutEventArgs.ReportTextArea">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.ReportWriter.Layout.LayoutTextArea"/> element of the RecordArea's LaidOut event.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordAreaLaidOutEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordArea.LaidOut"/> event of the <see cref="T:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordArea"/>.
            </summary>
            <param name="sender">Reference of type <see cref="T:System.Object"/>.</param>
            <param name="e">Reference of type <see cref="T:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordAreaLaidOutEventArgs"/>.</param>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordBox">
            <summary>
            Represents a record box report element.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="E:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordBox.LayingOut">
            <summary>
            Occurs before the record box is laid out.
            </summary>
        </member>
        <member name="E:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordBox.LaidOut">
            <summary>
            Occurs after the record box has been laid out.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordBox.Align">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.TextAlign"/> enumeration that specifies the text alignment of the record box.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordBox.AutoLeading">
            <summary>
            Gets or sets a value indicating whether the leading of the record box should be calculated automatically.
            </summary>
            <remarks>This property is automatically set to false any time the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordBox.Leading"/> property is set.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordBox.CleanParagraphBreaks">
            <summary>
            Gets or sets the clean paragraph breaks for the paragraphs of the record box.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordBox.Expandable">
            <summary>
            Gets or sets a value indicating whether the record box will expand if all the text is not visible.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordBox.Splittable">
            <summary>
            Gets or sets a value indicating whether the text within the record box will split if the record area reaches the end of the page.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordBox.Font">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordBox.Font"/> object used to specify the font of the text for the record box.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordBox.FontSize">
            <summary>
            Gets or sets the font size for the text of the record box.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordBox.Leading">
            <summary>
            Gets or sets the leading for the text of the record box.
            </summary>
            <remarks>Setting this property will automatically set the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordBox.AutoLeading"/> property to false.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordBox.ParagraphIndent">
            <summary>
            Gets or sets the paragraph indenting for the paragraphs of the record box.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordBox.ParagraphSpacing">
            <summary>
            Gets or sets the paragraph spacing for the paragraphs of the record box.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordBox.TextColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the text of the record box.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordBox.Underline">
            <summary>
            Gets or sets a value indicating if the record box is underlined.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordBox.VAlign">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordBox.VAlign"/> enumeration that specifies the vertical text alignment of the record box.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordBox.DataFormat">
            <summary>
            Gets or sets the format to be used for the data of the record box.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordBox.Field">
            <summary>
            Gets or sets the name of the field to be used in the record box
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordBox.Angle">
            <summary>
            Gets or sets the angle of the record box in degrees.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordBox.Height">
            <summary>
            Gets or sets the height of the record box.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordBox.Width">
            <summary>
            Gets or sets the width of the record box.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordBox.X">
            <summary>
            Gets or sets the X coordinate of the record box.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordBox.Y">
            <summary>
            Gets or sets the Y coordinate of the record box.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordBox.FormatProvider">
            <summary>
            Gets or sets the format provider of the record box.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordBoxLaidOutEventArgs">
            <summary>
            Provides data for the <see cref="T:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordBox">RecordBox's</see> LaidOut event.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordBoxLaidOutEventArgs.LayoutWriter">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordBoxLaidOutEventArgs.LayoutWriter"/> argument of the RecordBox's LaidOut Event.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordBoxLaidOutEventArgs.ReportTextArea">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.ReportWriter.Layout.LayoutTextArea"/> element of the RecordBox's LaidOut event.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordBoxLaidOutEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordBox.LaidOut"/> event of the <see cref="T:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordBox"/>.
            </summary>
            <param name="sender">Reference of type <see cref="T:System.Object"/>.</param>
            <param name="e">Reference of type <see cref="T:ceTe.DynamicPDF.ReportWriter.ReportElements.RecordBoxLaidOutEventArgs"/>.</param>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportElements.Rectangle">
            <summary>
            Represents a rectangle report element.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="E:ceTe.DynamicPDF.ReportWriter.ReportElements.Rectangle.LayingOut">
            <summary>
            Occurs before the rectangle is laid out.
            </summary>
        </member>
        <member name="E:ceTe.DynamicPDF.ReportWriter.ReportElements.Rectangle.LaidOut">
            <summary>
            Occurs after the rectangle has been laid out.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Rectangle.BorderColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the border of the rectangle.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Rectangle.BorderStyle">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.LineStyle"/> object used to specify the border style of the rectangle.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Rectangle.BorderWidth">
            <summary>
            Gets or sets the border width of the rectangle.
            </summary>
            <remarks>To force the borders not to appear set the border width to any value 0 or less.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Rectangle.CornerRadius">
            <summary>
            Gets or sets the corner radius of the rectangle.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Rectangle.FillColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the fill of the rectangle.
            </summary>
            <remarks>To force no color to appear in the rectangle (only borders) set the fill color to null (Nothing in Visual Basic).</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Rectangle.ShowAlternateRow">
            <summary>
            Gets or sets a value indicating whether the rectangle should be displayed on alternating records.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Rectangle.Angle">
            <summary>
            Gets or sets the angle of the rectangle in degrees.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Rectangle.Height">
            <summary>
            Gets or sets the height of the rectangle.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Rectangle.Width">
            <summary>
            Gets or sets the width of the rectangle.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Rectangle.X">
            <summary>
            Gets or sets the X coordinate of the rectangle.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Rectangle.Y">
            <summary>
            Gets or sets the Y coordinate of the rectangle.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportElements.RectangleLaidOutEventArgs">
            <summary>
            Provides data for the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RectangleLaidOutEventArgs.Rectangle">Rectangle's</see> LaidOut event.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RectangleLaidOutEventArgs.LayoutWriter">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RectangleLaidOutEventArgs.LayoutWriter"/> argument of the Rectangle's LaidOut Event.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RectangleLaidOutEventArgs.Rectangle">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportElements.RectangleLaidOutEventArgs.Rectangle"/> element of the Rectangle's LaidOut event.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportElements.RectangleLaidOutEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ceTe.DynamicPDF.ReportWriter.ReportElements.Rectangle.LaidOut"/> event of the <see cref="T:ceTe.DynamicPDF.ReportWriter.ReportElements.Rectangle"/>.
            </summary>
            <param name="sender">Reference of type <see cref="T:System.Object"/>.</param>
            <param name="e">Reference of type <see cref="T:ceTe.DynamicPDF.ReportWriter.ReportElements.RectangleLaidOutEventArgs"/>.</param>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportElements.SoftBreak">
            <summary>
            Summary description for SoftBreak.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.SoftBreak.Y">
            <summary>
            Gets or sets the Y coordinate of the softbreak.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportElements.SubReport">
            <summary>
            Represents a sub report report element.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.SubReport.Height">
            <summary>
            Gets or sets the height of the sub report.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.SubReport.X">
            <summary>
            Gets or sets the X coordinate of the sub report.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.SubReport.Query">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportElements.SubReport.Query"/> object of the sub report.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.SubReport.Y">
            <summary>
            Gets or sets the X coordinate of the sub report.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.SubReport.Width">
            <summary>
            Gets or sets the width of the sub report.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.SubReport.Header">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.ReportWriter.SubReportHeader"/> object of the sub report. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.SubReport.Footer">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.ReportWriter.SubReportFooter"/> object of the sub report. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.SubReport.Detail">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.ReportWriter.DetailSubReportPart"/> object of the sub report.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportElements.Symbol">
            <summary>
            Represents a symbol report element.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="E:ceTe.DynamicPDF.ReportWriter.ReportElements.Symbol.LayingOut">
            <summary>
            Occurs before the symbol is laid out.
            </summary>
        </member>
        <member name="E:ceTe.DynamicPDF.ReportWriter.ReportElements.Symbol.LaidOut">
            <summary>
            Occurs after the symbol has been laid out.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Symbol.Font">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Symbol.Font"/> object to use for the character of the Symbol.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Symbol.CustomCharacter">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Symbol.CustomCharacter"/> of the Symbol.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Symbol.VisibilityCondition">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.ReportWriter.Condition"/> of the Symbol.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Symbol.SymbolType">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Symbol.SymbolType"/> of the Symbol.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Symbol.Size">
            <summary>
            Gets or sets the font size for the character of the Symbol.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Symbol.Color">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Symbol.Color"/> object to use for the character of the Symbol.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Symbol.Height">
            <summary>
            Gets or sets the height of the Symbol.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Symbol.Width">
            <summary>
            Gets or sets the width of the Symbol.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Symbol.X">
            <summary>
            Gets or sets the X coordinate of the Symbol.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.Symbol.Y">
            <summary>
            Gets or sets the Y coordinate of the Symbol.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportElements.SymbolLaidOutEventArgs">
            <summary>
            Provides data for the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportElements.SymbolLaidOutEventArgs.Symbol">Symbol's</see> LaidOut event.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.SymbolLaidOutEventArgs.LayoutWriter">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportElements.SymbolLaidOutEventArgs.LayoutWriter"/> argument of the Symbol's LaidOut Event.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElements.SymbolLaidOutEventArgs.Symbol">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportElements.SymbolLaidOutEventArgs.Symbol"/> element of the Symbol's LaidOut event.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportElements.SymbolLaidOutEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ceTe.DynamicPDF.ReportWriter.ReportElements.Symbol.LaidOut"/> event of the <see cref="T:ceTe.DynamicPDF.ReportWriter.ReportElements.Symbol"/>.
            </summary>
            <param name="sender">Reference of type <see cref="T:System.Object"/>.</param>
            <param name="e">Reference of type <see cref="T:ceTe.DynamicPDF.ReportWriter.ReportElements.SymbolLaidOutEventArgs"/>.</param>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.AlternateRow">
            <summary>
            Specifies the type of alternating row to display
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.AlternateRow.All">
            <summary>
            Dsiplay on every row.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.AlternateRow.Even">
            <summary>
            Display on only even rows.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.AlternateRow.Odd">
            <summary>
            Display on only odd rows.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.DetailReportPart">
            <summary>
            Represents the detail of a report.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportPart">
            <summary>
            Represents a part of a report.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportPart.HasElements">
            <summary>
            Gets a value indicating whether the report part contains elements.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportPart.Elements">
            <summary>
            Gets a list of report elements.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportPart.Height">
            <summary>
            Gets or sets the height of the report part.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportPart.Id">
            <summary>
            Gets or sets a unique ID for the report part.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.DetailReportPart.AutoSplit">
            <summary>
            Gets or sets a value indicating whether the report's detail can be split.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.DetailSubReportPart">
            <summary>
            Represents the detail of a subreport.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.DetailSubReportPart.AutoSplit">
            <summary>
            Gets or sets a value indicating whether the sub report's detail can be split.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.DocumentLayout">
            <summary>
            Represents a Document based on the supplied DPLX file.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.ReportWriter.DocumentLayout.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.ReportWriter.DocumentLayout"/> class.
            </summary>
            <param name="filePath">The physical file path of the DPLX file to use.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.ReportWriter.DocumentLayout.#ctor(ceTe.DynamicPDF.ReportWriter.DplxFile)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.ReportWriter.DocumentLayout"/> class.
            </summary>
            <param name="dplx">The <see cref="T:ceTe.DynamicPDF.ReportWriter.DplxFile"/> to use to create the <see cref="T:ceTe.DynamicPDF.ReportWriter.DocumentLayout"/> class.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.ReportWriter.DocumentLayout.GetElementById(System.String)">
            <summary>
            Returns the <see cref="T:System.Object"/> that matches the supplied id.
            </summary>
            <param name="id">The id of the object to retrieve.</param>
            <returns>The element with the supplied id.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.ReportWriter.DocumentLayout.GetReportElementById(System.String)">
            <summary>
            Returns the <see cref="T:ceTe.DynamicPDF.ReportWriter.ReportElement"/> that matches the supplied id.
            </summary>
            <param name="id">The id of the <see cref="T:ceTe.DynamicPDF.ReportWriter.ReportElement"/> to retrieve.</param>
            <returns>The <see cref="T:ceTe.DynamicPDF.ReportWriter.ReportElement"/> with the supplied id.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.ReportWriter.DocumentLayout.GetReportPartById(System.String)">
            <summary>
            Returns the <see cref="T:ceTe.DynamicPDF.ReportWriter.ReportPart"/> that matches the supplied id.
            </summary>
            <param name="id">The id of the <see cref="T:ceTe.DynamicPDF.ReportWriter.ReportPart"/> to retrieve.</param>
            <returns>The <see cref="T:ceTe.DynamicPDF.ReportWriter.ReportPart"/> with the supplied id.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.ReportWriter.DocumentLayout.GetQueryById(System.String)">
            <summary>
            Returns the <see cref="P:ceTe.DynamicPDF.ReportWriter.DocumentLayout.Query"/> that matches the supplied id. 
            </summary>
            <param name="id">The id of the <see cref="P:ceTe.DynamicPDF.ReportWriter.DocumentLayout.Query"/> to retrieve.</param>
            <returns>The <see cref="P:ceTe.DynamicPDF.ReportWriter.DocumentLayout.Query"/> with the supplied id.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.ReportWriter.DocumentLayout.Run">
            <summary>
            Creates a <see cref="T:ceTe.DynamicPDF.Document"/> object that contians the report as defined in the DPLX file.
            </summary>
            <returns>The <see cref="T:ceTe.DynamicPDF.Document"/> object containing just created.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.ReportWriter.DocumentLayout.Run(ceTe.DynamicPDF.ReportWriter.ParameterDictionary)">
            <summary>
            Creates a <see cref="T:ceTe.DynamicPDF.Document"/> object that contians the report as defined in the DPLX file.
            </summary>
            <param name="parameters">The <see cref="T:ceTe.DynamicPDF.ReportWriter.ParameterDictionary"/> to use for creating the report.</param>
            <returns>The <see cref="T:ceTe.DynamicPDF.Document"/> object containing just created.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.ReportWriter.DocumentLayout.Run(ceTe.DynamicPDF.Document)">
            <summary>
            Appends the report to the given <see cref="T:ceTe.DynamicPDF.Document"/> object.
            </summary>
            <param name="document"><see cref="T:ceTe.DynamicPDF.Document"/> object to which the report is appended.</param>
            <remarks>NOTE: The documents metadata (title, author etc.) will not be overwritten.</remarks>
        </member>
        <member name="M:ceTe.DynamicPDF.ReportWriter.DocumentLayout.Run(ceTe.DynamicPDF.ReportWriter.ParameterDictionary,ceTe.DynamicPDF.Document)">
            <summary>
            Appends the report to the given <see cref="T:ceTe.DynamicPDF.Document"/> object.
            </summary>
            <param name="parameters">The <see cref="T:ceTe.DynamicPDF.ReportWriter.ParameterDictionary"/> to use for creating the report.</param>
            <param name="document"><see cref="T:ceTe.DynamicPDF.Document"/> object to which the report is appended.</param>
            <remarks>NOTE: The documents metadata (title, author etc.) will not be overwritten.</remarks>
        </member>
        <member name="E:ceTe.DynamicPDF.ReportWriter.DocumentLayout.DocumentLayingOut">
            <summary>
            Occurs before the document`s pages are laid out.
            </summary>
        </member>
        <member name="E:ceTe.DynamicPDF.ReportWriter.DocumentLayout.DocumentLaidOut">
            <summary>
            Occurs after the document`s pages are laid out.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.DocumentLayout.FormatProvider">
            <summary>
            Gets or sets the <see cref="T:System.IFormatProvider"/> of the document layout.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.DocumentLayout.LayoutParts">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.ReportWriter.DocumentLayoutPartList"/> of the document layout.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.DocumentLayout.BasePhysicalPath">
            <summary>
            Gets or sets the base physical path of the document layout.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.DocumentLayout.AppSettings">
            <summary>
            Gets the static application settings <see cref="T:ceTe.DynamicPDF.ReportWriter.ParameterDictionary"/> of the document layout.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.DocumentLayout.ConnectionStrings">
            <summary>
            Gets the static connection string <see cref="T:ceTe.DynamicPDF.ReportWriter.ParameterDictionary"/> of the document layout.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.DocumentLayout.Fonts">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.ReportWriter.FontList"/> object of the document layout.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.DocumentLayout.FontFamilies">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.ReportWriter.FontFamilyList"/> object of the document layout.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.DocumentLayout.Id">
            <summary>
            Gets or sets the ID of the <see cref="T:ceTe.DynamicPDF.ReportWriter.DocumentLayout"/>.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.DocumentLayout.Author">
            <summary>
            Gets or sets the author of the <see cref="T:ceTe.DynamicPDF.ReportWriter.DocumentLayout"/>.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.DocumentLayout.Keywords">
            <summary>
            Gets or sets the keywords of the <see cref="T:ceTe.DynamicPDF.ReportWriter.DocumentLayout"/>.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.DocumentLayout.Title">
            <summary>
            Gets or sets the title of the <see cref="T:ceTe.DynamicPDF.ReportWriter.DocumentLayout"/>.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.DocumentLayout.Subject">
            <summary>
            Gets or sets the subject of the <see cref="T:ceTe.DynamicPDF.ReportWriter.DocumentLayout"/>.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.DocumentLayout.Tag">
            <summary>
            Gets or sets a value indicating whether document is tagged.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.DocumentLayoutEventArgs">
            <summary>
            Provides data for the <see cref="T:ceTe.DynamicPDF.ReportWriter.Report">Report's</see> ReportLaidOut event.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.DocumentLayoutEventArgs.LayoutWriter">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.ReportWriter.DocumentLayoutEventArgs.LayoutWriter"/> argument of the Report's LaidOut Event.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.DocumentLayoutEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ceTe.DynamicPDF.ReportWriter.DocumentLayout.DocumentLayingOut"/> and <see cref="E:ceTe.DynamicPDF.ReportWriter.DocumentLayout.DocumentLaidOut"/> events of <see cref="T:ceTe.DynamicPDF.ReportWriter.DocumentLayout"/>.
            </summary>
            <param name="sender">Reference of type <see cref="T:System.Object"/>.</param>
            <param name="e">Reference of type <see cref="T:ceTe.DynamicPDF.ReportWriter.DocumentLayoutEventArgs"/>.</param>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.DocumentLayoutPart">
            <summary>
            Represents a part of Document.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.DocumentLayoutPart.DocumentLayout">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.ReportWriter.DocumentLayoutPart.DocumentLayout"/> object of the report.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.DocumentLayoutPartList">
            <summary>
            Represents a list of reports and fixedpages.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.DocumentLayoutPartList.Count">
            <summary>
            Gets the total number of reports.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.DocumentLayoutPartList.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.ReportWriter.DocumentLayoutPart"/> for the given index.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.DplxFile">
            <summary>
            Represents a DPLX file for reuse.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.ReportWriter.DplxFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.ReportWriter.DplxFile"/> class.
            </summary>
            <param name="filePath">The file path to the DPLX file.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.ReportWriter.DplxFile.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.ReportWriter.DplxFile"/> class.
            </summary>
            <param name="stream">The <b>Stream</b> object containing DPLX file data.</param>        
        </member>
        <member name="M:ceTe.DynamicPDF.ReportWriter.DplxFile.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.ReportWriter.DplxFile"/> class.
            </summary>
            <param name="byteArray">The <b>byteArray</b> object containing DPLX file data in the form of byte[].</param>        
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.DplxParseException">
            <summary>
            The exception that is thrown for an error encountered when parsing the DPLX file.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.ReportWriter.DplxParseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.ReportWriter.DplxParseException"/> class.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the error.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.DplxWebForm">
            <summary>
            Represents an .aspx file that has a corresponding DPLX with the same name used in Web application.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.ReportWriter.DplxWebForm.DrawPdfToWeb">
            <summary>
            Creates the PDF and outputs it to the current ASPX page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.ReportWriter.DplxWebForm.DrawPdfToWeb(System.String)">
            <summary>
            Creates the PDF and streams it to the current ASPX page.
            </summary>
            <param name="downloadAsFileName">Specifies the file name of the document if it is downloaded.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.ReportWriter.DplxWebForm.DrawPdfToWeb(System.Boolean)">
            <summary>
            Creates the PDF and streams it to the current ASPX page.
            </summary>
            <param name="allowBrowserCaching">Specifies if the browser should be allowed to cache the PDF document.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.ReportWriter.DplxWebForm.DrawPdfToWeb(System.String,System.Boolean)">
            <summary>
            Creates the PDF and streams it to the current ASPX page.
            </summary>
            <param name="downloadAsFileName">Specifies the file name of the document if it is downloaded.</param>
            <param name="forceDownload">Specifies if the Save As dialog should appear.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.ReportWriter.DplxWebForm.DrawPdfToWeb(System.Boolean,System.String,System.Boolean)">
            <summary>
            Creates the PDF and streams it to the current ASPX page.
            </summary>
            <param name="allowBrowserCaching">Specifies if the browser should be allowed to cache the PDF document.</param>
            <param name="downloadAsFileName">Specifies the file name of the document if it is downloaded.</param>
            <param name="forceDownload">Specifies if the Save As dialog should appear.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.ReportWriter.DplxWebForm.DrawPdf">
            <summary>
            Creates the PDF and outputs it to a byte array.
            </summary>
            <returns>The PDF as a byte array.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.ReportWriter.DplxWebForm.DrawPdf(System.String)">
            <summary>
            Creates the PDF and outputs it to a file.
            </summary>
            <param name="filePath">File path to save the PDF to.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.ReportWriter.DplxWebForm.DrawPdf(System.IO.Stream)">
            <summary>
            Creates the PDF and outputs it to a <see cref="T:System.IO.Stream"/> object.
            </summary>
            <param name="stream">Stream object that receives the PDF output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.DplxWebForm.DocumentLayout">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.ReportWriter.DplxWebForm.DocumentLayout"/> of the <see cref="T:ceTe.DynamicPDF.ReportWriter.DplxWebForm"/>.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.DplxWebForm.Parameters">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.ReportWriter.ParameterDictionary"/> of the <see cref="T:ceTe.DynamicPDF.ReportWriter.DplxWebForm"/>.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.SymbolType">
            <summary>
            Specifies symbol type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.SymbolType.Check1">
            <summary>
            Check1
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.SymbolType.Check2">
            <summary>
            Check2
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.SymbolType.Circle">
            <summary>
            Circle
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.SymbolType.Square">
            <summary>
            Square
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.SymbolType.X1">
            <summary>
            X1
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.SymbolType.X2">
            <summary>
            X2
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.SymbolType.X3">
            <summary>
            X3
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.SymbolType.X4">
            <summary>
            X4
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ReportWriter.SymbolType.Custom">
            <summary>
            Custom
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.FixedPage">
            <summary>
            Represents a fixedpage.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="E:ceTe.DynamicPDF.ReportWriter.FixedPage.PageLayingOut">
            <summary>
            Occurs before the fixedpage is laid out.
            </summary>
        </member>
        <member name="E:ceTe.DynamicPDF.ReportWriter.FixedPage.PageLaidOut">
            <summary>
            Occurs after the fixedpage has been laid out.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.FixedPage.Id">
            <summary>
            Gets the ID of the report.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.FixedPage.Template">
            <summary>
            Gets or sets the PDF page to use as the template of the fixed page.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.FontFamilyList">
            <summary>
            Represents a list of font families.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.ReportWriter.FontFamilyList.Add(ceTe.DynamicPDF.FontFamily)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.FontFamily"/> to the <see cref="T:ceTe.DynamicPDF.ReportWriter.FontFamilyList"/>.
            </summary>
            <param name="FontFamily">The <see cref="T:ceTe.DynamicPDF.FontFamily"/> to add.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.FontFamilyList.Item(System.String)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.FontFamily"/> with the specified name.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.FontList">
            <summary>
            Represents a list of fonts.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.ReportWriter.FontList.Add(ceTe.DynamicPDF.Font)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.Font"/> to the <see cref="T:ceTe.DynamicPDF.ReportWriter.FontList"/>.
            </summary>
            <param name="font">The <see cref="T:ceTe.DynamicPDF.Font"/> to add.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.FontList.Item(System.String)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.Font"/> with the specified name.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.PageLaidOutEventArgs">
            <summary>
            Provides data for the <see cref="P:ceTe.DynamicPDF.ReportWriter.PageLaidOutEventArgs.FixedPage">FixedPage's</see> PageLaidOut event.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.PageLaidOutEventArgs.LayoutWriter">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.ReportWriter.PageLaidOutEventArgs.LayoutWriter"/> argument of the FixedPage's LaidOut Event.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.PageLaidOutEventArgs.FixedPage">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.ReportWriter.PageLaidOutEventArgs.FixedPage"/> of the FixedPage's LaidOut event.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.PageLaidOutEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ceTe.DynamicPDF.ReportWriter.FixedPage.PageLaidOut"/> event of the <see cref="T:ceTe.DynamicPDF.ReportWriter.FixedPage"/>.
            </summary>
            <param name="sender">Reference of type <see cref="T:System.Object"/>.</param>
            <param name="e">Reference of type <see cref="T:ceTe.DynamicPDF.ReportWriter.PageLaidOutEventArgs"/>.</param>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.PageLayingOutEventArgs">
            <summary>
            Provides data for the <see cref="T:ceTe.DynamicPDF.ReportWriter.FixedPage">FixedPage's</see> PageLayingOut event.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.PageLayingOutEventArgs.LayoutWriter">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.ReportWriter.PageLayingOutEventArgs.LayoutWriter"/> argument of the PageLayingOut Event.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.PageLayingOutEventArgs.Layout">
            <summary>
            Gets or sets a value indicating whether the element should be layed out.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.PageLayingOutEventArgs.Page">
            <summary>
            Gets the new <see cref="P:ceTe.DynamicPDF.ReportWriter.PageLayingOutEventArgs.Page"/>.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.PageLayingOutEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ceTe.DynamicPDF.ReportWriter.FixedPage.PageLayingOut"/> event of the <see cref="T:ceTe.DynamicPDF.ReportWriter.FixedPage"/>.
            </summary>
            <param name="sender">Reference of type <see cref="T:System.Object"/>.</param>
            <param name="e">Reference of type <see cref="T:ceTe.DynamicPDF.ReportWriter.PageLayingOutEventArgs"/>.</param>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ParameterDictionary">
            <summary>
            Represents a dictionary of parameters.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.ReportWriter.ParameterDictionary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.ReportWriter.ParameterDictionary"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.ReportWriter.ParameterDictionary.Add(System.String,System.Object)">
            <summary>
            Adds the provided key-value entry to the <see cref="T:ceTe.DynamicPDF.ReportWriter.ParameterDictionary"/>.
            </summary>
            <param name="key"><b>String</b> to be added as the key to the <see cref="T:ceTe.DynamicPDF.ReportWriter.ParameterDictionary"/>.</param>
            <param name="value"><see cref="T:System.Object"/> value to be added to the <see cref="T:ceTe.DynamicPDF.ReportWriter.ParameterDictionary"/>.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ParameterDictionary.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> corresponding to the provided key.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.Report">
            <summary>
            Represents a report.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="E:ceTe.DynamicPDF.ReportWriter.Report.ReportPageLayingOut">
            <summary>
            Occurs before the report`s page is laid out.
            </summary>
        </member>
        <member name="E:ceTe.DynamicPDF.ReportWriter.Report.ReportPageLaidOut">
            <summary>
            Occurs after the report`s page has been laid out.
            </summary>
        </member>
        <member name="E:ceTe.DynamicPDF.ReportWriter.Report.ReportLayingOut">
            <summary>
            Occurs before the report is laid out.
            </summary>
        </member>
        <member name="E:ceTe.DynamicPDF.ReportWriter.Report.ReportLaidOut">
            <summary>
            Occurs after the report has been laid out.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Report.Id">
            <summary>
            Gets the ID of the report.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Report.Header">
            <summary>
            Gets the header of the report.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Report.Footer">
            <summary>
            Gets the footer of the report.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Report.Detail">
            <summary>
            Gets the detail of the report.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Report.Query">
            <summary>
            Gets or sets the query of the report.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Report.PdfPage">
            <summary>
            <font color="red">Obsolete.</font> Gets or sets the PDF page to use as the template of the report.
            </summary>
            <remarks><font color="red">NOTE: This property is obsolete.</font> Use Template property instead.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.Report.Template">
            <summary>
            Gets or sets the PDF page to use as the template of the report.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportElementList">
            <summary>
            Represents a list of report elements.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.ReportWriter.ReportElementList.Add(ceTe.DynamicPDF.ReportWriter.ReportElement)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.ReportWriter.ReportElement"/> to the <see cref="T:ceTe.DynamicPDF.ReportWriter.ReportElementList"/>.
            </summary>
            <param name="element"><see cref="T:ceTe.DynamicPDF.ReportWriter.ReportElement"/> to add.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElementList.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.ReportWriter.ReportElement"/> at the given index.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportElementList.Count">
            <summary>
            Gets the number of report elements contained in the <see cref="T:ceTe.DynamicPDF.ReportWriter.ReportElementList"/>.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportFooter">
            <summary>
            Represents the footer of a report.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportFooter.Height">
            <summary>
            Gets the height of the footer.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportHeader">
            <summary>
            Represents the header of a report.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportHeader.Height">
            <summary>
            Gets the height of the header.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportLaidOutEventArgs">
            <summary>
            Provides data for the <see cref="T:ceTe.DynamicPDF.ReportWriter.Report">Report's</see> ReportLaidOut event.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportLaidOutEventArgs.LayoutWriter">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportLaidOutEventArgs.LayoutWriter"/> argument of the Report's LaidOut Event.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportLaidOutEventArgs.StartPageNumber">
            <summary>
            Gets the page number of the <see cref="T:ceTe.DynamicPDF.ReportWriter.Report">Report's</see> first page.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportLaidOutEventArgs.PageCount">
            <summary>
            Gets the number of pages of the <see cref="T:ceTe.DynamicPDF.ReportWriter.Report">Report</see>.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportLaidOutEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ceTe.DynamicPDF.ReportWriter.Report.ReportLaidOut"/> event of the <see cref="T:ceTe.DynamicPDF.ReportWriter.Report"/>.
            </summary>
            <param name="sender">Reference of type <see cref="T:System.Object"/>.</param>
            <param name="e">Reference of type <see cref="T:ceTe.DynamicPDF.ReportWriter.ReportLaidOutEventArgs"/>.</param>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportLayingOutEventArgs">
            <summary>
            Provides data for the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportLayingOutEventArgs.Report">Report's</see> ReportLayingOut event.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportLayingOutEventArgs.LayoutWriter">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportLayingOutEventArgs.LayoutWriter"/> argument of the Report's ReportLayingOut event.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportLayingOutEventArgs.Report">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportLayingOutEventArgs.Report"/> argument of the Report's ReportLayingOut event.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportLayingOutEventArgs.Layout">
            <summary>
            Gets or sets a value indicating whether the report should be layed out.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportLayingOutEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ceTe.DynamicPDF.ReportWriter.Report.ReportLayingOut"/> event of the <see cref="T:ceTe.DynamicPDF.ReportWriter.Report"/>.
            </summary>
            <param name="sender">Reference of type <see cref="T:System.Object"/>.</param>
            <param name="e">Reference of type <see cref="T:ceTe.DynamicPDF.ReportWriter.ReportLayingOutEventArgs"/>.</param>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportPageLaidOutEventArgs">
            <summary>
            Provides data for the <see cref="T:ceTe.DynamicPDF.ReportWriter.Report">Report's</see> ReportPageLaidOut event.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportPageLaidOutEventArgs.LayoutWriter">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.ReportWriter.IO.ReportPartWriter"/> argument of the Report's ReportPageLaidOut Event.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportPageLaidOutEventArgs.Page">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportPageLaidOutEventArgs.Page"/> argument of the Report's ReportPageLaidOut Event.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportPageLaidOutEventArgs.Header">
            <summary>
            Gets the header of <see cref="T:ceTe.DynamicPDF.PageElements.ContentArea"/> type.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportPageLaidOutEventArgs.Footer">
            <summary>
            Gets the footer of <see cref="T:ceTe.DynamicPDF.PageElements.ContentArea"/> type.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportPageLaidOutEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ceTe.DynamicPDF.ReportWriter.Report.ReportPageLaidOut"/> event of the <see cref="T:ceTe.DynamicPDF.ReportWriter.Report"/>.
            </summary>
            <param name="sender">Reference of type <see cref="T:System.Object"/>.</param>
            <param name="e">Reference of type <see cref="T:ceTe.DynamicPDF.ReportWriter.ReportPageLaidOutEventArgs"/>.</param>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportPageLayingOutEventArgs">
            <summary>
            Provides data for the <see cref="T:ceTe.DynamicPDF.ReportWriter.Report">Report's</see> ReportPageLayingOut event.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.ReportPageLayingOutEventArgs.LayoutWriter">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.ReportWriter.ReportPageLayingOutEventArgs.LayoutWriter"/> argument of the Report's ReportPageLayingOut Event.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportPageLayingOutEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ceTe.DynamicPDF.ReportWriter.Report.ReportPageLayingOut"/> event of the <see cref="T:ceTe.DynamicPDF.ReportWriter.Report"/>.
            </summary>
            <param name="sender">Reference of type <see cref="T:System.Object"/>.</param>
            <param name="e">Reference of type <see cref="T:ceTe.DynamicPDF.ReportWriter.ReportPageLayingOutEventArgs"/>.</param>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.ReportWriterException">
            <summary>
            The exception that is thrown when a ReportWriter error occurs.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.ReportWriter.ReportWriterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.ReportWriter.ReportWriterException"/> class.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the error.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.SubReportFooter">
            <summary>
            Represents the footer of a sub report.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.SubReportFooter.Height">
            <summary>
            Gets the height of the footer.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ReportWriter.SubReportHeader">
            <summary>
            Represents the header of a sub report.
            </summary>
            <licensing>
            This class is a DynamicPDF ReportWriter Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.ReportWriter.SubReportHeader.Height">
            <summary>
            Gets the height of the header.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.OpenTypeFontTables.OutLineType">
            <summary>
            Indicates the font outline types in a opentype font.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Text.OpenTypeFontTables.OutLineType.TrueTypeOutline">
            <summary>
            Indicates Truetype outline.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Text.OpenTypeFontTables.OutLineType.PostScriptOutLine">
            <summary>
            Indicates Postscript (CFF) outline.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.SingleByteEncoder">
             <summary>
             Base class from which single byte encoders are derived.
             </summary>
             <remarks>See the <a href="Text Encodings.html">Text Encodings</a> topic for more details on this.</remarks>
             <example>This example shows how to Change the encoding of a built in font.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.Text
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             		
                     ' Create a core font with a specified encoding
                     Dim MyCentralEuropeHelveticaFont As Font = New Helvetica(Encoder.CentralEurope)
                     ' Use the font in a text area Page Element
                     MyPage.Elements.Add(New TextArea("Text using the Central Europe encoder", 0, 0, 200, 12, MyCentralEuropeHelveticaFont, 12))
             
                     ' Save the PDF document
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.Text;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             		
                     // Create a core font with a specified encoding
                     Font centralEuropeHelveticaFont = new Helvetica( Encoder.CentralEurope );
                     // Use the font in a text area Page Element
                     page.Elements.Add( new TextArea( "Text using the Central Europe encoder", 0, 0, 200, 12, centralEuropeHelveticaFont, 12 ) );
             		
                     // Save the PDF document
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Community Edition feature.
             </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.Encoder">
             <summary>
             Base class from which encoders are derived.
             </summary>
             <remarks>This class contains the static properties from which all encodings are accessed.  See the <a href="Text Encodings.html">Text Encodings</a> topic for more details on this.</remarks>
             <example>This example shows how to Change the encoding of a built in font.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.Text
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             		
                     ' Create a core font with a specified encoding
                     Dim MyCentralEuropeHelveticaFont As Font = New Helvetica(Encoder.CentralEurope)
                     ' Use the font in a text area Page Element
                     MyPage.Elements.Add(New TextArea("Text using the Central Europe encoder", 0, 0, 200, 12, MyCentralEuropeHelveticaFont, 12))
             
                     ' Save the PDF document
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.Text;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             		
                     // Create a core font with a specified encoding
                     Font centralEuropeHelveticaFont = new Helvetica( Encoder.CentralEurope );
                     // Use the font in a text area Page Element
                     page.Elements.Add( new TextArea( "Text using the Central Europe encoder", 0, 0, 200, 12, centralEuropeHelveticaFont, 12 ) );
             		
                     // Save the PDF document
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Community Edition feature.
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.Encoder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.Encoder"/> class.
            </summary>
            <param name="spaceIs0x20"></param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.Encoder.Encode(ceTe.DynamicPDF.IO.FontSubsetter,System.Char[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Encodes the specified text. 
            </summary>
            <param name="subsetter"><see cref="T:ceTe.DynamicPDF.IO.FontSubsetter"/> to use while encoding the text.</param>
            <param name="text">Text array to use for the encoding.</param>
            <param name="start">Start index in the text array.</param>
            <param name="length">Length of text to encode.</param>
            <param name="rightToLeft">Specifies if the text should be encoded right to left.</param>
            <returns>The encoded text as a byte array.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.Encoder.DrawEncoding(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the encoding to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the encoding's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.Encoder.SpaceIs0x20">
            <summary>
            Gets a value indicating if the encoder uses a single byte 0x20 value for spaces.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.Encoder.CentralEurope">
            <summary>
            Gets the central Europe encoder.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.Encoder.Latin1">
            <summary>
            Gets the Latin 1 encoder.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.Encoder.Turkish">
            <summary>
            Gets the Turkish encoder.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.Encoder.Baltic">
            <summary>
            Gets the Baltic encoder.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.Encoder.Latin2">
            <summary>
            Gets the Latin 2 (WINANSI) encoder.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.Encoder.Latin9">
            <summary>
            Gets the Latin 9 encoder.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.Encoder.Unicode">
            <summary>
            Gets the Unicode encoder.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.SingleByteEncoder.Encode(System.Char)">
            <summary>
            Encodes a single character.
            </summary>
            <param name="character">Character to encode.</param>
            <returns>The encoded character.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.SingleByteEncoder.Decode(System.Byte)">
            <summary>
            Decodes a single character.
            </summary>
            <param name="character">The character to decode.</param>
            <returns>The decoded character.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.SingleByteEncoder.Encode(ceTe.DynamicPDF.IO.FontSubsetter,System.Char[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Encodes the specified text. 
            </summary>
            <param name="subsetter"><see cref="T:ceTe.DynamicPDF.IO.FontSubsetter"/> to use while encoding the text.</param>
            <param name="text">Text array to use for the encoding.</param>
            <param name="start">Start index in the text array.</param>
            <param name="length">Length of text to encode.</param>
            <param name="rightToLeft">Specifies if the text should be encoded right to left.</param>
            <returns>The encoded text as a byte array.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.SingleByteEncoder.IsBuiltInEncoding">
            <summary>
            Gets a value specifying if the encoding is built-in to PDF.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.CeTeBullets">
            <summary>
            Represents a CeTeBullets font.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Community Edition feature.
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.CeTeBullets.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the font definition to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to receive the core font's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.CeTeBullets.GetGlyphWidth(System.Char)">
            <summary>
            Return the mwidth of the glyph.
            </summary>
            <param name="glyph">Glyph to return the mwidth for.</param>
            <returns>The mwidth of the glyph.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.CeTeBullets.Descender">
            <summary>
            Gets the descender for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.CeTeBullets.Ascender">
            <summary>
            Gets the ascender for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.CeTeBullets.LineGap">
            <summary>
            Gets the line gap for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.CeTeBullets.RequiredPdfObjects">
            <summary>
            Gets the number of PDF objects required by the Zapf Dingbats font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.CeTeBullets.Name">
            <summary>
            Gets the name of the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.CeTeBullets.LineBreaker">
            <summary>
            Gets the default line breaker for the font.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.CoreLatinFont">
            <summary>
            Represents a core latin font.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Community Edition feature.
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.CoreLatinFont.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the font definition to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to receive the core font's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.CoreLatinFont.GetGlyphWidth(System.Char)">
            <summary>
            Returns the mwidth of a glyph.
            </summary>
            <param name="glyph">Glyph whose mwidth is to be returned.</param>
            <returns>Mwidth of glyph.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.CoreLatinFont.Descender">
            <summary>
            Gets the descender for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.CoreLatinFont.Ascender">
            <summary>
            Gets the ascender for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.CoreLatinFont.LineGap">
            <summary>
            Gets the line gap for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.CoreLatinFont.RequiredPdfObjects">
            <summary>
            Gets the number of PDF objects required by the core Latin font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.CoreLatinFont.Name">
            <summary>
            Gets the name of the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.CoreLatinFont.SingleByteEncoder">
            <summary>
            Gets the single byte encoder for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.CoreLatinFont.LineBreaker">
            <summary>
            Gets the default line breaker for the font.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.Courier">
            <summary>
            Represents the core PDF Courier font.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Community Edition feature.
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.Courier.#ctor(ceTe.DynamicPDF.Text.SingleByteEncoder)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.Courier"/> font class.
            </summary>
            <param name="encoder">Single byte encoding to use for the font.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.Courier.FormFontName">
            <summary>
            Gets the four character name of the font.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.CourierBold">
            <summary>
            Represents the core PDF Courier Bold font.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Community Edition feature.
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.CourierBold.#ctor(ceTe.DynamicPDF.Text.SingleByteEncoder)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.CourierBold"/> font class.
            </summary>
            <param name="encoder">Single byte encoding to use for the font.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.CourierBold.FormFontName">
            <summary>
            Gets the four character name of the font.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.CourierBoldOblique">
            <summary>
            Represents the core PDF Courier Bold Oblique font.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Community Edition feature.
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.CourierBoldOblique.#ctor(ceTe.DynamicPDF.Text.SingleByteEncoder)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.CourierBoldOblique"/> font class.
            </summary>
            <param name="encoder">Single byte encoding to use for the font.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.CourierBoldOblique.FormFontName">
            <summary>
            Gets the four character name of the font.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.CourierOblique">
            <summary>
            Represents the core PDF Courier Oblique font.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Community Edition feature.
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.CourierOblique.#ctor(ceTe.DynamicPDF.Text.SingleByteEncoder)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.CourierOblique"/> font class.
            </summary>
            <param name="encoder">Single byte encoding to use for the font.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.CourierOblique.FormFontName">
            <summary>
            Gets the four character name of the font.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.FontFamilyList">
            <summary>
            Represents a collection of font families.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Community Edition feature.
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.FontFamilyList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.FontFamilyList"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.FontFamilyList.Add(ceTe.DynamicPDF.FontFamily)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.FontFamily"/> to the collection.
            </summary>
            <param name="fontFamily">The <see cref="T:ceTe.DynamicPDF.FontFamily"/> object to add.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.FontFamilyList.GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.IEnumerator"/> for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.FontFamilyList.Count">
            <summary>
            Gets the total number of font families in the collection.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.FontFamilyList.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.FontFamily"/> at the specified index.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.FontFamilyList.Item(System.String)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.FontFamily"/> with the specified name.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.Helvetica">
            <summary>
            Represents the core PDF Helvetica font.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Community Edition feature.
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.Helvetica.#ctor(ceTe.DynamicPDF.Text.SingleByteEncoder)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.Helvetica"/> font class.
            </summary>
            <param name="encoder">Single byte encoding to use for the font.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.Helvetica.HasKerning">
            <summary>
            Returns whether the font has inbuilt kerning pairs.
            </summary>
            <returns>true, if the font has inbuilt kerning pair.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.Helvetica.GetKernValue(System.Char,System.Char)">
            <summary>
            Returns the kern value correspoding to the given glyph combination.
            </summary>
            <param name="left">Left glyph.</param>
            <param name="right">Right glyph.</param>
            <returns>Kern value correponds to the combination given.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.Helvetica.FormFontName">
            <summary>
            Gets the four character name of the font.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.HelveticaBold">
            <summary>
            Represents the core PDF Helvetica Bold font.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Community Edition feature.
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.HelveticaBold.#ctor(ceTe.DynamicPDF.Text.SingleByteEncoder)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.HelveticaBold"/> font class.
            </summary>
            <param name="encoder">Single byte encoding to use for the font.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.HelveticaBold.HasKerning">
            <summary>
            Returns whether the font has inbuilt kerning pairs.
            </summary>
            <returns>true, if the font has inbuilt kerning pair.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.HelveticaBold.GetKernValue(System.Char,System.Char)">
            <summary>
            Returns the kern value correspoding to the given glyph combination.
            </summary>
            <param name="left">Left glyph.</param>
            <param name="right">Right glyph.</param>
            <returns>Kern value correponds to the combination given.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.HelveticaBold.FormFontName">
            <summary>
            Gets the four character name of the font. 
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.HelveticaBoldOblique">
            <summary>
            Represents the core PDF Helvetica Bold Oblique font.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Community Edition feature.
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.HelveticaBoldOblique.#ctor(ceTe.DynamicPDF.Text.SingleByteEncoder)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.HelveticaBoldOblique"/> font class.
            </summary>
            <param name="encoder">Single byte encoding to use for the font.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.HelveticaBoldOblique.HasKerning">
            <summary>
            Returns whether the font has inbuilt kerning pairs.
            </summary>
            <returns>true, if the font has inbuilt kern pairs.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.HelveticaBoldOblique.GetKernValue(System.Char,System.Char)">
            <summary>
            Returns the kern value correspoding to the given glyph combination.
            </summary>
            <param name="left">Left glyph.</param>
            <param name="right">Right glyph.</param>
            <returns>Kern value correponds to the combination given.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.HelveticaBoldOblique.FormFontName">
            <summary>
            Gets the four character name of the font.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.HelveticaOblique">
            <summary>
            Represents the core PDF Helvetica Oblique font.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Community Edition feature.
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.HelveticaOblique.#ctor(ceTe.DynamicPDF.Text.SingleByteEncoder)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.HelveticaOblique"/> font class.
            </summary>
            <param name="encoder">Single byte encoding to use for the font.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.HelveticaOblique.HasKerning">
            <summary>
            Returns whether the font has inbuilt kerning pairs.
            </summary>
            <returns>true, if the font has inbuilt kerning pair.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.HelveticaOblique.GetKernValue(System.Char,System.Char)">
            <summary>
            Returns the kern value correspoding to the given glyph combination.
            </summary>
            <param name="left">Left glyph.</param>
            <param name="right">Right glyph.</param>
            <returns>Kern value correponds to the combination given.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.HelveticaOblique.FormFontName">
            <summary>
            Gets the four character name of the font.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.IFontSubsettable">
            <summary>
            Represents a contract implemented by subsettable fonts.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.IFontSubsettable.GetFontSubsetter">
            <summary>
            Returns a font subsetter for the font.
            </summary>
            <returns><see cref="T:ceTe.DynamicPDF.IO.FontSubsetter"/> object to use for the font.</returns>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.TextLineList">
            <summary>
            Represents a list of text lines.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TextLineList.#ctor(System.Char[],System.Int32,System.Int32,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.TextLineList"/> class.
            </summary>
            <param name="text">Text of the text line list.</param>
            <param name="start">Start index of the text for the text line list.</param>
            <param name="length">Length of the text for the text line list.</param>
            <param name="width">Width of the text line list.</param>
            <param name="height">Height of the text line list.</param>
            <param name="font">Font to use for text of the text line list.</param>
            <param name="fontSize">Font size to use for text of the text line list.</param>
            <param name="initialLineIsNewParagraph">Specifies if the first line of the text line list is a new paragraph.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TextLineList.#ctor(System.Int32,System.Single,System.Single,System.Boolean,ceTe.DynamicPDF.Text.TextLineList)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.TextLineList"/> class.
            </summary>
            <param name="start">Start index of the text for the text line list.</param>
            <param name="width">Width of the text line list.</param>
            <param name="height">Height of the text line list.</param>
            <param name="initialLineIsNewParagraph">Specifies if the first line of the text line list is a new paragraph.</param>
            <param name="textLineList">Previous text line list.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TextLineList.SetLines(System.Boolean)">
            <summary>
            Sets the lines of the line list.
            </summary>
            <param name="setAllLines">Specifies if all lines should be set.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TextLineList.CalculateLines(ceTe.DynamicPDF.Text.TextLineList.LineCalculationMode)">
            <summary>
            Calculates the lines of the text line list.
            </summary>
            <param name="mode">Mode to use for the calculation.</param>
            <returns>A value indicating if all the lines were calculated.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TextLineList.InitializeLines(System.Boolean)">
            <summary>
            Initializes the text line list.
            </summary>
            <param name="newParagraph"></param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TextLineList.GetOverflow(System.Single,System.Single)">
            <summary>
            Returns an overflow <see cref="T:ceTe.DynamicPDF.Text.TextLineList"/>.
            </summary>
            <param name="width">Width of the overflow text line list.</param>
            <param name="height">Height of the overflow text line list.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.Text.TextLineList"/> containing the overflowed lines.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TextLineList.HasOverflow">
            <summary>
            Returns a value indicating if the text line list has overflow lines.
            </summary>
            <returns>A value indicating if overflow lines exist.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TextLineList.GetOverflowText">
            <summary>
            Returns the overflow text of the text line list.
            </summary>
            <returns>The overflow text.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TextLineList.GetText">
            <summary>
            returns the text of the text line list.
            </summary>
            <returns>Text of the text line list.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TextLineList.SetText(System.String)">
            <summary>
            Sets the text of the text line list to a new value.
            </summary>
            <param name="text">Text to set as the text of the text line list.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TextLineList.SetText(System.Char[])">
            <summary>
            Sets the text of the text line list to a new value.
            </summary>
            <param name="text">Character array to set as the text of the text line list.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TextLineList.Add(ceTe.DynamicPDF.Text.TextLine)">
            <summary>
            Add a text line to the text line list.
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TextLineList.GetRequiredHeight(System.Int32)">
            <summary>
            Returns the required height for the all the text to display.
            </summary>
            <param name="startLine">Start text line index.</param>
            <returns>The required height of the text.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TextLineList.GetTextHeight(System.Int32)">
            <summary>
            Returns the height of the visible text.
            </summary>
            <param name="lineCount">Number of lines to use for the calculation.</param>
            <returns>The height of the text.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TextLineList.GetMaximunWidth">
            <summary>
            Get the maximum width of text in the line list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TextLineList.GetTextHeight">
            <summary>
            Returns the height of the visible text.
            </summary>
            <returns>The height of the text.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TextLineList.GetLineCount(System.Int32,System.Single)">
            <summary>
            Returns the number of lines that will draw for the given height.
            </summary>
            <param name="startLine">Start text line index.</param>
            <param name="height">Height used for the calculation.</param>
            <returns>the number of lines that will be drawn.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TextLineList.Draw(ceTe.DynamicPDF.IO.OperatorWriter,System.Single,System.Single,ceTe.DynamicPDF.TextAlign,ceTe.DynamicPDF.Color,System.Boolean,System.Boolean)">
            <summary>
            Draws the text line list to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.OperatorWriter"/> object to receive the link's output.</param>
            <param name="x">X coordinate of the text.</param>
            <param name="y">Y coordinate of the text.</param>
            <param name="align">Alignment of the text.</param>
            <param name="textColor">Color of the text.</param>
            <param name="underline">Specifies if the text should be underlined.</param>
            <param name="rightToLeft">Specifies if the text should be drawn right to left.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TextLineList.Draw(ceTe.DynamicPDF.IO.OperatorWriter,System.Single,System.Single,ceTe.DynamicPDF.TextAlign,ceTe.DynamicPDF.Color,System.Boolean,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Draws the text line list to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.OperatorWriter"/> object to receive the link's output.</param>
            <param name="x">X coordinate of the text.</param>
            <param name="y">Y coordinate of the text.</param>
            <param name="align">Alignment of the text.</param>
            <param name="textColor">Color of the text.</param>
            <param name="underline">Specifies if the text should be underlined.</param>
            <param name="startLine">Start line for the text.</param>
            <param name="lineCount">Number of lines to draw.</param>
            <param name="rightToLeft">Specifies if the text should be drawn right to left.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TextLineList.Draw(ceTe.DynamicPDF.IO.OperatorWriter,System.Single,System.Single,ceTe.DynamicPDF.TextAlign,ceTe.DynamicPDF.Color,System.Boolean,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Draws the text line list to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.OperatorWriter"/> object to receive the link's output.</param>
            <param name="x">X coordinate of the text.</param>
            <param name="y">Y coordinate of the text.</param>
            <param name="align">Alignment of the text.</param>
            <param name="textColor">Color of the text.</param>
            <param name="underline">Specifies if the text should be underlined.</param>
            <param name="startLine">Start line for the text.</param>
            <param name="lineCount">Number of lines to draw.</param>
            <param name="rightToLeft">Specifies if the text should be drawn right to left.</param>
            <param name="strikeThrough">Specifies if the text should be StrikeThrough.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLineList.Start">
            <summary>
            Gets or sets the start index for text in the text line list.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLineList.End">
            <summary>
            Gets or sets the ending index for text in the text line list.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLineList.LineCount">
            <summary>
            Gets the line count of the text line list.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLineList.VisibleLineCount">
            <summary>
            Gets the number of lines that will be drawn. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLineList.BaseLine">
            <summary>
            Gets the baseline value for the text line list.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLineList.Item(System.Int32)">
            <summary>
            Gets the text line at the given index.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLineList.TextArray">
            <summary>
            Gets or sets the text of the text line list.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLineList.Width">
            <summary>
            Gets or set the width of the text line list.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLineList.CleanParagraphBreaks">
            <summary>
            Gets or sets if the text line list should have clean paragraph breaks.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLineList.Height">
            <summary>
            Gets or sets the height of the text line list.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLineList.Font">
            <summary>
            Gets or sets the font of the text line list.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLineList.FontSize">
            <summary>
            Gets or sets the font size of the text line list.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLineList.Leading">
            <summary>
            Gets or sets the leading of the text line list.
            </summary>
            <remarks>Setting this property will automatically set the <see cref="P:ceTe.DynamicPDF.Text.TextLineList.AutoLeading"/> property to false.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLineList.AutoLeading">
            <summary>
            Gets or sets whether the leading of the text line list should be calculated automatically.
            </summary>
            <remarks>This property is automatically set to false any time the <see cref="P:ceTe.DynamicPDF.Text.TextLineList.Leading"/> property is set.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLineList.Count">
            <summary>
            Gets the number of lines in the text line list.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLineList.ParagraphIndent">
            <summary>
            Gets or sets the paragraph indention of the text line list.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLineList.ParagraphSpacing">
            <summary>
            Gets or sets the paragraph spacing of the text line list.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.TextLineList.LineCalculationMode">
            <summary>
            Specifies a line calculation mode.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Text.TextLineList.LineCalculationMode.OneLine">
            <summary>Calculate one line.</summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Text.TextLineList.LineCalculationMode.ToHeight">
            <summary>Calculate lines to the given height.</summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Text.TextLineList.LineCalculationMode.All">
            <summary>Calculate all lines.</summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.KerningValues">
             <summary>
             Represents a kerning value collection.
             </summary>
             <example>The following example will display text on the page.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.Text
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
             
                     ' Add page to the document
                     MyDocument.Pages.Add(MyPage)
              
                     ' Assign some text to a string
                     Dim MyText As String = "To and WA are examples of when kerning would be used."
             
                     ' Create a textarea
                     Dim MyTextArea As TextArea = New TextArea(MyText, 10, 10, 400, 700, ceTe.DynamicPDF.Font.TimesRoman)
             
                     ' Must be enabled before kern values can be read
                     MyTextArea.KerningEnabled = true
             		 
                     ' Create a KerningValues 
                     Dim MyKernValues As KerningValues = MyTextArea.GetKerningValues()
                     
                     ' Assign positive value for making the space between chars closer and negative value for making the space further
                     For i As Integer = 0 To MyKernValues.Spacing.Length - 1
                         MyKernValues.Spacing(i) = Short.Parse((MyKernValues.Spacing(i) - 400).ToString)
                     Next
            
                     ' Add the text to the page
                     MyPage.Elements.Add(MyTextArea)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.Text;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
             
                     // Add page to the document
                     document.Pages.Add( page );
             		
                     //Assign some text to a string
                     string text = "To and WA are examples of when kerning would be used.";
             
                     // Create a textarea
                     TextArea textArea = new TextArea(text, 10, 10, 400, 700, ceTe.DynamicPDF.Font.TimesRoman);
             
                     // Must be enabled before kern values can be read
                     textArea.KerningEnabled = true;
             		 
                     // Create a KerningValues 
                     KerningValues kernValues = textArea.GetKerningValues();
             
                     // Assign positive value for making the space between chars closer and negative value for making the space further
                     for (int i = 0; i &lt; kernValues.Spacing.Length; i++)
                     {
                         kernValues.Spacing[i] = (short)(kernValues.Spacing[i] - 400);
                     }
            
                     // Add the text area to the page
                     page.Elements.Add( textArea );	
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.KerningValues.Text">
            <summary>
            Gets the character array of the text that is kerned.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.KerningValues.Spacing">
            <summary>
            Gets the spacing array corresponding to the text array.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.LatinLineBreaker">
            <summary>
            Represents a Latin line breaker.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator Professional Edition</item>
            <item>DynamicPDF Generator Enterprise Edition</item>
            <item>DynamicPDF Merger Professional Edition</item>
            <item>DynamicPDF Merger Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.LineBreaker">
            <summary>
            Represents a line breaker for text.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator Professional Edition</item>
            <item>DynamicPDF Generator Enterprise Edition</item>
            <item>DynamicPDF Merger Professional Edition</item>
            <item>DynamicPDF Merger Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.LineBreaker.GetLines(System.Char[],System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Returns a <see cref="T:ceTe.DynamicPDF.Text.TextLineList"/> with the text broken into lines.
            </summary>
            <param name="text">Text for the text line list.</param>
            <param name="width">Width of the text line list.</param>
            <param name="height">Height of the text line list.</param>
            <param name="font">Font to use for the text of the text line list.</param>
            <param name="fontSize">Font size to use for the text of the text line list.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.Text.TextLineList"/> for the given text.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.LineBreaker.GetLines(System.Char[],System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Returns a <see cref="T:ceTe.DynamicPDF.Text.TextLineList"/> with the text broken into lines.
            </summary>
            <param name="text">Text for the text line list.</param>
            <param name="width">Width of the text line list.</param>
            <param name="font">Font to use for the text of the text line list.</param>
            <param name="fontSize">Font size to use for the text of the text line list.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.Text.TextLineList"/> for the given text.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.LineBreaker.GetLines(System.Char[],System.Int32,System.Int32,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Returns a <see cref="T:ceTe.DynamicPDF.Text.TextLineList"/> with the text broken into lines.
            </summary>
            <param name="text">Text for the text line list.</param>
            <param name="start">Start index for the text of the text line list.</param>
            <param name="length">Length of the text of the text line list.</param>
            <param name="width">Width of the text line list.</param>
            <param name="height">Height of the text line list.</param>
            <param name="font">Font to use for the text of the text line list.</param>
            <param name="fontSize">Font size to use for the text of the text line list.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.Text.TextLineList"/> for the given text.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.LineBreaker.GetLines(System.Char[],System.Int32,System.Int32,System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Returns a <see cref="T:ceTe.DynamicPDF.Text.TextLineList"/> with the text broken into lines.
            </summary>
            <param name="text">Text for the text line list.</param>
            <param name="start">Start index for the text of the text line list.</param>
            <param name="length">Length of the text of the text line list.</param>
            <param name="width">Width of the text line list.</param>
            <param name="font">Font to use for the text of the text line list.</param>
            <param name="fontSize">Font size to use for the text of the text line list.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.Text.TextLineList"/> for the given text.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.LineBreaker.Latin">
            <summary>
            Gets the Latin line breaker.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.LineBreaker.Universal">
            <summary>
            Gets the universal line breaker.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.LineBreaker.Default">
            <summary>
            Gets or sets the default line breaker.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.LatinLineBreaker.GetLines(System.Char[],System.Int32,System.Int32,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Returns a <see cref="T:ceTe.DynamicPDF.Text.TextLineList"/> with the text broken into lines for Latin text.
            </summary>
            <param name="text">Text for the text line list.</param>
            <param name="start">Start index for the text of the text line list.</param>
            <param name="length">Length of the text of the text line list.</param>
            <param name="width">Width of the text line list.</param>
            <param name="height">Height of the text line list.</param>
            <param name="font">Font to use for the text of the text line list.</param>
            <param name="fontSize">Font size to use for the text of the text line list.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.Text.TextLineList"/> for the given text.</returns>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.LatinTextLineList">
            <summary>
            Represents a Latin text line list.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.LatinTextLineList.#ctor(System.Char[],System.Int32,System.Int32,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.LatinTextLineList"/> class.
            </summary>
            <param name="text">Text for the text line list.</param>
            <param name="start">Start index for the text of the text line list.</param>
            <param name="length">Length of the text of the text line list.</param>
            <param name="width">Width of the text line list.</param>
            <param name="height">Height of the text line list.</param>
            <param name="font">Font to use for the text of the text line list.</param>
            <param name="fontSize">Font size to use for the text of the text line list.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.LatinTextLineList.GetOverflowText">
            <summary>
            Returns the overflow text of the text line list.
            </summary>
            <returns>Overflow text of the line list.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.LatinTextLineList.HasOverflow">
            <summary>
            Returns a value indicating if the text line list has overflow lines.
            </summary>
            <returns>A value indicating if the line list has overflow text.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.LatinTextLineList.GetOverflow(System.Single,System.Single)">
            <summary>
            Returns the overflow lines for the text line list.
            </summary>
            <param name="width">Width of the returned text line list.</param>
            <param name="height">Height of the returned text line list.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.Text.TextLineList"/> containing the overflow lines.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.LatinTextLineList.InitializeLines(System.Boolean)">
            <summary>
            Initializes the text line list.
            </summary>
            <param name="newParagraph">Specifies if the first line in the list is a new paragraph.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.LatinTextLineList.CalculateLines(ceTe.DynamicPDF.Text.TextLineList.LineCalculationMode)">
            <summary>
            Calculates the lines.
            </summary>
            <param name="mode">Line calculation mode to use.</param>
            <returns>A value indicating if all the lines were calculated.</returns>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.OpenTypeFont">
             <summary>
             Represents an OpenType font.
             </summary>
             <remarks>See the <a href="OpenTypeFonts.html">OpenType Fonts</a> topic for more on OpenType fonts.</remarks>
             <example>This example shows how to use the opentype font.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.Text;
             
             Module MyModule
             
                 Sub Main()
             
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a opentype font
                     Dim  MyOpentypefont As OpenTypeFont = New OpenTypeFont("Path of .otf file")
             
                     ' Create a label
                     Dim MyLabel As ceTe.DynamicPDF.PageElements.Label  = New ceTe.DynamicPDF.PageElements.Label("This text uses opentype font ", 0, 0, 300, 300)
             
                     ' Assign opentype font to label
                     MyLabel.Font = MyOpentypefont
             
                     ' Add lable to the page
                     MyPage.Elements.Add(MyLabel)
             
                     ' Save the PDF document
                     MyDocument.Draw("C:\MyDocument.pdf")
             
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.Text;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create a opentype font
                     OpenTypeFont opentypefont = new OpenTypeFont("Path of .otf file");
            
                     //Create a label
                     ceTe.DynamicPDF.PageElements.Label label = new ceTe.DynamicPDF.PageElements.Label("This text uses opentype font ", 0, 0, 300, 300);
             
                     // Assign opentype font to label
                     label.Font = opentypefont;
                     
                     // Add lable to the page
                     page.Elements.Add(label);
             
                     // Save the PDF document
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Professional Edition</item>
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Professional Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Professional Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.OpenTypeFont.#ctor(System.String)">
            <summary>
            Intializes a new instance of <see cref="T:ceTe.DynamicPDF.Text.OpenTypeFont"/> class.
            </summary>
            <param name="filePath">Physical file path of the OpenType font file.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.OpenTypeFont.#ctor(System.String,ceTe.DynamicPDF.Text.LineBreaker)">
            <summary>
            Intializes a new instance of <see cref="T:ceTe.DynamicPDF.Text.OpenTypeFont"/> class.
            </summary>
            <param name="filePath">Physical file path of the opentype / truetype font file.</param>
            <param name="lineBreaker">Line breaker to use for the opentype font. </param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.OpenTypeFont.#ctor(System.IO.Stream,ceTe.DynamicPDF.Text.LineBreaker)">
            <summary>
            Intializes a new instance of <see cref="T:ceTe.DynamicPDF.Text.OpenTypeFont"/> class.
            </summary>
            <param name="reader">Stream containing the opentype  / truetype font data.</param>
            <param name="lineBreaker">Line breaker to use for the opentype font.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.OpenTypeFont.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draw the opentype font data to the <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/>.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object used to receive the opentype font output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.OpenTypeFont.GetGlyphWidth(System.Char)">
            <summary>
            Returns the mwidth of the given char.
            </summary>
            <param name="glyph">Glyph whose mwidth is required.</param>
            <returns>mwdith of the given glyph.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.OpenTypeFont.GetFontSubsetter">
            <summary>
            eturns a font subsetter for the opentype font.
            </summary>
            <returns><see cref="T:ceTe.DynamicPDF.IO.FontSubsetter"/> object used for the font.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.OpenTypeFont.HasKerning">
            <summary>
            Returns whether the font has inbuilt kerning pairs.
            </summary>
            <returns>true, if the font has inbuilt kerning pair.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.OpenTypeFont.GetKernValue(System.Char,System.Char)">
            <summary>
            Returns the kern value correspoding to the given glyph combination.
            </summary>
            <param name="left">Left glyph.</param>
            <param name="right">Right glyph.</param>
            <returns>Kern value correponds to the combination given.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.OpenTypeFont.LineBreaker">
            <summary>
            Gets the instance of <see cref="P:ceTe.DynamicPDF.Text.OpenTypeFont.LineBreaker"/> used for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.OpenTypeFont.Name">
            <summary>
            Gets the font name for the file given.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.OpenTypeFont.RequiredPdfObjects">
            <summary>
            Gets the required pdf objects.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.OpenTypeFont.ResourceType">
            <summary>
            Gets the value of <see cref="P:ceTe.DynamicPDF.Text.OpenTypeFont.ResourceType"/>.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.OpenTypeFont.LineGap">
            <summary>
            Gets the line gap for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.OpenTypeFont.Ascender">
            <summary>
            Gets the ascender for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.OpenTypeFont.Descender">
            <summary>
            Gets the descender for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.OpenTypeFont.Embed">
            <summary>
            Gets or sets a value indicating whether the font need to be embedded in to the pdf.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.OpenTypeFont.Subset">
            <summary>
            Gets or sets a value indicating whether the font need to subset while embedding.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.OpenTypeFont.OutLineType">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.Text.OpenTypeFont.OutLineType"/> of the opentype font.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.SingleByteEncodingResource">
            <summary>
            Represents a single byte encoding resource.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Community Edition feature.
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.SingleByteEncodingResource.#ctor(System.Int64,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.SingleByteEncodingResource"/> font class.
            </summary>
            <param name="uid">The unique ID of the encoder.</param>
            <param name="data">Byte array containing the encoders output steam.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.SingleByteEncodingResource.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the encoder to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to receive the encoder's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.SingleByteEncodingResource.RequiredPdfObjects">
            <summary>
            Gets the number of PDF objects required by the single byte encoding.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.SingleByteEncodingResource.ResourceType">
            <summary>
            Gets the resource type.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.SinoTypeSongLight">
            <summary>
            Represents the Asian Font Pack, Sino Type Song Light font.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Community Edition feature.
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.SinoTypeSongLight.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the font definition to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to receive the font's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.SinoTypeSongLight.GetGlyphWidth(System.Char)">
            <summary>
            Returns the mwidth of a glyph.
            </summary>
            <param name="glyph">Glyph whose mwidth is to be returned.</param>
            <returns>Mwidth of glyph.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.SinoTypeSongLight.Descender">
            <summary>
            Gets the descender for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.SinoTypeSongLight.Ascender">
            <summary>
            Gets the ascender for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.SinoTypeSongLight.RequiredPdfObjects">
            <summary>
            Gets the number of PDF objects required by the Sino Type Song Light font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.SinoTypeSongLight.Name">
            <summary>
            Gets the name of the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.SinoTypeSongLight.LineBreaker">
            <summary>
            Gets the default line breaker for the font.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.Symbol">
            <summary>
            Represents the core PDF Symbol font.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Community Edition feature.
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.Symbol.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the font definition to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to receive the core font's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.Symbol.GetGlyphWidth(System.Char)">
            <summary>
            Returns the mwidth of a glyph.
            </summary>
            <param name="glyph">Glyph whose mwidth is to be returned.</param>
            <returns>Mwidth of glyph.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.Symbol.Descender">
            <summary>
            Gets the descender for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.Symbol.Ascender">
            <summary>
            Gets the ascender for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.Symbol.LineGap">
            <summary>
            Gets the line gap for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.Symbol.RequiredPdfObjects">
            <summary>
            Gets the number of PDF objects required by the Symbol font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.Symbol.Name">
            <summary>
            Gets the name of the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.Symbol.FormFontName">
            <summary>
            Gets the four character name of the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.Symbol.LineBreaker">
            <summary>
            Gets the default line breaker for the font.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.TextLine">
            <summary>
            Represents a line of text.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TextLine.#ctor(System.Int32,System.Int32,System.Int32,System.Single,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.TextLine"/> class.
            </summary>
            <param name="start">Start index for the text.</param>
            <param name="length">Length of the text.</param>
            <param name="mWidth">MWidth of the text.</param>
            <param name="yOffset">Y offset for the line.</param>
            <param name="spaceCount">Number of spaces in the line.</param>
            <param name="newParagraph">Specifies if the line begins a paragraph.</param>
            <param name="hardReturn">Specifies if the line ends with a hard return.</param>
            <param name="hyphenate">Specifies if the line ends with a hyphenation.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TextLine.GetWidth(System.Single)">
            <summary>
            Returns the width of the line's text in points.
            </summary>
            <param name="fontSize">Font size to use for the width.</param>
            <returns>the width of the lines text.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLine.Start">
            <summary>
            Gets or sets the start index of the lines text.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLine.Length">
            <summary>
            Gets or sets the length of the lines text.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLine.HardReturn">
            <summary>
            Gets or sets a value indicating if the line ends with a hard return.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLine.NewParagraph">
            <summary>
            Gets or sets a value indicating if the line begins a paragraph.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLine.Hyphenate">
            <summary>
            Gets or sets a value indicating if the line is to be hyphenated.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLine.SpaceCount">
            <summary>
            Gets or sets the space count for the line.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLine.MWidth">
            <summary>
            Gets or sets the mwidth of the line.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLine.YOffset">
            <summary>
            Gets or sets the y offset of the line.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.TimesBold">
            <summary>
            Represents the core PDF Times Bold font.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Community Edition feature.
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TimesBold.#ctor(ceTe.DynamicPDF.Text.SingleByteEncoder)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.TimesBold"/> font class.
            </summary>
            <param name="encoder">Single byte encoding to use for the font.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TimesBold.HasKerning">
            <summary>
            Returns whether the font has inbuilt kerning pairs.
            </summary>
            <returns>true, if the font has inbuilt kerning pair.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TimesBold.GetKernValue(System.Char,System.Char)">
            <summary>
            Returns the kern value correspoding to the given glyph combination.
            </summary>
            <param name="left">Left glyph.</param>
            <param name="right">Right glyph.</param>
            <returns>Kern value correponds to the combination given.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TimesBold.FormFontName">
            <summary>
            Gets the four character name of the font.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.TimesBoldItalic">
            <summary>
            Represents the core PDF Times Bold Italic font.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Community Edition feature.
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TimesBoldItalic.#ctor(ceTe.DynamicPDF.Text.SingleByteEncoder)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.TimesBoldItalic"/> font class.
            </summary>
            <param name="encoder">Single byte encoding to use for the font.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TimesBoldItalic.HasKerning">
            <summary>
            Returns whether the font has inbuilt kerning pairs.
            </summary>
            <returns>true, if the font has inbuilt kerning pair.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TimesBoldItalic.GetKernValue(System.Char,System.Char)">
            <summary>
            Returns the kern value correspoding to the given glyph combination.
            </summary>
            <param name="left">Left glyph.</param>
            <param name="right">Right glyph.</param>
            <returns>Kern value correponds to the combination given.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TimesBoldItalic.FormFontName">
            <summary>
            Gets the four character name of the font.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.TimesItalic">
            <summary>
            Represents the core PDF Times Italic font.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Community Edition feature.
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TimesItalic.#ctor(ceTe.DynamicPDF.Text.SingleByteEncoder)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.TimesItalic"/> font class.
            </summary>
            <param name="encoder">Single byte encoding to use for the font.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TimesItalic.HasKerning">
            <summary>
            Returns whether the font has inbuilt kerning pairs.
            </summary>
            <returns>true, if the font has inbuilt kerning pair.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TimesItalic.GetKernValue(System.Char,System.Char)">
            <summary>
            Returns the kern value correspoding to the given glyph combination.
            </summary>
            <param name="left">Left glyph.</param>
            <param name="right">Right glyph.</param>
            <returns>Kern value correponds to the combination given.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TimesItalic.FormFontName">
            <summary>
            Gets the four character name of the font.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.TimesRoman">
            <summary>
            Represents the core PDF Times Roman font.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Community Edition feature.
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TimesRoman.#ctor(ceTe.DynamicPDF.Text.SingleByteEncoder)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.TimesRoman"/> font class.
            </summary>
            <param name="encoder">Single byte encoding to use for the font.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TimesRoman.HasKerning">
            <summary>
            Returns whether the font has inbuilt kerning pairs.
            </summary>
            <returns>true, if the font has inbuilt kerning pair.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TimesRoman.GetKernValue(System.Char,System.Char)">
            <summary>
            Returns the kern value correspoding to the given glyph combination.
            </summary>
            <param name="left">Left glyph.</param>
            <param name="right">Right glyph.</param>
            <returns>Kern value correponds to the combination given.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TimesRoman.FormFontName">
            <summary>
            Gets the four character name of the font.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.TrueTypeFont">
            <summary>
            <font color="red">Obsolete.</font> Represents a TrueType font.
            </summary>
            <remarks><font color="red">NOTE: This class is now obsolete.</font> Use the <see cref="T:ceTe.DynamicPDF.Text.OpenTypeFont"/> class instead.</remarks>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TrueTypeFont.#ctor(System.String)">
            <summary>
            <font color="red">Obsolete.</font> Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.TrueTypeFont"/> class.
            </summary>
            <param name="filePath">Physical file path to the TrueType font file.</param>
            <remarks><font color="red">NOTE: This class is now obsolete.</font> Use the <see cref="T:ceTe.DynamicPDF.Text.OpenTypeFont"/> class instead.</remarks>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TrueTypeFont.#ctor(System.Byte[])">
            <summary>
            <font color="red">Obsolete.</font> Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.TrueTypeFont"/> class.
            </summary>
            <param name="bytes">TrueType font file byte array.</param>
            <remarks><font color="red">NOTE: This class is now obsolete.</font> Use the <see cref="T:ceTe.DynamicPDF.Text.OpenTypeFont"/> class instead.</remarks>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TrueTypeFont.#ctor(System.Byte[],ceTe.DynamicPDF.Text.LineBreaker)">
            <summary>
            <font color="red">Obsolete.</font> Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.TrueTypeFont"/> class.
            </summary>
            <param name="bytes">TrueType font file byte array.</param>
            <param name="lineBreaker">Line breaker to use for the TrueType font.</param>
            <remarks><font color="red">NOTE: This class is now obsolete.</font> Use the <see cref="T:ceTe.DynamicPDF.Text.OpenTypeFont"/> class instead.</remarks>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TrueTypeFont.#ctor(System.String,ceTe.DynamicPDF.Text.LineBreaker)">
            <summary>
            <font color="red">Obsolete.</font> Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.TrueTypeFont"/> class.
            </summary>
            <param name="filePath">Physical file path to the TrueType font file.</param>
            <param name="lineBreaker">Line breaker to use for the TrueType font.</param>
            <remarks><font color="red">NOTE: This class is now obsolete.</font> Use the <see cref="T:ceTe.DynamicPDF.Text.OpenTypeFont"/> class instead.</remarks>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TrueTypeFont.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            <font color="red">Obsolete.</font> Draws the TrueType font to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the TureType font's output.</param>
            <remarks><font color="red">NOTE: This class is now obsolete.</font> Use the <see cref="T:ceTe.DynamicPDF.Text.OpenTypeFont"/> class instead.</remarks>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TrueTypeFont.GetGlyphWidth(System.Char)">
            <summary>
            <font color="red">Obsolete.</font> Returns the mwidth of a glyph.
            </summary>
            <param name="glyph">Glyph whose mwidth is to be returned.</param>
            <returns>Mwidth of glyph.</returns>
            <remarks><font color="red">NOTE: This class is now obsolete.</font> Use the <see cref="T:ceTe.DynamicPDF.Text.OpenTypeFont"/> class instead.</remarks>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TrueTypeFont.GetFontSubsetter">
            <summary>
            <font color="red">Obsolete.</font> Returns a font subsetter for the TrueType font.
            </summary>
            <returns><see cref="T:ceTe.DynamicPDF.IO.FontSubsetter"/> object to use for the font.</returns>
            <remarks><font color="red">NOTE: This class is now obsolete.</font> Use the <see cref="T:ceTe.DynamicPDF.Text.OpenTypeFont"/> class instead.</remarks>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TrueTypeFont.HasKerning">
            <summary>
            <font color="red">Obsolete.</font> Returns whether the font has inbuilt kerning pairs.
            </summary>
            <returns>true, if the font has inbuilt kerning pair.</returns>
            <remarks><font color="red">NOTE: This class is now obsolete.</font> Use the <see cref="T:ceTe.DynamicPDF.Text.OpenTypeFont"/> class instead.</remarks>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TrueTypeFont.GetKernValue(System.Char,System.Char)">
            <summary>
            <font color="red">Obsolete.</font> Returns the kern value correspoding to the given glyph combination.
            </summary>
            <param name="left">Left glyph.</param>
            <param name="right">Right glyph.</param>
            <returns>Kern value correponds to the combination given.</returns>
            <remarks><font color="red">NOTE: This class is now obsolete.</font> Use the <see cref="T:ceTe.DynamicPDF.Text.OpenTypeFont"/> class instead.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TrueTypeFont.RequiredPdfObjects">
            <summary>
            <font color="red">Obsolete.</font> Gets the number of PDF objects required by the TrueType font.
            </summary>
            <remarks><font color="red">NOTE: This class is now obsolete.</font> Use the <see cref="T:ceTe.DynamicPDF.Text.OpenTypeFont"/> class instead.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TrueTypeFont.Descender">
            <summary>
            <font color="red">Obsolete.</font> Gets the descender for the font.
            </summary>
            <remarks><font color="red">NOTE: This class is now obsolete.</font> Use the <see cref="T:ceTe.DynamicPDF.Text.OpenTypeFont"/> class instead.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TrueTypeFont.Ascender">
            <summary>
            <font color="red">Obsolete.</font> Gets the ascender for the font.
            </summary>
            <remarks><font color="red">NOTE: This class is now obsolete.</font> Use the <see cref="T:ceTe.DynamicPDF.Text.OpenTypeFont"/> class instead.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TrueTypeFont.LineGap">
            <summary>
            <font color="red">Obsolete.</font> Gets the line gap for the font.
            </summary>
            <remarks><font color="red">NOTE: This class is now obsolete.</font> Use the <see cref="T:ceTe.DynamicPDF.Text.OpenTypeFont"/> class instead.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TrueTypeFont.Name">
            <summary>
            <font color="red">Obsolete.</font> Gets the name of the font.
            </summary>
            <remarks><font color="red">NOTE: This class is now obsolete.</font> Use the <see cref="T:ceTe.DynamicPDF.Text.OpenTypeFont"/> class instead.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TrueTypeFont.Embed">
            <summary>
            <font color="red">Obsolete.</font> Gets or sets a value indicating if the font should be embedded.
            </summary>
            <remarks><font color="red">NOTE: This class is now obsolete.</font> Use the <see cref="T:ceTe.DynamicPDF.Text.OpenTypeFont"/> class instead.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TrueTypeFont.LineBreaker">
            <summary>
            <font color="red">Obsolete.</font> Gets the default line breaker for the font.
            </summary>
            <remarks><font color="red">NOTE: This class is now obsolete.</font> Use the <see cref="T:ceTe.DynamicPDF.Text.OpenTypeFont"/> class instead.</remarks>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.Type1Font">
            <summary>
            Represents a Type1Font font.
            </summary>
            <remarks>See the <a href="Type1 Fonts.html">Type1 Fonts</a> topic for more on Type1 fonts.</remarks>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.Type1Font.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.Type1Font"/> class.
            </summary>
            <param name="metricsFile">Physical file path to the .PFM or .AFM font metrics file.</param>
            <param name="fontFile">Physical file path to the Type 1 (.PFB) font file.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.Type1Font.GetGlyphWidth(System.Char)">
            <summary>
            Returns the mwidth of a glyph.
            </summary>
            <param name="glyph">Glyph whose mwidth is to be returned.</param>
            <returns>Mwidth of glyph.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.Type1Font.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the Type 1 font to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the Type 1 font's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.Type1Font.RequiredPdfObjects">
            <summary>
            Gets the number of PDF objects required by the type 1 font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.Type1Font.LineBreaker">
            <summary>
            Gets the default line breaker for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.Type1Font.Descender">
            <summary>
            Gets the descender for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.Type1Font.Ascender">
            <summary>
            Gets the ascender for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.Type1Font.LineGap">
            <summary>
            Gets the line gap for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.Type1Font.Name">
            <summary>
            Gets the name of the font.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.UniversalLineBreaker">
            <summary>
            Represents a universal line breaker.
            </summary>
            <remarks>This line breaker works well for both CJK and many other types of text.</remarks>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.UniversalLineBreaker.GetLines(System.Char[],System.Int32,System.Int32,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Returns a <see cref="T:ceTe.DynamicPDF.Text.TextLineList"/> with the text broken into lines for Latin or CJK text.
            </summary>
            <param name="text">Text for the text line list.</param>
            <param name="start">Start index for the text of the text line list.</param>
            <param name="length">Length of the text of the text line list.</param>
            <param name="width">Width of the text line list.</param>
            <param name="height">Height of the text line list.</param>
            <param name="font">Font to use for the text of the text line list.</param>
            <param name="fontSize">Font size to use for the text of the text line list.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.Text.TextLineList"/> for the given text.</returns>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.UniversalTextLineList">
            <summary>
            Represents a universal text line list.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.UniversalTextLineList.#ctor(System.Char[],System.Int32,System.Int32,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.UniversalTextLineList"/> class.
            </summary>
            <param name="text">Text for the text line list.</param>
            <param name="start">Start index for the text of the text line list.</param>
            <param name="length">Length of the text of the text line list.</param>
            <param name="width">Width of the text line list.</param>
            <param name="height">Height of the text line list.</param>
            <param name="font">Font to use for the text of the text line list.</param>
            <param name="fontSize">Font size to use for the text of the text line list.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.UniversalTextLineList.GetOverflowText">
            <summary>
            Returns the overflow text of the text line list.
            </summary>
            <returns>Overflow text of the line list.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.UniversalTextLineList.HasOverflow">
            <summary>
            Returns a value indicating if the text line list has overflow lines.
            </summary>
            <returns>A value indicating if the line list has overflow text.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.UniversalTextLineList.GetOverflow(System.Single,System.Single)">
            <summary>
            Returns the overflow lines for the text line list.
            </summary>
            <param name="width">Width of the returned text line list.</param>
            <param name="height">Height of the returned text line list.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.Text.TextLineList"/> containing the overflow lines.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.UniversalTextLineList.InitializeLines(System.Boolean)">
            <summary>
            Initializes the text line list.
            </summary>
            <param name="newParagraph">Specifies if the first line in the list is a new paragraph.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.UniversalTextLineList.CalculateLines(ceTe.DynamicPDF.Text.TextLineList.LineCalculationMode)">
            <summary>
            Calculates the lines.
            </summary>
            <param name="mode">Line calculation mode to use.</param>
            <returns>A value indicating if all the lines were calculated.</returns>
        </member>
        <member name="T:ceTe.DynamicPDF.Xmp.XmpSchema">
            <summary>
            Represents the base class for all XMP schemas.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Xmp.XmpSchema.Draw(ceTe.DynamicPDF.Xmp.XmpWriter)">
            <summary>
            Draws the XMP schema data to the document.
            </summary>
            <param name="xwriter"><see cref="T:ceTe.DynamicPDF.Xmp.XmpWriter"/> object to write xmp schema output.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.Xmp.BasicJobTicketSchema">
            <summary>
            Class represents XMP Basic Job Ticket Schema.
            </summary>
            <remarks>The following schema describes very simple workflow or job information.</remarks>
            <example>This example shows how to create an Basic Job Ticket Schema and Add it to the Xmp Metadata.<p/>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.Xmp
            
            Module MyModule
            		
                Sub Main()
            		
                    ' Create a PDF Document
                    Dim MyDocument As Document = New Document
            		
                    ' Add blank pages to the document
                    MyDocument.Pages.Add(New Page(PageSize.Letter))
                    MyDocument.Pages.Add(New Page(PageSize.Letter))
            		
                    ' Create an Xmp Metadata
                    Dim MyXmp As XmpMetadata = New XmpMetadata
            		
                    ' Basic Job Ticket Schema.
                    Dim MyJob As BasicJobTicketSchema = New BasicJobTicketSchema
                    MyJob.JobRef.Add( "MyCompany", "Xmp Test", new Uri( "http://www.mydomain.com/" ) )
                    MyJob.JobRef.Add( "MyProduct", "XMP Metadata", new Uri( "http://www.mydomain.com/" ) )
                    MyXmp.AddSchema( MyJob ) 		
            		
                    ' Add the Xmp Metadata to the document
                    MyDocument.XmpMetadata = MyXmp
            
                    ' Save the PDF document
                    MyDocument.Draw("C:\MyDocument.pdf")
            		
                End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.Xmp;
            
            class MyClass
            {
                static void Main()
                {
                    // Create a PDF Document
                    Document document = new Document();
            		
                    // Add blank pages to the document
                    document.Pages.Add( new Page( PageSize.Letter ) );
                    document.Pages.Add( new Page( PageSize.Letter ) );
            		
                    // Create an Xmp Metadata
                    XmpMetadata xmp = new XmpMetadata();
            		
                    // Basic Job Ticket Schema.
                    BasicJobTicketSchema job = new BasicJobTicketSchema();
                    job.JobRef.Add( "MyCompany", "Xmp Test", new Uri( "http://www.mydomain.com/" ) );
                    job.JobRef.Add( "MyProduct", "XMP Metadata", new Uri( "http://www.mydomain.com/" ) );
                    xmp.AddSchema( job );
            		
                    // Add the Xmp Metadata to the document
                    document.XmpMetadata = xmp;
            		
                    // Save the PDF document
                    document.Draw( @"C:\MyDocument.pdf" );
                }
            }
            </code>
            </example>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Xmp.BasicJobTicketSchema.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Xmp.BasicJobTicketSchema"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Xmp.BasicJobTicketSchema.Draw(ceTe.DynamicPDF.Xmp.XmpWriter)">
            <summary>
            Draws the Basic Job Ticket Schema to the given <see cref="T:ceTe.DynamicPDF.Xmp.XmpWriter"/> object.
            </summary>
            <param name="xwriter"><see cref="T:ceTe.DynamicPDF.Xmp.XmpWriter"/> object to receive the Basic Job Ticket Schema's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Xmp.BasicJobTicketSchema.JobRef">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.Xmp.XmpJob"/> object to set. , references an external job
            management file for a job process in which the document is being 
            used. Use of job names is under user control. Typical use would be
            to identify all documents that are part of a particular job or contract.
            There are multiple values because there can be more than one job using
            a particular document at any time, and it can also be useful to keep
            historical information about what jobs a document was part of previously.
            </summary>
            <remarks>
            This references an external job management file for a job process 
            in which the document is being used. 
            Use of job names is under user control. Typical use would be
            to identify all documents that are part of a particular job or contract.
            There are multiple values because there can be more than one job using
            a particular document at any time, and it can also be useful to keep
            historical information about what jobs a document was part of previously.
            </remarks>
        </member>
        <member name="T:ceTe.DynamicPDF.Xmp.BasicSchema">
             <summary>
             Class represents the XMP Basic Schema.
             </summary>
             <remarks>The XMP Basic Schema contains properties that provide basic descriptive information.</remarks>
             <example>This example shows how to create an Basic Schema and Add it to the Xmp Metadata.<p/>
             <code lang="VB">
             Imports System
             Imports System.IO
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.Xmp
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document
             		
                     ' Add blank pages to the document
                     MyDocument.Pages.Add(New Page(PageSize.Letter))
                     MyDocument.Pages.Add(New Page(PageSize.Letter))
             		
                     ' Create an Xmp Metadata
                     Dim MyXmp As XmpMetadata = New XmpMetadata
            
                     ' Basic Schema.
                     Dim Mybs As BasicSchema  = MyXmp.BasicSchema
                     Mybs.Advisory.Add("Date")
                     Mybs.Advisory.Add("Contributors")
                     Mybs.Nickname = "xyz"
                     Mybs.Thumbnails.Add(106, 80, "JPEG", GetImage("C:\thumbnail.jpg"))
                     ' Note: Need not have to add Basic Schema, already added internally.
             		
                     ' Add the Xmp Metadata to the document
                     MyDocument.XmpMetadata = MyXmp
             
                     ' Save the PDF document
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             	
                 Private Function GetImage(ByVal filePath As String) As Byte()
             	
                     Dim MyInFile As FileStream = New FileStream(filePath, FileMode.Open, FileAccess.Read)
                     Dim MyBinaryData(MyInFile.Length) As Byte
                     MyInFile.Read(MyBinaryData, 0, MyInFile.Length)
                     MyInFile.Close()			
                     return MyBinaryData
            		
                 End Function
            		
             End Module
             </code>
             <code lang="C#">
             using System;
             using System.IO;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.Xmp;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
             		
                     // Add blank pages to the document
                     document.Pages.Add( new Page( PageSize.Letter ) );
                     document.Pages.Add( new Page( PageSize.Letter ) );
             		
                     // Create an Xmp Metadata
                     XmpMetadata xmp = new XmpMetadata();
             		
                     // Basic Schema.
                     BasicSchema bs = xmp.BasicSchema;
                     bs.Advisory.Add( "Date" );
                     bs.Advisory.Add( "Contributors" );
                     bs.Nickname = "xyz";
                     bs.Thumbnails.Add(106, 80, "JPEG", GetImage( @"C:\thumbnail.jpg" ) );
                     // Note: Need not have to add Basic Schema, already added internally.
             		
                     // Add the Xmp Metadata to the document
                     document.XmpMetadata = xmp;
             		
                     // Save the PDF document
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             	
                 private static byte[] GetImage( string filePath )
                 {
                     FileStream inFile = new FileStream( filePath, FileMode.Open, FileAccess.Read );
                     byte[] binaryData = new byte[ inFile.Length ];
                     inFile.Read( binaryData, 0, (int)inFile.Length );
                     inFile.Close();			
                     return binaryData;
                 }	
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Xmp.BasicSchema.Draw(ceTe.DynamicPDF.Xmp.XmpWriter)">
            <summary>
            Draws the Basic Schema to the given <see cref="T:ceTe.DynamicPDF.Xmp.XmpWriter"/> object.
            </summary>
            <param name="xwriter"><see cref="T:ceTe.DynamicPDF.Xmp.XmpWriter"/> object to receive the Basic Schema's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Xmp.BasicSchema.Advisory">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.Xmp.XmpArray"/> object to set the
            advisory property to specify properties that
            were edited outside the authoring application.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Xmp.BasicSchema.Nickname">
            <summary>
            Gets or sets a short informal name for the resource.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Xmp.BasicSchema.Thumbnails">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.Xmp.XmpThumbnail"/> object to set an 
            alternative array of thumbnail images for a file, which
            can differ in characteristics such as size or image encoding.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Xmp.CopyrightStatus">
            <summary>
            The type of Copyright Status to use.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Xmp.CopyrightStatus.Unknown">
            <summary>
            Copyright status Unknown.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Xmp.CopyrightStatus.Copyrighted">
            <summary>
            Copyright status Copyrighted.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Xmp.CopyrightStatus.PublicDomain">
            <summary>
            Copyright status public domain.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Xmp.DublinCoreSchema">
             <summary>
             Class represents the Dublin Core Schema.
             </summary>
             <remarks>The Dublin Core schema provides a set of commonly used properties.</remarks>
             <example>This example shows how to create an Dublin Core Schema and Add it to the Xmp Metadata.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.Xmp
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document
             		
                     ' Add blank pages to the document
                     MyDocument.Pages.Add(New Page(PageSize.Letter))
                     MyDocument.Pages.Add(New Page(PageSize.Letter))
             		
                     ' Create an Xmp Metadata
                     Dim MyXmp As XmpMetadata = New XmpMetadata
            
                     ' Dublin Core Schema.
                     Dim Mydc As DublinCoreSchema = MyXmp.DublinCore
                     Mydc.Contributors.Add( "Abc" )
                     Mydc.Contributors.Add( "Xyz" )
                     Mydc.Contributors.Add( "Pqrs" )
                     Mydc.Coverage = "To test all the attributes of schema's provided"
                     Mydc.Creators.Add( "MyProduct" )
                     Mydc.Creators.Add( "MyCompany" )
                     Mydc.Date.Add( DateTime.Now )
                     Mydc.Description.AddLang( "en-us", "XMP Schema's test" )
                     Mydc.Identifier = "First XMP pdf"
                     Mydc.Publisher.Add( "mydomain.com" )
                     Mydc.Publisher.Add( "MyCompany" )
                     Mydc.Relation.Add( "test pdf with xmp" )
                     Mydc.Rights.DefaultText = "US English"
                     Mydc.Rights.AddLang( "en-us", "All rights reserved 2012, MyCompany." )
                     Mydc.Source = "XMP Project"
                     Mydc.Subject.Add( "eXtensible Metadata Platform" )
                     Mydc.Title.AddLang( "en-us", "XMP" )
                     Mydc.Title.AddLang( "it-it", "XMP - Piattaforma Estendible di Metadata" )
                     Mydc.Title.AddLang( "du-du", "De hallo Wereld" )
                     Mydc.Title.AddLang( "fr-fr", "XMP - Une Platforme Extensible pour les Métédonnées" )
                     Mydc.Title.AddLang( "DE-DE", "ÄËßÜ Hallo Welt" )
                     Mydc.Type.Add( "Pdf file containing xmp metadata" )
                     ' Note: Need not have to add Dublin Core Schema, already added internally.
             		
                     ' Add the Xmp Metadata to the document
                     MyDocument.XmpMetadata = MyXmp
             
                     ' Save the PDF document
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.Xmp;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
             		
                     // Add blank pages to the document
                     document.Pages.Add( new Page( PageSize.Letter ) );
                     document.Pages.Add( new Page( PageSize.Letter ) );
             		
                     // Create an Xmp Metadata
                     XmpMetadata xmp = new XmpMetadata();
             		
                     // Dublin Core Schema.
                     DublinCoreSchema dc = xmp.DublinCore;
                     dc.Contributors.Add( "Abc" );
                     dc.Contributors.Add( "Xyz" );
                     dc.Contributors.Add( "Pqrs" );
                     dc.Coverage = "To test all the attributes of schema's provided";
                     dc.Creators.Add( "MyProduct" );
                     dc.Creators.Add( "MyCompany" );
                     dc.Date.Add( DateTime.Now );
                     dc.Description.AddLang( "en-us", "XMP Schema's test" );
                     dc.Identifier = "First XMP pdf";
                     dc.Publisher.Add( "mydomain.com" );
                     dc.Publisher.Add( "MyCompany" );
                     dc.Relation.Add( "test pdf with xmp" );
                     dc.Rights.DefaultText = "US English";
                     dc.Rights.AddLang( "en-us", "All rights reserved 2012, MyCompany." );
                     dc.Source = "XMP Project";
                     dc.Subject.Add( "eXtensible Metadata Platform" );
                     dc.Title.AddLang( "en-us", "XMP" );
                     dc.Title.AddLang( "it-it", "XMP - Piattaforma Estendible di Metadata" );
                     dc.Title.AddLang( "du-du", "De hallo Wereld" );
                     dc.Title.AddLang( "fr-fr", "XMP - Une Platforme Extensible pour les Métédonnées" );
                     dc.Title.AddLang( "DE-DE", "ÄËßÜ Hallo Welt" );
                     dc.Type.Add( "Pdf file containing xmp metadata" );
                     // Note: Need not have to add Dublin Core Schema, already added internally.
             		
                     // Add the Xmp Metadata to the document
                     document.XmpMetadata = xmp;
             		
                     // Save the PDF document
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Xmp.DublinCoreSchema.Draw(ceTe.DynamicPDF.Xmp.XmpWriter)">
            <summary>
            Draws the Dublin Core Schema to the given <see cref="T:ceTe.DynamicPDF.Xmp.XmpWriter"/> object.
            </summary>
            <param name="xwriter"><see cref="T:ceTe.DynamicPDF.Xmp.XmpWriter"/> object to receive the Dublin Core Schema's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Xmp.DublinCoreSchema.Contributors">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.Xmp.XmpArray"/> object to set the
            contributors of the resource(other than the author).
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Xmp.DublinCoreSchema.Coverage">
            <summary>
            Gets or sets the coverage property representing the extent 
            or scope of the resource.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Xmp.DublinCoreSchema.Creators">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.Xmp.XmpArray"/> object to set the authors 
            of the resource(listed in order of precedence, if significant).
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Xmp.DublinCoreSchema.Date">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.Xmp.XmpArray"/> object to set the Date(s)
            that something important happened to the resource.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Xmp.DublinCoreSchema.Description">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.Xmp.XmpLangAltList"/> to set the 
            textual description of the content of the resource.
            Multiple values may be present for different languages.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Xmp.DublinCoreSchema.Identifier">
            <summary>
            Gets or sets the unique identifier of the resource.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Xmp.DublinCoreSchema.Publisher">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.Xmp.XmpArray"/> object to set the publishers of the resource.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Xmp.DublinCoreSchema.Relation">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.Xmp.XmpArray"/> object to set relationships to other documents.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Xmp.DublinCoreSchema.Rights">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.Xmp.XmpLangAltList"/> object to set the informal
            rights statement, selected by language.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Xmp.DublinCoreSchema.Source">
            <summary>
            Gets or sets the unique identifier of the work from which
            the resource was derived.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Xmp.DublinCoreSchema.Subject">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.Xmp.XmpArray"/> object to set the descriptive
            phrases or keywords that specify the topic of the content of 
            the resource. By default the keywords set in <see cref="T:ceTe.DynamicPDF.Document"/>
            class will also append along with this phrases. 
            If not required set the ImportKeywords to false.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Xmp.DublinCoreSchema.Title">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.Xmp.XmpLangAltList"/> object to set the title
            of the document, or the name given to the resource.
            </summary>
            <remarks>
            Typically, it will be a name by which the resource is formally known.
            </remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.Xmp.DublinCoreSchema.Type">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.Xmp.XmpArray"/> object to set the document type.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Xmp.DublinCoreSchema.ImportKeywords">
            <summary>
            Gets or sets a boolean value to signify the keywords to be imported from
            <see cref="T:ceTe.DynamicPDF.Document"/> class. By default it is set to true.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Xmp.PagedTextSchema">
            <summary>
            Class represents the XMP Paged-Text Schema.
            </summary>
            <remarks>The Paged-Text schema is used for text appearing on a page in a document.</remarks>
            <example>This example shows how to create an Paged-Text Schema and Add it to the Xmp Metadata.<p/>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.Xmp
            
            Module MyModule
            		
                Sub Main()
            		
                    ' Create a PDF Document
                    Dim MyDocument As Document = New Document
            		
                    ' Add blank pages to the document
                    MyDocument.Pages.Add(New Page(PageSize.Letter))
                    MyDocument.Pages.Add(New Page(PageSize.Letter))
            		
                    ' Create an Xmp Metadata
                    Dim MyXmp As XmpMetadata = New XmpMetadata
            		
                    ' Paged-Text Schema.
                    Dim Mypt As PagedTextSchema = New PagedTextSchema
                    MyXmp.AddSchema(Mypt)
            		
                    ' Add the Xmp Metadata to the document
                    MyDocument.XmpMetadata = MyXmp
            
                    ' Save the PDF document
                    MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.Xmp;
            
            class MyClass
            {
                static void Main()
                {
                    // Create a PDF Document
                    Document document = new Document();
            		
                    // Add blank pages to the document
                    document.Pages.Add( new Page( PageSize.Letter ) );
                    document.Pages.Add( new Page( PageSize.Letter ) );
            		
                    // Create an Xmp Metadata
                    XmpMetadata xmp = new XmpMetadata();
            		
                    // Paged-Text Schema.
                    PagedTextSchema pt = new PagedTextSchema();
                    xmp.AddSchema( pt );
            		
                    // Add the Xmp Metadata to the document
                    document.XmpMetadata = xmp;
            		
                    // Save the PDF document
                    document.Draw( @"C:\MyDocument.pdf" );
                }
            }
            </code>
            </example>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Xmp.PagedTextSchema.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Xmp.PagedTextSchema"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Xmp.PagedTextSchema.Draw(ceTe.DynamicPDF.Xmp.XmpWriter)">
            <summary>
            Draws the Paged-Text Schema to the given <see cref="T:ceTe.DynamicPDF.Xmp.XmpWriter"/> object.
            </summary>
            <param name="xwriter"><see cref="T:ceTe.DynamicPDF.Xmp.XmpWriter"/> object to receive the Paged-Text Schema's output.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.Xmp.PdfASchema">
             <summary>
             Class represents PdfA Schema.
             </summary>
             <example>This example demonstrates the elements needed to specify a document as PDF/A-1b compatible.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             Imports ceTe.DynamicPDF.Xmp
             Imports ceTe.DynamicPDF.Text
             
             Module MyModule
             
                 Sub Main()
             
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             
                     ' Set Document Title Property
                     MyDocument.Title = "PDF/A1 Document"
             
                     ' Create a XmpaMetadata instance
                     Dim MyXmp As XmpMetadata =  New XmpMetadata() 
            
                     ' Add PDF/A schema with the conformance level.
                     Dim MyPdfaSchema As PdfASchema =  New PdfASchema(PdfAStandard.PDF_A_1b_2005) 
                     MyXmp.AddSchema(MyPdfaSchema)
                     Dim MyDc As DublinCoreSchema =  MyXmp.DublinCore 
                     MyDc.Title.AddLang("en-us", "PDF/A1 Document")
                     MyDocument.XmpMetadata = MyXmp
            
                     ' Embedded iccprofile file.
                     Dim MyIccProfile As IccProfile =  New IccProfile("C:\Temp\IccProfile\sRGB_IEC61966-2-1_noBPC.icc") 
             
                     ' Create Outputintent and add to documnet's outputIntents
                     Dim MyOutputIntents As OutputIntent =  New OutputIntent("","IEC 61966-2.1 Default RGB colour space - sRGB 1 ","http://www.color.org","sRGB IEC61966-2.1 1",MyIccProfile) 
                     MyOutputIntents.Version = OutputIntentVersion.PDF_A
                     MyDocument.OutputIntents.Add(MyOutputIntents)
                     Dim MyText As String =  "Hello World" 
             
                     ' Create a Type1font 
                     Dim MyType1Font As Type1Font =  New Type1Font("C:\Temp\Type1\HELVETICA.PFM","C:\Temp\Type1\HELVETICA.PFB") 
             
                     ' Create a label using type1font
                     Dim MyLabel As Label =  New Label(MyText,0,0,504,100,MyType1Font,18,TextAlign.Center,RgbColor.BlueViolet) 
             
                     ' Create a page
                     Dim MyPage As Page =  New Page(PageSize.Letter,PageOrientation.Portrait,54.0f) 
             
                     ' Add label to the page
                     MyPage.Elements.Add(MyLabel)
             
                     ' Add Page to the Document
                     MyDocument.Pages.Add(MyPage)
             
                     ' Save the PDF document
                     MyDocument.Draw("C:\MyDocument.pdf")
             
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             using ceTe.DynamicPDF.Xmp;
             using ceTe.DynamicPDF.Text;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
                     
                     // Set Document Title Property
                     document.Title = "PDF/A1 Document";
             
                     // Create a XmpaMetadata instance
                     XmpMetadata xmp = new XmpMetadata();
            
                     // Add PDF/A schema with the conformance level.
                     PdfASchema pdfaschema = new PdfASchema(PdfAStandard.PDF_A_1b_2005);
                     xmp.AddSchema(pdfaschema);
                     DublinCoreSchema dc = xmp.DublinCore;
                     dc.Title.AddLang("en-us", "PDF/A1 Document");
                     document.XmpMetadata = xmp;
            
                     // Embedded iccprofile file
                     IccProfile iccProfile = new IccProfile(@"C:\Temp\IccProfile\sRGB_IEC61966-2-1_noBPC.icc");
             
                     // Create Outputintent and add to documnet's outputIntents
                     OutputIntent outputIntents = new OutputIntent("", "IEC 61966-2.1 Default RGB colour space - sRGB 1 ", "http://www.color.org", "sRGB IEC61966-2.1 1", iccProfile);
                     outputIntents.Version = OutputIntentVersion.PDF_A;
                     document.OutputIntents.Add(outputIntents);
                     string text = "Hello World";
             
                     // Create a Type1font 
                     Type1Font type1Font = new Type1Font(@"C:\Temp\Type1\HELVETICA.PFM", @"C:\Temp\Type1\HELVETICA.PFB");
             
                     // Create a label using type1font
                     Label label = new Label(text, 0, 0, 504, 100, type1Font, 18, TextAlign.Center, RgbColor.BlueViolet);
             
                     // Create a page
                     Page page = new Page(PageSize.Letter, PageOrientation.Portrait, 54.0f);
             
                     // Add label to the page
                     page.Elements.Add(label);
             
                     // Add page to the document
                     document.Pages.Add(page);
             
                     // Save the PDF document
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:ceTe.DynamicPDF.Xmp.PdfASchema.#ctor(ceTe.DynamicPDF.Xmp.PdfAStandard)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Xmp.PdfASchema"/> class.
            </summary>
            <param name="standard">The <see cref="T:ceTe.DynamicPDF.Xmp.PdfAStandard"/> of conformance level.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Xmp.PdfASchema.Draw(ceTe.DynamicPDF.Xmp.XmpWriter)">
            <summary>
            Draws the PDF/A Schema to the given <see cref="T:ceTe.DynamicPDF.Xmp.XmpWriter"/> object.
            </summary>
            <param name="xwriter"><see cref="T:ceTe.DynamicPDF.Xmp.XmpWriter"/> object to receive the PDFA Schema's output.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.Xmp.PdfAStandard">
            <summary>
            Specifies a PDF/A Standard.
            </summary>
            <licensing>
            This enumeration is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="F:ceTe.DynamicPDF.Xmp.PdfAStandard.PDF_A_1a_2005">
            <summary>
             PDF/A standard 1a 2005.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Xmp.PdfAStandard.PDF_A_1b_2005">
            <summary>
             PDF/A standard 1b 2005.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Xmp.RightsManagementSchema">
            <summary>
            Class represents the XMP Rights Management Schema.
            </summary>
            <remarks>This schema includes properties related to rights management.
            These properties specify information regarding the legal
            restrictions associated with a resource.</remarks>
            <example>This example shows how to create an Rights Management Schema and Add it to the Xmp Metadata.<p/>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.Xmp
            
            Module MyModule
            		
                Sub Main()
            		
                    ' Create a PDF Document
                    Dim MyDocument As Document = New Document
            		
                    ' Add blank pages to the document
                    MyDocument.Pages.Add(New Page(PageSize.Letter))
                    MyDocument.Pages.Add(New Page(PageSize.Letter))
            		
                    ' Create an Xmp Metadata
                    Dim MyXmp As XmpMetadata = New XmpMetadata
            		
                    ' Rights Management Schema.
                    Dim Myrm As RightsManagementSchema = New RightsManagementSchema
                    Myrm.Marked2 = CopyrightStatus.PublicDomain
                    Myrm.Owner.Add( "Company Name" )
                    Myrm.UsageTerms.AddLang( "en-us", "Contact MyCompany" )
                    MyXmp.AddSchema(Myrm)
            		
                    ' Add the Xmp Metadata to the document
                    MyDocument.XmpMetadata = MyXmp
            
                    ' Save the PDF document
                    MyDocument.Draw("C:\MyDocument.pdf")
            		
                End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.Xmp;
            
            class MyClass
            {
                static void Main()
                {
                    // Create a PDF Document
                    Document document = new Document();
            		
                    // Add blank pages to the document
                    document.Pages.Add( new Page( PageSize.Letter ) );
                    document.Pages.Add( new Page( PageSize.Letter ) );
            		
                    // Create an Xmp Metadata
                    XmpMetadata xmp = new XmpMetadata();
            		
                    // Rights Management Schema.
                    RightsManagementSchema rm = new RightsManagementSchema();
                    rm.Marked2 = CopyrightStatus.PublicDomain;
                    rm.Owner.Add( "Company Name" );
                    rm.UsageTerms.AddLang( "en-us", "Contact MyCompany" );
                    xmp.AddSchema( rm );
            		
                    // Add the Xmp Metadata to the document
                    document.XmpMetadata = xmp;
            		
                    // Save the PDF document
                    document.Draw( @"C:\MyDocument.pdf" );
                }
            }
            </code>
            </example>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Xmp.RightsManagementSchema.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Xmp.RightsManagementSchema"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Xmp.RightsManagementSchema.Draw(ceTe.DynamicPDF.Xmp.XmpWriter)">
            <summary>
            Draws the Rights Management Schema to the given <see cref="T:ceTe.DynamicPDF.Xmp.XmpWriter"/> object.
            </summary>
            <param name="xwriter"><see cref="T:ceTe.DynamicPDF.Xmp.XmpWriter"/> object to receive the Rights Management Schema's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Xmp.RightsManagementSchema.Certificate">
            <summary>
            Gets or sets the online rights management certificate.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Xmp.RightsManagementSchema.Marked">
            <summary>
            <font color="red">Obsolete.</font> Gets or sets the value indicating that this is a rights-managed resource.
            </summary>
            <remarks><font color="red">NOTE: This property is obsolete.</font> Use Marked2 property instead.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.Xmp.RightsManagementSchema.Marked2">
            <summary>
            Gets or sets the value indicating that this is a rights-managed resource.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Xmp.RightsManagementSchema.Owner">
            <summary>
            Sets the legal owner(s) of a resource.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Xmp.RightsManagementSchema.UsageTerms">
            <summary>
            Sets the text instructions on how a resource can be legally used.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Xmp.RightsManagementSchema.WebStatement">
            <summary>
            Sets the location of a web page describing the owner 
            and/or rights statement for this resource.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Xmp.XmpArray">
            <summary>
            Class represents the XMP array data type.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.Xmp.XmpCollection">
            <summary>
            This class represents the base class for all the XMP data structures.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.Xmp.XmpDataType">
            <summary>
            This class represents the base class for all xmp data types.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.Xmp.XmpCollection.Count">
            <summary>
            Gets the number of elements present in the collection.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Xmp.XmpArray.Add(System.String)">
            <summary>
            Adds the text to the property.
            </summary>
            <param name="data">Text to set as value for feild.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Xmp.XmpArray.Add(System.DateTime)">
            <summary>
            Adds the date to the property.
            </summary>
            <param name="date">The date to be added.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Xmp.XmpArray.Count">
            <summary>
            Gets the number of elements present in the collection.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Xmp.XmpJob">
            <summary>
            This class represents the XMP job data structure.
            <remarks>Describes a job for a job-management system.</remarks>
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Xmp.XmpJob.Add(System.String,System.String,System.Uri)">
            <summary>
            Adds the fields of Job data type.
            </summary>
            <param name="name">Informal name of job. This name is for user display and informal systems.</param>
            <param name="id">Unique ID for the job. This field is a reference into some external job management system.</param>
            <param name="uri">A file URL referencing an external job management file.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Xmp.XmpJob.Count">
            <summary>
            Gets the number of elements present in the collection.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Xmp.XmpLangAltList">
            <summary>
            This class represents a language alternative, which is an array of type
            that has a language property qualifier.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Xmp.XmpLangAltList.AddLang(System.String,System.String)">
            <summary>
            Adds the default country language and text in the specified language.
            </summary>
            <param name="langCountry">Specifying the country of the language. For e.g: "en-us", "fr-fr", "it-it" and etc.</param>
            <param name="text">Representing some text in country language.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Xmp.XmpLangAltList.DefaultText">
            <summary>
            Gets or sets the default country language and text representing the language.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Xmp.XmpLangAltList.Count">
            <summary>
            Gets the number of elements present in the collection.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Xmp.XmpMetadata">
            <summary>
            This class represents the XMP metadata for a PDF document.
            </summary>
            <remarks>For more details on using XMP metadata take a look at the <a href="XMP Metadata.html">XMP Metadata</a> topic.</remarks>
            <example>This example shows how to create an Xmp Metadata and Add it to the document.<p/>
            <code lang="VB">
            Imports System
            Imports System.IO
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.Xmp
            
            Module MyModule
            		
                Sub Main()
            		
                    ' Create a PDF Document
                    Dim MyDocument As Document = New Document
                    MyDocument.Keywords = "XMP, metadata, pdf, example"
                    MyDocument.Title = "Pdf document with xmp metadata"
            		
                    ' Add blank pages to the document
                    MyDocument.Pages.Add(New Page(PageSize.Letter))
                    MyDocument.Pages.Add(New Page(PageSize.Letter))
            		
                    ' Create an Xmp Metadata
                    Dim MyXmp As XmpMetadata = New XmpMetadata
            		
                    ' Dublin Core Schema.
                    Dim Mydc As DublinCoreSchema = MyXmp.DublinCore
                    Mydc.Contributors.Add( "Abc" )
                    Mydc.Contributors.Add( "Xyz" )
                    Mydc.Contributors.Add( "Pqrs" )
                    Mydc.Coverage = "To test all the attributes of schema's provided"
                    Mydc.Creators.Add( "MyProduct" )
                    Mydc.Creators.Add( "MyCompany" )
                    Mydc.Date.Add( DateTime.Now )
                    Mydc.Description.AddLang( "en-us", "XMP Schema's test" )
                    Mydc.Identifier = "First XMP pdf"
                    Mydc.Publisher.Add( "mydomain.com" )
                    Mydc.Publisher.Add( "My Company" )
                    Mydc.Relation.Add( "test pdf with xmp" )
                    Mydc.Rights.DefaultText = "US English"
                    Mydc.Rights.AddLang( "en-us", "All rights reserved 2012, MyCompany." )
                    Mydc.Source = "XMP Project"
                    Mydc.Subject.Add( "eXtensible Metadata Platform" )
                    Mydc.Title.AddLang( "en-us", "XMP" )
                    Mydc.Title.AddLang( "it-it", "XMP - Piattaforma Estendible di Metadata" )
                    Mydc.Title.AddLang( "du-du", "De hallo Wereld" )
                    Mydc.Title.AddLang( "fr-fr", "XMP - Une Platforme Extensible pour les Métédonnées" )
                    Mydc.Title.AddLang( "DE-DE", "ÄËßÜ Hallo Welt" )
                    Mydc.Type.Add( "Pdf file containing xmp metadata" )
            		
                    ' Basic Schema.
                    Dim Mybs As BasicSchema  = MyXmp.BasicSchema
                    Mybs.Advisory.Add( "Date" )
                    Mybs.Advisory.Add( "Contributors" )
                    Mybs.Nickname = "xyz"
                    Mybs.Thumbnails.Add(106, 80, "JPEG", GetImage("C:\thumbnail.jpg"))
            		
                    ' Rights Management Schema.
                    Dim Myrm As RightsManagementSchema = New RightsManagementSchema
                    Myrm.Marked2 = CopyrightStatus.PublicDomain
                    Myrm.Owner.Add( "MyCompany" )
                    Myrm.UsageTerms.AddLang( "en-us", "Contact MyCompany" )
                    MyXmp.AddSchema(Myrm)
            		
                    ' Basic Job Ticket Schema.
                    Dim MyJob As BasicJobTicketSchema = New BasicJobTicketSchema
                    MyJob.JobRef.Add( "MyCompany", "Xmp Test", new Uri( "http://www.mydomain.com/" ) )
                    MyJob.JobRef.Add( "MyCompany", "XMP Metadata", new Uri( "http://www.mydomain.com/" ) )
                    MyXmp.AddSchema(MyJob)
            		
                    ' Paged-Text Schema.
                    Dim Mypt As PagedTextSchema = New PagedTextSchema
                    MyXmp.AddSchema(Mypt)
            		
                    ' Need not have to add Dublic core schema, Basic Schema and 
                    ' Adobe Pdf schema at this point. These are already added internally.
                    MyXmp.AddSchema(Myrm)
                    MyXmp.AddSchema(MyJob)
                    MyXmp.AddSchema(Mypt)
            		
                    ' Add the Xmp Metadata to the document
                    MyDocument.XmpMetadata = MyXmp
            
                    ' Save the PDF document
                    MyDocument.Draw("C:\MyDocument.pdf")
            		
                End Sub
            	
                Private Function GetImage(ByVal filePath As String) As Byte()
            	
                    Dim MyInFile As FileStream = New FileStream(filePath, FileMode.Open, FileAccess.Read)
                    Dim MyBinaryData(MyInFile.Length) As Byte
                    MyInFile.Read(MyBinaryData, 0, MyInFile.Length)
                    MyInFile.Close()			
                    return MyBinaryData
            	
                End Function
            	
            End Module
            </code>
            <code lang="C#">
            using System;
            using System.IO;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.Xmp;
            
            class MyClass
            {
                static void Main()
                {
                    // Create a PDF Document
                    Document document = new Document();
                    document.Keywords = "XMP, metadata, pdf, example";
                    document.Title = "Pdf document with xmp metadata";
            		
                    // Add blank pages to the document
                    document.Pages.Add( new Page( PageSize.Letter ) );
                    document.Pages.Add( new Page( PageSize.Letter ) );
            		
                    // Create an Xmp Metadata
                    XmpMetadata xmp = new XmpMetadata();
            		
                    // Dublin Core Schema.
                    DublinCoreSchema dc = xmp.DublinCore;
                    dc.Contributors.Add( "Abc" );
                    dc.Contributors.Add( "Xyz" );
                    dc.Contributors.Add( "Pqrs" );
                    dc.Coverage = "To test all the attributes of schema's provided";
                    dc.Creators.Add( "MyProduct" );
                    dc.Creators.Add( "MyCompany" );
                    dc.Date.Add( DateTime.Now );
                    dc.Description.AddLang( "en-us", "XMP Schema's test" );
                    dc.Identifier = "First XMP pdf";
                    dc.Publisher.Add( "mydomain.com" );
                    dc.Publisher.Add( "MyCompany" );
                    dc.Relation.Add( "test pdf with xmp" );
                    dc.Rights.DefaultText = "US English";
                    dc.Rights.AddLang( "en-us", "All rights reserved 2012, MyCompany." );
                    dc.Source = "XMP Project";
                    dc.Subject.Add( "eXtensible Metadata Platform" );
                    dc.Title.AddLang( "en-us", "XMP" );
                    dc.Title.AddLang( "it-it", "XMP - Piattaforma Estendible di Metadata" );
                    dc.Title.AddLang( "du-du", "De hallo Wereld" );
                    dc.Title.AddLang( "fr-fr", "XMP - Une Platforme Extensible pour les Métédonnées" );
                    dc.Title.AddLang( "DE-DE", "ÄËßÜ Hallo Welt" );
                    dc.Type.Add( "Pdf file containing xmp metadata" );
            		
                    // Basic Schema.
                    BasicSchema bs = xmp.BasicSchema;
                    bs.Advisory.Add( "Date" );
                    bs.Advisory.Add( "Contributors" );
                    bs.Nickname = "xyz";
                    bs.Thumbnails.Add(106, 80, "JPEG", GetImage( @"C:\thumbnail.jpg" ) );
            		
                    // Rights Management Schema.
                    RightsManagementSchema rm = new RightsManagementSchema();
                    rm.Marked2 = CopyrightStatus.PublicDomain;
                    rm.Owner.Add( "MyCompany" );
                    rm.UsageTerms.AddLang( "en-us", "Contact MyCompany" );
                    xmp.AddSchema( rm );
            		
                    // Basic Job Ticket Schema.
                    BasicJobTicketSchema job = new BasicJobTicketSchema();
                    job.JobRef.Add( "MyCompany", "Xmp Test", new Uri( "http://www.mydomain.com/" ) );
                    job.JobRef.Add( "MyCompany", "XMP Metadata", new Uri( "http://www.mydomain.com/" ) );
                    xmp.AddSchema( job );
            		
                    // Paged-Text Schema.
                    PagedTextSchema pt = new PagedTextSchema();
                    xmp.AddSchema( pt );
            		
                    /* Need not have to add Dublic core schema, Basic Schema and 
            			Adobe Pdf schema at this point. These are already added internally. */
                    xmp.AddSchema( rm );
                    xmp.AddSchema( job );
                    xmp.AddSchema( pt );
            		
                    // Add the Xmp Metadata to the document
                    document.XmpMetadata = xmp;
            		
                    // Save the PDF document
                    document.Draw( @"C:\MyDocument.pdf" );
                }
            	
                private static byte[] GetImage( string filePath )
                {
                    FileStream inFile = new FileStream( filePath, FileMode.Open, FileAccess.Read );
                    byte[] binaryData = new byte[ inFile.Length ];
                    inFile.Read( binaryData, 0, (int)inFile.Length );
                    inFile.Close();			
                    return binaryData;
                }
            }
            </code>
            </example>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Xmp.XmpMetadata.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Xmp.XmpMetadata"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Xmp.XmpMetadata.AddSchema(ceTe.DynamicPDF.Xmp.XmpSchema)">
            <summary>
            Adds a given Xmp Schema to the schema list.
            </summary>
            <param name="schema"><see cref="T:ceTe.DynamicPDF.Xmp.XmpSchema"/> object to add to the schema list.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Xmp.XmpMetadata.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the xmp metadata to the <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to write xmp output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Xmp.XmpMetadata.DublinCore">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.Xmp.DublinCoreSchema"/> schema object.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Xmp.XmpMetadata.BasicSchema">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.Xmp.XmpMetadata.BasicSchema"/> schema object.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Xmp.XmpMetadata.RequiredPdfObjects">
            <summary>
            Gets the number of PDF objects required by the resource.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Xmp.XmpThumbnail">
            <summary>
            This class represents the data structure for a thumbnail image for a file.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Xmp.XmpThumbnail.Add(System.Int32,System.Int32,System.String,System.Byte[])">
            <summary>
            Adds a thumbnail image for a file.
            </summary>
            <param name="width">Width in pixels.</param>
            <param name="height">Height in pixels.</param>
            <param name="format">The image encoding.</param>
            <param name="image">The thumbnail image (pixel data only).</param>
        </member>
        <member name="T:ceTe.DynamicPDF.Xmp.XmpWriter">
            <summary>
            Represents the writer for writing XMP metadata to a document.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Xmp.XmpWriter.#ctor(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Xmp.XmpWriter"/> class.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the metadata output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Xmp.XmpWriter.BeginDescription(System.String,System.String,System.String)">
            <summary>
            Writes the RDF description for a given schema.
            </summary>
            <param name="urlnamespace">The schema namespace URI</param>
            <param name="alias">The preferred schema namespace prefix</param>
            <param name="about">The rdf attribute on the rdf description element is a
            required attribute that identifies the resource whose metadata this
            XMP describes. Must follow URI syntax and may be an empty string.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Xmp.XmpWriter.BeginDescription(System.String,System.String)">
            <summary>
            Writes the RDF description for a given schema.
            </summary>
            <param name="urlnamespace">The schema namespace URI</param>
            <param name="alias">The preferred schema namespace prefix</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Xmp.XmpWriter.BeginDescription">
            <summary>
            Writes the RDF description.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Xmp.XmpWriter.EndDescription">
            <summary>
            Writes the end of RDF description.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Xmp.XmpWriter.ToUtf8(System.String)">
            <summary>
            Does the UTF-8 encoding for a given string text.
            </summary>
            <param name="text">String representing the text to convert to UTF-8 encoding.</param>
            <returns>The UTF-8 encoded text, as a byte array.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Xmp.XmpWriter.Draw(System.String)">
            <summary>
            Writes the given value to the XMP Packet.
            </summary>
            <param name="text">A text to be written.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Xmp.XmpWriter.Draw(System.Boolean)">
            <summary>
            Writes the boolean value to the XMP Packet.
            </summary>
            <param name="val">A boolean value to be written.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Xmp.XmpWriter.Draw(System.DateTime)">
            <summary>
            Writes the given date to the XMP Packet in W3C recommended date format.
            </summary>
            <param name="date">A date to be written.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Xmp.XmpWriter.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the XMP contents buffer to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the XMP buffer's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Xmp.XmpWriter.Producer">
            <summary>
            Gets the name of the tool that created the PDF document.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Xmp.XmpWriter.Author">
            <summary>
            Gets the authors of the resource.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Xmp.XmpWriter.Title">
            <summary>
            Gets the document title of the resource.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Xmp.XmpWriter.TotalPages">
            <summary>
            Gets the number of pages in the document (including any in contained documents).
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Xmp.XmpWriter.Keywords">
            <summary>
            Gets the keywords that specify the topic of the content of the resource.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Xmp.XmpWriter.Date">
            <summary>
            Gets the date that the resource was originally created.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Xmp.XmpWriter.PdfVersion">
            <summary>
            Gets the PDF version of the PDF document.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Annotation">
            <summary>
            Represents an annotation resource.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Annotation.#ctor(System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.PageElements.IAnnotation)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Annotation"/> class.
            </summary>
            <param name="left">The left X coordinate of the annotation.</param>
            <param name="top">The top Y coordinate of the annotation.</param>
            <param name="right">The right X coordinate of the annotation.</param>
            <param name="bottom">The bottom Y coordinate of the annotation.</param>
            <param name="iAnnotation">The iAnnotaion for the annotation.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Annotation.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the annotation to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the annotation's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Annotation.RequiredPdfObjects">
            <summary>
            Gets the number of PDF objects required by the annotation.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Annotation.ResourceType">
            <summary>
             Gets the type of resource.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Annotation.Left">
            <summary>
            Gets or sets the left X coordinate of the annotation.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Annotation.Right">
            <summary>
            Gets or sets the right X coordinate of the annotation.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Annotation.Top">
            <summary>
            Gets or sets the top Y coordinate of the annotation.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Annotation.Bottom">
            <summary>
            Gets or sets the bottom Y coordinate of the annotation.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Artifact">
             <summary>
             Represents an artifact.
             </summary>
             <example>The following example shows how to use page numbering in a document and how to use artifact. <p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Specify document as a tagged PDF
                     MyDocument.Tag = New TagOptions()
             
                     ' Create a document template and add it to the document
                     Dim documentTemplate As Template = New Template()
                     MyDocument.Template = documentTemplate
             
                     Dim MyNumberText As String = "PageNumberingLabels contain page numbering: %%CP%% of %%TP%% pages."
             
                     ' Create a Page numbering label
                     Dim MyPageNumberingLabel As PageNumberingLabel = New PageNumberingLabel(MyNumberText, 0, 680, 512, 12, Font.Helvetica, _
                             12, TextAlign.Center)
             
                     ' Create an artifact and set its type to pagination
                     Dim MyArtifact As Artifact = New Artifact()
                     MyArtifact.SetType(ArtifactType.Pagination)
                     
                     ' Tag the page numbering label with the artifact
                     MyPageNumberingLabel.Tag = MyArtifact
                     
                     ' Add page numbering label to the document template
                     documentTemplate.Elements.Add(MyPageNumberingLabel)
             
                     ' Begin the first section
                     MyDocument.Sections.Begin(NumberingStyle.RomanLowerCase)
             
                     ' Add three pages to the document
                     Dim MyPage1 As Page = New Page()
                     MyPage1.Elements.Add(New Label("This is the first page", 100, 100, 200, 100))
                     MyDocument.Pages.Add(MyPage1)
             
                     Dim MyPage2 As Page = New Page()
                     MyPage2.Elements.Add(New Label("This is the second page", 100, 100, 200, 100))
                     MyDocument.Pages.Add(MyPage2)
             
                     Dim MyPage3 As Page = New Page()
                     MyPage3.Elements.Add(New Label("This is the third page", 100, 100, 200, 100))
                     MyDocument.Pages.Add(MyPage3)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Specify document as a tagged PDF
                     document.Tag = new TagOptions();
             		
                     // Create a document template and add it to the document
                     Template documentTemplate = new Template();
                     document.Template = documentTemplate;
             
                     string numberText = "PageNumberingLabels contain page numbering: %%CP%% of %%TP%% pages.";
             
                     // Create a Page numbering label
                     PageNumberingLabel pageNumberingLabel = new PageNumberingLabel(numberText, 0, 680, 512, 12, Font.Helvetica,
                                 12, TextAlign.Center);
             
                     // Create an artifact and add its type to pagination
                     Artifact artifact = new Artifact();
                     artifact.SetType(ArtifactType.Pagination);
             
                     // Tag the page numbering label with the artifact
                     pageNumberingLabel.Tag = artifact;
             
                     // Add page numbering label to the document template
                     documentTemplate.Elements.Add(pageNumberingLabel);
             
                     // Begin the first section
                     document.Sections.Begin(NumberingStyle.RomanLowerCase);
             
                     // Add three pages to the document
                     Page page1 = new Page();
                     page1.Elements.Add(new Label("This is the first page", 100, 100, 200, 100));
                     document.Pages.Add(page1);
             
                     Page page2 = new Page();
                     page2.Elements.Add(new Label("This is the second page", 100, 100, 200, 100));
                     document.Pages.Add(page2);
             
                     Page page3 = new Page();
                     page3.Elements.Add(new Label("This is the third page", 100, 100, 200, 100));
                     document.Pages.Add(page3);
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example> 
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>	    
        </member>
        <member name="M:ceTe.DynamicPDF.Artifact.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Artifact"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Artifact.#ctor(ceTe.DynamicPDF.BoundingBox)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Artifact"/> class.
            </summary>
            <param name="bBox">Bounding box of the artifact.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Artifact.#ctor(ceTe.DynamicPDF.ArtifactType,ceTe.DynamicPDF.Attached)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Artifact"/> class.
            </summary>
            <param name="type">Type of artifact.</param>
            <param name="attached">A value indicating to which the artifact is logically attached.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Artifact.#ctor(ceTe.DynamicPDF.ArtifactType,ceTe.DynamicPDF.SubType)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Artifact"/> class.
            </summary>
            <param name="type">Type of artifact.</param>
            <param name="subType">Sub type of the artifact.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Artifact.#ctor(ceTe.DynamicPDF.ArtifactType,ceTe.DynamicPDF.Attached,ceTe.DynamicPDF.SubType)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Artifact"/> class.
            </summary>
            <param name="type">Type of artifact.</param>
            <param name="attached">A value indicating to which the artifact is logically attached.</param>
            <param name="subType">Sub type of the artifact.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Artifact.#ctor(ceTe.DynamicPDF.ArtifactType,ceTe.DynamicPDF.BoundingBox,ceTe.DynamicPDF.Attached,ceTe.DynamicPDF.SubType)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Artifact"/> class.
            </summary>
            <param name="type">Type of artifact.</param>
            <param name="bBox">Bounding box of the artifact.</param>
            <param name="attached">A value indicating to which the artifact is logically attached.</param>
            <param name="subType">Sub type of the artifact.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Artifact.SetType(ceTe.DynamicPDF.ArtifactType)">
            <summary>
            Sets a <see cref="T:ceTe.DynamicPDF.ArtifactType"/> to the <see cref="T:ceTe.DynamicPDF.Artifact"/>.
            </summary>
            <param name="type"> value of <see cref="T:System.Type"/></param>
        </member>
        <member name="M:ceTe.DynamicPDF.Artifact.SetBoundingBox(ceTe.DynamicPDF.BoundingBox)">
            <summary>
            Sets a <see cref="T:ceTe.DynamicPDF.BoundingBox"/> to the <see cref="T:ceTe.DynamicPDF.Artifact"/>.
            </summary>
            <param name="boundingBox"> value of <see cref="T:ceTe.DynamicPDF.BoundingBox"/></param>     
        </member>
        <member name="M:ceTe.DynamicPDF.Artifact.SetBoundingBox">
            <summary>
            Sets a  <see cref="T:ceTe.DynamicPDF.BoundingBox"/> <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.Artifact"/> with default value.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Artifact.SetAttached(ceTe.DynamicPDF.Attached)">
            <summary>
            Sets a <see cref="T:ceTe.DynamicPDF.Attached"/> to the <see cref="T:ceTe.DynamicPDF.Artifact"/>.
            </summary>
            <param name="attached"> value of <see cref="T:ceTe.DynamicPDF.Attached"/></param>  
        </member>
        <member name="M:ceTe.DynamicPDF.Artifact.SetSubType(ceTe.DynamicPDF.SubType)">
            <summary>
            Sets a <see cref="T:ceTe.DynamicPDF.SubType"/> to the <see cref="T:ceTe.DynamicPDF.Artifact"/>.
            </summary>
            <param name="subType"> value of <see cref="T:ceTe.DynamicPDF.SubType"/></param>  
        </member>
        <member name="M:ceTe.DynamicPDF.Artifact.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the artifact to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the artifact output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Artifact.TagType">
            <summary>
            Gets a value indicating artifact tag
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Attached">
             <summary>
             Represents an attached
             </summary>
             <example>The following example shows how to use an artifact. <p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Specify document as a tagged PDF
                     MyDocument.Tag = New TagOptions()
            
                     ' Create a page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a background image
                     Dim MyBackgroundImage As BackgroundImage = New BackgroundImage("C:\MyImage.jpg")
            
                     ' Create an artifact
                     Dim MyArtifact As Artifact = New Artifact(ArtifactType.Background, New Attached(Edge.Left, Edge.Bottom, Edge.Right, Edge.Top))
            
                     ' Add bounding box to the artifact
                     MyArtifact.SetBoundingBox(New BoundingBox(MyPage.Dimensions.Edge.Left, MyPage.Dimensions.Edge.Bottom, MyPage.Dimensions.Edge.Right, MyPage.Dimensions.Edge.Top))
            
                     ' Tag the background image with the artifact
                     MyBackgroundImage.Tag = MyArtifact
            
                     ' Add the background image to the page
                     MyPage.Elements.Add(MyBackgroundImage)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Specify document as a tagged PDF
                     document.Tag = new TagOptions();
             		
                     // Create a page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a background image
                     BackgroundImage backgroundImage = new BackgroundImage(@"C:\MyImage.jpg");
            
                     // Create an artifact
                     Artifact artifact = new Artifact(ArtifactType.Background, new Attached(Edge.Left, Edge.Bottom, Edge.Right, Edge.Top));
            
                     // Add bounding box to the artifact
                     artifact.SetBoundingBox(new BoundingBox(page.Dimensions.Edge.Left, page.Dimensions.Edge.Bottom, page.Dimensions.Edge.Right, page.Dimensions.Edge.Top));
            
                     // Tag the background image with the artifact
                     backgroundImage.Tag = artifact;
            
                     // Add the background image to the page
                     page.Elements.Add(backgroundImage);
            
                     //Save the PDF
                     document.Draw(@"C:\MyDocument.pdf");
             
                 }
             }
             </code>
             </example>   
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>	    
        </member>
        <member name="M:ceTe.DynamicPDF.Attached.#ctor(ceTe.DynamicPDF.Edge)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Attached"/> class.
            </summary>
            <param name="value">Value of the edge.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Attached.#ctor(ceTe.DynamicPDF.Edge,ceTe.DynamicPDF.Edge)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Attached"/> class.
            </summary>
            <param name="value1">Value of the edge.</param>
            <param name="value2">Value of the edge.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Attached.#ctor(ceTe.DynamicPDF.Edge,ceTe.DynamicPDF.Edge,ceTe.DynamicPDF.Edge)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Attached"/> class.
            </summary>
            <param name="value1">Value of the edge.</param>
            <param name="value2">Value of the edge.</param>
            <param name="value3">Value of the edge.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Attached.#ctor(ceTe.DynamicPDF.Edge,ceTe.DynamicPDF.Edge,ceTe.DynamicPDF.Edge,ceTe.DynamicPDF.Edge)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Attached"/> class.
            </summary>
            <param name="value1">Value of the edge.</param>
            <param name="value2">Value of the edge.</param>
            <param name="value3">Value of the edge.</param>
            <param name="value4">Value of the edge.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Attached.SetEdge(ceTe.DynamicPDF.Edge)">
            <summary>
            Sets the value to the edge.
            </summary>
            <param name="value">Value of the edge.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.AttributeClass">
             <summary>
             Represents a attribute class.
             </summary>
             <example>The following example shows how to use an attribute classes. <p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Specify document as a tagged PDF
                     MyDocument.Tag = New TagOptions()
            
                     ' Create a page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a text area
                     Dim MyTextArea As TextArea = New TextArea("This is the text of a TextArea", _
                                 100, 100, 400, 30, _
                                 ceTe.DynamicPDF.Font.HelveticaBoldOblique, 18)
            
                     ' Create a structue element
                     Dim MyStructureElement As StructureElement = New StructureElement(TagType.Paragraph, True)
            
                     ' Create an attribute class
                     Dim MyAttributeClass As AttributeClass = New AttributeClass("MyAttribueClass")
            
                     ' Create an attribute object
                     Dim MyAttributeObject1 As AttributeObject = New AttributeObject(AttributeOwner.Layout)
            
                     ' Add attributes to the attribute object
                     MyAttributeObject1.SetLineHeight() 'Sets default value to the line height attribute
                     MyAttributeObject1.SetHeight(30) ' Sets specified value to the height attribute 
            
                     ' Add attribute object to the attribute class
                     MyAttributeClass.AttributeObjects.Add(MyAttributeObject1)
            
                     ' Create an attribute object
                     Dim MyAttributeObject2 As AttributeObject = New AttributeObject(AttributeOwner.HTML_3_20)
            
                     ' Add attributes to the attribute object
                     MyAttributeObject2.SetPlacement() ' Sets default value to the line height attribute
                     MyAttributeObject2.SetSpaceBefore() ' Sets default value to the space after attribute
            
                     ' Add attribute object to the attribute class
                     MyAttributeClass.AttributeObjects.Add(MyAttributeObject2)
            
                     ' Add attribute class to the structure element
                     MyStructureElement.Classes.Add(MyAttributeClass)
            
                     ' Tag the text area with the structure element
                     MyTextArea.Tag = MyStructureElement
            
                     ' Add the text area to the page
                     MyPage.Elements.Add(MyTextArea)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Specify document as a tagged PDF
                     document.Tag = new TagOptions();
             		
                     // Create a page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a text area
                     TextArea textArea = new TextArea("This is the " +
                                 "text of a TextArea", 100, 100, 400, 30,
                                 ceTe.DynamicPDF.Font.HelveticaBoldOblique, 18);
            
                     // Create a structue element
                     StructureElement structureElement = new StructureElement(TagType.Paragraph, true);
            
                     // Create an attribute class
                     AttributeClass attributeClass = new AttributeClass("MyAttribueClass");
            
                     // Create an attribute object
                     AttributeObject attributeObject1 = new AttributeObject(AttributeOwner.Layout);
            
                     // Add attributes to the attribute object
                     attributeObject1.SetLineHeight(); // Sets default value to the line height attribute
                     attributeObject1.SetHeight(30); // Sets specified value to the height attribute 
            
                     // Add attribute object to the attribute class
                     attributeClass.AttributeObjects.Add(attributeObject1);
            
                     // Create an attribute object
                     AttributeObject attributeObject2 = new AttributeObject(AttributeOwner.HTML_3_20);
            
                     // Add attributes to the attribute object
                     attributeObject2.SetPlacement(); // Sets default value to the line height attribute
                     attributeObject2.SetSpaceBefore(); // Sets default value to the space after attribute
            
                     // Add attribute object to the attribute class
                     attributeClass.AttributeObjects.Add(attributeObject2);
            
                     // Add attribute class to the structure element
                     structureElement.Classes.Add(attributeClass);
            
                     // Tag the text area with the structure element
                     textArea.Tag = structureElement;
            
                     // Add the text area to the page
                     page.Elements.Add(textArea);
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>    
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>	    
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeClass.#ctor(System.String)">
            <summary>
            Intializes a new instance of the attribute class.
            </summary>
            <param name="attributeClassName">Name of the attribute class.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.AttributeClass.AttributeObjects">
            <summary>
            Gets the collection of attribute objects.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.AttributeClassList">
            <summary>
            Represents a AttributeClassList.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	    
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeClassList.Add(ceTe.DynamicPDF.AttributeClass)">
            <summary>
            Adds attribute class to the attribute class list .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.AttributeClassList.Item(System.Int32)">
            <summary>
            Gets the attribute class at the given index .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.AttributeClassList.Count">
            <summary>
            Gets the no of attribute classes in the Attribute class List .
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.AttributeObject">
             <summary>
             Represents an attribute object.
             </summary>
             <example>The following example shows how to use an attribute object. <p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Specify document as a tagged PDF
                     MyDocument.Tag = New TagOptions()
            
                     ' Create a page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a text area
                     Dim MyTextArea As TextArea = New TextArea("This is the text of a TextArea", _
                      100, 100, 400, 30,ceTe.DynamicPDF.Font.HelveticaBoldOblique, 18)
            
                     ' Create a structue element
                     Dim MyStructureElement As StructureElement = New StructureElement(TagType.Paragraph, True)
            
                     ' Create an attribute object
                     Dim MyAttributeObject As AttributeObject = New AttributeObject(AttributeOwner.Layout)
            
                     ' Add attributes to the attribute object
                     MyAttributeObject.SetLineHeight() ' Sets default value to the line height attribute
                     MyAttributeObject.SetHeight(30) ' Sets specified value to the height attribute 
            
                     ' Add attribute object to the structure element
                     MyStructureElement.AttributeLists.Add(MyAttributeObject)
            
                     ' Tag the text area with the structure element
                     MyTextArea.Tag = MyStructureElement
            
                     ' Add the text area to the page
                     MyPage.Elements.Add(MyTextArea)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Specify document as a tagged PDF
                     document.Tag = new TagOptions();
             		
                     // Create a page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a text area
                     TextArea textArea = new TextArea("This is the " +"text of a TextArea", 100, 100, 400, 30,
                                 ceTe.DynamicPDF.Font.HelveticaBoldOblique, 18);
            
                     // Create a structue element
                     StructureElement structureElement = new StructureElement(TagType.Paragraph, true);
            
                     // Create an attribute object
                     AttributeObject attributeObject = new AttributeObject(AttributeOwner.Layout);
            
                     // Add attributes to the attribute object
                     attributeObject.SetLineHeight(); // Sets default value to the line height attribute
                     attributeObject.SetHeight(30); // Sets specified value to the height attribute 
            
                     // Add attribute object to the structure element
                     structureElement.AttributeLists.Add(attributeObject);
            
                     // Tag the text area with the structure element
                     textArea.Tag = structureElement;
            
                     // Add the text area to the page
                     page.Elements.Add(textArea);
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>	
        </member>
        <member name="T:ceTe.DynamicPDF.AttributeType">
            <summary>
            Represents an attribute type.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	
        </member>
        <member name="P:ceTe.DynamicPDF.AttributeType.Owner">
            <summary>
            Gets the attribute owner.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.#ctor(ceTe.DynamicPDF.AttributeOwner)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.AttributeObject"/> class.
            </summary>
            <param name="attributeOwner">Owner of the attribute object.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetPlacement">
            <summary>
            Sets a placement <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/> with default value.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetPlacement(ceTe.DynamicPDF.Placement)">
            <summary>
            Sets a placement <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="placement"> value of  <see cref="T:ceTe.DynamicPDF.Attribute"/></param>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetWritingMode">
            <summary>
            Sets a writing mode <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/> with default value.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetWritingMode(ceTe.DynamicPDF.WritingMode)">
            <summary>
            Sets a writing mode <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="attributeValue"> value of <see cref="T:ceTe.DynamicPDF.Attribute"/></param>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetBackgroundColor">
            <summary>
            Sets a background color <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/> with default value.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetBackgroundColor(ceTe.DynamicPDF.RgbColor)">
            <summary>
            Sets a background color <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="rgbColor"> value of <see cref="T:ceTe.DynamicPDF.Attribute"/></param>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetBackgroundColor(System.Single,System.Single,System.Single)">
            <summary>
            Sets a background color <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="red">The red intensity.</param>
            <param name="green">The green intensity.</param>
            <param name="blue">The blue intensity.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetBorderColor">
            <summary>
            Sets a border color <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/> with default value.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetBorderColor(System.Single,System.Single,System.Single)">
            <summary>
            Sets a border color <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="red">The red intensity.</param>
            <param name="green">The green intensity.</param>
            <param name="blue">The blue intensity.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetBorderColor(ceTe.DynamicPDF.RgbColor)">
            <summary>
            Sets a border color <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="rgbColor"> value of <see cref="T:ceTe.DynamicPDF.Attribute"/></param>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetBorderColor(ceTe.DynamicPDF.RgbColor,ceTe.DynamicPDF.RgbColor,ceTe.DynamicPDF.RgbColor,ceTe.DynamicPDF.RgbColor)">
            <summary>
            Sets a border color <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="beforeEdge">The before edge color of the border.</param>
            <param name="afterEdge">The after edge color of the border.</param>
            <param name="startEdge">The start edge color of the border.</param>
            <param name="endEdge">The end edge color of the border.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetBorderStyle">
            <summary>
            Sets a border style <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/> with default value.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetBorderStyle(ceTe.DynamicPDF.BorderStyleAttribute)">
            <summary>
            Sets a border style <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="allEdgesValue">Value of the Borde style <see cref="T:ceTe.DynamicPDF.Attribute"/>.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetBorderStyle(ceTe.DynamicPDF.BorderStyleAttribute,ceTe.DynamicPDF.BorderStyleAttribute,ceTe.DynamicPDF.BorderStyleAttribute,ceTe.DynamicPDF.BorderStyleAttribute)">
            <summary>
            Sets a border style <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="beforeEdge">The before edge border style of the border</param>
            <param name="afterEdge">The after edge border style of the border</param>
            <param name="startEdge">The start edge border style of the border</param>
            <param name="endEdge">The end edge border style of the border</param>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetBorderThickness">
            <summary>
            Sets a border thickness <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/> with default value.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetBorderThickness(System.Single)">
            <summary>
            Sets a border thickness <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="allEdgesValue"> value of  <see cref="T:ceTe.DynamicPDF.Attribute"/></param>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetBorderThickness(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets a border thickness <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="beforeEdge">Value of the before edge.</param>
            <param name="afterEdge">Value of the after edge.</param>
            <param name="startEdge">Value of the start edge.</param>
            <param name="endEdge">Value of the end edge.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetColor">
            <summary>
            Sets a  color <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/> with default value.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetColor(ceTe.DynamicPDF.RgbColor)">
            <summary>
            Sets a  color <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="rgbColor"> value of <see cref="T:ceTe.DynamicPDF.Attribute"/></param> 
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetColor(System.Single,System.Single,System.Single)">
            <summary>
            Sets a  color <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="red">The red intensity.</param>
            <param name="green">The green intensity.</param>
            <param name="blue">The blue intensity.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetPadding">
            <summary>
            Sets a padding <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/> with default value.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetPadding(System.Single)">
            <summary>
            Sets a padding <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="allEdges"> value of  <see cref="T:ceTe.DynamicPDF.Attribute"/></param>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetPadding(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets a padding <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="beforeEdge">Value of the before edge.</param>
            <param name="afterEdge">Value of the after edge.</param>
            <param name="startEdge">Value of the start edge.</param>
            <param name="endEdge">Value of the end edge.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetSpaceBefore">
            <summary>
            Sets a space before <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/> with default value.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetSpaceBefore(System.Single)">
            <summary>
            Sets a space before <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="spaceBefore"> value of  <see cref="T:ceTe.DynamicPDF.Attribute"/></param>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetSpaceAfter">
            <summary>
            Sets a space after <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/> with default value.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetSpaceAfter(System.Single)">
            <summary>
            Sets a space after <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="spaceAfter"> value of  <see cref="T:ceTe.DynamicPDF.Attribute"/></param>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetStartIndent">
            <summary>
            Sets a start indent <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/> with default value.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetStartIndent(System.Single)">
            <summary>
            Sets a start indent <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="startIndent"> value of  <see cref="T:ceTe.DynamicPDF.Attribute"/></param>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetEndIndent">
            <summary>
            Sets a end indent <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/> with default value.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetEndIndent(System.Single)">
            <summary>
            Sets a end indent <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="endIndent"> value of  <see cref="T:ceTe.DynamicPDF.Attribute"/></param>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetTextIndent">
            <summary>
            Sets a text indent <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/> with default value.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetTextIndent(System.Single)">
            <summary>
            Sets a text indent <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="textIndent"> value of  <see cref="T:ceTe.DynamicPDF.Attribute"/></param>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetTextAlign">
            <summary>
            Sets a text align <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/> with default value.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetTextAlign(ceTe.DynamicPDF.TextAlignAttribute)">
            <summary>
            Sets a text align <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="textAlign"> value of  <see cref="T:ceTe.DynamicPDF.Attribute"/></param>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetBoundingBox">
            <summary>
            Sets a bounding box <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/> with default value.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetBoundingBox(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets a bounding box <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="left"> Value of the left margin <see cref="T:ceTe.DynamicPDF.Attribute"/></param>
            <param name="bottom"> Value of the bottom margin <see cref="T:ceTe.DynamicPDF.Attribute"/></param>
            <param name="right"> Value of the right margin <see cref="T:ceTe.DynamicPDF.Attribute"/></param>
            <param name="top"> Value of the top margin <see cref="T:ceTe.DynamicPDF.Attribute"/></param>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetBoundingBox(ceTe.DynamicPDF.BoundingBox)">
            <summary>
            Sets a bounding box <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="bBox"> Value of the <see cref="T:ceTe.DynamicPDF.Attribute"/></param>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetWidth">
            <summary>
            Sets a width <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/> with default value.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetAutoWidth">
            <summary>
            Sets a width <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/> with value auto.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetWidth(System.Single)">
            <summary>
            Sets a width <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="width"> value of  <see cref="T:ceTe.DynamicPDF.Attribute"/></param>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetHeight">
            <summary>
            Sets a height <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/> with default value.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetAutoHeight">
            <summary>
            Sets a height <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/> with value auto.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetHeight(System.Single)">
            <summary>
            Sets a height <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="height"> value of  <see cref="T:ceTe.DynamicPDF.Attribute"/></param>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetBlockAlign">
            <summary>
            Sets a block align <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/> with default value.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetBlockAlign(ceTe.DynamicPDF.BlockAlign)">
            <summary>
            Sets a block align <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="blockAlign"> value of  <see cref="T:ceTe.DynamicPDF.Attribute"/></param>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetInlineAlign">
            <summary>
            Sets a inline align <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/> with default value.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetInlineAlign(ceTe.DynamicPDF.InlineAlign)">
            <summary>
            Sets a inline align <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="inlineAlign"> value of  <see cref="T:ceTe.DynamicPDF.Attribute"/></param>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetTableCellBorderStyle">
            <summary>
            Sets a table cell border style <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/> with default value.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetTableCellBorderStyle(ceTe.DynamicPDF.BorderStyleAttribute)">
            <summary>
            Sets a table cell border style <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="tBorderStyle"> value of  <see cref="T:ceTe.DynamicPDF.Attribute"/></param>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetTableCellBorderStyle(ceTe.DynamicPDF.BorderStyleAttribute,ceTe.DynamicPDF.BorderStyleAttribute,ceTe.DynamicPDF.BorderStyleAttribute,ceTe.DynamicPDF.BorderStyleAttribute)">
            <summary>
            Sets a table cell border style <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="beforeEdge">Value of the before edge.</param>
            <param name="afterEdge">Value of the after edge.</param>
            <param name="startEdge">Value of the start edge.</param>
            <param name="endEdge">Value of the end edge.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetTableCellPadding">
            <summary>
            Sets a table cell padding <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/> with default value.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetTableCellPadding(System.Single)">
            <summary>
            Sets a table cell padding <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="allEdges"> value of  <see cref="T:ceTe.DynamicPDF.Attribute"/></param>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetTableCellPadding(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets a table cell padding <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="beforeEdge">Value of the before edge.</param>
            <param name="afterEdge">Value of the after edge.</param>
            <param name="startEdge">Value of the start edge.</param>
            <param name="endEdge">Value of the end edge.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetLineHeight">
            <summary>
            Sets a line height<see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/> with default value.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetLineHeight(ceTe.DynamicPDF.LineHeight)">
            <summary>
            Sets a line height <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="lineHeight"> value of  <see cref="T:ceTe.DynamicPDF.Attribute"/></param>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetLineHeight(System.Single)">
            <summary>
            Sets a line height <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="lineHeight"> value of  <see cref="T:ceTe.DynamicPDF.Attribute"/></param>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetBaselineShift">
            <summary>
            Sets a baseline shift<see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/> with default value.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetBaselineShift(System.Single)">
            <summary>
            Sets a  baseline shift<see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="baselineShift"> value of  <see cref="T:ceTe.DynamicPDF.Attribute"/></param>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetTextDecorationType">
            <summary>
            Sets a text decoration type<see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/> with default value.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetTextDecorationType(ceTe.DynamicPDF.TextDecorationType)">
            <summary>
            Sets a text decoration type<see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="textDecorationType"> value of  <see cref="T:ceTe.DynamicPDF.Attribute"/></param>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetTextDecorationColor">
            <summary>
            Sets a text decoration color <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/> with default value.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetTextDecorationColor(ceTe.DynamicPDF.RgbColor)">
            <summary>
            Sets a  text decoration color <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="rgbColor"> value of <see cref="T:ceTe.DynamicPDF.Attribute"/></param> 
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetTextDecorationColor(System.Single,System.Single,System.Single)">
            <summary>
            Sets a   text decoration color <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="red">The red intensity.</param>
            <param name="green">The green intensity.</param>
            <param name="blue">The blue intensity.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetTextDecorationThickness">
            <summary>
            Sets a  text decoration thickness <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/> with default value.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetTextDecorationThickness(System.Single)">
            <summary>
            Sets a  text decoration thickness <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="textDecorationThickness"> value of <see cref="T:ceTe.DynamicPDF.Attribute"/></param> 
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetColumnCount">
            <summary>
            Sets a  column count <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/> with default value.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetColumnCount(System.Int32)">
            <summary>
            Sets a  column count <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="columnCount"> value of <see cref="T:ceTe.DynamicPDF.Attribute"/></param> 
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetColumnWidths">
            <summary>
            Sets a  column widths <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/> with default value.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetColumnWidths(System.Single)">
            <summary>
            Sets a  column widths <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="columnWidths"> value of <see cref="T:ceTe.DynamicPDF.Attribute"/></param> 
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetColumnWidths(System.Single[])">
            <summary>
            Sets a  column widths <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="columnWidths"> value of <see cref="T:ceTe.DynamicPDF.Attribute"/></param> 
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetColumnGap">
            <summary>
            Sets a  column gap <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/> with default value.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetColumnGap(System.Single)">
            <summary>
            Sets a column gap <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="columnGap"> value of <see cref="T:ceTe.DynamicPDF.Attribute"/></param> 
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetColumnGap(System.Single[])">
            <summary>
            Sets a column gap <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="columnGap"> value of <see cref="T:ceTe.DynamicPDF.Attribute"/></param> 
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetGlyphOrientationVertical">
            <summary>
            Sets a  glyph orientation vertical <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/> with default value.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetAutoGlyphOrientationVertical">
            <summary>
            Sets a  glyph orientation vertical <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/> with value auto.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetAutoGlyphOrientationVertical(System.Int32)">
            <summary>
            Sets a  glyph orientation vertical <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/> .
            </summary>
            <param name="angle"> value of <see cref="T:ceTe.DynamicPDF.Attribute"/></param> 
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetRubyAlign">
            <summary>
            Sets a  ruby align <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/> with default value.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetRubyAlign(ceTe.DynamicPDF.RubyAlign)">
            <summary>
            Sets a ruby align <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="rubyAlign"> value of <see cref="T:ceTe.DynamicPDF.Attribute"/></param> 
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetRubyPosition">
            <summary>
            Sets a  ruby position <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/> with default value.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetRubyPosition(ceTe.DynamicPDF.RubyPosition)">
            <summary>
            Sets a ruby positon <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="rubyPosition"> value of <see cref="T:ceTe.DynamicPDF.Attribute"/></param> 
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetRole(ceTe.DynamicPDF.Role)">
            <summary>
            Sets a role <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="role"> value of <see cref="T:ceTe.DynamicPDF.Attribute"/></param> 
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetChecked">
            <summary>
            Sets a  checked <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/> with default value.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetChecked(ceTe.DynamicPDF.Checked)">
            <summary>
            Sets a checked <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="checkedValue"> value of <see cref="T:ceTe.DynamicPDF.Attribute"/></param> 
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetDescription(System.String)">
            <summary>
            Sets a description <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="desc"> value of <see cref="T:ceTe.DynamicPDF.Attribute"/></param> 
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetListNumbering">
            <summary>
            Sets a  list numbering <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/> with default value.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetListNumbering(ceTe.DynamicPDF.ListNumbering)">
            <summary>
            Sets a list numbering<see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="listNumbering"> value of <see cref="T:ceTe.DynamicPDF.Attribute"/></param> 
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetRowSpan">
            <summary>
            Sets a  row span <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/> with default value.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetRowSpan(System.Int32)">
            <summary>
            Sets a row span <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="rowSpan"> value of <see cref="T:ceTe.DynamicPDF.Attribute"/></param> 
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetColumnSpan">
            <summary>
            Sets a  column span <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/> with default value.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetColumnSpan(System.Int32)">
            <summary>
            Sets a column span <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="colSpan"> value of <see cref="T:ceTe.DynamicPDF.Attribute"/></param> 
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetHeaders">
            <summary>
            Sets a  headers <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/> with default value.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetHeaders(System.String[])">
            <summary>
            Sets a headers <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="headers"> value of <see cref="T:ceTe.DynamicPDF.Attribute"/></param> 
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetScope">
            <summary>
            Sets a  scope <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/> with default value.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetScope(ceTe.DynamicPDF.Scope)">
            <summary>
            Sets a scope <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="scope"> value of <see cref="T:ceTe.DynamicPDF.Attribute"/></param> 
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeObject.SetSummary(System.String)">
            <summary>
            Sets a summary <see cref="T:ceTe.DynamicPDF.Attribute"/> to the <see cref="T:ceTe.DynamicPDF.AttributeObject"/>.
            </summary>
            <param name="summary"> value of <see cref="T:ceTe.DynamicPDF.Attribute"/></param> 
        </member>
        <member name="P:ceTe.DynamicPDF.AttributeObject.Owner">
            <summary>
            Gets the owner of the attribute object.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.AttributeOwner">
            <summary>
            Specifies the attribute owner. 
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	    
        </member>
        <member name="F:ceTe.DynamicPDF.AttributeOwner.Layout">
            <summary>
            Layout. 
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.AttributeOwner.List">
            <summary>
            List. 
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.AttributeOwner.PrintField">
            <summary>
            PrintField. 
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.AttributeOwner.Table">
            <summary>
            Table. 
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.AttributeOwner.XML_1_00">
            <summary>
            XML version 1.00 
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.AttributeOwner.HTML_3_20">
            <summary>
            HTML version 3.20
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.AttributeOwner.HTML_4_01">
            <summary>
            HTML version 4.01 
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.AttributeOwner.OEB_1_00">
            <summary>
            OEB version 1.0 
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.AttributeOwner.RTF_1_05">
            <summary>
            RTF version 1.05 
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.AttributeOwner.CSS_1_00">
            <summary>
            CSS vesion 1.00 
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.AttributeOwner.CSS_2_00">
            <summary>
            CSS vesion 2.00 
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.AttributeOwner.UserProperties">
            <summary>
            UserProperties. 
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.AttributeTypeList">
            <summary>
            Represents a AttributeTypeList.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	    
        </member>
        <member name="M:ceTe.DynamicPDF.AttributeTypeList.Add(ceTe.DynamicPDF.AttributeType)">
            <summary>
            Adds attribute type to the attribute type list .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.AttributeTypeList.Item(System.Int32)">
            <summary>
            Gets the attribute type at the given index .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.AttributeTypeList.Count">
            <summary>
            Gets the no of attribute types in the Attribute Type List .
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.AutoGradient">
             <summary>
             Represents an automatically calculated gradient pattern.
             </summary>
             <remarks>See the <a href="Colors.html">Colors</a> topic for more on gradient patterns.<p/>
             <b>NOTE:</b> The X1, Y1, X2 and Y2 properties of this class will be automatically calculated. If these values are set, they will be overwritten.
             </remarks>
             <example>The following example will display a custom rectangle on the page with autogradient pattern.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
            
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                  	Dim MyDocument As Document = New Document 
             		
                  	' Create a Page and add it to the document
                  	Dim MyPage As Page = New Page
                  	MyDocument.Pages.Add(MyPage)
             
                  	' Create a rectangle
                      Dim MyRectangle As Rectangle = New Rectangle(50, 50, 200, _
             			200, Grayscale.Black, RgbColor.Gray, 4, LineStyle.Solid)
             
                     ' Change the corner radius property 
                     MyRectangle.CornerRadius = 10
             
                     ' Create a autogradient
                     Dim MyAutoGradient As AutoGradient = New AutoGradient(90.0F, CmykColor.Blue, CmykColor.Red)
             
                     ' Assign autogradient to Fillcolor property of rectangle
                     MyRectangle.FillColor = MyAutoGradient
             
                     ' Add the rectangle to the page
                  	MyPage.Elements.Add(MyRectangle)
             
                     ' Save the PDF
                  	MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
             
                      // Add page to document
                  	document.Pages.Add( page );
             
                  	// Create a rectangle
                  	Rectangle rectangle = new Rectangle( 50, 50, 200, 200,
             		Grayscale.Black, RgbColor.Gray, 4, LineStyle.Solid );
             
                  	// Change the corner radius property
                  	rectangle.CornerRadius = 10;
             
                     // Create a autogradient
                     AutoGradient autogradient = new AutoGradient(90.0f, CmykColor.Blue, CmykColor.Red);
             
                     // Assign autogradient to Fillcolor property of rectangle
                     rectangle.FillColor = autogradient;
             
                     // Add the rectangle to the page
                     page.Elements.Add( rectangle );	
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             } 
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Professional Edition</item>
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Professional Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Professional Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.Gradient">
            <summary>
            Represents a gradient pattern.
            </summary>
            <remarks>See the <a href="Colors.html">Colors</a> topic for more on gradient patterns.</remarks>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.Pattern">
            <summary>
            Represents the base class for all pattern colors are derived.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Community Edition feature.
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.Color">
            <summary>
            Base class representing color.
            </summary>
            <remarks>Color's derived classes are: <see cref="T:ceTe.DynamicPDF.CmykColor"/>, <see cref="T:ceTe.DynamicPDF.Grayscale"/>, <see cref="T:ceTe.DynamicPDF.WebColor"/>, <see cref="T:ceTe.DynamicPDF.RgbColor"/>, <see cref="T:ceTe.DynamicPDF.Gradient"/> and <see cref="T:ceTe.DynamicPDF.SpotColor"/>.  See the <a href="Colors.html">Colors</a> topic for more on colors.</remarks>	
            <licensing>
            This class is a DynamicPDF Generator Community Edition feature.
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Color.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Color"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Color.Equals(System.Object)">
            <summary>
            Tests equality of colors.
            </summary>
            <param name="obj"><b>Object</b> to compare to the current <b>Color</b>.</param>
            <returns><b>true</b> if the two colors are equal</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Color.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for use in
            hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current <b>Color</b>.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Color.DrawStroke(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the color data to the given <b>PageWriter</b> object.
            </summary>
            <param name="writer"><b>PageWriter</b> object to receive the color data.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Color.DrawStroke(ceTe.DynamicPDF.IO.OperatorWriter)">
            <summary>
            Draws the color data to the given <b>OperatorWriter</b> object.
            </summary>
            <param name="writer"><b>OperatorWriter</b> object to receive the color data.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Color.DrawFill(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the color data to the given <b>PageWriter</b> object.
            </summary>
            <param name="writer"><b>PageWriter</b> object to receive the color data.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Color.DrawFill(ceTe.DynamicPDF.IO.OperatorWriter)">
            <summary>
            Draws the color data to the given <b>OperatorWriter</b> object.
            </summary>
            <param name="writer"><b>OperatorWriter</b> object to receive the color data.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.ColorSpace">
            <summary>
            Gets the color space for the color.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Pattern.ColorSpace">
            <summary>
            Gets the color space for the color.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Gradient.#ctor(System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.RgbColor,ceTe.DynamicPDF.RgbColor)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Gradient"/> class.
            </summary>
            <param name="x1">X coordinate of the first color.</param>
            <param name="y1">Y coordinate of the first color.</param>
            <param name="x2">X coordinate of the second color.</param>
            <param name="y2">Y coordinate of the second color.</param>
            <param name="color1">First RGB color.</param>
            <param name="color2">Second RGB color.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Gradient.#ctor(System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.CmykColor,ceTe.DynamicPDF.CmykColor)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Gradient"/> class.
            </summary>
            <param name="x1">X coordinate of the first color.</param>
            <param name="y1">Y coordinate of the first color.</param>
            <param name="x2">X coordinate of the second color.</param>
            <param name="y2">Y coordinate of the second color.</param>
            <param name="color1">First CMYK color.</param>
            <param name="color2">Second CMYK color.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Gradient.#ctor(System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Grayscale,ceTe.DynamicPDF.Grayscale)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Gradient"/> class.
            </summary>
            <param name="x1">X coordinate of the first color.</param>
            <param name="y1">Y coordinate of the first color.</param>
            <param name="x2">X coordinate of the second color.</param>
            <param name="y2">Y coordinate of the second color.</param>
            <param name="color1">First Grayscale color.</param>
            <param name="color2">Second Grayscale color.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Gradient.Equals(System.Object)">
            <summary>
            Tests equality of colors.
            </summary>
            <param name="obj"><b>Object</b> to compare to the current <b>Color</b>.</param>
            <returns><b>true</b> if the two colors are equal</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Gradient.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for use in
            hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current <see cref="T:ceTe.DynamicPDF.Color"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Gradient.DrawStroke(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the color data to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the color data.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Gradient.DrawFill(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the color data to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the color data.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Gradient.GetResource(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Gets the resource for the gradient.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the gradient color data.</param>
            <returns>The <see cref="T:ceTe.DynamicPDF.Resource"/> used for the gradient.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Gradient.X1">
            <summary>
            Gets or sets the X coordinate of the first color.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Gradient.Y1">
            <summary>
            Gets or sets the Y coordinate of the first color.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Gradient.X2">
            <summary>
            Gets or sets the X coordinate of the second color.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Gradient.Y2">
            <summary>
            Gets or sets the Y coordinate of the second color.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Gradient.Color1">
            <summary>
            Gets the first color.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Gradient.Color2">
            <summary>
            Gets the second color.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Gradient.ColorSpace">
            <summary>
            Gets the color space for the color.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.AutoGradient.#ctor(System.Single,ceTe.DynamicPDF.RgbColor,ceTe.DynamicPDF.RgbColor)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.AutoGradient"/> class.
            </summary>
            <param name="angle">Angle of the AutoGradient.</param>
            <param name="color1">First RGB color.</param>
            <param name="color2">Second RGB color.</param>
            <remarks><b>NOTE:</b> The X1, Y1, X2 and Y2 properties of this class will be automatically calculated. If these values are set, they will be overwritten.</remarks>
        </member>
        <member name="M:ceTe.DynamicPDF.AutoGradient.#ctor(System.Single,ceTe.DynamicPDF.CmykColor,ceTe.DynamicPDF.CmykColor)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.AutoGradient"/> class.
            </summary>
            <param name="angle">Angle of the AutoGradient.</param>&gt;
            <param name="color1">First CMYK color.</param>
            <param name="color2">Second CMYK color.</param>
            <remarks><b>NOTE:</b> The X1, Y1, X2 and Y2 properties of this class will be automatically calculated. If these values are set, they will be overwritten.</remarks>
        </member>
        <member name="M:ceTe.DynamicPDF.AutoGradient.#ctor(System.Single,ceTe.DynamicPDF.Grayscale,ceTe.DynamicPDF.Grayscale)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.AutoGradient"/> class.
            </summary>
            <param name="angle">Angle of the AutoGradient.</param>
            <param name="color1">First Grayscale color.</param>
            <param name="color2">Second Grayscale color.</param>
            <remarks><b>NOTE:</b> The X1, Y1, X2 and Y2 properties of this class will be automatically calculated. If these values are set, they will be overwritten.</remarks>
        </member>
        <member name="M:ceTe.DynamicPDF.AutoGradient.DrawFill(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the color data to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the color data.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.AutoGradient.DrawStroke(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the color data to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the color data.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.AutoGradient.Angle">
            <summary>
            Gets or sets the angle of the Gradient.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.BlendMode">
            <summary>
            The type of blending to use.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.BlendMode.Normal">
            <summary>
            Normal blending.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.BlendMode.Multiply">
            <summary>
            Multiply blending.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.BlendMode.Screen">
            <summary>
            Screen blending.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.BlendMode.Overlay">
            <summary>
            Overlay blending.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.BlendMode.Darken">
            <summary>
            Darken blending.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.BlendMode.Lighten">
            <summary>
            Lighten blending.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.BlendMode.ColorDodge">
            <summary>
            Color Dodge blending.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.BlendMode.ColorBurn">
            <summary>
            Color Burn blending.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.BlendMode.HardLight">
            <summary>
            Hard Light blending.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.BlendMode.SoftLight">
            <summary>
            Soft Light blending.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.BlendMode.Difference">
            <summary>
            Difference blending.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.BlendMode.Exclusion">
            <summary>
            Exclusion blending.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.BoundingBox">
             <summary>
             Represents a bounding box.
             </summary>
             <example>The following example shows how to add bounding box to the rectangle . <p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Specify document as a tagged PDF
                     MyDocument.Tag = New TagOptions()
            
                     ' Create a page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a rectangle
                     Dim MyRectangle As Rectangle = New Rectangle(100, 100, 100, 100, RgbColor.Black, RgbColor.Blue)
            
                     ' Create a structure element
                     Dim MyStructureElement As StructureElement = New StructureElement(TagType.Figure)
            
                     ' Create an attribute object
                     Dim MyAttributeObject As AttributeObject = New AttributeObject(AttributeOwner.Layout)
                     MyAttributeObject.SetHeight() ' Sets default value to the height attribute
                     MyAttributeObject.SetWidth() ' Sets default value to the width attribute
            
                     ' Calclulates bounding box and Add it to the bounding box attribute
                     MyAttributeObject.SetBoundingBox(New BoundingBox(MyPage, MyRectangle.X, MyRectangle.Y, MyRectangle.Width, MyRectangle.Height, MyRectangle.Angle))
            
                     ' Add attribute object to the structure element
                     MyStructureElement.AttributeLists.Add(MyAttributeObject)
            
                     ' Tag the rectangle with the structure element
                     MyRectangle.Tag = MyStructureElement
            
                     ' Add rectangle to the page
                     MyPage.Elements.Add(MyRectangle)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Specify document as a tagged PDF
                     document.Tag = new TagOptions();
             		
                     // Create a page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a rectangle
                     Rectangle rectangle = new Rectangle(100, 100, 100, 100, RgbColor.Black, RgbColor.Blue);
            
                     // Create a structure element
                     StructureElement structureElement = new StructureElement(TagType.Figure);
            
                     // Create an attribute object
                     AttributeObject attributeObject = new AttributeObject(AttributeOwner.Layout);
                     attributeObject.SetHeight(); // Sets default value to the height attribute
                     attributeObject.SetWidth(); //  Sets default value to the width attribute
            
                     // Calclulates bounding box and Add it to the bounding box attribute
                     attributeObject.SetBoundingBox(new BoundingBox(page, rectangle.X, rectangle.Y, rectangle.Width, rectangle.Height, rectangle.Angle));
            
                     // Add attribute object to the structure element
                     structureElement.AttributeLists.Add(attributeObject);
            
                     // Tag the rectangle with the structure element
                     rectangle.Tag = structureElement;
            
                     // Add rectangle to the page
                     page.Elements.Add(rectangle);    
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>  
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>	    
        </member>
        <member name="M:ceTe.DynamicPDF.BoundingBox.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.BoundingBox"/> class.
            </summary>
            <param name="left">The left edge of the bounding box.</param>
            <param name="bottom">The bottom edge of the bounding box.</param>
            <param name="right">The right edge of the bounding box.</param>
            <param name="top">The top edge of the bounding box.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.BoundingBox.#ctor(ceTe.DynamicPDF.Page,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.BoundingBox"/> class.
            </summary>
            <param name="page">page of the document.</param>
            <param name="x">X coordinate of the page element.</param>
            <param name="y">Y coordinate of the page element.</param>
            <param name="width">width  of the page element.</param>
            <param name="height">height  of the page element.</param>
            <param name="angle">angle of the page element.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.BoundingBox.SetBBox(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the bounding box.
            </summary>
            <param name="left">The left edge of the bounding box.</param>
            <param name="bottom">The bottom edge of the bounding box.</param>
            <param name="right">The right edge of the bounding box.</param>
            <param name="top">The top edge of the bounding box.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.Certificate">
             <summary>
             Represents a digital certificate.
             </summary>
             <remarks>
             <font color="red"><b>NOTE:</b> This class requires the .NET Framework 2.0 or greater.</font><p/>
             </remarks>
             <example>This example shows how to create a signature and sign it with a certificate.<p/>
             <code lang="VB">
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements.Forms
              
             Module Module1
              
                 Sub Main()
              
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document
              
                     ' Create a PDF Page
                     Dim MyPage As Page = New Page
              
                     ' Create a signature form field
                     Dim MySignature As Signature = New Signature("SigField", 10, 10, 250, 100)
              
                     ' Add signature field to the page
                     MyPage.Elements.Add(MySignature)
              
                     ' Add the page to the document
                     MyDocument.Pages.Add(MyPage)
              
                     ' Create a Certificate
                     Dim MyCertificate As Certificate = New Certificate("C:\PersonalCertificate.pfx", "CertificatePassword")
              
                     ' Certify the document refering the sign field
                     MyDocument.Certify("SigField", MyCertificate, CertifyingPermission.NoChangesAllowed)
              
                     ' Save the document
                     MyDocument.Draw("C:\MySignedDocument.pdf")
              
                 End Sub
              
             End Module
            </code>
            <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements.Forms;
              
             class MyClass
             {
                 static void Main(string[] args)
                 {
                     // Create a PDF Document
                     Document document = new Document();
              
                     // Create a PDF Page
                     Page page = new Page();
              
                     // Create a signature form field
                     Signature signature = new Signature("SigField", 10, 10, 250, 100);        
                     
                     // Add signature field to the page
                     page.Elements.Add(signature);
              
                     // Add the page to the document
                     document.Pages.Add(page);
              
                     // Create a Certificate from the file
                     Certificate certificate = new Certificate(@"C:\MyPersonalCertificate.pfx", "CertificatePassword");
                     
                     // Certify the document refering the sign field
                     //document.Certify("SigField", certificate, CertifyingPermission.NoChangesAllowed);
              
                     // Save the document
                     document.Draw(@"C:\MySignedDocument.pdf");        
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Certificate.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Intializes a new instance of a Certificate from an X509Certificate2 certificate class.
            </summary>
            <remarks>
            <font color="red"><b>NOTE:</b> This class requires the .NET Framework 2.0 or greater.</font><p/>
            </remarks>
            <param name="certificate">A digital certificate with private key.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Certificate.#ctor(System.String,System.String)">
            <summary>
            Intializes a new instance of a Certificate from the given file.
            </summary>
            <remarks>
            <font color="red"><b>NOTE:</b> This class requires the .NET Framework 2.0 or greater.</font><p/>
            </remarks>
            <param name="certificatePath">Physical file path to a digital certificate with private key.</param>
            <param name="password">Password for the certificate.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Certificate.#ctor(System.Byte[],System.String)">
            <summary>
            Intializes a new instance of a Certificate from the given data.
            </summary>
            <remarks>
            <font color="red"><b>NOTE:</b> This class requires the .NET Framework 2.0 or greater.</font><p/>
            </remarks>
            <param name="certificateData">Byte array containing the digital certificate with private key.</param>
            <param name="password">Password for the certificate.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Certificate.#ctor(System.String,System.Security.Cryptography.X509Certificates.StoreLocation,System.String)">
            <summary>
            Intializes a new instance of a Certificate from the certificate store.
            </summary>
            <remarks>
            <font color="red"><b>NOTE:</b> This class requires the .NET Framework 2.0 or greater.</font><p/>
            </remarks>
            <param name="storeName">Store name where the certificate resides.</param>
            <param name="storeLocation">Value of type <see cref="T:System.Security.Cryptography.X509Certificates.StoreLocation"/></param>
            <param name="certificateSubject">A protion or full subject string corresponds to fetch the certificate from store.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Certificate.#ctor(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation,System.String)">
            <summary>
            Intializes a new instance of a Certificate from the certificate store.
            </summary>
            <remarks>
            <font color="red"><b>NOTE:</b> This class requires the .NET Framework 2.0 or greater.</font><p/>
            </remarks>
            <param name="storeName">Value of type <see cref="T:System.Security.Cryptography.X509Certificates.StoreName"/></param>
            <param name="storeLocation">Value of type <see cref="T:System.Security.Cryptography.X509Certificates.StoreLocation"/></param>
            <param name="certificateSubject">A protion or full subject string corresponds to fetch the certificate from store.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Certificate.#ctor(System.String)">
            <summary>
            Intializes a new instance of a Certificate from the certificate store.
            </summary>
            <param name="certificateSubject">A protion or full subject string corresponds to fetch the certificate from store.</param>
            <remarks>
            <font color="red"><b>NOTE:</b> This class requires the .NET Framework 2.0 or greater.</font><p/>
            Default certificate store will be used.
            </remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.Certificate.SubjectName">
            <summary>
            Gets the subject name of the certificate loaded.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Certificate.Subject">
            <summary>
            Gets the complete subject string from the certificate loaded.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Certificate.Issuer">
            <summary>
            Gets the complete issuer string from the certificate loaded.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Certificate.TimestampServerUrl">
            <summary>
            Get the Timestamp Server Url from the certificate loaded.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Certificate.SignSilently">
            <summary>
            Gets or sets to prompt for the selection of a signing Certificate.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.CertifyingPermission">
            <summary>
            Specifies the Permission to Certify the document.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.CertifyingPermission.NoChangesAllowed">
            <summary>
            No changes to the Document are permitted.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.CertifyingPermission.AllowFormFilling">
            <summary>
            Permitted changes are filling in forms, instantiating page templates, and signing; other changes invalidate the signature
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.CertifyingPermission.AllowFormFillingAndAnnotation">
            <summary>
            Permitted changes are filling in forms, instantiating page templates, signing, annotation creation, deletion, and modification; other changes invalidate the signature
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.CmykColor">
            <summary>
            Represents a CMYK color.
            </summary>
            <remarks>See the <a href="Colors.html">Colors</a> topic for more on CMYK colors.</remarks>
            <licensing>
            This class is a DynamicPDF Generator Community Edition feature.
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.DeviceColor">
            <summary>
            Represents the base class for which all solid colors are derived.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Community Edition feature.
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.DeviceColor.DrawStroke(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the color data to the given <b>PageWriter</b> object.
            </summary>
            <param name="writer"><b>PageWriter</b> object to receive the color data.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.DeviceColor.DrawFill(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the color data to the given <b>PageWriter</b> object.
            </summary>
            <param name="writer"><b>PageWriter</b> object to receive the color data.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.DeviceColor.ToStringBuilder(System.Text.StringBuilder)">
            <summary>
            Appends the color information to the given <see cref="T:System.Text.StringBuilder"/> object.
            </summary>
            <param name="stringBuilder"><see cref="T:System.Text.StringBuilder"/> to receive the color information.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.DeviceColor.Components">
            <summary>
            Gets the number of components for the device color.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.CmykColor.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.CmykColor"/> class.
            </summary>
            <param name="cyan">The cyan intensity.</param>
            <param name="magenta">The magenta intensity.</param>
            <param name="yellow">The yellow intensity.</param>
            <param name="black">The black intensity.</param>
            <remarks>Values must be between 0.0 and 1.0.</remarks>
        </member>
        <member name="M:ceTe.DynamicPDF.CmykColor.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.CmykColor"/> class.
            </summary>
            <param name="cyan">The cyan intensity.</param>
            <param name="magenta">The magenta intensity.</param>
            <param name="yellow">The yellow intensity.</param>
            <param name="black">The black intensity.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.CmykColor.Equals(System.Object)">
            <summary>
            Tests equality of colors.
            </summary>
            <param name="obj"><b>Object</b> to compare to the current <b>Color</b>.</param>
            <returns><b>true</b> if the two colors are equal</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.CmykColor.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for use in
            hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current <see cref="T:ceTe.DynamicPDF.Color"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.CmykColor.ToStringBuilder(System.Text.StringBuilder)">
            <summary>
            Appends the color information to the given <see cref="T:System.Text.StringBuilder"/> object.
            </summary>
            <param name="stringBuilder"><see cref="T:System.Text.StringBuilder"/> to receive the color information.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.CmykColor.DrawStroke(ceTe.DynamicPDF.IO.OperatorWriter)">
            <summary>
            Draws the color data to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.OperatorWriter"/> object to receive the color data.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.CmykColor.DrawFill(ceTe.DynamicPDF.IO.OperatorWriter)">
            <summary>
            Draws the color data to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.OperatorWriter"/> object to receive the color data.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Components">
            <summary>
            Gets the number of components for the device color.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.ColorSpace">
            <summary>
            Gets the color space for the color.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.C">
            <summary>
            Gets or sets the cyan value.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.M">
            <summary>
            Gets or sets the magenta value.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Y">
            <summary>
            Gets or sets the yellow value.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.K">
            <summary>
            Gets or sets the black value.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Black">
            <summary>Gets the color black.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Silver">
            <summary>Gets the color silver.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.DarkGray">
            <summary>Gets the color dark gray.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Gray">
            <summary>Gets the color gray.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.DimGray">
            <summary>Gets the color dim gray. </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.White">
            <summary>Gets the color white.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Red">
            <summary>Gets the color red.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Green">
            <summary>Gets the color green.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Lime">
            <summary>Gets the color lime.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Aqua">
            <summary>Gets the color aqua.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Purple">
            <summary>Gets the color purple.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Blue">
            <summary>Gets the color blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Cyan">
            <summary>Gets the color cyan. </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Magenta">
            <summary>Gets the color magenta.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Yellow">
            <summary>Gets the color yellow.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.AliceBlue">
            <summary>Gets the color alice blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.AntiqueWhite">
            <summary>Gets the color antique white.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Aquamarine">
            <summary>Gets the color aquamarine.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Azure">
            <summary>Gets the color azure.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Beige">
            <summary>Gets the color beige.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Bisque">
            <summary>Gets the color bisque.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.BlanchedAlmond">
            <summary>Gets the color blanched almond.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.BlueViolet">
            <summary>Gets the color blue violet.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Brown">
            <summary>Gets the color brown.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.BurlyWood">
            <summary>Gets the color burly wood.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.CadetBlue">
            <summary>Gets the color cadet blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Chartreuse">
            <summary>Gets the color chartreuse.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Chocolate">
            <summary>Gets the color chocolate.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Coral">
            <summary>Gets the color coral.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.CornflowerBlue">
            <summary>Gets the color cornflower blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Cornsilk">
            <summary>Gets the color cornsilk.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Crimson">
            <summary>Gets the color crimson.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.DarkBlue">
            <summary>Gets the color dark blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.DarkCyan">
            <summary>Gets the color dark cyan.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.DarkGoldenRod">
            <summary>Gets the color dark golden rod.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.DarkGreen">
            <summary>Gets the color dark green.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.DarkKhaki">
            <summary>Gets the color dark khaki.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.DarkMagenta">
            <summary>Gets the color dark magenta.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.DarkOliveGreen">
            <summary>Gets the color dark olive green.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.DarkOrange">
            <summary>Gets the color dark orange.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.DarkOrchid">
            <summary>Gets the color dark orchid.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.DarkRed">
            <summary>Gets the color dark red.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.DarkSalmon">
            <summary>Gets the color dark salmon.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.DarkSeaGreen">
            <summary>Gets the color dark sea green.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.DarkSlateBlue">
            <summary>Gets the color dark slate blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.DarkSlateGray">
            <summary>Gets the color dark slate gray.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.DarkTurquoise">
            <summary>Gets the color dark turquoise.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.DarkViolet">
            <summary>Gets the color dark violet.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.DeepPink">
            <summary>Gets the color deep pink.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.DeepSkyBlue">
            <summary>Gets the color deep sky blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.DodgerBlue">
            <summary>Gets the color dodger blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Feldspar">
            <summary>Gets the color feldspar.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.FireBrick">
            <summary>Gets the color fire brick.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.FloralWhite">
            <summary>Gets the color floral white.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.ForestGreen">
            <summary>Gets the color forest green.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Fuchsia">
            <summary>Gets the color fuchsia.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Gainsboro">
            <summary>Gets the color gainsboro.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.GhostWhite">
            <summary>Gets the color ghost white.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Gold">
            <summary>Gets the color gold.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.GoldenRod">
            <summary>Gets the color golden rod.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.GreenYellow">
            <summary>Gets the color green yellow.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.HoneyDew">
            <summary>Gets the color honey dew.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.HotPink">
            <summary>Gets the color hot pink.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.IndianRed">
            <summary>Gets the color indian red.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Indigo">
            <summary>Gets the color indigo.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Ivory">
            <summary>Gets the color ivory.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Khaki">
            <summary>Gets the color khaki.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Lavender">
            <summary>Gets the color lavender.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.LavenderBlush">
            <summary>Gets the color lavender blush.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.LawnGreen">
            <summary>Gets the color lawn green.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.LemonChiffon">
            <summary>Gets the color lemon chiffon.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.LightBlue">
            <summary>Gets the color light blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.LightCoral">
            <summary>Gets the color light coral.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.LightCyan">
            <summary>Gets the color light cyan.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.LightGoldenRodYellow">
            <summary>Gets the color light golden rod yellow.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.LightGrey">
            <summary>Gets the color light grey.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.LightGreen">
            <summary>Gets the color light green.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.LightPink">
            <summary>Gets the color light pink.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.LightSalmon">
            <summary>Gets the color light salmon.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.LightSeaGreen">
            <summary>Gets the color light sea green.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.LightSkyBlue">
            <summary>Gets the color light sky blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.LightSlateBlue">
            <summary>Gets the color light slate blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.LightSlateGray">
            <summary>Gets the color light slate gray.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.LightSteelBlue">
            <summary>Gets the color light steel blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.LightYellow">
            <summary>Gets the color light yellow.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.LimeGreen">
            <summary>Gets the color lime green.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Linen">
            <summary>Gets the color linen.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Maroon">
            <summary>Gets the color maroon.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.MediumAquaMarine">
            <summary>Gets the color medium aqua marine.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.MediumBlue">
            <summary>Gets the color medium blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.MediumOrchid">
            <summary>Gets the color medium orchid.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.MediumPurple">
            <summary>Gets the color medium purple.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.MediumSeaGreen">
            <summary>Gets the color medium sea green.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.MediumSlateBlue">
            <summary>Gets the color medium slate blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.MediumSpringGreen">
            <summary>Gets the color medium spring green.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.MediumTurquoise">
            <summary>Gets the color medium turquoise.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.MediumVioletRed">
            <summary>Gets the color medium violet red.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.MidnightBlue">
            <summary>Gets the color midnight blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.MintCream">
            <summary>Gets the color mint cream.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.MistyRose">
            <summary>Gets the color misty rose.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Moccasin">
            <summary>Gets the color moccasin.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.NavajoWhite">
            <summary>Gets the color navajo white.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Navy">
            <summary>Gets the color navy.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.OldLace">
            <summary>Gets the color old lace.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Olive">
            <summary>Gets the color olive.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.OliveDrab">
            <summary>Gets the color olive drab.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Orange">
            <summary>Gets the color orange.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.OrangeRed">
            <summary>Gets the color orange red.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Orchid">
            <summary>Gets the color orchid.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.PaleGoldenRod">
            <summary>Gets the color pale golden rod.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.PaleGreen">
            <summary>Gets the color pale green.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.PaleTurquoise">
            <summary>Gets the color pale turquoise.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.PaleVioletRed">
            <summary>Gets the color pale violet red.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.PapayaWhip">
            <summary>Gets the color papaya whip.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.PeachPuff">
            <summary>Gets the color peach puff.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Peru">
            <summary>Gets the color peru.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Pink">
            <summary>Gets the color pink.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Plum">
            <summary>Gets the color plum.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.PowderBlue">
            <summary>Gets the color powder blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.RosyBrown">
            <summary>Gets the color rosy brown.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.RoyalBlue">
            <summary>Gets the color royal blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.SaddleBrown">
            <summary>Gets the color saddle brown.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Salmon">
            <summary>Gets the color salmon.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.SandyBrown">
            <summary>Gets the color sandy brown.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.SeaGreen">
            <summary>Gets the color sea green.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.SeaShell">
            <summary>Gets the color sea shell.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Sienna">
            <summary>Gets the color sienna.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.SkyBlue">
            <summary>Gets the color sky blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.SlateBlue">
            <summary>Gets the color slate blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.SlateGray">
            <summary>Gets the color slate gray.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Snow">
            <summary>Gets the color snow.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.SpringGreen">
            <summary>Gets the color spring green.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.SteelBlue">
            <summary>Gets the color steel blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Tan">
            <summary>Gets the color tan.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Teal">
            <summary>Gets the color teal.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Thistle">
            <summary>Gets the color thistle.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Tomato">
            <summary>Gets the color tomato.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Turquoise">
            <summary>Gets the color turquoise.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Violet">
            <summary>Gets the color violet.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.VioletRed">
            <summary>Gets the color violet red.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Wheat">
            <summary>Gets the color wheat.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.WhiteSmoke">
            <summary>Gets the color white smoke.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.YellowGreen">
            <summary>Gets the color yellow green.</summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ColorSpace">
            <summary>
            Represents a color space resource for a color.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Community Edition feature.
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.ColorSpace.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the color space to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to receive the encoder's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.ColorSpace.DrawName(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the color space name to the specified <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/>.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> to take the color space name.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.ColorSpace.DrawColorSpace(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the color space to the specified <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/>.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to receive color space.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.ColorSpace.DeviceGray">
            <summary>
            Gets the DeviceGray color space. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ColorSpace.DeviceRgb">
            <summary>
            Gets the DeviceRgb color space. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ColorSpace.DeviceCmyk">
            <summary>
            Gets the DeviceCmyk color space. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ColorSpace.Pattern">
            <summary>
            Gets the Pattern color space. 
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Destination">
            <summary>
            Base class from which destinations are derived.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Destination.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Destination"/> class.
            </summary>
            <param name="pageNumber">Page number targeted by the destination.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Destination.PageNumber">
            <summary>
            Gets or sets the page number targeted by the destination.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Dimensions">
            <summary>
            Represents the dimensions of a rectangle.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Community Edition feature.
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Dimensions.#ctor(ceTe.DynamicPDF.PageSize,ceTe.DynamicPDF.PageOrientation)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Dimensions"/> structure.
            </summary>
            <param name="size">The page size of the dimensions in points (1/72 inches).</param>
            <param name="orientation">The orientation of the dimensions in points (1/72 inches).</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Dimensions.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Dimensions"/> structure.
            </summary>
            <param name="width">The width of the dimensions in points (1/72 inches).</param>
            <param name="height">the height of the dimensions in points (1/72 inches).</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Dimensions.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Dimensions"/> structure.
            </summary>
            <param name="left">The left edge of the dimensions in points (1/72 inches).</param>
            <param name="top">The top edge of the dimensions in points (1/72 inches).</param>
            <param name="right">The right edge of the dimensions in points (1/72 inches).</param>
            <param name="bottom">The bottom edge of the dimensions in points (1/72 inches).</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Dimensions.Equals(System.Object)">
            <summary>
            Tests equality of Dimensions.
            </summary>
            <param name="obj"><b>Object</b> to compare to the current <b>Dimension</b>.</param>
            <returns><b>true</b> if the two dimensions are equal</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Dimensions.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for use in
            hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current <see cref="T:ceTe.DynamicPDF.Dimensions"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Dimensions.op_Equality(ceTe.DynamicPDF.Dimensions,ceTe.DynamicPDF.Dimensions)">
            <summary>
            Returns a value indicating if the instances are equal or not.
            </summary>
            <returns>Value indicates whether or not the instances are equal.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Dimensions.op_Inequality(ceTe.DynamicPDF.Dimensions,ceTe.DynamicPDF.Dimensions)">
            <summary>
            Returns a value indicating if the instances are equal or not.
            </summary>
            <returns>Value indicates whether or not the instances are not equal.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Dimensions.Width">
            <summary>
            Gets or sets the width of the dimensions in points (1/72 inches).
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Dimensions.Height">
            <summary>
            Gets or sets width of the dimensions in points (1/72 inches).
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Dimensions.Left">
            <summary>
            Gets or sets the left edge of the dimensions in points (1/72 inches).
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Dimensions.Top">
            <summary>
            Gets or sets the top edge of the dimensions in points (1/72 inches).
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Dimensions.Right">
            <summary>
            Gets or sets the right edge of the dimensions in points (1/72 inches).
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Dimensions.Bottom">
            <summary>
            Gets or sets the bottom edge of the dimensions in points (1/72 inches).
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.DocumentJavaScript">
            <summary>
            Represents a PDF document's JavaScript entry.
            </summary>
            <remarks>For more details on using the doucment's JavaScript take a look at the <a href="Javascript.html">JavaScript</a> topic.</remarks>
            <example>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            
            Module MyModule
            		
                Sub Main()
                    'Create a MyDocument and set it's properties
                    Dim MyDocument As ceTe.DynamicPDF.Document = New ceTe.DynamicPDF.Document
            	        
                    'Create a MyPage to add to the MyDocument
                    Dim MyPage As ceTe.DynamicPDF.Page = New ceTe.DynamicPDF.Page(PageSize.Letter, PageOrientation.Portrait, 54.0F)
            	        
                    'Create a label to add to the MyPage
                    Dim Text As String = "JavaScript Example"
                    Dim MyLabel As Label = New Label(Text, 0, 0, 504, 100, Font.Helvetica, 18, TextAlign.Center)
            	     
                    'Add the JavaScript Alert to the Document
                    MyDocument.JavaScripts.Add(New DocumentJavaScript("HelloWorld", "app.alert(""Hello World!!"")"))
            	        
                    'Add label to MyPage
                    MyPage.Elements.Add(MyLabel)
            	        
                    'Add MyPage to MyDocument
                    MyDocument.Pages.Add(MyPage)
            	        
                    ' Save the PDF Document
                    MyDocument.Draw("C:\MyDocument.pdf")
                End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            
            class MyClass
            {
                static void Main()
                {
                    // Create a document and set it's properties
                    ceTe.DynamicPDF.Document document = new ceTe.DynamicPDF.Document();
            		
                    // Create a page to add to the document
                    ceTe.DynamicPDF.Page page = new ceTe.DynamicPDF.Page( PageSize.Letter, PageOrientation.Portrait, 54.0f );
            		
                    // Create a Label to add to the page
                    string text = "JavaScript Example";
                    Label label = new Label( text, 0, 0, 504, 100, Font.Helvetica, 18, TextAlign.Center );
            		
                    // Add the JavaScript alert to the Document
                    document.JavaScripts.Add( new DocumentJavaScript( "HelloWorld", "app.alert(\"Hello World!!\")" ) );
            		
                    // Add label to page
                    page.Elements.Add( label );
            		
                    // Add page to document
                    document.Pages.Add( page );
            		
                    // Save the PDF document
                    document.Draw( @"C:\MyDocument.pdf" );
                }
            }
            </code>
            </example>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.DocumentJavaScript.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.DocumentJavaScript"/> class.
            </summary>
            <param name="name">The name for the JavaScript.</param>
            <param name="javaScript">The JavaScript.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.DocumentJavaScript.DrawReference(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws a reference to the JavaScript indirect object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the JavaScript indirect object.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.DocumentJavaScript.Name">
            <summary>
            Gets the name of the JavaScript entry.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.DocumentJavaScript.JavaScript">
            <summary>
            Gets the actual JavaScript.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.DocumentJavaScriptList">
            <summary>
            Represents a list of JavaScript entries.
            </summary>
            <example>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            
            Module MyModule
            		
                Sub Main()
                    'Create a MyDocument and set it's properties
                    Dim MyDocument As ceTe.DynamicPDF.Document = New ceTe.DynamicPDF.Document
            	        
                    'Create a MyPage to add to the MyDocument
                    Dim MyPage As ceTe.DynamicPDF.Page = New ceTe.DynamicPDF.Page(PageSize.Letter, PageOrientation.Portrait, 54.0F)
            	        
                    'Create a label to add to the MyPage
                    Dim Text As String = "JavaScript Example"
                    Dim MyLabel As Label = New Label(Text, 0, 0, 504, 100, Font.Helvetica, 18, TextAlign.Center)
            	     
                    'Add the JavaScript Alert to the Document
                    MyDocument.JavaScripts.Add(New DocumentJavaScript("HelloWorld", "app.alert(""Hello World!!"")"))
            	        
                    'Add label to MyPage
                    MyPage.Elements.Add(MyLabel)
            	        
                    'Add MyPage to MyDocument
                    MyDocument.Pages.Add(MyPage)
            	        
                    ' Save the PDF Document
                    MyDocument.Draw("C:\MyDocument.pdf")
                End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            
            class MyClass
            {
                static void Main()
                {
                    // Create a document and set it's properties
                    ceTe.DynamicPDF.Document document = new ceTe.DynamicPDF.Document();
            		
                    // Create a page to add to the document
                    ceTe.DynamicPDF.Page page = new ceTe.DynamicPDF.Page( PageSize.Letter, PageOrientation.Portrait, 54.0f );
            		
                    // Create a Label to add to the page
                    string text = "JavaScript Example";
                    Label label = new Label( text, 0, 0, 504, 100, Font.Helvetica, 18, TextAlign.Center );
            		
                    // Add the JavaScript alert to the Document
                    document.JavaScripts.Add( new DocumentJavaScript( "HelloWorld", "app.alert(\"Hello World!!\")" ) );
            		
                    // Add label to page
                    page.Elements.Add( label );
            		
                    // Add page to document
                    document.Pages.Add( page );
            		
                    // Save the PDF document
                    document.Draw( @"C:\MyDocument.pdf" );
                }
            }
            </code>
            </example>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.DocumentJavaScriptList.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the JavaScript entries to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:ceTe.DynamicPDF.DocumentJavaScriptList.Add(ceTe.DynamicPDF.DocumentJavaScript)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.DocumentJavaScript"/> to the <see cref="T:ceTe.DynamicPDF.DocumentJavaScriptList"/>.
            </summary>
            <param name="javaScript"><see cref="T:ceTe.DynamicPDF.DocumentJavaScript"/> to add.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.DocumentJavaScriptList.ContainsName(System.String)">
            <summary>
            Returns a value indicating whether the provided name is found in the list of JavaScript entries.
            </summary>
            <param name="name">Name to check if it is in the JavaScript entries.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.DocumentJavaScriptList.Count">
            <summary>
            Gets the number of JavaScript entries actually contained in the <see cref="T:ceTe.DynamicPDF.DocumentJavaScriptList"/>.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.DocumentJavaScriptList.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.DocumentJavaScript"/> at the given index.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.DocumentJavaScriptList.Item(System.String)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.DocumentJavaScript"/> with the given name.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Duplex">
            <summary>
            Specifies the duplex mode for the document.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Duplex.None">
            <summary>
            Duplex mode is not specified.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Duplex.Simplex">
            <summary>
            Simplex mode.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Duplex.DuplexFlipShortEdge">
            <summary>
            Duplex mode with flipping on the short edge.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Duplex.DuplexFlipLongEdge">
            <summary>
            Duplex mode with flipping on the long edge.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.EmbeddedFile">
             <summary>
             Represents a PDF document's EmbeddedFile entry.
             </summary>
             <example>This example shows how to Embedded files in to a document.<p/>
             <code lang="VB">
             Imports System
             Imports System.IO
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             
                 Sub Main()
             
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             
                     ' FileStreams used for creating the instance of EmbeddedFile
                     Dim fileStream1 As FileStream = New FileStream("C:\DocumentA.pdf",FileMode.Open,FileAccess.Read,FileShare.ReadWrite)
                     Dim fileStream2 As FileStream  = New FileStream("C:\DocumentB.pdf",FileMode.Open,FileAccess.Read,FileShare.ReadWrite)
            		
                     ' byte array of the file by reading the file.
                     Dim  filebyte(fileStream2.Length) As  byte 
                     fileStream2.Read(filebyte, 0, filebyte.Length )
            		
                     ' Created 3 instances of EmbeddedFile using all the available constructors.
                     Dim  embeddedFile1 As EmbeddedFile  = New EmbeddedFile("C:\DocumentC.pdf")
                     Dim embeddedFile2 As EmbeddedFile  = New EmbeddedFile( fileStream1, "DocumentA.pdf", DateTime.Now )
                     Dim embeddedFile3 As  EmbeddedFile  = New EmbeddedFile( filebyte, "DocumentB.pdf", DateTime.Now )
            		
                     ' Added the embeddedFiles to the EmbeddedFileList of the document class.
                     MyDocument.EmbeddedFiles.Add( embeddedFile1 )
                     MyDocument.EmbeddedFiles.Add( embeddedFile2 )
                     MyDocument.EmbeddedFiles.Add( embeddedFile3 )
            		
                     ' Set the PageMode to the ShowAttachments
                     MyDocument.InitialPageMode = PageMode.ShowAttachments
             
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Add a label to the page
                     MyPage.Elements.Add(New Label("My PDF Document", 0, 0, 512, 40, Font.Helvetica, 30, TextAlign.Center))
             
                     ' Save the PDF document
                     MyDocument.Draw("C:\MyDocument.pdf")
             
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using System.IO;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // FileStreams used for creating the instance of EmbeddedFile
                     FileStream fileStream1 = new FileStream(@"C:\DocumentA.pdf",FileMode.Open,FileAccess.Read,FileShare.ReadWrite);
            		    FileStream fileStream2 = new FileStream(@"C:\DocumentB.pdf",FileMode.Open,FileAccess.Read,FileShare.ReadWrite);
            		
                     // byte array of the file by reading the file.
                     byte[] filebyte = new byte[fileStream2.Length];
                     fileStream2.Read(filebyte, 0, filebyte.Length );
            		
                     // Created 3 instances of EmbeddedFile using all the available constructors.
                     EmbeddedFile embeddedFile1 = new EmbeddedFile(@"C:\DocumentC.pdf");
                     EmbeddedFile embeddedFile2 = new EmbeddedFile( fileStream1, "DocumentA.pdf", DateTime.Now );
                     EmbeddedFile embeddedFile3 = new EmbeddedFile( filebyte, "DocumentB.pdf", DateTime.Now );
            		
                     // Added the embeddedFiles to the EmbeddedFileList of the document class.
                     document.EmbeddedFiles.Add( embeddedFile1 );
                     document.EmbeddedFiles.Add( embeddedFile2 );
                     document.EmbeddedFiles.Add( embeddedFile3 );
            		
                     // Set the PageMode to the ShowAttachments
                     document.InitialPageMode = PageMode.ShowAttachments;
             	
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Add a label to the page 
                     page.Elements.Add( new Label( "My PDF Document", 0, 0, 512, 40, Font.Helvetica, 30, TextAlign.Center ) );
            
                     // Save the PDF document
                     document.Draw( @"C:\MyDocument.pdf" );
                 }     
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.EmbeddedFile.#ctor(System.Byte[],System.String,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.EmbeddedFile"/> class.
            </summary>
            <param name="file">The byte array of the file need to be Embedded</param>
            <param name="fileName">Name of the File Embedded</param>
            <param name="modifiedDate">Last modifieddate of the file</param>
        </member>
        <member name="M:ceTe.DynamicPDF.EmbeddedFile.#ctor(System.IO.FileStream,System.String,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.EmbeddedFile"/> class.
            </summary>
            <param name="file">The FileStream of the file need to be Embedded</param>
            <param name="fileName">Name of the File Embedded</param>
            <param name="modifiedDate">Last modifieddate of the file</param>
        </member>
        <member name="M:ceTe.DynamicPDF.EmbeddedFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.EmbeddedFile"/> class.
            </summary>
            <param name="filePath">The physical path to the file need to be Embedded</param>
        </member>
        <member name="M:ceTe.DynamicPDF.EmbeddedFile.DrawReference(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws a reference to the EmbeddedFile indirect object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the EmbeddedFile indirect object.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.EmbeddedFile.FileName">
            <summary>
            Gets and Sets the FileName of the EmbeddedFile.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.EmbeddedFile.Description">
            <summary>
            Gets and Sets the Description of the EmbeddedFile.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.EmbeddedFileList">
            <summary>
            Represents a list of EmbeddedFiles.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.EmbeddedFileList.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the EmbeddedFiles to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:ceTe.DynamicPDF.EmbeddedFileList.Add(ceTe.DynamicPDF.EmbeddedFile)">
            <summary>
            Adds an <see cref="T:ceTe.DynamicPDF.EmbeddedFile"/> to the <see cref="T:ceTe.DynamicPDF.EmbeddedFileList"/>.
            </summary>
            <param name="embeddedFile"><see cref="T:ceTe.DynamicPDF.EmbeddedFile"/> to add.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.EmbeddedFileList.Count">
            <summary>
            Gets the number of <see cref="T:ceTe.DynamicPDF.EmbeddedFile"/>s contained in the <see cref="T:ceTe.DynamicPDF.EmbeddedFileList"/>.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.EmbeddedFileList.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.EmbeddedFile"/> at the given index.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.EmbeddedFileResource">
            <summary>
            Represents EmbeddedFile resource
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.EmbeddedFileResource.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the EmbeddedFile resource to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the resource's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.EmbeddedFileResource.RequiredPdfObjects">
            <summary>
            Gets the number of PDF objects required by the resource.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.EmptyDocumentException">
            <summary>
            The exception that is thrown for an empty DynamicPDF Generator document.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Community Edition feature.
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.EmptyDocumentException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.EmptyDocumentException"/> class.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the error.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.PageZoom">
            <summary>
            Specifies zoom type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageZoom.Retain">
            <summary>
            Keep unchanged.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageZoom.FitPage">
            <summary>
            Fit page in window.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageZoom.FitWidth">
            <summary>
            Fit width of page in window.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageZoom.FitHeight">
            <summary>
            Fit height of page in window.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageZoom.FitBox">
            <summary>
            Fit all elements of page in window.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageMode">
            <summary>
            Specifies page mode.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageMode.Auto">
            <summary>
            ShowOutlines is used if outlines are present. If not ShowNone is used.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageMode.ShowNone">
            <summary>
            Outlines and Thumbnails toolbars are not shown.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageMode.ShowOutlines">
            <summary>
            Outlines toolbar is shown.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageMode.ShowThumbnails">
            <summary>
            Thumbnails toolbar is shown.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageMode.ShowOptionalContent">
            <summary>
            Optional content is shown.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageMode.ShowAttachments">
            <summary>
            Attachments toolbar is shown.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageMode.FullScreen">
            <summary>
            Document is show in full screen mode.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageSize">
            <summary>
            Specifies page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.A3">
            <summary>
            A3 page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.A4">
            <summary>
            A4 page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.A5">
            <summary>
            A5 page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.A6">
            <summary>
            A6 page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.B3">
            <summary>
            B3 page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.B4">
            <summary>
            B4 page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.B5">
            <summary>
            B5 page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.B5JIS">
            <summary>
            B5 Japanese page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.DoublePostcard">
            <summary>
            Double postcard page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.Envelope10">
            <summary>
            Envelope 10 page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.EnvelopeDL">
            <summary>
            DL envelope page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.EnvelopeC5">
            <summary>
            C5 envelope page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.EnvelopeB5">
            <summary>
            B5 envelope page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.EnvelopeMonarch">
            <summary>
            Monarch envelope page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.Executive">
            <summary>
            Executive page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.Legal">
            <summary>
            Legal page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.Folio">
            <summary>
            Folio page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.Letter">
            <summary>
            Letter page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.Postcard">
            <summary>
            Postcard page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.PRC16K">
            <summary>
            PRC 16K page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.PRC32K">
            <summary>
            PRC 32K page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.Quatro">
            <summary>
            Quatro page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.Statement">
            <summary>
            Statement page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.Tabloid">
            <summary>
            Tabloid page size.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageOrientation">
            <summary>
            Specifies page orientation.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageOrientation.Portrait">
            <summary>
            Portrait page orientation.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageOrientation.Landscape">
            <summary>
            Landscape page orientation.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.TextAlign">
            <summary>
            Specifies alignment of text.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.TextAlign.Left">
            <summary>
            Align left.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.TextAlign.Center">
            <summary>
            Align center.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.TextAlign.Right">
            <summary>
            Align right.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.TextAlign.Justify">
            <summary>
            Align justify.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.TextAlign.FullJustify">
            <summary>
            Align justify including last line.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.CellAlign">
            <summary>
            <font color="red">Obsolete.</font> Specifies alignment of a cell's text.
            </summary>
            <remarks><font color="red">NOTE: This enum is obsolete.</font> Use <see cref="T:ceTe.DynamicPDF.TextAlign"/> enum instead.</remarks>
        </member>
        <member name="F:ceTe.DynamicPDF.CellAlign.Left">
            <summary>
            Align left.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.CellAlign.Center">
            <summary>
            Align center.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.CellAlign.Right">
            <summary>
            Align right.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.CellAlign.Justify">
            <summary>
            Align justify.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.CellAlign.FullJustify">
            <summary>
            Align justify including last line.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.CellAlign.Inherit">
            <summary>
            Inherit the alignment from the object with next precedence.
            </summary>        
        </member>
        <member name="T:ceTe.DynamicPDF.TextStyle">
            <summary>
            Specifies text style.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.TextStyle.Regular">
            <summary>
            Regular style.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.TextStyle.Italic">
            <summary>
            Italic style.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.TextStyle.Bold">
            <summary>
            Bold style.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.TextStyle.BoldItalic">
            <summary>
            Bold italic style.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Align">
            <summary>
            Specifies horizontal alignment.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Align.Left">
            <summary>
            Align left.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Align.Center">
            <summary>
            Align center.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Align.Right">
            <summary>
            Align right.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.VAlign">
            <summary>
            Specifies vertical alignment.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.VAlign.Top">
            <summary>
            Align top.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.VAlign.Center">
            <summary>
            Align center.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.VAlign.Bottom">
            <summary>
            Align bottom.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.CellVAlign">
            <summary>
            <font color="red">Obsolete.</font> Specifies a cell's vertical alignment.
            </summary>
            <remarks><font color="red">NOTE: This enum is obsolete.</font>Use <see cref="T:ceTe.DynamicPDF.VAlign"/> enum instead.</remarks>
        </member>
        <member name="F:ceTe.DynamicPDF.CellVAlign.Top">
            <summary>
            Align top.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.CellVAlign.Center">
            <summary>
            Align center.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.CellVAlign.Bottom">
            <summary>
            Align bottom.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.CellVAlign.Inherit">
            <summary>
            Inherit the vertical alignment from the object with next precedence.
            </summary>        
        </member>
        <member name="T:ceTe.DynamicPDF.LineCap">
            <summary>
            Specifies the cap style of a line.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.LineCap.Butt">
            <summary>
            Straight line at point.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.LineCap.Round">
            <summary>
            Rounded at point.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.LineCap.ProjectedSquare">
            <summary>
            Projected from point.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.LineJoin">
            <summary>
            Specifies how lines are joined.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.LineJoin.Miter">
            <summary>
            Sharp angle projected from point.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.LineJoin.Round">
            <summary>
            Rounded at point.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.LineJoin.Bevel">
            <summary>
            Beveled at point.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.LineLeadingType">
            <summary>
            Specifies the line leading type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.LineLeadingType.Auto">
            <summary>
            Automatically calculated.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.LineLeadingType.AtLeast">
            <summary>
            At least the value specified.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.LineLeadingType.Exactly">
            <summary>
            Exactly the value specified.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.TextRenderingMode">
            <summary>
            Specifies text rendering mode.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.TextRenderingMode.Fill">
            <summary>
            Fill text.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.TextRenderingMode.Stroke">
            <summary>
            Stroke text border.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.TextRenderingMode.FillAndStroke">
            <summary>
            Fill text and stroke border.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.TextRenderingMode.Invisible">
            <summary>
            Invisible text.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.TextDecorationType">
            <summary>
            Specifies text decoration type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.TextDecorationType.None">
            <summary>
            No decoration.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.TextDecorationType.Underline">
            <summary>
            Under line.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.TextDecorationType.OverLine">
            <summary>
            Over Line.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.TextDecorationType.LineThrough">
            <summary>
            Strike through.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Placement">
            <summary>
            Specifies  placement.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Placement.Block">
            <summary>
            Block.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Placement.Inline">
            <summary>
             Inline.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Placement.Before">
            <summary>
            Before.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Placement.Start">
            <summary>
            Start.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Placement.End">
            <summary>
            End.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.WritingMode">
            <summary>
            Specifies  writing mode.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.WritingMode.LrTb">
            <summary>
            Left to right and top to bottom.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.WritingMode.RlTb">
            <summary>
            Right to left and top to bottom.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.WritingMode.TbRl">
            <summary>
            Top to bottom and right to left.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.BorderStyleAttribute">
            <summary>
            Specifies  border style attribute.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.BorderStyleAttribute.None">
            <summary>
            No border style.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.BorderStyleAttribute.Hidden">
            <summary>
            Hidden.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.BorderStyleAttribute.Dotted">
            <summary>
            Dotted.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.BorderStyleAttribute.Dashed">
            <summary>
            Dashed.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.BorderStyleAttribute.Solid">
            <summary>
            Solid.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.BorderStyleAttribute.Double">
            <summary>
            Double.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.BorderStyleAttribute.Groove">
            <summary>
            Groove.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.BorderStyleAttribute.Ridge">
            <summary>
            Ridge.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.BorderStyleAttribute.Inset">
            <summary>
            Inset.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.BorderStyleAttribute.Outset">
            <summary>
            Outset.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.TextAlignAttribute">
            <summary>
            Specifies text align attribute.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.TextAlignAttribute.Start">
            <summary>
            Aligned with the start edge.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.TextAlignAttribute.Center">
            <summary>
            Centered between the start and end edges.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.TextAlignAttribute.End">
            <summary>
            Aligned with the end edge.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.TextAlignAttribute.Justify">
            <summary>
            Justify.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.BlockAlign">
            <summary>
            Specifies block align attribute.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.BlockAlign.Before">
            <summary>
            Before.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.BlockAlign.Middle">
            <summary>
            Middle.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.BlockAlign.After">
            <summary>
            After.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.BlockAlign.Justify">
            <summary>
            Justify.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.InlineAlign">
            <summary>
            Specifies inline align attribute.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.InlineAlign.Start">
            <summary>
            Start.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.InlineAlign.Center">
            <summary>
            Center.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.InlineAlign.End">
            <summary>
            End.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.LineHeight">
            <summary>
            Specifies line height. 
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.LineHeight.Normal">
            <summary>
            Normal.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.LineHeight.Auto">
            <summary>
            Auto.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.RubyAlign">
            <summary>
            Specifies ruby align. 
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.RubyAlign.Start">
            <summary>
            Start.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.RubyAlign.Center">
            <summary>
            Center.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.RubyAlign.End">
            <summary>
            End.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.RubyAlign.Justify">
            <summary>
            Justify.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.RubyAlign.Distribute">
            <summary>
            Distribute.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.RubyPosition">
            <summary>
            Specifies ruby position. 
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.RubyPosition.Before">
            <summary>
            Before.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.RubyPosition.After">
            <summary>
            After.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.RubyPosition.Warichu">
            <summary>
            Warichu.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.RubyPosition.Inline">
            <summary>
            Inline.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Role">
            <summary>
            Specifies the type of form field. 
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Role.rb">
            <summary>
            Radio button.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Role.cb">
            <summary>
            Check box.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Role.pb">
            <summary>
            Push button.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Role.tv">
            <summary>
            Text value field.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Checked">
            <summary>
            Specifies the state of a radio button or check box field. 
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Checked.on">
            <summary>
            On.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Checked.off">
            <summary>
            Off.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Checked.neutral">
            <summary>
            Neutral.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ListNumbering">
            <summary>
            Specifies the list numbering style. 
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ListNumbering.None">
            <summary>
            No autonumbering.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ListNumbering.Disc">
            <summary>
            Disc.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ListNumbering.Circle">
            <summary>
            Circle.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ListNumbering.Square">
            <summary>
            Square.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ListNumbering.Decimal">
            <summary>
            Decimal arabic numerals.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ListNumbering.UpperRoman">
            <summary>
            Uppercase roman numerals.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ListNumbering.LowerRoman">
            <summary>
            Lowercase roman numerals.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ListNumbering.UpperAlpha">
            <summary>
            Uppercase letters.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ListNumbering.LowerAlpha">
            <summary>
            Lowercase letters.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Scope">
            <summary>
            Specifies the scope. 
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Scope.Row">
            <summary>
            Row.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Scope.Column">
            <summary>
            Column.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Scope.Both">
            <summary>
            Both.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ArtifactType">
            <summary>
            Specifies the artifact type. 
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ArtifactType.Pagination">
            <summary>
            Page numbers.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ArtifactType.Layout">
            <summary>
            Layout.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ArtifactType.Page">
            <summary>
            Page.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ArtifactType.Background">
            <summary>
            Background.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ArtifactType.None">
            <summary>
            No ArtifactType
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.SubType">
            <summary>
            Specifies the sub type of artifact. 
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.SubType.Header">
            <summary>
            Header. 
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.SubType.Footer">
            <summary>
            Footer. 
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.SubType.Watermark">
            <summary>
            Watermark. 
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.SubType.None">
            <summary>
            No SubType
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Edge">
            <summary>
            Specifies the edge. 
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Edge.Top">
            <summary>
            Top. 
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Edge.Bottom">
            <summary>
            Bottom. 
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Edge.Left">
            <summary>
            Left. 
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Edge.Right">
            <summary>
            Right. 
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Attribute">
            <summary>
            Specifies the attribute. 
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Attribute.O">
            <summary>
            Owner.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Attribute.WritingMode">
            <summary>
            Writint mode.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Attribute.BorderColor">
            <summary>
            Border color.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Attribute.BorderThickness">
            <summary>
            Border thickness.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Attribute.Color">
            <summary>
            Color.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Attribute.StartIndent">
            <summary>
            Start indent.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Attribute.EndIndent">
            <summary>
            End indent.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Attribute.TextIndent">
            <summary>
            Text indent.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Attribute.TextAlign">
            <summary>
            Text align.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Attribute.BlockAlign">
            <summary>
            Block align.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Attribute.InlineAlign">
            <summary>
            Inline align.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Attribute.TBorderStyle">
            <summary>
            Table borde style.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Attribute.TPadding">
            <summary>
            Table padding.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Attribute.LineHeight">
            <summary>
            Line height.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Attribute.TextDecorationColor">
            <summary>
            Text color.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Attribute.TextDecorationThickness">
            <summary>
            Text decoration thickness.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Attribute.GlyphOrientationVertical">
            <summary>
            Orientation of glyphs.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Attribute.RubyAlign">
            <summary>
            Ruby align.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Attribute.RubyPosition">
            <summary>
            Ruby position.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Attribute.Role">
            <summary>
            Type of form field.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Attribute.Checked">
            <summary>
            The state of radio button or check box field.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Attribute.Desc">
            <summary>
            Description of the field.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Attribute.ListNumbering">
            <summary>
            List numbering style.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Attribute.RowSpan">
            <summary>
            Row span.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Attribute.ColSpan">
            <summary>
            Column span.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Attribute.Headers">
            <summary>
            Header.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Attribute.Scope">
            <summary>
            Scope.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Attribute.Summary">
            <summary>
            Summary.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Attribute.Placement">
            <summary>
            Placement.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Attribute.BackgroundColor">
            <summary>
            Background color.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Attribute.BorderStyle">
            <summary>
            Border style.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Attribute.Padding">
            <summary>
            Padding.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Attribute.SpaceBefore">
            <summary>
            Space before.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Attribute.SpaceAfter">
            <summary>
            Space after.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Attribute.BBox">
            <summary>
            Bounding box.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Attribute.Width">
            <summary>
            Width.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Attribute.Height">
            <summary>
            Height.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Attribute.BaselineShift">
            <summary>
            Base line shift.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Attribute.TextDecorationType">
            <summary>
            Text decoration type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Attribute.ColumnCount">
            <summary>
            Column count.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Attribute.ColumnWidths">
            <summary>
            Column width.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Attribute.ColumnGap">
            <summary>
            Column gap.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.EvenOddTemplate">
            <summary>
            Represents an even / odd section or document template.
            </summary>
            <remarks>This class can be used to define a template that can contain separate information to go on even and odd pages.
            See the <a href="Templates.html">Templates</a> topic for more on Templates.</remarks>
            <example>This example shows how to create an EvenOddTemplate and add it to the document.<p/>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            
            Module MyModule
            		
                Sub Main()
            
                    ' Create a PDF Document
                    Dim MyDocument As Document = New Document
            		
                    ' Add 5 blank pages to the document
                    MyDocument.Pages.Add(New Page(PageSize.Letter))
                    MyDocument.Pages.Add(New Page(PageSize.Letter))
                    MyDocument.Pages.Add(New Page(PageSize.Letter))
                    MyDocument.Pages.Add(New Page(PageSize.Letter))
                    MyDocument.Pages.Add(New Page(PageSize.Letter))
            		
                    ' Create an even odd template and add elements to it
                    Dim MyTemplate As EvenOddTemplate = New EvenOddTemplate
                    MyTemplate.EvenElements.Add(New Label("Even Header", 0, 0, 200, 12))
                    MyTemplate.OddElements.Add(New Label("Odd Header", 0, 0, 200, 12)) 
                    MyTemplate.Elements.Add(New Label("Footer", 0, 680, 200, 12))
            		
                    ' Add the template to the document
                    MyDocument.Template = MyTemplate
            
                    ' Save the PDF document
                    MyDocument.Draw("C:\MyDocument.pdf")
            		
                End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            
            class MyClass
            {
                static void Main()
                {
                    // Create a PDF Document
                    Document document = new Document();
            		
                    // Add 5 blank pages to the document
                    document.Pages.Add( new Page( PageSize.Letter ) );
                    document.Pages.Add( new Page( PageSize.Letter ) );
                    document.Pages.Add( new Page( PageSize.Letter ) );
                    document.Pages.Add( new Page( PageSize.Letter ) );
                    document.Pages.Add( new Page( PageSize.Letter ) );
            		
                    // Create an even odd template and add elements to it
                    EvenOddTemplate template = new EvenOddTemplate();
                    template.EvenElements.Add( new Label( "Even Header", 0, 0, 200, 12 ) );
                    template.OddElements.Add( new Label( "Odd Header", 0, 0, 200, 12 ) );
                    template.Elements.Add( new Label( "Footer", 0, 680, 200, 12 ) );
            		
                    // Add the template to the document
                    document.Template = template;
            		
                    // Save the PDF document
                    document.Draw( @"C:\MyDocument.pdf" );
                }
            }
            </code>
            </example>
            <licensing>
            This class is a DynamicPDF Generator Community Edition feature.
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.Template">
            <summary>
            Represents a document or section template.
            </summary>
            <remarks>See the <a href="Templates.html">Templates</a> topic for more on templates.</remarks>
            <example>This example shows how to create a template and add it to the document.<p/>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
                Sub Main()
            		
                    ' Create a PDF Document
                    Dim MyDocument As Document = New Document
            		
                    ' Add 5 blank pages to the document
                    MyDocument.Pages.Add(New Page(PageSize.Letter))
                    MyDocument.Pages.Add(New Page(PageSize.Letter))
                    MyDocument.Pages.Add(New Page(PageSize.Letter))
                    MyDocument.Pages.Add(New Page(PageSize.Letter))
                    MyDocument.Pages.Add(New Page(PageSize.Letter))
            		
                    ' Create an even odd template and add elements to it
                    Dim MyTemplate As Template = New Template
                    MyTemplate.Elements.Add(New Label("Header", 0, 0, 200, 12))
                    MyTemplate.Elements.Add(New Label("Footer", 0, 680, 200, 12))
            		
                    ' Add the template to the document
                    MyDocument.Template = MyTemplate
            
                    ' Save the PDF document
                    MyDocument.Draw("C:\MyDocument.pdf")
            		
                End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
                static void Main()
                {
                    // Create a PDF Document
                    Document document = new Document();
            		
                    // Add 5 blank pages to the document
                    document.Pages.Add( new Page( PageSize.Letter ) );
                    document.Pages.Add( new Page( PageSize.Letter ) );
                    document.Pages.Add( new Page( PageSize.Letter ) );
                    document.Pages.Add( new Page( PageSize.Letter ) );
                    document.Pages.Add( new Page( PageSize.Letter ) );
            		
                    // Create an even odd template and add elements to it
                    Template template = new Template();
                    template.Elements.Add( new Label( "Header", 0, 0, 200, 12 ) );
                    template.Elements.Add( new Label( "Footer", 0, 680, 200, 12 ) );
            		
                    // Add the template to the document
                    document.Template = template;
            		
                    // Save the PDF document
                    document.Draw( @"C:\MyDocument.pdf" );
                }
            }
            </code>
            </example>
            <licensing>
            This class is a DynamicPDF Generator Community Edition feature.
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Template.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Template"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Template.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the template's page elements to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the template's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Template.HasPageElements(System.Int32)">
            <summary>
            Returns a value indicating if the template has page elements for the given page.
            </summary>
            <param name="pageNumber">Page number to test.</param>
            <returns>A <b>Boolean</b> value indicating if there are page elements.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Template.Elements">
            <summary>
            Gets the page elements that will be applied by the template to all pages.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.EvenOddTemplate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Template"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.EvenOddTemplate.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the template's page elements to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the template's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.EvenOddTemplate.HasPageElements(System.Int32)">
            <summary>
            Returns a value indicating if the template has page elements for the given page.
            </summary>
            <param name="pageNumber">The page number to check.</param>
            <returns>A <b>Boolean</b> value indicating if there are page elements.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.EvenOddTemplate.EvenElements">
            <summary>
            Gets the page elements that will be applied by the template to even pages.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.EvenOddTemplate.OddElements">
            <summary>
            Gets the page elements that will be applied by the template to odd pages.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ExtendedPageDimensions">
            <summary>
            Represents the extended dimensions of a page.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Community Edition feature.
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.PageDimensions">
            <summary>
            Represents the dimensions of a page.
            </summary>
            <remarks>This class can be used to specify the dimensions and other formatting details of a page.  It can then be passed into a <see cref="T:ceTe.DynamicPDF.Page"/> constructor.</remarks>
            <example>The following example creates a new page using a <see cref="T:ceTe.DynamicPDF.PageDimensions"/> to set the margins of that page.  
            It then places a label on the page and rotates the page 90 degrees.<p/>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
                Sub Main()
            		
                    ' Create a PDF Document
                    Dim MyDocument As Document = New Document 
            		
                    ' Create a page dimensions object and set the margins
                    Dim dimensions As PageDimensions = New PageDimensions(PageSize.Letter, PageOrientation.Portrait)
                    dimensions.BottomMargin = 50
                    dimensions.TopMargin = 50
                    dimensions.LeftMargin = 35
                    dimensions.RightMargin = 35
            	
                    ' Create a page using a page dimensions object and add it to the document
                    Dim MyPage As Page = New Page(dimensions)
                    MyDocument.Pages.Add(MyPage)
            
                    ' Add a label to the page
                    MyPage.Elements.Add(New Label("this page was rotated 90 degrees.", 0, 0, 300, 20, Font.Helvetica, 18))
            
                    ' Rotate the page 90 degrees
                    MyPage.Rotate = 90
            
                    ' Save the PDF
                    MyDocument.Draw("C:\MyDocument.pdf")
            		
                End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
                static void Main()
                {
                    // Create a PDF Document
                    Document document = new Document();
            
                    // Create a page dimensions object and set the margins
                    PageDimensions dimensions = new PageDimensions( PageSize.Letter, PageOrientation.Portrait );
                    dimensions.BottomMargin = 50;
                    dimensions.TopMargin = 50;
                    dimensions.LeftMargin = 35;
                    dimensions.RightMargin = 35;
            
                    // Create a page using a page dimensions object and add it to the document
                    Page page = new Page( dimensions );
                    document.Pages.Add( page );
            
                    // Add a label to the page
                    page.Elements.Add( new Label( "This page was rotated 90 degrees.", 0, 0, 300, 20, Font.Helvetica, 18 ) );
            
                    // Rotate the page 90 degrees
                    page.Rotate = 90;
            	
                    // Save the PDF
                    document.Draw( @"C:\MyDocument.pdf" );
                }
            }
            </code>
            </example>
            <licensing>
            This class is a DynamicPDF Generator Community Edition feature.
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageDimensions.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageDimensions"/> class.
            </summary>
            <param name="width">Width of the page dimensions in points (1/72 inches).</param>
            <param name="height">Height of the page dimensions in points (1/72 inches).</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageDimensions.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageDimensions"/> class.
            </summary>
            <param name="width">Width of the page dimensions in points (1/72 inches).</param>
            <param name="height">Height of the page dimensions in points (1/72 inches).</param>
            <param name="margins">Margins of the page dimensions in points (1/72 inches).</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageDimensions.#ctor(ceTe.DynamicPDF.PageSize)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageDimensions"/> class.
            </summary>
            <param name="size">Page size of the page dimensions in points (1/72 inches).</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageDimensions.#ctor(ceTe.DynamicPDF.PageSize,ceTe.DynamicPDF.PageOrientation)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageDimensions"/> class.
            </summary>
            <param name="size">Page size of the page dimensions in points (1/72 inches).</param>
            <param name="orientation"></param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageDimensions.#ctor(ceTe.DynamicPDF.PageSize,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageDimensions"/> class.
            </summary>
            <param name="size">Page size of the page dimensions in points (1/72 inches).</param>
            <param name="margins">Margins of the page dimensions in points (1/72 inches).</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageDimensions.#ctor(ceTe.DynamicPDF.PageSize,ceTe.DynamicPDF.PageOrientation,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageDimensions"/> class.
            </summary>
            <param name="size">Page size of the page dimensions in points (1/72 inches).</param>
            <param name="orientation">Orientation of the page dimensions in points (1/72 inches).</param>
            <param name="margins">Margins of the page dimensions in points (1/72 inches).</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageDimensions.#ctor(ceTe.DynamicPDF.Dimensions)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageDimensions"/> class.
            </summary>
            <param name="edgeDimensions">Edge dimensions of the page dimensions in points (1/72 inches).</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageDimensions.#ctor(ceTe.DynamicPDF.Dimensions,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageDimensions"/> class.
            </summary>
            <param name="edgeDimensions">Edge dimensions of the page dimensions in points (1/72 inches).</param>
            <param name="margins">Margins of the page dimensions in points (1/72 inches).</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageDimensions.#ctor(ceTe.DynamicPDF.Dimensions,ceTe.DynamicPDF.Dimensions)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageDimensions"/> class.
            </summary>
            <param name="edgeDimensions">Edge dimensions of the page dimensions in points (1/72 inches).</param>
            <param name="marginDimensions">Margin dimensions of the page dimensions in points (1/72 inches).</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageDimensions.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the page dimensions to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to receive the page dimensions output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageDimensions.GetPdfY(System.Single)">
            <summary>
            Gets the translated Y coordinate.
            </summary>
            <param name="y">Y coordinate to translate.</param>
            <returns>A translated Y coordinate.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageDimensions.SetMargins(System.Single)">
            <summary>
            Sets all of the margins for the page dimensions in points (1/72 inches).
            </summary>
            <param name="margins">Margins value in points (1/72 inches) to set.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageDimensions.SetMargins(System.Single,System.Single)">
            <summary>
            Sets all of the margins of the page in points (1/72 inches).
            </summary>
            <param name="leftAndRight">Left and right margin value in points (1/72 inches) to set.</param>
            <param name="topAndBottom">Top and bottom margin value in points (1/72 inches) to set.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageDimensions.SetMargins(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets all of the margins of the page in points (1/72 inches).
            </summary>
            <param name="leftMargin">Left margin value in points (1/72 inches) to set.</param>
            <param name="topMargin">Top margin value in points (1/72 inches) to set.</param>
            <param name="rightMargin">Right margin value in points (1/72 inches) to set.</param>
            <param name="bottomMargin">Bottom margin value in points (1/72 inches) to set.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.ExtendedPageDimensions.#ctor(ceTe.DynamicPDF.Dimensions,ceTe.DynamicPDF.Dimensions)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.ExtendedPageDimensions"/> class.
            </summary>
            <param name="edge">Edge dimensions of the page in points (1/72 inches).</param>
            <param name="body">Body dimensions of the page in points (1/72 inches).</param>
        </member>
        <member name="M:ceTe.DynamicPDF.ExtendedPageDimensions.#ctor(ceTe.DynamicPDF.Dimensions,ceTe.DynamicPDF.Dimensions,ceTe.DynamicPDF.Dimensions,ceTe.DynamicPDF.Dimensions)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.ExtendedPageDimensions"/> class.
            </summary>
            <param name="edge">Edge dimensions of the page in points (1/72 inches).</param>
            <param name="bleedBox">Bleed box dimensions of the page in points (1/72 inches).</param>
            <param name="trimBox">Trim box dimensions of the page in points (1/72 inches).</param>
            <param name="body">Body dimensions of the page in points (1/72 inches).</param>
        </member>
        <member name="M:ceTe.DynamicPDF.ExtendedPageDimensions.#ctor(ceTe.DynamicPDF.Dimensions,ceTe.DynamicPDF.Dimensions,ceTe.DynamicPDF.Dimensions,ceTe.DynamicPDF.Dimensions,ceTe.DynamicPDF.Dimensions)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.ExtendedPageDimensions"/> class.
            </summary>
            <param name="mediaBox">Media box dimensions of the page in points (1/72 inches).</param>
            <param name="cropBox">Crop box dimensions of the page in points (1/72 inches).</param>
            <param name="bleedBox">Bleed dimensions of the page in points (1/72 inches).</param>
            <param name="trimBox">Trim dimensions of the page in points (1/72 inches).</param>
            <param name="artBox">Art box dimensions of the page in points (1/72 inches).</param>
        </member>
        <member name="M:ceTe.DynamicPDF.ExtendedPageDimensions.#ctor(ceTe.DynamicPDF.Dimensions,ceTe.DynamicPDF.Dimensions,ceTe.DynamicPDF.Dimensions,ceTe.DynamicPDF.Dimensions,ceTe.DynamicPDF.Dimensions,ceTe.DynamicPDF.Dimensions)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.ExtendedPageDimensions"/> class.
            </summary>
            <param name="mediaBox">Media box dimensions of the page in points (1/72 inches).</param>
            <param name="cropBox">Crop box dimensions of the page in points (1/72 inches).</param>
            <param name="bleedBox">Bleed dimensions of the page in points (1/72 inches).</param>
            <param name="trimBox">Trim dimensions of the page in points (1/72 inches).</param>
            <param name="artBox">Art box dimensions of the page in points (1/72 inches).</param>
            <param name="body">Body dimensions of the page in points (1/72 inches).</param>
        </member>
        <member name="M:ceTe.DynamicPDF.ExtendedPageDimensions.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the page dimensions to the given <b>DocumentWriter</b> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to receive the page dimensions output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.ExtendedPageDimensions.GetPdfY(System.Single)">
            <summary>
            Gets the translated PDF y coordinate.
            </summary>
            <param name="y">Y coordinate to translate.</param>
            <returns>A translated Y coordinate.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.ExtendedPageDimensions.CropBox">
            <summary>
            Gets the crop box dimensions of the page in points (1/72 inches). This is the same as the edge of the page.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ExtendedPageDimensions.ArtBox">
            <summary>
            Gets the art box dimensions of the page in points (1/72 inches). 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ExtendedPageDimensions.MediaBox">
            <summary>
            Gets the media box dimensions of the page in points (1/72 inches). 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ExtendedPageDimensions.BleedBox">
            <summary>
            Gets the bleed box dimensions of the page in points (1/72 inches). 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ExtendedPageDimensions.TrimBox">
            <summary>
            Gets the trim box dimensions of the page in points (1/72 inches). 
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.FontFamily">
            <summary>
            Represents a font family.
            </summary>
            <remarks>See the <a href="Font Families.html">Font Families</a> topic for more on font families.</remarks>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.FontFamily.#ctor(System.String,ceTe.DynamicPDF.Font,ceTe.DynamicPDF.Font,ceTe.DynamicPDF.Font,ceTe.DynamicPDF.Font)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.FontFamily"/> class.
            </summary>
            <param name="name">Name of font family.</param>
            <param name="regular"><see cref="T:ceTe.DynamicPDF.Font"/> representing regular.</param>
            <param name="bold"><see cref="T:ceTe.DynamicPDF.Font"/> representing bold.</param>
            <param name="italic"><see cref="T:ceTe.DynamicPDF.Font"/> representing italic.</param>
            <param name="boldItalic"><see cref="T:ceTe.DynamicPDF.Font"/> representing bold italic.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.FontFamily.#ctor(System.String,ceTe.DynamicPDF.Font)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.FontFamily"/> class.
            </summary>
            <param name="name">Name of font family.</param>
            <param name="font"><see cref="T:ceTe.DynamicPDF.Font"/> representing all styles.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.FontFamily.Name">
            <summary>
            Gets the name of the font family.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.FontFamily.Regular">
            <summary>
            Gets the regular font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.FontFamily.Bold">
            <summary>
            Gets the bold font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.FontFamily.Italic">
            <summary>
            Gets the italic font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.FontFamily.BoldItalic">
            <summary>
            Gets the bold italic font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.FontFamily.Courier">
            <summary>
            Gets the core Courier font family.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.FontFamily.Helvetica">
            <summary>
            Gets the core Helvetica font family.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.FontFamily.Times">
            <summary>
            Gets the core Times font family.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.FontFamily.Symbol">
            <summary>
            Gets the core Symbol font family.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.FontFamily.ZapfDingbats">
            <summary>
            Gets the core Zapf Dingbats font family.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Grayscale">
            <summary>
            Represents a grayscale color.
            </summary>
            <remarks>See the <a href="Colors.html">Colors</a> topic for more on grayscale colors.</remarks>
            <licensing>
            This class is a DynamicPDF Generator Community Edition feature.
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.Grayscale.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Grayscale"/> class.
            </summary>
            <param name="grayLevel">The gray intensity.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Grayscale.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Grayscale"/> class.
            </summary>
            <param name="grayLevel">The gray intensity.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Grayscale.Equals(System.Object)">
            <summary>
            Tests equality of colors.
            </summary>
            <param name="obj"><b>Object</b> to compare to the current <b>Color</b>.</param>
            <returns><b>true</b> if the two colors are equal</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Grayscale.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for use in
            hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current <b>Color</b>.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Grayscale.ToStringBuilder(System.Text.StringBuilder)">
            <summary>
            Appends the color information to the given <see cref="T:System.Text.StringBuilder"/> object.
            </summary>
            <param name="stringBuilder"><see cref="T:System.Text.StringBuilder"/> to receive the color information.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Grayscale.DrawStroke(ceTe.DynamicPDF.IO.OperatorWriter)">
            <summary>
            Draws the color data to the given <b>PageWriter</b> object.
            </summary>
            <param name="writer"><b>OperatorWriter</b> object to receive the color data.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Grayscale.DrawFill(ceTe.DynamicPDF.IO.OperatorWriter)">
            <summary>
            Draws the color data to the given <b>PageWriter</b> object.
            </summary>
            <param name="writer"><b>OperatorWriter</b> object to receive the color data.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Grayscale.Components">
            <summary>
            Gets the number of components for the device color.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Grayscale.ColorSpace">
            <summary>
            Gets the color space for the color.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Grayscale.GrayLevel">
            <summary>
            Gets or sets the gray value.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Grayscale.Black">
            <summary>Gets the color black.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Grayscale.LightGrey">
            <summary>Gets the color light grey.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Grayscale.Silver">
            <summary>Gets the color silver.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Grayscale.DarkGray">
            <summary>Gets the color dark gray.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Grayscale.Gray">
            <summary>Gets the color gray.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Grayscale.DimGray">
            <summary>Gets the color dim gray. </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Grayscale.White">
            <summary>Gets the color white.</summary>
        </member>
        <member name="T:ceTe.DynamicPDF.HighSecurity">
             <summary>
             Represents high 128 bit PDF document security.
             </summary>
             <remarks><font color="red">NOTE: This class is obsolete.</font> Use <see cref="T:ceTe.DynamicPDF.Cryptography.RC4128Security"/> class instead.
             128 bit PDF security is compatible with PDF version 1.4 and higher and can be read
             with Adobe Acrobat Reader version 5 and higher. Older readers will not be able to
             read document encrypted with this security.  For more details on high 128 bit security take a look at the <a href="Security.html">Security</a> topic.
             </remarks>
             <example>The following example will set the high security of the document so that the anyone who logs in 
             with the user password will not be able to print at high resolution, edit or add annotations or form fields, or access this document from other accessibility programs.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a high security object
                     Dim security As HighSecurity = New HighSecurity("owner", "user")
             
                     ' Set the permissions on that security object
                     security.AllowAccessibility = False
                     security.AllowDocumentAssembly = False
                     security.AllowHighResolutionPrinting = False
             
                     ' Add the security object to the document
                     MyDocument.Security = security
             
                     ' Create and display a label as a reference
                     Dim text As String = "This document has been encrypted with 128 bit encryption."
                     MyPage.Elements.Add(New Label(text, 50, 50, 400, 100, Font.Helvetica, 18))
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create a high security object
                     HighSecurity security = new HighSecurity( "owner", "user" );
             
                     // Set the permissions on that security object
                     security.AllowAccessibility = false;
                     security.AllowDocumentAssembly = false;
                     security.AllowUpdateAnnotsAndFields = false;
             
                     // Add the security object to the document
                     document.Security = security;
             
                     // Create and display a label as a reference
                     string text = "This document has been encrypted with 128 bit encryption.";
                     page.Elements.Add( new Label( text, 50, 50, 400, 100, Font.Helvetica, 18 ) );
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.HighSecurity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.HighSecurity"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.HighSecurity.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.HighSecurity"/> class.
            </summary>
            <param name="ownerPassword">The owner password.</param>
            <param name="userPassword">The user password.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.HighSecurity.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.HighSecurity"/> class.
            </summary>
            <param name="password">The owner and user password.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.HighSecurity.GetEncrypter(System.Byte[])">
            <summary>
            Gets a 128 bit <see cref="T:ceTe.DynamicPDF.IO.Encrypter"/> object to be used for encrypting the document.
            </summary>
            <param name="id">ID of the current PDF document.</param>
            <returns>An <see cref="T:ceTe.DynamicPDF.IO.Encrypter"/>.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.HighSecurity.Draw(ceTe.DynamicPDF.IO.DocumentWriter,ceTe.DynamicPDF.IO.Encrypter)">
            <summary>
            Draws the encrypter dictionary to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the output.</param>
            <param name="encrypter"><see cref="T:ceTe.DynamicPDF.IO.Encrypter"/> object used to encrypt the document.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.HighSecurity.AllowFormFilling">
            <summary>
            Gets or sets if form filling should be allowed by the user.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.HighSecurity.AllowAccessibility">
            <summary>
            Gets or sets if accessibility programs should be able to read
            the documents text and images for the user.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.HighSecurity.AllowDocumentAssembly">
            <summary>
            Gets or sets if the document can be assembled and manipulated by the user.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.HighSecurity.AllowHighResolutionPrinting">
            <summary>
            Gets or sets if the document can be printed at a high resolution by the user.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.IccProfile">
            <summary>
            Represents an ICC profile resource.
            </summary>
            <remarks>For more details on creating PDF/X documents take a look at the <a href="PDFX.html">PDF/X</a> topic.</remarks>
            <example>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.Text
            
            Module MyModule
            		
                Sub Main()
                    ' Create a document and set it's properties
                    Dim MyDocument As ceTe.DynamicPDF.Document = New ceTe.DynamicPDF.Document
                    MyDocument.Title = "PDF/X-1a Document"
                    MyDocument.PdfVersion = PdfVersion.v1_4
            	    
                    ' Create a page to add to the document
                    Dim MyPage As ceTe.DynamicPDF.Page = New ceTe.DynamicPDF.Page(PageSize.Letter, PageOrientation.Portrait, 54.0F)
            	    
                    MyDocument.PdfXVersion = PdfXVersion.PDF_X_1a_2003
                    Dim MyIccProfile As IccProfile = New IccProfile("C:\ICC Profiles\USWebCoatedSWOP.icc")
                    Dim MyOutputIntent As OutputIntent = New OutputIntent("CGATS TR 001-1995 (SWOP)", "CGATS TR 001", "http://www.color.org", "U.S. Web Coated (SWOP) v2", MyIccProfile)
                    MyDocument.OutputIntents.Add(MyOutputIntent)
                    MyDocument.Trapped = Trapped.False
            	    
                    ' Create a Label using a OpenType font and CMYK color
                    Dim Text As String = "PDF/X 1-a Document"
                    Dim MyOpenTypeFont As OpenTypeFont = New OpenTypeFont("verdana.otf")
                    Dim MyLabel As Label = New Label(Text, 0, 0, 504, 100, MyOpenTypeFont, 18, TextAlign.Center, CmykColor.BlueViolet)
            	    
                    ' Add label to page
                    MyPage.Elements.Add(MyLabel)
            	    
                    ' Add page to document
                    MyDocument.Pages.Add(MyPage)
            	    
                    ' Save the PDF Document
                    MyDocument.Draw("C:\MyDocument.pdf")
                End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.Text;
            
            class MyClass
            {
                static void Main()
                {
                    // Create a document and set it's properties
                    ceTe.DynamicPDF.Document document = new ceTe.DynamicPDF.Document();
                    document.Title = "PDF/X-1a Document";
                    document.PdfVersion = PdfVersion.v1_4;
            				
                    // Create a page to add to the document
                    ceTe.DynamicPDF.Page page = new ceTe.DynamicPDF.Page( PageSize.Letter, PageOrientation.Portrait, 54.0f );
            		
                    document.PdfXVersion = PdfXVersion.PDF_X_1a_2003;
                    IccProfile iccProfile = new IccProfile( @"C:\ICC Profiles\USWebCoatedSWOP.icc" );
                    OutputIntent outputIntent = new OutputIntent( "CGATS TR 001-1995 (SWOP)", "CGATS TR 001", "http://www.color.org", "U.S. Web Coated (SWOP) v2", iccProfile );
                    document.OutputIntents.Add( outputIntent );
                    document.Trapped = Trapped.False;
            		
                    // Create a Label using a OpenType font and CMYK color
                    string text = "PDF/X 1-a Document";
                    OpenTypeFont openTypeFont = new OpenTypeFont( "verdana.otf" );
                    Label label = new Label( text, 0, 0, 504, 100, openTypeFont, 18, TextAlign.Center, CmykColor.BlueViolet );
            		
                    // Add label to page
                    page.Elements.Add( label );
            				
                    // Add page to document
                    document.Pages.Add( page );
            		
                    // Save the PDF document
                    document.Draw( @"C:\MyDocument.pdf" );
                }
            }
            </code>
            </example>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.IccProfile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.IccProfile"/> class.
            </summary>
            <param name="filePath">A Physical path to the file containing the ICC profile data.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IccProfile.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.IccProfile"/> class.
            </summary>
            <param name="iccProfile">A byte array containing the ICC profile data.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IccProfile.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.IccProfile"/> class.
            </summary>
            <param name="iccProfile"><see cref="T:System.IO.Stream"/> object containing the ICC profile data.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IccProfile.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the ICC profile data to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the ICC profile's output.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.OutputIntent">
            <summary>
            Represents an output intent.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.OutputIntent.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.OutputIntent"/> class.
            </summary>
            <param name="outputCondition">The output condition.</param>
            <param name="outputConditionIdentifier">The output condition identifier.</param>
            <param name="registryName">The registry name.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.OutputIntent.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.OutputIntent"/> class.
            </summary>
            <param name="outputCondition">The output condition.</param>
            <param name="outputConditionIdentifier">The output condition identifier.</param>
            <param name="registryName">The registry name.</param>
            <param name="info">Additional information or comments.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.OutputIntent.#ctor(System.String,System.String,System.String,System.String,ceTe.DynamicPDF.IccProfile)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.OutputIntent"/> class.
            </summary>
            <param name="outputCondition">The output condition.</param>
            <param name="outputConditionIdentifier">The output condition identifier.</param>
            <param name="registryName">The registry name.</param>
            <param name="info">Additional information or comments.</param>
            <param name="iccProfile">The IccProfile to be used.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.OutputIntent.SetDestOutputProfile(ceTe.DynamicPDF.IccProfile)">
            <summary>
            Sets the destination output profile to the given <see cref="T:ceTe.DynamicPDF.IccProfile"/>.
            </summary>
            <param name="iccProfile">The <see cref="T:ceTe.DynamicPDF.IccProfile"/> to be set.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.OutputIntent.USWebCoatedSwop">
            <summary>
            Gets the US Web Coated (SWOP) v2 output intent.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.OutputIntent.IsoWebCoated">
            <summary>
            Gets the ISO Web Coated output intent.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.OutputIntent.IsoUncoated">
            <summary>
            Gets the ISO Uncoated output intent.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.OutputIntent.IsoUncoatedYellowish">
            <summary>
            Gets the ISO Uncoated Yellowish output intent.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.OutputIntent.IsoCoated">
            <summary>
            Gets the ISO Coated output intent.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.OutputIntent.IfraNewsPrint28">
            <summary>
            Gets the Ifra Newsprint 28 output intent.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.OutputIntent.IfraNewsPrint22">
            <summary>
            Gets the Ifra Newsprint 22 output intent.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.OutputIntent.OutputCondition">
            <summary>
            Gets or sets the output condition of the output intent.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.OutputIntent.OutputConditionIdentifier">
            <summary>
            Gets or sets the output condition identifier of the output intent.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.OutputIntent.RegistryName">
            <summary>
            Gets or sets the registry name of the output intent.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.OutputIntent.Info">
            <summary>
            Gets or sets the additional information of the output intent.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.OutputIntent.Version">
            <summary>
            Gets or Sets the OutputIntentVersion to PDF/X or PDF/A
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.JavaScriptAction">
            <summary>
            Represents a JavaScript action.
            </summary>
            <remarks>For more details on using the JavaScript action take a look at the <a href="Javascript.html">JavaScript</a> topic.</remarks>
            <example>This example shows how to use the JavaScriptAction on a button.<p/>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements.Forms
            
            Module MyModule
            		
                Sub Main()
            		
                    ' Create a PDF Document
                    Dim MyDocument As Document = New Document
            		
                    ' Create a PDF Page
                    Dim MyPage As Page = New Page(PageSize.Letter)
            		
                    ' Create an Button
                    Dim MyButton As Button = New Button("btn", 50, 50, 100, 50)
                    MyButton.Action = New JavaScriptAction("app.alert('Hello');")
                    MyButton.Behavior = Behavior.CreatePush("downLabel", "rolloverLabel")
                    MyButton.Label = "Push"
            		
                    ' Add the Button to the page
                    MyPage.Elements.Add(MyButton)
            		
                    ' Add pages to the document
                    MyDocument.Pages.Add(MyPage)
            
                    ' Save the PDF document
                    MyDocument.Draw("C:\MyDocument.pdf")
            		
                End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements.Forms;
            
            class MyClass
            {
                static void Main()
                {
                    // Create a PDF Document
                    Document document = new Document();
            		
                    // Create a PDF Page
                    Page page = new Page( PageSize.Letter );
            		
                    // Create an Button
                    Button button = new Button( "btn", 50, 50, 100, 50 );
                    button.Action = new JavaScriptAction( "app.alert('Hello');" );
                    button.Behavior = Behavior.CreatePush( "downLabel", "rolloverLabel" );
                    button.Label = "Push";
            		
                    // Add the Button to the page
                    page.Elements.Add( button );
            		
                    // Add pages to the document
                    document.Pages.Add( page );
            		
                    // Save the PDF document
                    document.Draw( @"C:\MyDocument.pdf" );
                }
            }
            </code>
            </example>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.JavaScriptAction.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.JavaScriptAction"/> class.
            </summary>
            <param name="javaScript">The JavaScript code.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.JavaScriptAction.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the action to the specified <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer">The <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the actions output.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.JavaScriptResource">
            <summary>
            Represents a JavaScript resource
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.JavaScriptResource.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the JavaScript resource to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the resource's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.JavaScriptResource.RequiredPdfObjects">
            <summary>
            Gets the number of PDF objects required by the resource.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.LineStyle">
            <summary>
            Represents a style of line.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Community Edition feature.
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.LineStyle.#ctor(System.Single[],System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.LineStyle"/> class.
            </summary>
            <param name="dashArray">The array specifying the line style.</param>
            <param name="dashPhase">The phase of the line style.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.LineStyle.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.LineStyle"/> class.
            </summary>
            <param name="dashArray">The array specifying the line style.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.LineStyle.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <b>LineStyle</b> class.
            </summary>
            <param name="lineStyle">String specifying the line style.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.LineStyle.Solid">
            <summary>
            Gets a solid line.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.LineStyle.Dots">
            <summary>
            Gets a dotted line.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.LineStyle.DashSmall">
            <summary>
            Gets a line with small dashes.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.LineStyle.Dash">
            <summary>
            Gets a dashed line.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.LineStyle.DashLarge">
            <summary>
            Gets a line with large dashes. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.LineStyle.None">
            <summary>
            Gets a invisible line. 
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.MarkedContentTagType">
            <summary>
            Represents an marked content tag type.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	    
        </member>
        <member name="T:ceTe.DynamicPDF.TagType">
            <summary>
            Base class from which tag type classes are derived.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	    
        </member>
        <member name="P:ceTe.DynamicPDF.TagType.Paragraph">
            <summary>
            Gets the paragraph tag type .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.TagType.Heading">
            <summary>
            Gets the heading tag type .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.TagType.HeadingLevel1">
            <summary>
            Gets the heading level 1 tag type .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.TagType.HeadingLevel2">
            <summary>
            Gets the heading level 2 tag type .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.TagType.HeadingLevel3">
            <summary>
            Gets the heading level 3 tag type .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.TagType.HeadingLevel4">
            <summary>
            Gets the heading level 4 tag type .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.TagType.HeadingLevel5">
            <summary>
            Gets the heading level 5 tag type .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.TagType.HeadingLevel6">
            <summary>
            Gets the heading level 6 tag type .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.TagType.Figure">
            <summary>
            Gets the figure tag type .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.TagType.Table">
            <summary>
            Gets the table tag type .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.TagType.Document">
            <summary>
            Gets the document tag type .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.TagType.Part">
            <summary>
            Gets the part tag type .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.TagType.Article">
            <summary>
            Gets the article tag type .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.TagType.Section">
            <summary>
            Gets the section tag type .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.TagType.Division">
            <summary>
            Gets the division tag type .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.TagType.BlockQuotation">
            <summary>
            Gets the block quotation tag type .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.TagType.Caption">
            <summary>
            Gets the caption tag type .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.TagType.TableOfContent">
            <summary>
            Gets the table of contents tag type .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.TagType.TableOfContentItem">
            <summary>
            Gets the table of contents item tag type .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.TagType.Index">
            <summary>
            Gets the index tag type .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.TagType.NonStructuralElement">
            <summary>
            Gets the nonstructural element tag type .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.TagType.Private">
            <summary>
            Gets the private tag type .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.TagType.List">
            <summary>
            Gets the list tag type .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.TagType.ListItem">
            <summary>
            Gets the list item tag type .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.TagType.Label">
            <summary>
            Gets the label tag type .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.TagType.ListBody">
            <summary>
            Gets the list body tag type .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.TagType.TableRow">
            <summary>
            Gets the table row tag type .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.TagType.TableHeader">
            <summary>
            Gets the table header  tag type .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.TagType.TableDataCell">
            <summary>
            Gets the table data cell tag type .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.TagType.TableHeaderRowGroup">
            <summary>
            Gets the table header row group tag type .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.TagType.TableBodyRowGroup">
            <summary>
            Gets the table body row group tag type .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.TagType.TableFooterRowGroup">
            <summary>
            Gets the table footer row group tag type .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.TagType.Span">
            <summary>
            Gets the span tag type .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.TagType.Quotation">
            <summary>
            Gets the quotation tag type .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.TagType.Note">
            <summary>
            Gets the note tag type .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.TagType.Reference">
            <summary>
            Gets the reference tag type .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.TagType.BibliographyEntry">
            <summary>
            Gets the bibliography entry tag type .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.TagType.Code">
            <summary>
            Gets the code tag type .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.TagType.Link">
            <summary>
            Gets the link tag type .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.TagType.Annotation">
            <summary>
            Gets the annotation tag type .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.TagType.Ruby">
            <summary>
            Gets the ruby tag type .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.TagType.Warichu">
            <summary>
            Gets the warichu tag type .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.TagType.Formula">
            <summary>
            Gets the fromula tag type .
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.TagType.Form">
            <summary>
            Gets the form tag type .
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.MarkedContentTagType.ToString">
            <summary>
            Gets the tag type.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.NamedTagType">
             <summary>
             Represents an named tag type.
             </summary>
             <example>The following example shows how to use named tag type. <p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Specify document as a tagged PDF
                     MyDocument.Tag = New TagOptions()
            
                     ' Create a page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a text area
                     Dim MyTextArea As TextArea = New TextArea("This is the text of a TextArea", _
                                 100, 100, 400, 30,ceTe.DynamicPDF.Font.HelveticaBoldOblique, 18)
            
                     ' Create a named tag type
                     Dim MyNamedTagType As NamedTagType = New NamedTagType("Para", TagType.Paragraph)
            
                     ' Create a structue element 
                     Dim MyStructureElement As StructureElement = New StructureElement(MyNamedTagType, True)
            
                     ' Tag the text area with the structure element
                     MyTextArea.Tag = MyStructureElement
            
                     ' Add the text area to the page
                     MyPage.Elements.Add(MyTextArea)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Specify document as a tagged PDF
                     document.Tag = new TagOptions();
             		
                     // Create a page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a text area
                     TextArea textArea = new TextArea("This is the " +"text of a TextArea", 100, 100, 400, 30,
                                 ceTe.DynamicPDF.Font.HelveticaBoldOblique, 18);
            
                     // Create a named tag type
                     NamedTagType namedTagType = new NamedTagType("Para", TagType.Paragraph);
            
                     // Create a structue element 
                     StructureElement structureElement = new StructureElement(namedTagType, true);
            
                     // Tag the text area with the structure element
                     textArea.Tag = structureElement;
            
                     // Add the text area to the page
                     page.Elements.Add(textArea);
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example> 
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>	    
        </member>
        <member name="M:ceTe.DynamicPDF.NamedTagType.#ctor(System.String,ceTe.DynamicPDF.StandardTagType)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.NamedTagType"/> class.
            </summary>
            <param name="customTagName">Custom name of the tag.</param>
            <param name="standardTagType"> Standard name of the tag.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.NamedTagType.ToString">
            <summary>
            Gets the name of the tag.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.NamedTagType.Name">
            <summary>
            Gets the name of the tag.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.NamedTagType.TagType">
            <summary>
            Gets the standard name of the tag.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.NonFullScreenPageMode">
            <summary>
            Specifies page mode when full screen mode is set on the document.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.NonFullScreenPageMode.ShowNone">
            <summary>
            Outlines and Thumbnails toolbars are not shown.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.NonFullScreenPageMode.ShowOutlines">
            <summary>
            Outlines toolbar is shown.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.NonFullScreenPageMode.ShowThumbnails">
            <summary>
            Thumbnails toolbar is shown.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.NonFullScreenPageMode.ShowOptionalContent">
            <summary>
            Optional content is shown.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.NumberingStyle">
            <summary>
            Specifies numbering style.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.NumberingStyle.Numeric">
            <summary>
            Numeric numbering (arabic).
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.NumberingStyle.AlphabeticLowerCase">
            <summary>
            Lower case alphabetic numbering.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.NumberingStyle.AlphabeticUpperCase">
            <summary>
            Upper case alphabetic numbering.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.NumberingStyle.RomanLowerCase">
            <summary>
            Lower case roman numerals.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.NumberingStyle.RomanUpperCase">
            <summary>
            Upper case roman numerals.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.NumberingStyle.None">
            <summary>
            None specified.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.OutlineList">
            <summary>
            Represents a collection of outlines.
            </summary>
            /// <remarks>See the <a href="Outlines and BookMarks.html">Outlines and Bookmarks</a> topic for more on Outlines.</remarks>
            <example>This example shows how to create an outline for a PDF document.<p/>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            
            Module MyModule
            		
                Sub Main()
            		
                    ' Create a PDF Document
                    Dim MyDocument As Document = New Document
            
                    ' Add three blank pages
                    MyDocument.Pages.Add(New Page(PageSize.Letter))
                    MyDocument.Pages.Add(New Page(PageSize.Letter))
                    MyDocument.Pages.Add(New Page(PageSize.Letter))
            
                    ' Add a top level outline and set properties
                    Dim MyOutline1 As Outline = MyDocument.Outlines.Add("Outline1")
                    MyOutline1.Style = TextStyle.Bold
                    MyOutline1.Color = New RgbColor(1.0F, 0.0F, 0.0F)
            
                    ' Add child outlines
                    Dim MyOutline1A As Outline = MyOutline1.ChildOutlines.Add("Outline1A", New ZoomDestination(2, PageZoom.FitPage))
                    MyOutline1A.Expanded = False
                    Dim MyOutline1A1 As Outline = MyOutline1A.ChildOutlines.Add("Outline1A1", New XYDestination(2, 0, 0))
                    Dim MyOutline1A2 As Outline = MyOutline1A.ChildOutlines.Add("Outline1A2", New ZoomDestination(2, PageZoom.FitHeight))
                    Dim MyOutline1B As Outline = MyOutline1.ChildOutlines.Add("Outline1B", New ZoomDestination(2, PageZoom.FitWidth))
            		
                    ' Add a second top level outline
                    Dim MyOutline2 As Outline = MyDocument.Outlines.Add("Outline2", New XYDestination(3, 0, 300))
            		
                    ' Add a child outline
                    Dim MyOutline2A As Outline = MyOutline2.ChildOutlines.Add("Outline2A")
            		
                    ' Save the PDF document
                    MyDocument.Draw("C:\MyDocument.pdf")
            		
                End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            
            class MyClass
            {
                static void Main()
                {
                    // Create a PDF Document
                    Document document = new Document();
            		
                    // Add three blank pages
                    document.Pages.Add( new Page( PageSize.Letter ) );
                    document.Pages.Add( new Page( PageSize.Letter ) );
                    document.Pages.Add( new Page( PageSize.Letter ) );
            		
                    // Add a top level outline and set properties
                    Outline outline1 = document.Outlines.Add( "Outline1" );
                    outline1.Style = TextStyle.Bold;
                    outline1.Color = new RgbColor( 1.0f, 0.0f, 0.0f );
            		
                    // Add child outlines
                    Outline outline1A = outline1.ChildOutlines.Add( "Outline1A", new ZoomDestination( 2, PageZoom.FitPage ) );
                    outline1A.Expanded = false;
                    Outline outline1A1 = outline1A.ChildOutlines.Add( "Outline1A1", new XYDestination( 2, 0, 0 ) );
                    Outline outline1A2 = outline1A.ChildOutlines.Add( "Outline1A2", new ZoomDestination( 2, PageZoom.FitHeight ) );
                    Outline outline1B = outline1.ChildOutlines.Add( "Outline1B", new ZoomDestination( 2, PageZoom.FitWidth ) );
            		
                    // Add a second top level outline
                    Outline outline2 = document.Outlines.Add( "Outline2", new XYDestination( 3, 0, 300 ) );
            		
                    // Add a child outline
                    Outline outline2A = outline2.ChildOutlines.Add( "Outline2A" );
            		
                    // Save the PDF document
                    document.Draw( @"C:\MyDocument.pdf" );
                }
            }
            </code>
            </example>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.OutlineList.Add(System.String)">
            <summary>
            Adds an <see cref="T:ceTe.DynamicPDF.Outline"/> object to the outline list.
            </summary>
            <param name="text">Text of the outline.</param>
            <returns>The <see cref="T:ceTe.DynamicPDF.Outline"/> object that is created.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.OutlineList.Add(System.String,ceTe.DynamicPDF.Action)">
            <summary>
            Adds an <see cref="T:ceTe.DynamicPDF.Outline"/> object to the outline list.
            </summary>
            <param name="text">Text of the outline.</param>
            <param name="action">Action or destination of the outline.</param>
            <returns>The <see cref="T:ceTe.DynamicPDF.Outline"/> object that is created.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.OutlineList.Add(ceTe.DynamicPDF.Merger.PdfOutline)">
            <summary>
            Adds an imported outline along with its children to the outline list.
            </summary>
            <remarks>
            Use the overloaded method with a the addChildOutline parameter set to false if you do not want to add the child outlines.
            </remarks>
            <param name="outline">Imported outline to add.</param>
            <returns>The <see cref="T:ceTe.DynamicPDF.Outline"/> object that is created.</returns>
            <licensing>
            This method is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.OutlineList.Add(ceTe.DynamicPDF.Merger.PdfOutline,System.Boolean)">
            <summary>
            Adds an imported outline to the outline list.
            </summary>
            <param name="outline">Imported outline to add.</param>
            <param name="addChildOutline">Specifies if the child outlines should be added as well.</param>
            <returns>The <see cref="T:ceTe.DynamicPDF.Outline"/> object that is created.</returns>
            <licensing>
            This method is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.OutlineList.Add(ceTe.DynamicPDF.Merger.PdfOutlineList)">
            <summary>
            Adds all outlines from an imported outline list to the outline list.
            </summary>
            <param name="outlines">Imported outline list to add.</param>
            <licensing>
            This method is a DynamicPDF Merger Standard Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Merger for .NET Standard Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.OutlineList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <b>OutlineList</b>.
            </summary>
            <returns>An <b>IEnumerator</b> for the entire <b>OutlineList</b></returns>
        </member>
        <member name="P:ceTe.DynamicPDF.OutlineList.Count">
            <summary>
            Gets the number of outlines in the list.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.OutlineList.Item(System.Int32)">
            <summary>
            Gets the <b>Outline</b> object at the specified index.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.OutputIntentList">
            <summary>
            Represents a collection of output intents.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.OutputIntentList.Add(ceTe.DynamicPDF.OutputIntent)">
            <summary>
            Adds an <see cref="T:ceTe.DynamicPDF.OutputIntent"/> object to the output intent list.
            </summary>
            <param name="outputIntent">The <see cref="T:ceTe.DynamicPDF.OutputIntent"/> object to be added.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.OutputIntentList.Count">
            <summary>
            Gets the number of output intents in the list.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.OutputIntentList.Item(System.Int32)">
            <summary>
            Gets the output intent object at the specified index.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.OutputIntentVersion">
            <summary>
            Specifies an output intent version.
            </summary>	
        </member>
        <member name="F:ceTe.DynamicPDF.OutputIntentVersion.PDF_X">
            <summary>
             PDF/X Version
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.OutputIntentVersion.PDF_A">
            <summary>
             PDF/A Version
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageBoundary">
            <summary>
            Specifies the boundaries of a page.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageBoundary.MediaBox">
            <summary>
            MediaBox
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageBoundary.CropBox">
            <summary>
            CropBox
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageBoundary.BleedBox">
            <summary>
            BleedBox
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageBoundary.TrimBox">
            <summary>
            TrimBox
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageBoundary.ArtBox">
            <summary>
            ArtBox
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageLayout">
            <summary>
            Specifies page layout for the document.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageLayout.SinglePage">
            <summary>
            One page at a time.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageLayout.OneColumn">
            <summary>
            Pages in a column.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageLayout.TwoColumnLeft">
            <summary>
            Pages in two columns, odd-numbered pages on the left.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageLayout.TwoColumnRight">
            <summary>
            Pages in two columns, odd-numbered pages on the right.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageLayout.TwoPageLeft">
            <summary>
            Two pages at a time, odd-numbered pages on the left.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageLayout.TwoPageRight">
            <summary>
            Two pages at a time, odd-numbered pages on the right.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageList">
            <summary>
            Represents a collection of pages associated with a document.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Community Edition feature.
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.PageList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageList"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageList.Add(ceTe.DynamicPDF.Page)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.Page"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageList"/>.
            </summary>
            <param name="page">The <see cref="T:ceTe.DynamicPDF.Page"/> to be added to the end of the <see cref="T:ceTe.DynamicPDF.PageList"/>.</param>
            <returns>The <see cref="T:ceTe.DynamicPDF.PageList"/> index at which the <i>page</i> has been added.</returns>
            <remarks>
            <b>NOTE:</b> If the Page to be added is of type AppendedPage(pages retreived from a MergeDocument are of type AppendedPage),
            the form fields of the AppendedPage may not be merged correctly. This behavior is expected, please use the MergeDocument.Append()
            method instead.
            </remarks>
        </member>
        <member name="M:ceTe.DynamicPDF.PageList.Insert(System.Int32,ceTe.DynamicPDF.Page)">
            <summary>
            Inserts a <see cref="T:ceTe.DynamicPDF.Page"/> into the <see cref="T:ceTe.DynamicPDF.PageList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <i>page</i> should be inserted.</param>
            <param name="page">The <see cref="T:ceTe.DynamicPDF.Page"/> to insert.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:ceTe.DynamicPDF.PageList"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> for the entire <see cref="T:ceTe.DynamicPDF.PageList"/></returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageList.Item(System.Int32)">
            <summary>
            Gets the page at the given index.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageList.Count">
            <summary>
            Gets the number of pages in the collection.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PdfFormat">
            <summary>
            Specifies the format for the PDF. 
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PdfFormat.SinglePass">
            <summary>
            The single pass PDF format is used.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PdfFormat.Linearized">
            <summary>
            The linearized PDF format is used.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PdfVersion">
            <summary>
            Specifies a version of PDF.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PdfVersion.v1_3">
            <summary>
            PDF version 1.3.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PdfVersion.v1_4">
            <summary>
            PDF version 1.4.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PdfVersion.v1_5">
            <summary>
            PDF version 1.5.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PdfVersion.v1_6">
            <summary>
            PDF version 1.6.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PdfVersion.v1_7">
            <summary>
            PDF version 1.7.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PdfXVersion">
            <summary>
            Specifies the PDF/X version.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PdfXVersion.None">
            <summary>
            None specified.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PdfXVersion.PDF_X_1_1999">
            <summary>
            PDF/X version 1 1999.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PdfXVersion.PDF_X_1_2001">
            <summary>
            PDF/X version 1 2001.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PdfXVersion.PDF_X_1a_2001">
            <summary>
            PDF/X version 1a 2001.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PdfXVersion.PDF_X_1a_2003">
            <summary>
            PDF/X version 1a 2003.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PdfXVersion.PDF_X_2_2003">
            <summary>
            PDF/X version 2 2003.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PdfXVersion.PDF_X_3_2002">
            <summary>
            PDF/X version 3 2002.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PdfXVersion.PDF_X_3_2003">
            <summary>
            PDF/X version 3 2003.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PickTrayByPdfSize">
            <summary>
            Specifies how the printers tray is chosen.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PickTrayByPdfSize.ViewerDefault">
            <summary>
            The viewers default is used.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PickTrayByPdfSize.Yes">
            <summary>
            The tray is chosen based on the size of the PDF.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PickTrayByPdfSize.No">
            <summary>
            The tray is not chosen based on the size of the PDF.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Prepress">
            <summary>
            Represents the prepress settings.
            </summary>
            <remarks>For more details on creating PDF/X documents take a look at the <a href="PDFX.html">PDF/X</a> topic.</remarks>
            <example>
            
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.Text
            
            Module MyModule
            		
                Sub Main()
                    ' Create a document and set it's properties
                    Dim MyDocument As ceTe.DynamicPDF.Document = New ceTe.DynamicPDF.Document
                    MyDocument.Title = "PDF/X-1a Document"
                    MyDocument.PdfVersion = PdfVersion.v1_4
            	    
                    ' Create a page to add to the document
                    Dim MyPage As ceTe.DynamicPDF.Page = New ceTe.DynamicPDF.Page(PageSize.Letter, PageOrientation.Portrait, 54.0F)
            	    
                    MyDocument.PdfXVersion = PdfXVersion.PDF_X_1a_2003
                    MyDocument.OutputIntents.Add(OutputIntent.USWebCoatedSwop)
                    MyDocument.Trapped = Trapped.False
            	    
                    ' Create a Label using a OpenType font and CMYK color
                    Dim Text As String = "PDF/X 1-a Document"
                    Dim MyOpenTypeFont As OpenTypeFont = New OpenTypeFont("verdana.otf")
                    Dim MyLabel As Label = New Label(Text, 0, 0, 504, 100, MyOpenTypeFont, 18, TextAlign.Center, CmykColor.BlueViolet)
            	    
                    ' Add label to page
                    MyPage.Elements.Add(MyLabel)
            	    
                    ' Add page to document
                    MyDocument.Pages.Add(MyPage)
            	    
                    ' Save the PDF Document
                    MyDocument.Draw("C:\MyDocument.pdf")
            	End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.Text;
            
            class MyClass
            {
                static void Main()
                {
                    // Create a document and set it's properties
                    ceTe.DynamicPDF.Document document = new ceTe.DynamicPDF.Document();
                    document.Title = "PDF/X-1a Document";
                    document.PdfVersion = PdfVersion.v1_4;
            				
                    // Create a page to add to the document
                    ceTe.DynamicPDF.Page page = new ceTe.DynamicPDF.Page( PageSize.Letter, PageOrientation.Portrait, 54.0f );
            		
                    document.PdfXVersion = PdfXVersion.PDF_X_1a_2003;
                    document.OutputIntents.Add( OutputIntent.USWebCoatedSwop );
                    document.Trapped = Trapped.False;
            		
                    // Create a Label using a OpenType font and CMYK color
                    string text = "PDF/X 1-a Document";
                    OpenTypeFont openTypeFont = new OpenTypeFont( "verdana.otf" );
                    Label label = new Label( text, 0, 0, 504, 100, openTypeFont, 18, TextAlign.Center, CmykColor.BlueViolet );
            		
                    // Add label to page
                    page.Elements.Add( label );
            				
                    // Add page to document
                    document.Pages.Add( page );
            		
                    // Save the PDF document
                    document.Draw( @"C:\MyDocument.pdf" );
                }
            }
            </code>
            </example>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.Prepress.PdfXVersion">
            <summary>
            Gets or sets the PDF/X version for the <b>Document</b>.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Prepress.Trapped">
            <summary>
            Gets or sets a value indicating if trapping information is present in the <b>Document</b>.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Prepress.OutputIntents">
            <summary>
            Gets the output intent list for the <b>Document</b>.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ResourceType">
            <summary>
            Specifies the resource type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ResourceType.PageContents">
            <summary>
            Page contents resource.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ResourceType.Annotation">
            <summary>
            Annotation resource.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ResourceType.Default">
            <summary>
            Default resource.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ResourceType.XObject">
            <summary>
            XObject resource.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ResourceType.Font">
            <summary>
            Font resource.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.RgbColor">
            <summary>
            Represents an RGB color.
            </summary>
            <remarks>See the <a href="Colors.html">Colors</a> topic for more on RGB colors.</remarks>
            <licensing>
            This class is a DynamicPDF Generator Community Edition feature.
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.RgbColor.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.RgbColor"/> class.
            </summary>
            <param name="red">The red intensity.</param>
            <param name="green">The green intensity.</param>
            <param name="blue">The blue intensity.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.RgbColor.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.RgbColor"/> class.
            </summary>
            <param name="red">The red intensity.</param>
            <param name="green">The green intensity.</param>
            <param name="blue">The blue intensity.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.RgbColor.Equals(System.Object)">
            <summary>
            Tests equality of colors.
            </summary>
            <param name="obj"><b>Object</b> to compare to the current <b>Color</b>.</param>
            <returns><b>true</b> if the two colors are equal</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.RgbColor.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for use in
            hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current <b>Color</b>.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.RgbColor.ToStringBuilder(System.Text.StringBuilder)">
            <summary>
            Appends the color information to the given <see cref="T:System.Text.StringBuilder"/> object.
            </summary>
            <param name="stringBuilder"><see cref="T:System.Text.StringBuilder"/> to receive the color information.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.RgbColor.DrawStroke(ceTe.DynamicPDF.IO.OperatorWriter)">
            <summary>
            Draws the color data to the given <b>PageWriter</b> object.
            </summary>
            <param name="writer"><b>OperatorWriter</b> object to receive the color data.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.RgbColor.DrawFill(ceTe.DynamicPDF.IO.OperatorWriter)">
            <summary>
            Draws the color data to the given <b>PageWriter</b> object.
            </summary>
            <param name="writer"><b>OperatorWriter</b> object to receive the color data.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.RgbColor.SetColor(System.Single,System.Single,System.Single)">
            <summary>
            Sets the color.
            </summary>
            <param name="red">Red value to set.</param>
            <param name="green">Green value to set.</param>
            <param name="blue">Blue value to set.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.RgbColor.SetColor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets the color.
            </summary>
            <param name="red">Red value to set.</param>
            <param name="green">Green value to set.</param>
            <param name="blue">Blue value to set.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Components">
            <summary>
            Gets the number of components for the device color.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.ColorSpace">
            <summary>
            Gets the color space for the color.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.R">
            <summary>
            Gets or sets the red value.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.G">
            <summary>
            Gets or sets the green value.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.B">
            <summary>
            Gets or sets the blue value.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Black">
            <summary>Gets the color black.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Silver">
            <summary>Gets the color silver.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.DarkGray">
            <summary>Gets the color dark gray.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Gray">
            <summary>Gets the color gray.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.DimGray">
            <summary>Gets the color dim gray. </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.White">
            <summary>Gets the color white.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Red">
            <summary>Gets the color red.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Green">
            <summary>Gets the color green.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Lime">
            <summary>Gets the color lime.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Aqua">
            <summary>Gets the color aqua.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Purple">
            <summary>Gets the color purple.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Blue">
            <summary>Gets the color blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Cyan">
            <summary>Gets the color cyan. </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Magenta">
            <summary>Gets the color magenta.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Yellow">
            <summary>Gets the color yellow.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.AliceBlue">
            <summary>Gets the color alice blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.AntiqueWhite">
            <summary>Gets the color antique white.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Aquamarine">
            <summary>Gets the color aquamarine.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Azure">
            <summary>Gets the color azure.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Beige">
            <summary>Gets the color beige.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Bisque">
            <summary>Gets the color bisque.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.BlanchedAlmond">
            <summary>Gets the color blanched almond.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.BlueViolet">
            <summary>Gets the color blue violet.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Brown">
            <summary>Gets the color brown.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.BurlyWood">
            <summary>Gets the color burly wood.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.CadetBlue">
            <summary>Gets the color cadet blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Chartreuse">
            <summary>Gets the color chartreuse.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Chocolate">
            <summary>Gets the color chocolate.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Coral">
            <summary>Gets the color coral.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.CornflowerBlue">
            <summary>Gets the color cornflower blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Cornsilk">
            <summary>Gets the color cornsilk.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Crimson">
            <summary>Gets the color crimson.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.DarkBlue">
            <summary>Gets the color dark blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.DarkCyan">
            <summary>Gets the color dark cyan.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.DarkGoldenRod">
            <summary>Gets the color dark golden rod.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.DarkGreen">
            <summary>Gets the color dark green.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.DarkKhaki">
            <summary>Gets the color dark khaki.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.DarkMagenta">
            <summary>Gets the color dark magenta.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.DarkOliveGreen">
            <summary>Gets the color dark olive green.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.DarkOrange">
            <summary>Gets the color dark orange.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.DarkOrchid">
            <summary>Gets the color dark orchid.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.DarkRed">
            <summary>Gets the color dark red.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.DarkSalmon">
            <summary>Gets the color dark salmon.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.DarkSeaGreen">
            <summary>Gets the color dark sea green.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.DarkSlateBlue">
            <summary>Gets the color dark slate blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.DarkSlateGray">
            <summary>Gets the color dark slate gray.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.DarkTurquoise">
            <summary>Gets the color dark turquoise.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.DarkViolet">
            <summary>Gets the color dark violet.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.DeepPink">
            <summary>Gets the color deep pink.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.DeepSkyBlue">
            <summary>Gets the color deep sky blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.DodgerBlue">
            <summary>Gets the color dodger blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Feldspar">
            <summary>Gets the color feldspar.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.FireBrick">
            <summary>Gets the color fire brick.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.FloralWhite">
            <summary>Gets the color floral white.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.ForestGreen">
            <summary>Gets the color forest green.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Fuchsia">
            <summary>Gets the color fuchsia.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Gainsboro">
            <summary>Gets the color gainsboro.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.GhostWhite">
            <summary>Gets the color ghost white.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Gold">
            <summary>Gets the color gold.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.GoldenRod">
            <summary>Gets the color golden rod.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.GreenYellow">
            <summary>Gets the color green yellow.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.HoneyDew">
            <summary>Gets the color honey dew.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.HotPink">
            <summary>Gets the color hot pink.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.IndianRed">
            <summary>Gets the color indian red.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Indigo">
            <summary>Gets the color indigo.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Ivory">
            <summary>Gets the color ivory.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Khaki">
            <summary>Gets the color khaki.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Lavender">
            <summary>Gets the color lavender.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.LavenderBlush">
            <summary>Gets the color lavender blush.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.LawnGreen">
            <summary>Gets the color lawn green.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.LemonChiffon">
            <summary>Gets the color lemon chiffon.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.LightBlue">
            <summary>Gets the color light blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.LightCoral">
            <summary>Gets the color light coral.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.LightCyan">
            <summary>Gets the color light cyan.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.LightGoldenRodYellow">
            <summary>Gets the color light golden rod yellow.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.LightGrey">
            <summary>Gets the color light grey.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.LightGreen">
            <summary>Gets the color light green.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.LightPink">
            <summary>Gets the color light pink.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.LightSalmon">
            <summary>Gets the color light salmon.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.LightSeaGreen">
            <summary>Gets the color light sea green.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.LightSkyBlue">
            <summary>Gets the color light sky blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.LightSlateBlue">
            <summary>Gets the color light slate blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.LightSlateGray">
            <summary>Gets the color light slate gray.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.LightSteelBlue">
            <summary>Gets the color light steel blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.LightYellow">
            <summary>Gets the color light yellow.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.LimeGreen">
            <summary>Gets the color lime green.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Linen">
            <summary>Gets the color linen.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Maroon">
            <summary>Gets the color maroon.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.MediumAquaMarine">
            <summary>Gets the color medium aqua marine.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.MediumBlue">
            <summary>Gets the color medium blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.MediumOrchid">
            <summary>Gets the color medium orchid.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.MediumPurple">
            <summary>Gets the color medium purple.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.MediumSeaGreen">
            <summary>Gets the color medium sea green.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.MediumSlateBlue">
            <summary>Gets the color medium slate blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.MediumSpringGreen">
            <summary>Gets the color medium spring green.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.MediumTurquoise">
            <summary>Gets the color medium turquoise.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.MediumVioletRed">
            <summary>Gets the color medium violet red.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.MidnightBlue">
            <summary>Gets the color midnight blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.MintCream">
            <summary>Gets the color mint cream.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.MistyRose">
            <summary>Gets the color misty rose.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Moccasin">
            <summary>Gets the color moccasin.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.NavajoWhite">
            <summary>Gets the color navajo white.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Navy">
            <summary>Gets the color navy.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.OldLace">
            <summary>Gets the color old lace.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Olive">
            <summary>Gets the color olive.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.OliveDrab">
            <summary>Gets the color olive drab.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Orange">
            <summary>Gets the color orange.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.OrangeRed">
            <summary>Gets the color orange red.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Orchid">
            <summary>Gets the color orchid.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.PaleGoldenRod">
            <summary>Gets the color pale golden rod.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.PaleGreen">
            <summary>Gets the color pale green.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.PaleTurquoise">
            <summary>Gets the color pale turquoise.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.PaleVioletRed">
            <summary>Gets the color pale violet red.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.PapayaWhip">
            <summary>Gets the color papaya whip.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.PeachPuff">
            <summary>Gets the color peach puff.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Peru">
            <summary>Gets the color peru.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Pink">
            <summary>Gets the color pink.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Plum">
            <summary>Gets the color plum.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.PowderBlue">
            <summary>Gets the color powder blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.RosyBrown">
            <summary>Gets the color rosy brown.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.RoyalBlue">
            <summary>Gets the color royal blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.SaddleBrown">
            <summary>Gets the color saddle brown.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Salmon">
            <summary>Gets the color salmon.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.SandyBrown">
            <summary>Gets the color sandy brown.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.SeaGreen">
            <summary>Gets the color sea green.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.SeaShell">
            <summary>Gets the color sea shell.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Sienna">
            <summary>Gets the color sienna.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.SkyBlue">
            <summary>Gets the color sky blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.SlateBlue">
            <summary>Gets the color slate blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.SlateGray">
            <summary>Gets the color slate gray.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Snow">
            <summary>Gets the color snow.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.SpringGreen">
            <summary>Gets the color spring green.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.SteelBlue">
            <summary>Gets the color steel blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Tan">
            <summary>Gets the color tan.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Teal">
            <summary>Gets the color teal.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Thistle">
            <summary>Gets the color thistle.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Tomato">
            <summary>Gets the color tomato.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Turquoise">
            <summary>Gets the color turquoise.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Violet">
            <summary>Gets the color violet.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.VioletRed">
            <summary>Gets the color violet red.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.Wheat">
            <summary>Gets the color wheat.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.WhiteSmoke">
            <summary>Gets the color white smoke.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.YellowGreen">
            <summary>Gets the color yellow green.</summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Section">
            <summary>
            Represents a section associated with a document.
            </summary>
            <remarks>For more details on sections take a look at the <a href="Document Sectioning.html">Document Sectioning</a> topic.</remarks>
            <example>This example shows how to break the document into different sections.<p/>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            
            Module MyModule
            		
                Sub Main()
            		
                    ' Create a PDF Document
                    Dim MyDocument As Document = New Document
            		
                    'Create a template object and add a page numbering label
                    Dim MyTemplate As Template = New Template
                    MyTemplate.Elements.Add(New PageNumberingLabel("%%SP%% of %%ST%%", 0, 680, 512, 12, Font.Helvetica, 12, TextAlign.Center))
            		
                    'Add the template to the document
                    MyDocument.Template = MyTemplate
            		
                    'Begin the first section
                    MyDocument.Sections.Begin(NumberingStyle.RomanLowerCase)
                    'Add two pages
                    MyDocument.Pages.Add(New Page)     'Page 1
                    MyDocument.Pages.Add(New Page)     'Page 2
            		
                    'Begin the second section
                    MyDocument.Sections.Begin(NumberingStyle.Numeric, MyTemplate)
                    'Add three pages
                    MyDocument.Pages.Add(New Page)     'Page 3
                    MyDocument.Pages.Add(New Page)     'page 4
                    MyDocument.Pages.Add(New Page)     'page 5
            		
                    'Begin the third section specifying a section prefix
                    MyDocument.Sections.Begin(NumberingStyle.RomanLowerCase, "Appendix A - ")
                    'Add two pages
                    MyDocument.Pages.Add(New Page)     'page 6
                    MyDocument.Pages.Add(New Page)     'page 7
            		
                    ' Save the PDF document
                    MyDocument.Draw("C:\MyDocument.pdf")
            		
                End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            
            class MyClass
            {
                static void Main()
                {
                    // Create a PDF Document
                    Document document = new Document();
            		
                    //Create a template object and add a page numbering label
                    Template template = new Template();
                    template.Elements.Add( new PageNumberingLabel( "%%SP%% of %%ST%%", 0, 680, 512, 12, Font.Helvetica, 12, TextAlign.Center ) );
            		
                    document.Template = template;
            		
                    //Begin the first section
                    document.Sections.Begin( NumberingStyle.RomanLowerCase );
                    //Add two pages
                    document.Pages.Add( new Page() ); //Page 1
                    document.Pages.Add( new Page() ); //Page 2
            		
                    //Begin the second section
                    document.Sections.Begin( NumberingStyle.Numeric, template );
                    //Add three pages
                    document.Pages.Add( new Page() ); //Page 3
                    document.Pages.Add( new Page() ); //page 4
                    document.Pages.Add( new Page() ); //page 5
            		
                    //Begin the third section specifying a section prefix
                    document.Sections.Begin( NumberingStyle.RomanLowerCase, "Appendix A - " );
                    //Add two pages
                    document.Pages.Add( new Page() ); //page 6
                    document.Pages.Add( new Page() ); //page 7
            		
                    // Save the PDF document
                    document.Draw( @"C:\MyDocument.pdf" );
                }
            }
            </code>
            </example>
            <licensing>
            This class is a DynamicPDF Generator Community Edition feature.
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.Section.NumberingStyle">
            <summary>
            Gets or sets the numbering style for the section.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Section.Prefix">
            <summary>
            Gets or sets the prefix string for the section.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Section.StartingPageNumber">
            <summary>
            Gets or sets the starting page number for the section.
            </summary>
            <remarks>This must be a value greater than or equal to 1.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.Section.PageIndex">
            <summary>
            Gets the page index for the start of the section.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Section.Template">
            <summary>
            Gets or sets the Template for the section.
            </summary>
            <remarks>This template will be used for all pages in this section that have their
            <see cref="P:ceTe.DynamicPDF.Page.ApplySectionTemplate"/> property set to <b>true</b>(the default value).</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.Section.StampTemplate">
            <summary>
            Gets or sets the StampTemplate for the section.
            </summary>
            <remarks>This stamp template will be used for all pages in this section that have their
            <see cref="P:ceTe.DynamicPDF.Page.ApplySectionTemplate"/> property set to <b>true</b>(the default value).</remarks>
        </member>
        <member name="T:ceTe.DynamicPDF.SectionList">
            <summary>
            Represents a collection of sections associated with a document.
            </summary>
            <remarks>For more details on sections take a look at the <a href="Document Sectioning.html">Document Sectioning</a> topic.</remarks>
            <example>This example shows how to break the document into different sections.<p/>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            
            Module MyModule
            		
                Sub Main()
            		
                    ' Create a PDF Document
                    Dim MyDocument As Document = New Document
            		
                    'Create a template object and add a page numbering label
                    Dim MyTemplate As Template = New Template
                    MyTemplate.Elements.Add(New PageNumberingLabel("%%SP%% of %%ST%%", 0, 680, 512, 12, Font.Helvetica, 12, TextAlign.Center))
            		
                    'Add the template to the document
                    MyDocument.Template = MyTemplate
            		
                    'Begin the first section
                    MyDocument.Sections.Begin(NumberingStyle.RomanLowerCase)
                    'Add two pages
                    MyDocument.Pages.Add(New Page)     'Page 1
                    MyDocument.Pages.Add(New Page)     'Page 2
            		
                    'Begin the second section
                    MyDocument.Sections.Begin(NumberingStyle.Numeric, MyTemplate)
                    'Add three pages
                    MyDocument.Pages.Add(New Page)     'Page 3
                    MyDocument.Pages.Add(New Page)     'page 4
                    MyDocument.Pages.Add(New Page)     'page 5
            		
                    'Begin the third section specifying a section prefix
                    MyDocument.Sections.Begin(NumberingStyle.RomanLowerCase, "Appendix A - ")
                    'Add two pages
                    MyDocument.Pages.Add(New Page)     'page 6
                    MyDocument.Pages.Add(New Page)     'page 7
            		
                    ' Save the PDF document
                    MyDocument.Draw("C:\MyDocument.pdf")
            		
                End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            
            class MyClass
            {
                static void Main()
                {
                    // Create a PDF Document
                    Document document = new Document();
            		
                    //Create a template object and add a page numbering label
                    Template template = new Template();
                    template.Elements.Add( new PageNumberingLabel( "%%SP%% of %%ST%%", 0, 680, 512, 12, Font.Helvetica, 12, TextAlign.Center ) );
            		
                    document.Template = template;
            		
                    //Begin the first section
                    document.Sections.Begin( NumberingStyle.RomanLowerCase );
                    //Add two pages
                    document.Pages.Add( new Page() ); //Page 1
                    document.Pages.Add( new Page() ); //Page 2
            		
                    //Begin the second section
                    document.Sections.Begin( NumberingStyle.Numeric, template );
                    //Add three pages
                    document.Pages.Add( new Page() ); //Page 3
                    document.Pages.Add( new Page() ); //page 4
                    document.Pages.Add( new Page() ); //page 5
            		
                    //Begin the third section specifying a section prefix
                    document.Sections.Begin( NumberingStyle.RomanLowerCase, "Appendix A - " );
                    //Add two pages
                    document.Pages.Add( new Page() ); //page 6
                    document.Pages.Add( new Page() ); //page 7
            		
                    // Save the PDF document
                    document.Draw( @"C:\MyDocument.pdf" );
                }
            }
            	</code>
            </example>
            <licensing>
            This class is a DynamicPDF Generator Community Edition feature.
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.SectionList.Begin">
            <summary>
            Begins a section in the document.
            </summary>
            <returns>The <see cref="T:ceTe.DynamicPDF.Section"/> object that was begun.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.SectionList.Begin(ceTe.DynamicPDF.NumberingStyle)">
            <summary>
            Begins a section in the document.
            </summary>
            <param name="numberingStyle">The <see cref="T:ceTe.DynamicPDF.NumberingStyle"/> to use for the section.</param>
            <returns>The <see cref="T:ceTe.DynamicPDF.Section"/> object that was begun.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.SectionList.Begin(System.String)">
            <summary>
            Begins a section in the document.
            </summary>
            <param name="prefix">The prefix to use for the section.</param>
            <returns>The <see cref="T:ceTe.DynamicPDF.Section"/> object that was begun.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.SectionList.Begin(ceTe.DynamicPDF.Template)">
            <summary>
            Begins a section in the document.
            </summary>
            <param name="template">The <see cref="T:ceTe.DynamicPDF.Template"/> to use for the section.</param>
            <returns>The <see cref="T:ceTe.DynamicPDF.Section"/> object that was begun.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.SectionList.Begin(ceTe.DynamicPDF.NumberingStyle,System.String)">
            <summary>
            Begins a section in the document.
            </summary>
            <param name="numberingStyle">The <see cref="T:ceTe.DynamicPDF.NumberingStyle"/> to use for the section.</param>
            <param name="prefix">The prefix to use for the section.</param>
            <returns>The <see cref="T:ceTe.DynamicPDF.Section"/> object that was begun.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.SectionList.Begin(ceTe.DynamicPDF.NumberingStyle,ceTe.DynamicPDF.Template)">
            <summary>
            Begins a section in the document.
            </summary>
            <param name="numberingStyle">The <see cref="T:ceTe.DynamicPDF.NumberingStyle"/> to use for the section.</param>
            <param name="template">The <see cref="T:ceTe.DynamicPDF.Template"/> to use for the section.</param>
            <returns>The <see cref="T:ceTe.DynamicPDF.Section"/> object that was begun.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.SectionList.Begin(System.String,ceTe.DynamicPDF.Template)">
            <summary>
            Begins a section in the document.
            </summary>
            <param name="prefix">The prefix to use for the section.</param>
            <param name="template">The <see cref="T:ceTe.DynamicPDF.Template"/> to use for the section.</param>
            <returns>The <see cref="T:ceTe.DynamicPDF.Section"/> object that was begun.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.SectionList.Begin(ceTe.DynamicPDF.NumberingStyle,System.String,ceTe.DynamicPDF.Template)">
            <summary>
            Begins a section in the document.
            </summary>
            <param name="numberingStyle">The <see cref="T:ceTe.DynamicPDF.NumberingStyle"/> to use for the section.</param>
            <param name="prefix">The prefix to use for the section.</param>
            <param name="template">The <see cref="T:ceTe.DynamicPDF.Template"/> to use for the section.</param>
            <returns>The <see cref="T:ceTe.DynamicPDF.Section"/> object that was begun.</returns>
        </member>
        <member name="T:ceTe.DynamicPDF.SpotColor">
            <summary>
            Represents a spot color.
            </summary>
            <remarks>See the <a href="Colors.html">Colors</a> topic for more on Spot Colors colors.</remarks>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.SpotColor.#ctor(System.Single,ceTe.DynamicPDF.SpotColorInk)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.SpotColor"/> class.
            </summary>
            <param name="tint">Value between 0 and 1 specifying a percentage of the color to come through.</param>
            <param name="ink">The <see cref="T:ceTe.DynamicPDF.SpotColorInk"/> to be used.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.SpotColor.Equals(System.Object)">
            <summary>
            Tests equality of colors.
            </summary>
            <param name="obj"><b>Object</b> to compare to the current <b>Color</b>.</param>
            <returns><b>true</b> if the two colors are equal</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.SpotColor.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for use in
            hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current <see cref="T:ceTe.DynamicPDF.Color"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.SpotColor.DrawStroke(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the color data to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the color data.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.SpotColor.DrawFill(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the color data to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the color data.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.SpotColor.ColorSpace">
            <summary>
            Gets the color space for the color.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.SpotColor.Tint">
            <summary>
            Gets the color space for the color.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.SpotColorInk">
            <summary>
            Represents a spot color ink.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.SpotColorInk.#ctor(System.String,ceTe.DynamicPDF.CmykColor)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.SpotColorInk"/> class.
            </summary>
            <param name="name">Name of the spot color ink to be used.</param>
            <param name="alternateColor">The CMYK color to be used when the device does not contain the sopt color specified.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.SpotColorInk.DrawName(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the spot color ink name to the specified <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/>.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> to take the spot color ink name.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.SpotColorInk.DrawColorSpace(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the color space to the specified <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/>.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to take the color space.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.SpotColorInk.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the spot color ink to the specified <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/>.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to take the spot color ink.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.SpotColorInk.Name">
            <summary>
            Gets or sets the name of the ink to be used.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.SpotColorInk.AlternateColor">
            <summary>
            Gets or sets the CMYK color to be used as the alternative color.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.StandardSecurity">
             <summary>
             <font color="red">Obsolete.</font> Represents standard 40 bit PDF document security.
             </summary>
             <remarks> <font color="red">NOTE: This class is obsolete.</font>  Use <see cref="T:ceTe.DynamicPDF.Cryptography.RC440Security"/> class instead.
             40 bit PDF security is compatible with PDF version 1.1 and higher and can be read
             with Adobe Acrobat version 3 and higher. For more details on standard 40 bit security take a look at the <a href="Security.html">Security</a> topic.
             </remarks>
             <example>The following example will set the standard security of the document so that the anyone who logs in 
             with the user password will not be able to print, edit or copy the document or its contents.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Create a Page and add it to the document
                     Dim MyPage As Page = New Page
                     MyDocument.Pages.Add(MyPage)
             
                     ' Create a standard security object
                     Dim security As StandardSecurity = New StandardSecurity("owner", "user")
             
                     ' Set the permissions on that security object
                     security.AllowPrint = False
                     security.AllowCopy = False
                     security.AllowEdit = False
             
                     ' Add the security object to the document
                     MyDocument.Security = security
             
                     ' Create and display a label as a reference
                     Dim text As String = "This document has been encrypted with 40 bit encryption."
                     MyPage.Elements.Add(New Label(text, 50, 50, 400, 100, Font.Helvetica, 18))
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Create a Page and add it to the document
                     Page page = new Page();
                     document.Pages.Add( page );
             
                     // Create a standard security object
                     StandardSecurity security = new StandardSecurity( "owner", "user" );
             
                     // Set the permissions on that security object
                     security.AllowPrint = false;
                     security.AllowCopy = false;
                     security.AllowEdit = false;
             
                     // Add the security object to the document
                     document.Security = security;
             
                     // Create and display a label as a reference
                     string text = "This document has been encrypted with 40 bit encryption.";
                     page.Elements.Add( new Label( text, 50, 50, 400, 100, Font.Helvetica, 18 ) );
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.StandardSecurity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.StandardSecurity"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.StandardSecurity.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.StandardSecurity"/> class.
            </summary>
            <param name="ownerPassword">The owner password.</param>
            <param name="userPassword">The user password.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.StandardSecurity.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.StandardSecurity"/> class.
            </summary>
            <param name="password">The owner and user password.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.StandardSecurity.GetEncrypter(System.Byte[])">
            <summary>
            Gets a 40 bit <see cref="T:ceTe.DynamicPDF.IO.Encrypter"/> object to be used for encrypting the document.
            </summary>
            <param name="id">ID of the current PDF document.</param>
            <returns>An <see cref="T:ceTe.DynamicPDF.IO.Encrypter"/>.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.StandardSecurity.Draw(ceTe.DynamicPDF.IO.DocumentWriter,ceTe.DynamicPDF.IO.Encrypter)">
            <summary>
            Draws the encrypter dictionary to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the output.</param>
            <param name="encrypter"><see cref="T:ceTe.DynamicPDF.IO.Encrypter"/> object used to encrypt the document.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.StandardTagType">
            <summary>
            Represents a standard tag type.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>	    
        </member>
        <member name="M:ceTe.DynamicPDF.StandardTagType.ToString">
            <summary>
            Gets the tag type.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.TagOptions">
             <summary>
             Represents an tag options.
             </summary>
             <example>The following example shows how to create a tagged PDF document. <p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Specify document as a tagged PDF
                     MyDocument.Tag = New TagOptions()
            
                     ' Create a page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
             
                     ' Add a label to the page 
                     MyPage.Elements.Add(New Label("My Tagged PDF Document", 0, 0, 512, 40, Font.Helvetica, 30, TextAlign.Center))
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Specify document as a tagged PDF
                     document.Tag = new TagOptions();
             		
                     // Create a page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Add a label to the page 
                     page.Elements.Add(new Label("My Tagged PDF Document", 0, 0, 512, 40, Font.Helvetica, 30, TextAlign.Center));
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>   
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>	    
        </member>
        <member name="M:ceTe.DynamicPDF.TagOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.TagOptions"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.TagOptions.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.TagOptions"/> class.
            </summary>
            <param name="layoutAttributes">Specifies if layout attributes is required.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.TagOptions.IncludeLayoutAttributes">
            <summary>
            Gets or sets a value indicating layout attributes to be include.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.TimestampException">
            <summary>
            The exception that is thrown for a Timestamping error.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.TimestampException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.TimestampException"/> class.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the error.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.TimestampServer">
            <summary>
            Represents a class which contains the Timestamp Server details.
            </summary>
            <example>This example shows how to create a signature  and sign it with a certificate using timestampserver.
            <code lang="VB">
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements.Forms
             
            Module MyModule
             
                Sub Main()
             
                    ' Create a PDF Document
                    Dim MyDocument As Document = New Document
             
                    ' Create a PDF Page
                    Dim MyPage As Page = New Page
             
                    ' Create a signature form field
                    Dim MySignature As Signature = New Signature("SigField", 10, 10, 250, 100)
             
                    ' Add signature field to the page
                    MyPage.Elements.Add(MySignature)
             
                    ' Add the page to the document
                    MyDocument.Pages.Add(MyPage)
             
                    ' Create a Certificate
                    Dim MyCertificate As Certificate = New Certificate("C:\PersonalCertificate.pfx", "CertificatePassword")
             
                    ' Create a  TimestampServer
                    Dim MyTimeStampServer as TimestampServer = New TimestampServer("Url of the Timestamp Server")  
            
                    ' Sign the document refering the sign field 
                    MyDocument.Sign("SigField", MyCertificate, MyTimeStampServer)
             
                    ' Save the document
                    MyDocument.Draw("C:\MySignedDocument.pdf")
               
                End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements.Forms;
             
            class MyClass
            {
                static void Main(string[] args)
                {
                    // Create a PDF Document
                    Document document = new Document();
             
                    // Create a PDF Page
                    Page page = new Page();
             
                    // Create a signature form field
                    Signature signature = new Signature("SigField", 10, 10, 250, 100);        
             
                    // Add signature field to the page
                    page.Elements.Add(signature);
             
                    // Add the page to the document
                    document.Pages.Add(page);
             
                    // Create a Certificate from the file
                    Certificate certificate = new Certificate(@"c:\MyPersonalCertificate.pfx", "CertificatePassword");
                    
                    // Create TimestampServer
                    TimestampServer timestampServer = new TimestampServer("Url of the Timestamp Server");
            
                    // Sign the document refering the sign field
                    document.Sign("SigField", certificate, timestampServer);
             
                    // Save the document
                    document.Draw(@"C:\MySignedDocument.pdf");        
                }
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.TimestampServer.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:ceTe.DynamicPDF.TimestampServer"/> class.
            </summary>
            <param name="tsUrl">Web Url of TSA.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.TimestampServer.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:ceTe.DynamicPDF.TimestampServer"/> class.
            </summary>
            <param name="tsUrl">Web Url of TSA.</param>
            <param name="userName">UserName to use for the connection.</param>
            <param name="password">Password to use for the connection.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.TimestampServer.Url">
            <summary>
            Gets or Sets the Url of the TSA.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.TimestampServer.UserName">
            <summary>
            Gets or Sets the UserName to use for the connection.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.TimestampServer.Password">
            <summary>
            Gets or Sets the Password to use for the connection.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.TimestampServer.Timeout">
            <summary>
            Gets or Sets the Timeout for the connection.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Trapped">
            <summary>
            Indicates if trapping information is present.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Trapped.Unknown">
            <summary>
            Trapping information is incomplete or unknown.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Trapped.True">
            <summary>
            Trapping information is present and complete.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Trapped.False">
            <summary>
            Trapping information is not present.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.UnitConverter">
            <summary>
            Utility for converting to and from typesetting points.
            </summary>
            <licensing>
            This class is a DynamicPDF Generator Community Edition feature.
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.UnitConverter.PointsToInches(System.Single)">
            <summary>
            Converts from typesetting points to inches.
            </summary>
            <param name="size">Size in points.</param>
            <returns>The size in inches.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.UnitConverter.PointsToMillimeters(System.Single)">
            <summary>
            Converts from typesetting points to millimeters.
            </summary>
            <param name="size">Size in points.</param>
            <returns>The size in typesetting points.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.UnitConverter.InchesToPoints(System.Single)">
            <summary>
            Converts from inches to typesetting points.
            </summary>
            <param name="size">Size in inches.</param>
            <returns>The size in inches.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.UnitConverter.MillimetersToPoints(System.Single)">
            <summary>
            Converts from millimeters to typesetting points.
            </summary>
            <param name="size">Size in millimeters.</param>
            <returns>The size in typesetting points.</returns>
        </member>
        <member name="T:ceTe.DynamicPDF.UrlAction">
            <summary>
            Represents an action linking to an external URL.
            </summary>
            <remarks>This class can be used to specify a URL when defining a <see cref="T:ceTe.DynamicPDF.PageElements.Link"/> or a <see cref="T:ceTe.DynamicPDF.PageElements.Bookmark"/>.</remarks>
            <example>This example shows how to create an outline for a PDF document using UrlAction.<p/>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            
            Module MyModule
            		
                Sub Main()
            		
                    ' Create a PDF Document
                    Dim MyDocument As Document = New Document
            
                    ' Add three blank pages
                    MyDocument.Pages.Add(New Page(PageSize.Letter))
                    MyDocument.Pages.Add(New Page(PageSize.Letter))
                    MyDocument.Pages.Add(New Page(PageSize.Letter))
            
                    ' Add a top level outline and set properties
                    Dim MyOutline1 As Outline = MyDocument.Outlines.Add("Outline1")
                    MyOutline1.Style = TextStyle.Bold
                    MyOutline1.Color = New RgbColor(1.0F, 0.0F, 0.0F)
            
                    ' Add child outlines
                    Dim MyOutline1A As Outline = MyOutline1.ChildOutlines.Add("Outline1A", New UrlAction("http://www.mydomain.com"))
                    MyOutline1A.Expanded = False
                    Dim MyOutline1A1 As Outline = MyOutline1A.ChildOutlines.Add("Outline1A1", New XYDestination(2, 0, 0))
                    Dim MyOutline1A2 As Outline = MyOutline1A.ChildOutlines.Add("Outline1A2", New ZoomDestination(2, PageZoom.FitHeight))
                    Dim MyOutline1B As Outline = MyOutline1.ChildOutlines.Add("Outline1B", New ZoomDestination(2, PageZoom.FitWidth))
            		
                    ' Add a second top level outline
                    Dim MyOutline2 As Outline = MyDocument.Outlines.Add("Outline2", New XYDestination(3, 0, 300))
            		
                    ' Add a child outline
                    Dim MyOutline2A As Outline = MyOutline2.ChildOutlines.Add("Outline2A")
            		
                    ' Save the PDF document
                    MyDocument.Draw("C:\MyDocument.pdf")
            		
                End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            
            class MyClass
            {
                static void Main()
                {
                    // Create a PDF Document
                    Document document = new Document();
            		
                    // Add three blank pages
                    document.Pages.Add( new Page( PageSize.Letter ) );
                    document.Pages.Add( new Page( PageSize.Letter ) );
                    document.Pages.Add( new Page( PageSize.Letter ) );
            		
                    // Add a top level outline and set properties
                    Outline outline1 = document.Outlines.Add( "Outline1" );
                    outline1.Style = TextStyle.Bold;
                    outline1.Color = new RgbColor( 1.0f, 0.0f, 0.0f );
            		
                    // Add child outlines
                    Outline outline1A = outline1.ChildOutlines.Add( "Outline1A", new UrlAction( "http://www.mydomain.com" ) );
                    outline1A.Expanded = false;
                    Outline outline1A1 = outline1A.ChildOutlines.Add( "Outline1A1", new XYDestination( 2, 0, 0 ) );
                    Outline outline1A2 = outline1A.ChildOutlines.Add( "Outline1A2", new ZoomDestination( 2, PageZoom.FitHeight ) );
                    Outline outline1B = outline1.ChildOutlines.Add( "Outline1B", new ZoomDestination( 2, PageZoom.FitWidth ) );
            		
                    // Add a second top level outline
                    Outline outline2 = document.Outlines.Add( "Outline2", new XYDestination( 3, 0, 300 ) );
            		
                    // Add a child outline
                    Outline outline2A = outline2.ChildOutlines.Add( "Outline2A" );
            		
                    // Save the PDF document
                    document.Draw( @"C:\MyDocument.pdf" );
                }
            }
            </code>
            </example>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.UrlAction.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.UrlAction"/> class.
            </summary>
            <param name="url">URL the action launches.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.UrlAction.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the action to the specified <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer">The <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the actions output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.UrlAction.URL">
            <summary>
            Gets or sets the URL launched by the action.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.UserPropertyList">
             <summary>
             Represents an userproperties attribute object.
             </summary>
             <example>The following example shows how to use an user property list. <p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             Imports ceTe.DynamicPDF.PageElements
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document 
             		
                     ' Specify document as a tagged PDF
                     MyDocument.Tag = New TagOptions()
            
                     ' Create a page and add it to the document
                     Dim MyPage As Page = New Page()
                     MyDocument.Pages.Add(MyPage)
            
                     ' Create a text area
                     Dim MyTextArea As TextArea = New TextArea("This is the text of a TextArea", _
                                 100, 100, 400, 30, ceTe.DynamicPDF.Font.HelveticaBoldOblique, 18)
            
                     ' Create a structue element
                     Dim MyStructureElement As StructureElement = New StructureElement(TagType.Paragraph, True)
            
                     ' Create an user property list and add properties to it
                     Dim MyList As UserPropertyList = New UserPropertyList()
                     MyList.Add("Height", 100)
                     MyList.Add("Align", "Left")
            
                     ' Add user property list to the structure element
                     MyStructureElement.AttributeLists.Add(MyList)
            
                     ' Tag the text area with the structure element
                     MyTextArea.Tag = MyStructureElement
            
                     ' Add the text area to the page
                     MyPage.Elements.Add(MyTextArea)
             
                     ' Save the PDF
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             using ceTe.DynamicPDF.PageElements;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
            
                     // Specify document as a tagged PDF
                     document.Tag = new TagOptions();
             		
                     // Create a page and add it to the document
                     Page page = new Page();
                     document.Pages.Add(page);
            
                     // Create a text area
                     TextArea textArea = new TextArea("This is the " + "text of a TextArea", 100, 100, 400, 30,
                                 ceTe.DynamicPDF.Font.HelveticaBoldOblique, 18);
            
                     // Create a structue element
                     StructureElement structureElement = new StructureElement(TagType.Paragraph, true);
            
                     // Create an user property list and add properties to it
                     UserPropertyList list = new UserPropertyList();
                     list.Add("Height", 100);
                     list.Add("Align", "Left");
            
                     // Add user property list to the structure element
                     structureElement.AttributeLists.Add(list);
            
                     // Tag the text area with the structure element
                     textArea.Tag = structureElement;
            
                     // Add the text area to the page
                     page.Elements.Add(textArea);
             
                     // Save the PDF
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example> 
             <licensing>
             This class is a DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
             <list type="bullet">
             <item>DynamicPDF Generator for .NET Enterprise Edition</item>
             <item>DynamicPDF Merger for .NET Enterprise Edition</item>
             <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
             <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
             </list>
             </licensing>	    
        </member>
        <member name="M:ceTe.DynamicPDF.UserPropertyList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.UserPropertyList"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.UserPropertyList.Add(System.String,System.String)">
            <summary>
            Adds a user property to the user PropertyList.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="value">Value of the property.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.UserPropertyList.Add(System.String,System.String,System.String)">
            <summary>
            Adds a user property to the user PropertyList.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="value">Value of the property.</param>
            <param name="format">Format of the propety value.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.UserPropertyList.Add(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Adds a user property to the user PropertyList.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="value">Value of the property.</param>
            <param name="format">Format of the propety value.</param>
            <param name="isHidden">Specifies if attribute is hidden.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.UserPropertyList.Add(System.String,System.Boolean)">
            <summary>
            Adds a user property to the user PropertyList.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="value">Value of the property.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.UserPropertyList.Add(System.String,System.Boolean,System.String)">
            <summary>
            Adds a user property to the user PropertyList.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="value">Value of the property.</param>
            <param name="format">Format of the propety value.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.UserPropertyList.Add(System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            Adds a user property to the user PropertyList.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="value">Value of the property.</param>
            <param name="format">Format of the propety value.</param>
            <param name="isHidden">Specifies if attribute is hidden.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.UserPropertyList.Add(System.String,System.Single)">
            <summary>
            Adds a user property to the user PropertyList.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="value">Value of the property.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.UserPropertyList.Add(System.String,System.Single,System.String)">
            <summary>
            Adds a user property to the user PropertyList.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="value">Value of the property.</param>
            <param name="format">Format of the propety value.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.UserPropertyList.Add(System.String,System.Single,System.String,System.Boolean)">
            <summary>
            Adds a user property to the user PropertyList.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="value">Value of the property.</param>
            <param name="format">Format of the propety value.</param>
            <param name="isHidden">Specifies if attribute is hidden.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.UserPropertyList.Owner">
            <summary>
            Gets the attribute owner.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ViewerPreferences">
             <summary>
             Represents the viewer preferences for a document.
             </summary>
             <example>This example shows how to change the viewer preferences associated with a document.<p/>
             <code lang="VB">
             Imports System
             Imports ceTe.DynamicPDF
             
             Module MyModule
             		
                 Sub Main()
             		
                     ' Create a PDF Document
                     Dim MyDocument As Document = New Document
             
                     ' Create a Page and add it to the document
                     MyDocument.Pages.Add(New Page(PageSize.Letter))
             		
                     ' Set the viewer preferences
                     MyDocument.ViewerPreferences.CenterWindow = True
                     MyDocument.ViewerPreferences.DisplayDocTitle = False
                     MyDocument.ViewerPreferences.HideMenubar = True
                     MyDocument.ViewerPreferences.HideToolbar = True
                     MyDocument.ViewerPreferences.HideWindowUI = True
                     MyDocument.ViewerPreferences.FitWindow = True
                     MyDocument.ViewerPreferences.NoPrintScaling = True
             		
                     ' Save the PDF document
                     MyDocument.Draw("C:\MyDocument.pdf")
             		
                 End Sub
             End Module
             </code>
             <code lang="C#">
             using System;
             using ceTe.DynamicPDF;
             
             class MyClass
             {
                 static void Main()
                 {
                     // Create a PDF Document
                     Document document = new Document();
             		
                     // Create a page and add it to the document
                     document.Pages.Add( new Page( PageSize.Letter ) );
             		 		
                     // Set the viewer preferences
                     document.ViewerPreferences.CenterWindow = true;
                     document.ViewerPreferences.DisplayDocTitle = false;
                     document.ViewerPreferences.HideMenubar = true;
                     document.ViewerPreferences.HideToolbar = true;
                     document.ViewerPreferences.HideWindowUI = true;
                     document.ViewerPreferences.FitWindow = true;
                     document.ViewerPreferences.NoPrintScaling = true;
            
                     // Save the PDF document
                     document.Draw( @"C:\MyDocument.pdf" );
                 }
             }
             </code>
             </example>
             <licensing>
             This class is a DynamicPDF Generator Community Edition feature.
             </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.ViewerPreferences.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the encrypter viewer preferences dictionary to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.ViewerPreferences.HideToolbar">
            <summary>
            A flag specifying whether to hide the viewer application’s tool bars when the document is active.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ViewerPreferences.HideMenubar">
            <summary>
            A flag specifying whether to hide the viewer application’s menu bar when the document is active.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ViewerPreferences.HideWindowUI">
            <summary>
            A flag specifying whether to hide user interface elements in the document’s window (such as scroll
            bars and navigation controls), leaving only the document’s contents displayed.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ViewerPreferences.FitWindow">
            <summary>
            A flag specifying whether to resize the document’s window to fit the size of the first displayed page.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ViewerPreferences.CenterWindow">
            <summary>
            A flag specifying whether to position the document’s window in the center of the screen.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ViewerPreferences.DisplayDocTitle">
            <summary>
            A flag specifying whether the window’s title bar should display the document title taken 
            from the Title entry of the document of the PDF file containing the document.
            </summary>
            <remarks>This does not affect the title bar of most web browsers. The title bar in most web browsers
            will display the file's URL and ignore this setting.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.ViewerPreferences.NonFullScreenPageMode">
            <summary>
            Specifys the page mode when the documents page mode is set to full screen.
            </summary>
            <remarks>This value is ignored if the documents page mode is not set to full screen.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.ViewerPreferences.RightToLeft">
            <summary>
            A flag specifying if right to left text is predominately used by this document.
            </summary>
            <remarks>This does not affect the right to left property of text objects for text added to the document.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.ViewerPreferences.ViewArea">
            <summary>
            Specifys the view area for the document.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ViewerPreferences.ViewClip">
            <summary>
            Specifys the view clip area for the document.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ViewerPreferences.PrintArea">
            <summary>
            Specifys the print area for the document.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ViewerPreferences.PrintClip">
            <summary>
            Specifys the print clip area for the document.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ViewerPreferences.NoPrintScaling">
            <summary>
            A flag specifying if scaling should be used when printing the document.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ViewerPreferences.Duplex">
            <summary>
            Specifies the default duplex printing mode for the document.
            </summary>
            <remarks>NOTE: This feature is only recognized by Acrobat 8 or greater.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.ViewerPreferences.PrintPageRange">
            <summary>
            Specifies the default page ranges to be used for printing.
            </summary>
            <remarks>NOTE: This feature is only recognized by Acrobat 8 or greater.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.ViewerPreferences.PickTrayByPdfSize">
            <summary>
            Specifies if the printing tray should be picked based on the size of the PDF document.
            </summary>
            <remarks>NOTE: This feature is only recognized by Acrobat 8 or greater.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.ViewerPreferences.NumberOfCopies">
            <summary>
            Specifies the default number of copies to be printed.
            </summary>
            <remarks>NOTE: This feature is only recognized by Acrobat 8 or greater.</remarks>
        </member>
        <member name="T:ceTe.DynamicPDF.WebCacheException">
            <summary>
            The exception that is thrown for a WebCache error.
            </summary>
            <licensing>
            This class is a DynamicPDF WebCache or DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF WebCache for .NET</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.WebCacheItem">
            <summary>
            Represents an item in the WebCache.
            </summary>
            <licensing>
            This class is a DynamicPDF WebCache or DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF WebCache for .NET</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.WebCacheItem.Redirect">
            <summary>
            Redirects to the PDF using an HTTP redirect.
            </summary>
            <licensing>
            This method is a DynamicPDF WebCache or DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF WebCache for .NET</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.WebCacheItem.FilePath">
            <summary>
            Gets a value indicating the file name and path to use to store the PDF.
            </summary>
            <licensing>
            This property is a DynamicPDF WebCache or DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF WebCache for .NET</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="P:ceTe.DynamicPDF.WebCacheItem.Url">
            <summary>
            Gets a value indicating the secure URL to use to view the PDF.
            </summary>
            <licensing>
            This property is a DynamicPDF WebCache or DynamicPDF Generator Enterprise Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF WebCache for .NET</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="T:ceTe.DynamicPDF.WebColor">
            <summary>
            Represents an RGB color created using the web hexadecimal convention.
            </summary>
            <remarks>See the <a href="Colors.html">Colors</a> topic for more on web colors.</remarks>
            <licensing>
            This class is a DynamicPDF Generator Community Edition feature.
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.WebColor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.WebColor"/> class.
            </summary>
            <param name="webColor">The hexadecimal string representing the color.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.XYDestination">
            <summary>
            Represents a destination to a coordinate on a page.
            </summary>
            <remarks>This class can be used to specify a certain page and X Y location for defining a <see cref="T:ceTe.DynamicPDF.PageElements.Link"/> or a <see cref="T:ceTe.DynamicPDF.PageElements.Bookmark"/>.</remarks>
            <example>This example shows how to create an outline for a PDF document using XYDestination.<p/>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            
            Module MyModule
            		
                Sub Main()
            		
                    ' Create a PDF Document
                    Dim MyDocument As Document = New Document
            
                    ' Add three blank pages
                    MyDocument.Pages.Add(New Page(PageSize.Letter))
                    MyDocument.Pages.Add(New Page(PageSize.Letter))
                    MyDocument.Pages.Add(New Page(PageSize.Letter))
            
                    ' Add a top level outline and set properties
                    Dim MyOutline1 As Outline = MyDocument.Outlines.Add("Outline1")
                    MyOutline1.Style = TextStyle.Bold
                    MyOutline1.Color = New RgbColor(1.0F, 0.0F, 0.0F)
            
                    ' Add child outlines
                    Dim MyOutline1A As Outline = MyOutline1.ChildOutlines.Add("Outline1A", New UrlAction("http://www.mydomain.com"))
                    MyOutline1A.Expanded = False
                    Dim MyOutline1A1 As Outline = MyOutline1A.ChildOutlines.Add("Outline1A1", New XYDestination(2, 0, 0))
                    Dim MyOutline1A2 As Outline = MyOutline1A.ChildOutlines.Add("Outline1A2", New ZoomDestination(2, PageZoom.FitHeight))
                    Dim MyOutline1B As Outline = MyOutline1.ChildOutlines.Add("Outline1B", New ZoomDestination(2, PageZoom.FitWidth))
            		
                    ' Add a second top level outline
                    Dim MyOutline2 As Outline = MyDocument.Outlines.Add("Outline2", New XYDestination(3, 0, 300))
            		
                    ' Add a child outline
                    Dim MyOutline2A As Outline = MyOutline2.ChildOutlines.Add("Outline2A")
            		
                    ' Save the PDF document
                    MyDocument.Draw("C:\MyDocument.pdf")
            		
                End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            
            class MyClass
            {
                static void Main()
                {
                    // Create a PDF Document
                    Document document = new Document();
            		
                    // Add three blank pages
                    document.Pages.Add( new Page( PageSize.Letter ) );
                    document.Pages.Add( new Page( PageSize.Letter ) );
                    document.Pages.Add( new Page( PageSize.Letter ) );
            		
                    // Add a top level outline and set properties
                    Outline outline1 = document.Outlines.Add( "Outline1" );
                    outline1.Style = TextStyle.Bold;
                    outline1.Color = new RgbColor( 1.0f, 0.0f, 0.0f );
            		
                    // Add child outlines
                    Outline outline1A = outline1.ChildOutlines.Add( "Outline1A", new UrlAction( "http://www.mydomain.com" ) );
                    outline1A.Expanded = false;
                    Outline outline1A1 = outline1A.ChildOutlines.Add( "Outline1A1", new XYDestination( 2, 0, 0 ) );
                    Outline outline1A2 = outline1A.ChildOutlines.Add( "Outline1A2", new ZoomDestination( 2, PageZoom.FitHeight ) );
                    Outline outline1B = outline1.ChildOutlines.Add( "Outline1B", new ZoomDestination( 2, PageZoom.FitWidth ) );
            		
                    // Add a second top level outline
                    Outline outline2 = document.Outlines.Add( "Outline2", new XYDestination( 3, 0, 300 ) );
            		
                    // Add a child outline
                    Outline outline2A = outline2.ChildOutlines.Add( "Outline2A" );
            		
                    // Save the PDF document
                    document.Draw( @"C:\MyDocument.pdf" );
                }
            }
            </code>
            </example>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.XYDestination.#ctor(System.Int32,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.XYDestination"/> class.
            </summary>
            <param name="pageNumber">Page number targeted by the destination.</param>
            <param name="x">X coordinate targeted by the destination.</param>
            <param name="y">Y coordinate targeted by the destination.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.XYDestination.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the destination to the specified <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the destinations output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.XYDestination.X">
            <summary>
            Gets or sets the X coordinate targeted by the destination.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.XYDestination.Y">
            <summary>
            Gets or sets the Y coordinate targeted by the destination.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ZoomDestination">
            <summary>
            Represents a destination to a page at a given zoom.
            </summary>
            <remarks>This class can be used to specify a certain page at a certain zoom when defining a <see cref="T:ceTe.DynamicPDF.PageElements.Link"/> or a <see cref="T:ceTe.DynamicPDF.PageElements.Bookmark"/>.</remarks>
            <example>This example shows how to create an outline for a PDF document using ZoomDestination.<p/>
            <code lang="VB">
            Imports System
            Imports ceTe.DynamicPDF
            
            Module MyModule
            		
                Sub Main()
            		
                    ' Create a PDF Document
                    Dim MyDocument As Document = New Document
            
                    ' Add three blank pages
                    MyDocument.Pages.Add(New Page(PageSize.Letter))
                    MyDocument.Pages.Add(New Page(PageSize.Letter))
                    MyDocument.Pages.Add(New Page(PageSize.Letter))
            
                    ' Add a top level outline and set properties
                    Dim MyOutline1 As Outline = MyDocument.Outlines.Add("Outline1")
                    MyOutline1.Style = TextStyle.Bold
                    MyOutline1.Color = New RgbColor(1.0F, 0.0F, 0.0F)
            
                    ' Add child outlines
                    Dim MyOutline1A As Outline = MyOutline1.ChildOutlines.Add("Outline1A", New UrlAction("http://www.mydomain.com"))
                    MyOutline1A.Expanded = False
                    Dim MyOutline1A1 As Outline = MyOutline1A.ChildOutlines.Add("Outline1A1", New XYDestination(2, 0, 0))
                    Dim MyOutline1A2 As Outline = MyOutline1A.ChildOutlines.Add("Outline1A2", New ZoomDestination(2, PageZoom.FitHeight))
                    Dim MyOutline1B As Outline = MyOutline1.ChildOutlines.Add("Outline1B", New ZoomDestination(2, PageZoom.FitWidth))
            		
                    ' Add a second top level outline
                    Dim MyOutline2 As Outline = MyDocument.Outlines.Add("Outline2", New XYDestination(3, 0, 300))
            		
                    ' Add a child outline
                    Dim MyOutline2A As Outline = MyOutline2.ChildOutlines.Add("Outline2A")
            		
                    ' Save the PDF document
                    MyDocument.Draw("C:\MyDocument.pdf")
            		
                End Sub
            End Module
            </code>
            <code lang="C#">
            using System;
            using ceTe.DynamicPDF;
            
            class MyClass
            {
                static void Main()
                {
                    // Create a PDF Document
                    Document document = new Document();
            		
                    // Add three blank pages
                    document.Pages.Add( new Page( PageSize.Letter ) );
                    document.Pages.Add( new Page( PageSize.Letter ) );
                    document.Pages.Add( new Page( PageSize.Letter ) );
            		
                    // Add a top level outline and set properties
                    Outline outline1 = document.Outlines.Add( "Outline1" );
                    outline1.Style = TextStyle.Bold;
                    outline1.Color = new RgbColor( 1.0f, 0.0f, 0.0f );
            		
                    // Add child outlines
                    Outline outline1A = outline1.ChildOutlines.Add( "Outline1A", new UrlAction( "http://www.mydomain.com" ) );
                    outline1A.Expanded = false;
                    Outline outline1A1 = outline1A.ChildOutlines.Add( "Outline1A1", new XYDestination( 2, 0, 0 ) );
                    Outline outline1A2 = outline1A.ChildOutlines.Add( "Outline1A2", new ZoomDestination( 2, PageZoom.FitHeight ) );
                    Outline outline1B = outline1.ChildOutlines.Add( "Outline1B", new ZoomDestination( 2, PageZoom.FitWidth ) );
            		
                    // Add a second top level outline
                    Outline outline2 = document.Outlines.Add( "Outline2", new XYDestination( 3, 0, 300 ) );
            		
                    // Add a child outline
                    Outline outline2A = outline2.ChildOutlines.Add( "Outline2A" );
            		
                    // Save the PDF document
                    document.Draw( @"C:\MyDocument.pdf" );
                }
            }
            </code>
            </example>
            <licensing>
            This class is a DynamicPDF Generator Professional Edition feature. One of the following licenses is required for non-evaluation usage:
            <list type="bullet">
            <item>DynamicPDF Generator for .NET Professional Edition</item>
            <item>DynamicPDF Generator for .NET Enterprise Edition</item>
            <item>DynamicPDF Merger for .NET Professional Edition</item>
            <item>DynamicPDF Merger for .NET Enterprise Edition</item>
            <item>DynamicPDF ReportWriter for .NET Professional Edition</item>
            <item>DynamicPDF ReportWriter for .NET Enterprise Edition</item>
            <item>DynamicPDF Core Suite for .NET Professional Edition</item>
            <item>DynamicPDF Core Suite for .NET Enterprise Edition</item>
            </list>
            </licensing>
        </member>
        <member name="M:ceTe.DynamicPDF.ZoomDestination.#ctor(System.Int32,ceTe.DynamicPDF.PageZoom)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.ZoomDestination"/> class.
            </summary>
            <param name="pageNumber">Page number targeted by the destination.</param>
            <param name="zoom">Zoom used to display the destination.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.ZoomDestination.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the destination to the specified <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the destinations output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.ZoomDestination.Zoom">
            <summary>
            Gets or sets the zoom used to display the destination.
            </summary>
        </member>
    </members>
</doc>
